
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007044  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  00007044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          000039b4  20000190  000071e0  00020190  2**4
                  ALLOC
  5 .stack        00010004  20003b44  0000ab94  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005a736  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009120  00000000  00000000  0007a949  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001abaf  00000000  00000000  00083a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b38  00000000  00000000  0009e618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021b0  00000000  00000000  000a0150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001af35  00000000  00000000  000a2300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d1cd  00000000  00000000  000bd235  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107eb8  00000000  00000000  000ea402  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048e8  00000000  00000000  001f22bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 3b 01 20 09 0e 00 00 05 0e 00 00 05 0e 00 00     H;. ............
      10:	05 0e 00 00 05 0e 00 00 05 0e 00 00 00 00 00 00     ................
	...
      2c:	b1 32 00 00 05 0e 00 00 00 00 00 00 51 33 00 00     .2..........Q3..
      3c:	b5 33 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     .3..............
      4c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      5c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      6c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      7c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      8c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      9c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      ac:	05 0e 00 00 05 0e 00 00 91 21 00 00 a5 21 00 00     .........!...!..
      bc:	21 1f 00 00 2d 1f 00 00 39 1f 00 00 45 1f 00 00     !...-...9...E...
      cc:	51 1f 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     Q...............
      dc:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
      ec:	05 0e 00 00 00 00 00 00 a1 22 00 00 05 0e 00 00     ........."......
      fc:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     10c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     11c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 0d 05 00 00     ................
     12c:	19 05 00 00 25 05 00 00 05 0e 00 00 05 0e 00 00     ....%...........
     13c:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     14c:	05 0e 00 00 ed 0c 00 00 05 0e 00 00 00 00 00 00     ................
	...
     180:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     190:	00 00 00 00 41 28 00 00 05 0e 00 00 05 0e 00 00     ....A(..........
     1a0:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     1b0:	55 28 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     U(..............
     1c0:	05 0e 00 00 69 28 00 00 05 0e 00 00 05 0e 00 00     ....i(..........
     1d0:	05 0e 00 00 7d 28 00 00 05 0e 00 00 05 0e 00 00     ....}(..........
     1e0:	91 28 00 00 05 0e 00 00 05 0e 00 00 85 2d 00 00     .(...........-..
     1f0:	99 2d 00 00 ad 2d 00 00 c1 2d 00 00 d5 2d 00 00     .-...-...-...-..
     200:	e9 2d 00 00 00 00 00 00 00 00 00 00 05 0e 00 00     .-..............
     210:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     220:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     230:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     240:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     250:	05 0e 00 00 05 0e 00 00 05 0e 00 00 05 0e 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00007044 	.word	0x00007044

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00007044 	.word	0x00007044
     2c4:	20000194 	.word	0x20000194
     2c8:	00007044 	.word	0x00007044
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	4606      	mov	r6, r0
     2d6:	460f      	mov	r7, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     2d8:	2264      	movs	r2, #100	; 0x64
     2da:	2100      	movs	r1, #0
     2dc:	a801      	add	r0, sp, #4
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e0:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e2:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e4:	4628      	mov	r0, r5
     2e6:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2ea:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ec:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ee:	4628      	mov	r0, r5
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f2:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f4:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer," Task Handle - %d ### Task Name - %s",xTask,pcTaskName);
     2f6:	463b      	mov	r3, r7
     2f8:	4632      	mov	r2, r6
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	a801      	add	r0, sp, #4
     2fe:	4c0b      	ldr	r4, [pc, #44]	; (32c <vApplicationStackOverflowHook+0x5c>)
     300:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     302:	a801      	add	r0, sp, #4
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <vApplicationStackOverflowHook+0x60>)
     306:	4798      	blx	r3
     308:	b281      	uxth	r1, r0
     30a:	a801      	add	r0, sp, #4
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <vApplicationStackOverflowHook+0x64>)
     30e:	4798      	blx	r3
     310:	e7fe      	b.n	310 <vApplicationStackOverflowHook+0x40>
     312:	bf00      	nop
     314:	000051c3 	.word	0x000051c3
     318:	00005ab0 	.word	0x00005ab0
     31c:	00000c5d 	.word	0x00000c5d
     320:	00005aec 	.word	0x00005aec
     324:	000068f4 	.word	0x000068f4
     328:	00005b28 	.word	0x00005b28
     32c:	0000534d 	.word	0x0000534d
     330:	000053a5 	.word	0x000053a5
     334:	00000c19 	.word	0x00000c19

00000338 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(10000UL);
	xLastWakeTime = xTaskGetTickCount();
     33c:	4b07      	ldr	r3, [pc, #28]	; (35c <DispatchTask+0x24>)
     33e:	4798      	blx	r3
     340:	9001      	str	r0, [sp, #4]

	while(1)
	{
		DEBUG_PRINT("Running Dispatch Task successfully");
     342:	4e07      	ldr	r6, [pc, #28]	; (360 <DispatchTask+0x28>)
     344:	4d07      	ldr	r5, [pc, #28]	; (364 <DispatchTask+0x2c>)
		kickWatchDog();
     346:	4c08      	ldr	r4, [pc, #32]	; (368 <DispatchTask+0x30>)
		DEBUG_PRINT("Running Dispatch Task successfully");
     348:	4630      	mov	r0, r6
     34a:	47a8      	blx	r5
		kickWatchDog();
     34c:	47a0      	blx	r4
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     34e:	f242 7110 	movw	r1, #10000	; 0x2710
     352:	a801      	add	r0, sp, #4
     354:	4b05      	ldr	r3, [pc, #20]	; (36c <DispatchTask+0x34>)
     356:	4798      	blx	r3
     358:	e7f6      	b.n	348 <DispatchTask+0x10>
     35a:	bf00      	nop
     35c:	000043a5 	.word	0x000043a5
     360:	00005b50 	.word	0x00005b50
     364:	00000c5d 	.word	0x00000c5d
     368:	00000dd9 	.word	0x00000dd9
     36c:	000045e5 	.word	0x000045e5

00000370 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     370:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     376:	460d      	mov	r5, r1
     378:	4c04      	ldr	r4, [pc, #16]	; (38c <getModemCommandData+0x1c>)
     37a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     37e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     382:	6823      	ldr	r3, [r4, #0]
     384:	602b      	str	r3, [r5, #0]
}
     386:	bc30      	pop	{r4, r5}
     388:	4770      	bx	lr
     38a:	bf00      	nop
     38c:	00005b74 	.word	0x00005b74

00000390 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     390:	b5f0      	push	{r4, r5, r6, r7, lr}
     392:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     394:	a901      	add	r1, sp, #4
     396:	4b28      	ldr	r3, [pc, #160]	; (438 <mdmParser_solicitedCmdParser+0xa8>)
     398:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     39a:	f89d 600c 	ldrb.w	r6, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     39e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     3a2:	4b26      	ldr	r3, [pc, #152]	; (43c <mdmParser_solicitedCmdParser+0xac>)
     3a4:	4798      	blx	r3

	if(responseBuffer != NULL)
     3a6:	2800      	cmp	r0, #0
     3a8:	d041      	beq.n	42e <mdmParser_solicitedCmdParser+0x9e>
     3aa:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     3ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     3b0:	4b23      	ldr	r3, [pc, #140]	; (440 <mdmParser_solicitedCmdParser+0xb0>)
     3b2:	4798      	blx	r3

		if(readStatus != false)
     3b4:	4605      	mov	r5, r0
     3b6:	2800      	cmp	r0, #0
     3b8:	d035      	beq.n	426 <mdmParser_solicitedCmdParser+0x96>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     3ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
     3be:	4621      	mov	r1, r4
     3c0:	9802      	ldr	r0, [sp, #8]
     3c2:	4b20      	ldr	r3, [pc, #128]	; (444 <mdmParser_solicitedCmdParser+0xb4>)
     3c4:	4798      	blx	r3
     3c6:	bb10      	cbnz	r0, 40e <mdmParser_solicitedCmdParser+0x7e>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     3c8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     3cc:	3001      	adds	r0, #1
     3ce:	4b1b      	ldr	r3, [pc, #108]	; (43c <mdmParser_solicitedCmdParser+0xac>)
     3d0:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     3d2:	4607      	mov	r7, r0
     3d4:	b1b0      	cbz	r0, 404 <mdmParser_solicitedCmdParser+0x74>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     3d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     3da:	b18b      	cbz	r3, 400 <mdmParser_solicitedCmdParser+0x70>
     3dc:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     3de:	1cb1      	adds	r1, r6, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     3e0:	b2c9      	uxtb	r1, r1
     3e2:	18e2      	adds	r2, r4, r3
     3e4:	5c52      	ldrb	r2, [r2, r1]
     3e6:	54fa      	strb	r2, [r7, r3]
						parseCnt++;
     3e8:	3301      	adds	r3, #1
     3ea:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     3ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     3f0:	429a      	cmp	r2, r3
     3f2:	d8f6      	bhi.n	3e2 <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     3f4:	2200      	movs	r2, #0
     3f6:	54fa      	strb	r2, [r7, r3]
					//cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt);
					vPortFree(parsedDataBuffer);
     3f8:	4638      	mov	r0, r7
     3fa:	4b13      	ldr	r3, [pc, #76]	; (448 <mdmParser_solicitedCmdParser+0xb8>)
     3fc:	4798      	blx	r3
     3fe:	e00a      	b.n	416 <mdmParser_solicitedCmdParser+0x86>
					while(parseCnt < cmdData.validDataCnt)
     400:	2300      	movs	r3, #0
     402:	e7f7      	b.n	3f4 <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     404:	4811      	ldr	r0, [pc, #68]	; (44c <mdmParser_solicitedCmdParser+0xbc>)
     406:	4b12      	ldr	r3, [pc, #72]	; (450 <mdmParser_solicitedCmdParser+0xc0>)
     408:	4798      	blx	r3
	bool parseStatus = false;
     40a:	2500      	movs	r5, #0
     40c:	e003      	b.n	416 <mdmParser_solicitedCmdParser+0x86>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     40e:	4811      	ldr	r0, [pc, #68]	; (454 <mdmParser_solicitedCmdParser+0xc4>)
     410:	4b0f      	ldr	r3, [pc, #60]	; (450 <mdmParser_solicitedCmdParser+0xc0>)
     412:	4798      	blx	r3
				parseStatus = false;
     414:	2500      	movs	r5, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     416:	4620      	mov	r0, r4
     418:	4b0b      	ldr	r3, [pc, #44]	; (448 <mdmParser_solicitedCmdParser+0xb8>)
     41a:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     41c:	4b0e      	ldr	r3, [pc, #56]	; (458 <mdmParser_solicitedCmdParser+0xc8>)
     41e:	4798      	blx	r3

	return parseStatus;
}
     420:	4628      	mov	r0, r5
     422:	b007      	add	sp, #28
     424:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     426:	480d      	ldr	r0, [pc, #52]	; (45c <mdmParser_solicitedCmdParser+0xcc>)
     428:	4b09      	ldr	r3, [pc, #36]	; (450 <mdmParser_solicitedCmdParser+0xc0>)
     42a:	4798      	blx	r3
     42c:	e7f3      	b.n	416 <mdmParser_solicitedCmdParser+0x86>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     42e:	480c      	ldr	r0, [pc, #48]	; (460 <mdmParser_solicitedCmdParser+0xd0>)
     430:	4b07      	ldr	r3, [pc, #28]	; (450 <mdmParser_solicitedCmdParser+0xc0>)
     432:	4798      	blx	r3
	bool parseStatus = false;
     434:	2500      	movs	r5, #0
     436:	e7f1      	b.n	41c <mdmParser_solicitedCmdParser+0x8c>
     438:	00000371 	.word	0x00000371
     43c:	00003585 	.word	0x00003585
     440:	000005ed 	.word	0x000005ed
     444:	000053b5 	.word	0x000053b5
     448:	00003659 	.word	0x00003659
     44c:	000062f0 	.word	0x000062f0
     450:	00000c5d 	.word	0x00000c5d
     454:	00006324 	.word	0x00006324
     458:	00000641 	.word	0x00000641
     45c:	00006360 	.word	0x00006360
     460:	000063a4 	.word	0x000063a4

00000464 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     464:	4b01      	ldr	r3, [pc, #4]	; (46c <mdmParser_SetLastCmdProcessed+0x8>)
     466:	7018      	strb	r0, [r3, #0]
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	20000023 	.word	0x20000023

00000470 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     470:	4b01      	ldr	r3, [pc, #4]	; (478 <mdmParser_SetLastSentAtCommand+0x8>)
     472:	7018      	strb	r0, [r3, #0]
     474:	4770      	bx	lr
     476:	bf00      	nop
     478:	200001e8 	.word	0x200001e8

0000047c <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     47c:	4b01      	ldr	r3, [pc, #4]	; (484 <mdmParser_GetLastSentAtCommand+0x8>)
     47e:	7818      	ldrb	r0, [r3, #0]
     480:	4770      	bx	lr
     482:	bf00      	nop
     484:	200001e8 	.word	0x200001e8

00000488 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     488:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     48a:	4912      	ldr	r1, [pc, #72]	; (4d4 <mdmCtrlr_DataCommInit+0x4c>)
     48c:	4812      	ldr	r0, [pc, #72]	; (4d8 <mdmCtrlr_DataCommInit+0x50>)
     48e:	4b13      	ldr	r3, [pc, #76]	; (4dc <mdmCtrlr_DataCommInit+0x54>)
     490:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     492:	b118      	cbz	r0, 49c <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     494:	4812      	ldr	r0, [pc, #72]	; (4e0 <mdmCtrlr_DataCommInit+0x58>)
     496:	4b13      	ldr	r3, [pc, #76]	; (4e4 <mdmCtrlr_DataCommInit+0x5c>)
     498:	4798      	blx	r3
     49a:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     4a0:	4911      	ldr	r1, [pc, #68]	; (4e8 <mdmCtrlr_DataCommInit+0x60>)
     4a2:	4812      	ldr	r0, [pc, #72]	; (4ec <mdmCtrlr_DataCommInit+0x64>)
     4a4:	4b12      	ldr	r3, [pc, #72]	; (4f0 <mdmCtrlr_DataCommInit+0x68>)
     4a6:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     4a8:	2800      	cmp	r0, #0
     4aa:	d1f3      	bne.n	494 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     4ac:	4c0a      	ldr	r4, [pc, #40]	; (4d8 <mdmCtrlr_DataCommInit+0x50>)
     4ae:	2201      	movs	r2, #1
     4b0:	4611      	mov	r1, r2
     4b2:	4620      	mov	r0, r4
     4b4:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <mdmCtrlr_DataCommInit+0x6c>)
     4b6:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     4b8:	4620      	mov	r0, r4
     4ba:	4b0f      	ldr	r3, [pc, #60]	; (4f8 <mdmCtrlr_DataCommInit+0x70>)
     4bc:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     4be:	480f      	ldr	r0, [pc, #60]	; (4fc <mdmCtrlr_DataCommInit+0x74>)
     4c0:	4b08      	ldr	r3, [pc, #32]	; (4e4 <mdmCtrlr_DataCommInit+0x5c>)
     4c2:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     4c4:	4b0e      	ldr	r3, [pc, #56]	; (500 <mdmCtrlr_DataCommInit+0x78>)
     4c6:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     4ca:	0949      	lsrs	r1, r1, #5
     4cc:	480d      	ldr	r0, [pc, #52]	; (504 <mdmCtrlr_DataCommInit+0x7c>)
     4ce:	4b0e      	ldr	r3, [pc, #56]	; (508 <mdmCtrlr_DataCommInit+0x80>)
     4d0:	4798      	blx	r3
     4d2:	bd10      	pop	{r4, pc}
     4d4:	41014000 	.word	0x41014000
     4d8:	20000024 	.word	0x20000024
     4dc:	0000241d 	.word	0x0000241d
     4e0:	0000652c 	.word	0x0000652c
     4e4:	00000c5d 	.word	0x00000c5d
     4e8:	20003164 	.word	0x20003164
     4ec:	20003964 	.word	0x20003964
     4f0:	00001a05 	.word	0x00001a05
     4f4:	000024c9 	.word	0x000024c9
     4f8:	00002491 	.word	0x00002491
     4fc:	000064f0 	.word	0x000064f0
     500:	e000e100 	.word	0xe000e100
     504:	00006518 	.word	0x00006518
     508:	00000ca5 	.word	0x00000ca5

0000050c <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     50c:	2201      	movs	r2, #1
     50e:	4b01      	ldr	r3, [pc, #4]	; (514 <SERCOM3_0_Handler+0x8>)
     510:	761a      	strb	r2, [r3, #24]
     512:	4770      	bx	lr
     514:	41014000 	.word	0x41014000

00000518 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     518:	2202      	movs	r2, #2
     51a:	4b01      	ldr	r3, [pc, #4]	; (520 <SERCOM3_1_Handler+0x8>)
     51c:	761a      	strb	r2, [r3, #24]
     51e:	4770      	bx	lr
     520:	41014000 	.word	0x41014000

00000524 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     524:	b530      	push	{r4, r5, lr}
     526:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     528:	4d1a      	ldr	r5, [pc, #104]	; (594 <SERCOM3_2_Handler+0x70>)
     52a:	4c1b      	ldr	r4, [pc, #108]	; (598 <SERCOM3_2_Handler+0x74>)
     52c:	4628      	mov	r0, r5
     52e:	47a0      	blx	r4
     530:	2800      	cmp	r0, #0
     532:	d0fb      	beq.n	52c <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     534:	4817      	ldr	r0, [pc, #92]	; (594 <SERCOM3_2_Handler+0x70>)
     536:	4b19      	ldr	r3, [pc, #100]	; (59c <SERCOM3_2_Handler+0x78>)
     538:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     53a:	4601      	mov	r1, r0
     53c:	4818      	ldr	r0, [pc, #96]	; (5a0 <SERCOM3_2_Handler+0x7c>)
     53e:	4b19      	ldr	r3, [pc, #100]	; (5a4 <SERCOM3_2_Handler+0x80>)
     540:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     542:	4b19      	ldr	r3, [pc, #100]	; (5a8 <SERCOM3_2_Handler+0x84>)
     544:	4798      	blx	r3
     546:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     548:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     54c:	d101      	bne.n	552 <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     54e:	b009      	add	sp, #36	; 0x24
     550:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     552:	a902      	add	r1, sp, #8
     554:	4b15      	ldr	r3, [pc, #84]	; (5ac <SERCOM3_2_Handler+0x88>)
     556:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     558:	4811      	ldr	r0, [pc, #68]	; (5a0 <SERCOM3_2_Handler+0x7c>)
     55a:	4b15      	ldr	r3, [pc, #84]	; (5b0 <SERCOM3_2_Handler+0x8c>)
     55c:	4798      	blx	r3
     55e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     562:	4298      	cmp	r0, r3
     564:	d3f3      	bcc.n	54e <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     566:	4b13      	ldr	r3, [pc, #76]	; (5b4 <SERCOM3_2_Handler+0x90>)
     568:	6818      	ldr	r0, [r3, #0]
     56a:	ab07      	add	r3, sp, #28
     56c:	9300      	str	r3, [sp, #0]
     56e:	2300      	movs	r3, #0
     570:	2203      	movs	r2, #3
     572:	b2e1      	uxtb	r1, r4
     574:	4c10      	ldr	r4, [pc, #64]	; (5b8 <SERCOM3_2_Handler+0x94>)
     576:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     578:	9b07      	ldr	r3, [sp, #28]
     57a:	b13b      	cbz	r3, 58c <SERCOM3_2_Handler+0x68>
     57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     580:	4b0e      	ldr	r3, [pc, #56]	; (5bc <SERCOM3_2_Handler+0x98>)
     582:	601a      	str	r2, [r3, #0]
     584:	f3bf 8f4f 	dsb	sy
     588:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     58c:	2000      	movs	r0, #0
     58e:	4b0c      	ldr	r3, [pc, #48]	; (5c0 <SERCOM3_2_Handler+0x9c>)
     590:	4798      	blx	r3
}
     592:	e7dc      	b.n	54e <SERCOM3_2_Handler+0x2a>
     594:	20000024 	.word	0x20000024
     598:	000024bd 	.word	0x000024bd
     59c:	000024ab 	.word	0x000024ab
     5a0:	20003964 	.word	0x20003964
     5a4:	00001a99 	.word	0x00001a99
     5a8:	0000047d 	.word	0x0000047d
     5ac:	00000371 	.word	0x00000371
     5b0:	00001ad9 	.word	0x00001ad9
     5b4:	20003148 	.word	0x20003148
     5b8:	00004c45 	.word	0x00004c45
     5bc:	e000ed04 	.word	0xe000ed04
     5c0:	00000471 	.word	0x00000471

000005c4 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	4605      	mov	r5, r0
     5c8:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     5ca:	4c05      	ldr	r4, [pc, #20]	; (5e0 <mdmCtrlr_SendDataToModem+0x1c>)
     5cc:	4620      	mov	r0, r4
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <mdmCtrlr_SendDataToModem+0x20>)
     5d0:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     5d2:	4632      	mov	r2, r6
     5d4:	4629      	mov	r1, r5
     5d6:	4620      	mov	r0, r4
     5d8:	4b03      	ldr	r3, [pc, #12]	; (5e8 <mdmCtrlr_SendDataToModem+0x24>)
     5da:	4798      	blx	r3
}
     5dc:	bd70      	pop	{r4, r5, r6, pc}
     5de:	bf00      	nop
     5e0:	20000024 	.word	0x20000024
     5e4:	00002491 	.word	0x00002491
     5e8:	00000b95 	.word	0x00000b95

000005ec <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	b083      	sub	sp, #12
     5f0:	4605      	mov	r5, r0
     5f2:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     5f4:	480d      	ldr	r0, [pc, #52]	; (62c <mdmCtrlr_ReadResponseFromModem+0x40>)
     5f6:	4b0e      	ldr	r3, [pc, #56]	; (630 <mdmCtrlr_ReadResponseFromModem+0x44>)
     5f8:	4798      	blx	r3
     5fa:	42b0      	cmp	r0, r6
     5fc:	d201      	bcs.n	602 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     5fe:	b003      	add	sp, #12
     600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     602:	a801      	add	r0, sp, #4
     604:	4b0b      	ldr	r3, [pc, #44]	; (634 <mdmCtrlr_ReadResponseFromModem+0x48>)
     606:	4798      	blx	r3
		while (readCnt < length)
     608:	b166      	cbz	r6, 624 <mdmCtrlr_ReadResponseFromModem+0x38>
     60a:	462c      	mov	r4, r5
     60c:	3e01      	subs	r6, #1
     60e:	b2b6      	uxth	r6, r6
     610:	3601      	adds	r6, #1
     612:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     614:	4f05      	ldr	r7, [pc, #20]	; (62c <mdmCtrlr_ReadResponseFromModem+0x40>)
     616:	4e08      	ldr	r6, [pc, #32]	; (638 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     618:	4621      	mov	r1, r4
     61a:	4638      	mov	r0, r7
     61c:	47b0      	blx	r6
     61e:	3401      	adds	r4, #1
		while (readCnt < length)
     620:	42ac      	cmp	r4, r5
     622:	d1f9      	bne.n	618 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     624:	a801      	add	r0, sp, #4
     626:	4b05      	ldr	r3, [pc, #20]	; (63c <mdmCtrlr_ReadResponseFromModem+0x50>)
     628:	4798      	blx	r3
     62a:	e7e8      	b.n	5fe <mdmCtrlr_ReadResponseFromModem+0x12>
     62c:	20003964 	.word	0x20003964
     630:	00001ad9 	.word	0x00001ad9
     634:	000016d5 	.word	0x000016d5
     638:	00001a55 	.word	0x00001a55
     63c:	000016e3 	.word	0x000016e3

00000640 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     640:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     642:	4802      	ldr	r0, [pc, #8]	; (64c <mdmCtrlr_FlushRxBuffer+0xc>)
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <mdmCtrlr_FlushRxBuffer+0x10>)
     646:	4798      	blx	r3
     648:	bd08      	pop	{r3, pc}
     64a:	bf00      	nop
     64c:	20003964 	.word	0x20003964
     650:	00001afd 	.word	0x00001afd

00000654 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     654:	b5f0      	push	{r4, r5, r6, r7, lr}
     656:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
     658:	2200      	movs	r2, #0
     65a:	4b60      	ldr	r3, [pc, #384]	; (7dc <ModemDiagTask+0x188>)
     65c:	701a      	strb	r2, [r3, #0]
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     65e:	4c60      	ldr	r4, [pc, #384]	; (7e0 <ModemDiagTask+0x18c>)
                        vTaskDelay(DiagDelayMs);
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     660:	4e60      	ldr	r6, [pc, #384]	; (7e4 <ModemDiagTask+0x190>)
                        vTaskDelay(DiagDelayMs);
     662:	4d61      	ldr	r5, [pc, #388]	; (7e8 <ModemDiagTask+0x194>)
     664:	e08a      	b.n	77c <ModemDiagTask+0x128>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     666:	2304      	movs	r3, #4
     668:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
     66c:	2301      	movs	r3, #1
     66e:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     672:	2300      	movs	r3, #0
     674:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     676:	2264      	movs	r2, #100	; 0x64
     678:	4669      	mov	r1, sp
     67a:	485c      	ldr	r0, [pc, #368]	; (7ec <ModemDiagTask+0x198>)
     67c:	6800      	ldr	r0, [r0, #0]
     67e:	4f5c      	ldr	r7, [pc, #368]	; (7f0 <ModemDiagTask+0x19c>)
     680:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     682:	2801      	cmp	r0, #1
     684:	d005      	beq.n	692 <ModemDiagTask+0x3e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     686:	485b      	ldr	r0, [pc, #364]	; (7f4 <ModemDiagTask+0x1a0>)
     688:	47b0      	blx	r6
                        vTaskDelay(DiagDelayMs);
     68a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     68e:	47a8      	blx	r5
     690:	e06d      	b.n	76e <ModemDiagTask+0x11a>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     692:	4859      	ldr	r0, [pc, #356]	; (7f8 <ModemDiagTask+0x1a4>)
     694:	47b0      	blx	r6
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     696:	2300      	movs	r3, #0
     698:	461a      	mov	r2, r3
     69a:	4619      	mov	r1, r3
     69c:	4857      	ldr	r0, [pc, #348]	; (7fc <ModemDiagTask+0x1a8>)
     69e:	6800      	ldr	r0, [r0, #0]
     6a0:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     6a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     6a6:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
     6a8:	2201      	movs	r2, #1
     6aa:	4b4c      	ldr	r3, [pc, #304]	; (7dc <ModemDiagTask+0x188>)
     6ac:	701a      	strb	r2, [r3, #0]
     6ae:	e05e      	b.n	76e <ModemDiagTask+0x11a>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     6b0:	2304      	movs	r3, #4
     6b2:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
     6b6:	2302      	movs	r3, #2
     6b8:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     6bc:	2300      	movs	r3, #0
     6be:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     6c0:	2264      	movs	r2, #100	; 0x64
     6c2:	4669      	mov	r1, sp
     6c4:	4849      	ldr	r0, [pc, #292]	; (7ec <ModemDiagTask+0x198>)
     6c6:	6800      	ldr	r0, [r0, #0]
     6c8:	4f49      	ldr	r7, [pc, #292]	; (7f0 <ModemDiagTask+0x19c>)
     6ca:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     6cc:	2801      	cmp	r0, #1
     6ce:	d005      	beq.n	6dc <ModemDiagTask+0x88>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     6d0:	4848      	ldr	r0, [pc, #288]	; (7f4 <ModemDiagTask+0x1a0>)
     6d2:	47b0      	blx	r6
                        vTaskDelay(DiagDelayMs);
     6d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     6d8:	47a8      	blx	r5
     6da:	e048      	b.n	76e <ModemDiagTask+0x11a>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     6dc:	4846      	ldr	r0, [pc, #280]	; (7f8 <ModemDiagTask+0x1a4>)
     6de:	47b0      	blx	r6
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     6e0:	2300      	movs	r3, #0
     6e2:	461a      	mov	r2, r3
     6e4:	4619      	mov	r1, r3
     6e6:	4845      	ldr	r0, [pc, #276]	; (7fc <ModemDiagTask+0x1a8>)
     6e8:	6800      	ldr	r0, [r0, #0]
     6ea:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     6ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     6f0:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
     6f2:	2202      	movs	r2, #2
     6f4:	4b39      	ldr	r3, [pc, #228]	; (7dc <ModemDiagTask+0x188>)
     6f6:	701a      	strb	r2, [r3, #0]
     6f8:	e039      	b.n	76e <ModemDiagTask+0x11a>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     6fa:	2304      	movs	r3, #4
     6fc:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
     700:	2307      	movs	r3, #7
     702:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     706:	2300      	movs	r3, #0
     708:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     70a:	2264      	movs	r2, #100	; 0x64
     70c:	4669      	mov	r1, sp
     70e:	4837      	ldr	r0, [pc, #220]	; (7ec <ModemDiagTask+0x198>)
     710:	6800      	ldr	r0, [r0, #0]
     712:	4f37      	ldr	r7, [pc, #220]	; (7f0 <ModemDiagTask+0x19c>)
     714:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     716:	2801      	cmp	r0, #1
     718:	d005      	beq.n	726 <ModemDiagTask+0xd2>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     71a:	4836      	ldr	r0, [pc, #216]	; (7f4 <ModemDiagTask+0x1a0>)
     71c:	47b0      	blx	r6
                        vTaskDelay(DiagDelayMs);
     71e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     722:	47a8      	blx	r5
     724:	e023      	b.n	76e <ModemDiagTask+0x11a>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     726:	4834      	ldr	r0, [pc, #208]	; (7f8 <ModemDiagTask+0x1a4>)
     728:	47b0      	blx	r6
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     72a:	2300      	movs	r3, #0
     72c:	461a      	mov	r2, r3
     72e:	4619      	mov	r1, r3
     730:	4832      	ldr	r0, [pc, #200]	; (7fc <ModemDiagTask+0x1a8>)
     732:	6800      	ldr	r0, [r0, #0]
     734:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     73a:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_CARRIER;
     73c:	2203      	movs	r2, #3
     73e:	4b27      	ldr	r3, [pc, #156]	; (7dc <ModemDiagTask+0x188>)
     740:	701a      	strb	r2, [r3, #0]
     742:	e014      	b.n	76e <ModemDiagTask+0x11a>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     744:	2304      	movs	r3, #4
     746:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
     74a:	2303      	movs	r3, #3
     74c:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     750:	2300      	movs	r3, #0
     752:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     754:	2264      	movs	r2, #100	; 0x64
     756:	4669      	mov	r1, sp
     758:	4824      	ldr	r0, [pc, #144]	; (7ec <ModemDiagTask+0x198>)
     75a:	6800      	ldr	r0, [r0, #0]
     75c:	4f24      	ldr	r7, [pc, #144]	; (7f0 <ModemDiagTask+0x19c>)
     75e:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     760:	2801      	cmp	r0, #1
     762:	d02b      	beq.n	7bc <ModemDiagTask+0x168>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     764:	4823      	ldr	r0, [pc, #140]	; (7f4 <ModemDiagTask+0x1a0>)
     766:	47b0      	blx	r6
                        vTaskDelay(DiagDelayMs);
     768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     76c:	47a8      	blx	r5
            kickWatchDog();
     76e:	4b24      	ldr	r3, [pc, #144]	; (800 <ModemDiagTask+0x1ac>)
     770:	4798      	blx	r3
            DEBUG_PRINT("Running Diag Process Task successfully");
     772:	4824      	ldr	r0, [pc, #144]	; (804 <ModemDiagTask+0x1b0>)
     774:	47b0      	blx	r6
            vTaskDelay(xDelayMs);
     776:	f640 50ac 	movw	r0, #3500	; 0xdac
     77a:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     77c:	47a0      	blx	r4
     77e:	2804      	cmp	r0, #4
     780:	d1fc      	bne.n	77c <ModemDiagTask+0x128>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     782:	4b1a      	ldr	r3, [pc, #104]	; (7ec <ModemDiagTask+0x198>)
     784:	6818      	ldr	r0, [r3, #0]
     786:	4b20      	ldr	r3, [pc, #128]	; (808 <ModemDiagTask+0x1b4>)
     788:	4798      	blx	r3
     78a:	2800      	cmp	r0, #0
     78c:	d1ef      	bne.n	76e <ModemDiagTask+0x11a>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     78e:	2100      	movs	r1, #0
     790:	4b1a      	ldr	r3, [pc, #104]	; (7fc <ModemDiagTask+0x1a8>)
     792:	6818      	ldr	r0, [r3, #0]
     794:	4b1d      	ldr	r3, [pc, #116]	; (80c <ModemDiagTask+0x1b8>)
     796:	4798      	blx	r3
     798:	2801      	cmp	r0, #1
     79a:	d1e8      	bne.n	76e <ModemDiagTask+0x11a>
            switch(ModemDiagState)
     79c:	4b0f      	ldr	r3, [pc, #60]	; (7dc <ModemDiagTask+0x188>)
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	2b03      	cmp	r3, #3
     7a2:	d8e4      	bhi.n	76e <ModemDiagTask+0x11a>
     7a4:	a201      	add	r2, pc, #4	; (adr r2, 7ac <ModemDiagTask+0x158>)
     7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     7aa:	bf00      	nop
     7ac:	00000667 	.word	0x00000667
     7b0:	000006b1 	.word	0x000006b1
     7b4:	000006fb 	.word	0x000006fb
     7b8:	00000745 	.word	0x00000745
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     7bc:	480e      	ldr	r0, [pc, #56]	; (7f8 <ModemDiagTask+0x1a4>)
     7be:	47b0      	blx	r6
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     7c0:	2300      	movs	r3, #0
     7c2:	461a      	mov	r2, r3
     7c4:	4619      	mov	r1, r3
     7c6:	480d      	ldr	r0, [pc, #52]	; (7fc <ModemDiagTask+0x1a8>)
     7c8:	6800      	ldr	r0, [r0, #0]
     7ca:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     7cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     7d0:	47a8      	blx	r5
                        ModemDiagState = 100;
     7d2:	2264      	movs	r2, #100	; 0x64
     7d4:	4b01      	ldr	r3, [pc, #4]	; (7dc <ModemDiagTask+0x188>)
     7d6:	701a      	strb	r2, [r3, #0]
     7d8:	e7c9      	b.n	76e <ModemDiagTask+0x11a>
     7da:	bf00      	nop
     7dc:	20003974 	.word	0x20003974
     7e0:	00000811 	.word	0x00000811
     7e4:	00000c5d 	.word	0x00000c5d
     7e8:	00004691 	.word	0x00004691
     7ec:	20003154 	.word	0x20003154
     7f0:	00003981 	.word	0x00003981
     7f4:	00006578 	.word	0x00006578
     7f8:	00006558 	.word	0x00006558
     7fc:	20003158 	.word	0x20003158
     800:	00000dd9 	.word	0x00000dd9
     804:	000065a0 	.word	0x000065a0
     808:	00003fcd 	.word	0x00003fcd
     80c:	00003ded 	.word	0x00003ded

00000810 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     810:	4b01      	ldr	r3, [pc, #4]	; (818 <getModemPowerStatus+0x8>)
     812:	7818      	ldrb	r0, [r3, #0]
     814:	4770      	bx	lr
     816:	bf00      	nop
     818:	200001e9 	.word	0x200001e9

0000081c <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     81c:	4b03      	ldr	r3, [pc, #12]	; (82c <modemPowerStateInit+0x10>)
     81e:	2200      	movs	r2, #0
     820:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     822:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     824:	2201      	movs	r2, #1
     826:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     828:	70da      	strb	r2, [r3, #3]
     82a:	4770      	bx	lr
     82c:	200001e9 	.word	0x200001e9

00000830 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     830:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     832:	4b5d      	ldr	r3, [pc, #372]	; (9a8 <modemPowerSchedule+0x178>)
     834:	781b      	ldrb	r3, [r3, #0]
     836:	2b06      	cmp	r3, #6
     838:	f000 8089 	beq.w	94e <modemPowerSchedule+0x11e>
     83c:	2b07      	cmp	r3, #7
     83e:	d054      	beq.n	8ea <modemPowerSchedule+0xba>
     840:	b103      	cbz	r3, 844 <modemPowerSchedule+0x14>
     842:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     844:	4b58      	ldr	r3, [pc, #352]	; (9a8 <modemPowerSchedule+0x178>)
     846:	785b      	ldrb	r3, [r3, #1]
     848:	2b03      	cmp	r3, #3
     84a:	d8fa      	bhi.n	842 <modemPowerSchedule+0x12>
     84c:	e8df f003 	tbb	[pc, r3]
     850:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     854:	4b55      	ldr	r3, [pc, #340]	; (9ac <modemPowerSchedule+0x17c>)
     856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     85e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     862:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     866:	4c52      	ldr	r4, [pc, #328]	; (9b0 <modemPowerSchedule+0x180>)
     868:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     870:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     874:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     87c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     880:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     882:	6299      	str	r1, [r3, #40]	; 0x28
     884:	484b      	ldr	r0, [pc, #300]	; (9b4 <modemPowerSchedule+0x184>)
     886:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     888:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     88c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     890:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     894:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     896:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     898:	6299      	str	r1, [r3, #40]	; 0x28
     89a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8a8:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     8aa:	2201      	movs	r2, #1
     8ac:	4b3e      	ldr	r3, [pc, #248]	; (9a8 <modemPowerSchedule+0x178>)
     8ae:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     8b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8b4:	4b40      	ldr	r3, [pc, #256]	; (9b8 <modemPowerSchedule+0x188>)
     8b6:	4798      	blx	r3
                }
                break;
     8b8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     8be:	4b3b      	ldr	r3, [pc, #236]	; (9ac <modemPowerSchedule+0x17c>)
     8c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     8c4:	2202      	movs	r2, #2
     8c6:	4b38      	ldr	r3, [pc, #224]	; (9a8 <modemPowerSchedule+0x178>)
     8c8:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     8ca:	2032      	movs	r0, #50	; 0x32
     8cc:	4b3a      	ldr	r3, [pc, #232]	; (9b8 <modemPowerSchedule+0x188>)
     8ce:	4798      	blx	r3
                }
                break;
     8d0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     8d2:	2203      	movs	r2, #3
     8d4:	4b34      	ldr	r3, [pc, #208]	; (9a8 <modemPowerSchedule+0x178>)
     8d6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     8d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
     8dc:	4b36      	ldr	r3, [pc, #216]	; (9b8 <modemPowerSchedule+0x188>)
     8de:	4798      	blx	r3
                }
                break;
     8e0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     8e2:	2204      	movs	r2, #4
     8e4:	4b30      	ldr	r3, [pc, #192]	; (9a8 <modemPowerSchedule+0x178>)
     8e6:	701a      	strb	r2, [r3, #0]
                }
                break;
     8e8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     8ea:	4b2f      	ldr	r3, [pc, #188]	; (9a8 <modemPowerSchedule+0x178>)
     8ec:	789b      	ldrb	r3, [r3, #2]
     8ee:	b113      	cbz	r3, 8f6 <modemPowerSchedule+0xc6>
     8f0:	2b01      	cmp	r3, #1
     8f2:	d017      	beq.n	924 <modemPowerSchedule+0xf4>
     8f4:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8f6:	4b2d      	ldr	r3, [pc, #180]	; (9ac <modemPowerSchedule+0x17c>)
     8f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     8fc:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     902:	629a      	str	r2, [r3, #40]	; 0x28
     904:	4a2b      	ldr	r2, [pc, #172]	; (9b4 <modemPowerSchedule+0x184>)
     906:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     908:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     90c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     910:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     914:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     916:	2201      	movs	r2, #1
     918:	4b23      	ldr	r3, [pc, #140]	; (9a8 <modemPowerSchedule+0x178>)
     91a:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     91c:	2019      	movs	r0, #25
     91e:	4b26      	ldr	r3, [pc, #152]	; (9b8 <modemPowerSchedule+0x188>)
     920:	4798      	blx	r3
                }
                break;
     922:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     924:	4b21      	ldr	r3, [pc, #132]	; (9ac <modemPowerSchedule+0x17c>)
     926:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     92a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     930:	629a      	str	r2, [r3, #40]	; 0x28
     932:	4a20      	ldr	r2, [pc, #128]	; (9b4 <modemPowerSchedule+0x184>)
     934:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     936:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     93a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     93e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     942:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     944:	4b18      	ldr	r3, [pc, #96]	; (9a8 <modemPowerSchedule+0x178>)
     946:	2200      	movs	r2, #0
     948:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     94a:	705a      	strb	r2, [r3, #1]
                }
                break;
     94c:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     94e:	4b16      	ldr	r3, [pc, #88]	; (9a8 <modemPowerSchedule+0x178>)
     950:	78db      	ldrb	r3, [r3, #3]
     952:	2b00      	cmp	r3, #0
     954:	f47f af75 	bne.w	842 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     958:	4b14      	ldr	r3, [pc, #80]	; (9ac <modemPowerSchedule+0x17c>)
     95a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     95e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     962:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     966:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     96a:	4a11      	ldr	r2, [pc, #68]	; (9b0 <modemPowerSchedule+0x180>)
     96c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     970:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     978:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     97c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     980:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     984:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     986:	6298      	str	r0, [r3, #40]	; 0x28
     988:	4a0a      	ldr	r2, [pc, #40]	; (9b4 <modemPowerSchedule+0x184>)
     98a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     994:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     998:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     99a:	2201      	movs	r2, #1
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <modemPowerSchedule+0x178>)
     99e:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     9a0:	2019      	movs	r0, #25
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <modemPowerSchedule+0x188>)
     9a4:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     9a6:	e74c      	b.n	842 <modemPowerSchedule+0x12>
     9a8:	200001e9 	.word	0x200001e9
     9ac:	41008000 	.word	0x41008000
     9b0:	c0000001 	.word	0xc0000001
     9b4:	c0000008 	.word	0xc0000008
     9b8:	00004691 	.word	0x00004691

000009bc <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     9bc:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);

    modemPowerStateInit();
     9be:	4b09      	ldr	r3, [pc, #36]	; (9e4 <ModemProcessTask+0x28>)
     9c0:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     9c2:	4d09      	ldr	r5, [pc, #36]	; (9e8 <ModemProcessTask+0x2c>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     9c4:	4c09      	ldr	r4, [pc, #36]	; (9ec <ModemProcessTask+0x30>)
        {
            DEBUG_PRINT("Running Modem Process Task successfully");
     9c6:	4e0a      	ldr	r6, [pc, #40]	; (9f0 <ModemProcessTask+0x34>)
        modemPowerSchedule();
     9c8:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     9ca:	47a0      	blx	r4
     9cc:	2804      	cmp	r0, #4
     9ce:	d1fb      	bne.n	9c8 <ModemProcessTask+0xc>
            DEBUG_PRINT("Running Modem Process Task successfully");
     9d0:	4630      	mov	r0, r6
     9d2:	4b08      	ldr	r3, [pc, #32]	; (9f4 <ModemProcessTask+0x38>)
     9d4:	4798      	blx	r3
			kickWatchDog();
     9d6:	4b08      	ldr	r3, [pc, #32]	; (9f8 <ModemProcessTask+0x3c>)
     9d8:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     9da:	f241 3088 	movw	r0, #5000	; 0x1388
     9de:	4b07      	ldr	r3, [pc, #28]	; (9fc <ModemProcessTask+0x40>)
     9e0:	4798      	blx	r3
     9e2:	e7f1      	b.n	9c8 <ModemProcessTask+0xc>
     9e4:	0000081d 	.word	0x0000081d
     9e8:	00000831 	.word	0x00000831
     9ec:	00000811 	.word	0x00000811
     9f0:	000065dc 	.word	0x000065dc
     9f4:	00000c5d 	.word	0x00000c5d
     9f8:	00000dd9 	.word	0x00000dd9
     9fc:	00004691 	.word	0x00004691

00000a00 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint8_t length)
{
     a00:	b510      	push	{r4, lr}
     a02:	b086      	sub	sp, #24
     a04:	460c      	mov	r4, r1
    MODEM_CMD_DATA cmdData;
    CmdResponseType cmdResponse;
    BaseType_t QueuePushStatus;

    const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(500UL);
    getModemCommandData(cmd,&cmdData);
     a06:	a901      	add	r1, sp, #4
     a08:	4b07      	ldr	r3, [pc, #28]	; (a28 <modemResponseHandler+0x28>)
     a0a:	4798      	blx	r3

    if(response != NULL)
     a0c:	b134      	cbz	r4, a1c <modemResponseHandler+0x1c>
    {
        switch (cmdData.cmdSet)
     a0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a12:	b933      	cbnz	r3, a22 <modemResponseHandler+0x22>
                    //memcpy(cmdResponse.response,response,length);
                    //ModemDiagUpdateDataBase(&cmdResponse);
                }
                else
                {
                	DEBUG_PRINT("ERROR: Problem during packing the data in response handler");
     a14:	4805      	ldr	r0, [pc, #20]	; (a2c <modemResponseHandler+0x2c>)
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <modemResponseHandler+0x30>)
     a18:	4798      	blx	r3
     a1a:	e002      	b.n	a22 <modemResponseHandler+0x22>
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
     a1c:	4805      	ldr	r0, [pc, #20]	; (a34 <modemResponseHandler+0x34>)
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <modemResponseHandler+0x30>)
     a20:	4798      	blx	r3
    }
}
     a22:	b006      	add	sp, #24
     a24:	bd10      	pop	{r4, pc}
     a26:	bf00      	nop
     a28:	00000371 	.word	0x00000371
     a2c:	00006604 	.word	0x00006604
     a30:	00000c5d 	.word	0x00000c5d
     a34:	00006640 	.word	0x00006640

00000a38 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}
     a3a:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,xMaxExpectedBlockTime);
     a3c:	4e13      	ldr	r6, [pc, #76]	; (a8c <ModemRxTask+0x54>)
		getModemCommandData(atCmd, &cmdData);
     a3e:	4d14      	ldr	r5, [pc, #80]	; (a90 <ModemRxTask+0x58>)

		if(xResult == pdPASS)
		{
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     a40:	4f14      	ldr	r7, [pc, #80]	; (a94 <ModemRxTask+0x5c>)
     a42:	e004      	b.n	a4e <ModemRxTask+0x16>
				DEBUG_PRINT("Successfully Parsed the last command");
				mdmParser_SetLastCmdProcessed(true);
			}
			else
			{
				DEBUG_PRINT("ERROR: Command Parsing Failed");
     a44:	4814      	ldr	r0, [pc, #80]	; (a98 <ModemRxTask+0x60>)
     a46:	4b15      	ldr	r3, [pc, #84]	; (a9c <ModemRxTask+0x64>)
     a48:	4798      	blx	r3
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
			//DEBUG_PRINT("Notification Not Received to Rx Task");
		}
		kickWatchDog();
     a4a:	4b15      	ldr	r3, [pc, #84]	; (aa0 <ModemRxTask+0x68>)
     a4c:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,xMaxExpectedBlockTime);
     a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     a52:	f10d 0217 	add.w	r2, sp, #23
     a56:	f04f 31ff 	mov.w	r1, #4294967295
     a5a:	2000      	movs	r0, #0
     a5c:	47b0      	blx	r6
     a5e:	4604      	mov	r4, r0
		getModemCommandData(atCmd, &cmdData);
     a60:	4669      	mov	r1, sp
     a62:	f89d 0017 	ldrb.w	r0, [sp, #23]
     a66:	47a8      	blx	r5
		if(xResult == pdPASS)
     a68:	2c01      	cmp	r4, #1
     a6a:	d1ee      	bne.n	a4a <ModemRxTask+0x12>
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     a6c:	4638      	mov	r0, r7
     a6e:	4b0b      	ldr	r3, [pc, #44]	; (a9c <ModemRxTask+0x64>)
     a70:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
     a72:	f89d 0000 	ldrb.w	r0, [sp]
     a76:	4b0b      	ldr	r3, [pc, #44]	; (aa4 <ModemRxTask+0x6c>)
     a78:	4798      	blx	r3
     a7a:	2800      	cmp	r0, #0
     a7c:	d0e2      	beq.n	a44 <ModemRxTask+0xc>
				DEBUG_PRINT("Successfully Parsed the last command");
     a7e:	480a      	ldr	r0, [pc, #40]	; (aa8 <ModemRxTask+0x70>)
     a80:	4b06      	ldr	r3, [pc, #24]	; (a9c <ModemRxTask+0x64>)
     a82:	4798      	blx	r3
				mdmParser_SetLastCmdProcessed(true);
     a84:	2001      	movs	r0, #1
     a86:	4b09      	ldr	r3, [pc, #36]	; (aac <ModemRxTask+0x74>)
     a88:	4798      	blx	r3
     a8a:	e7de      	b.n	a4a <ModemRxTask+0x12>
     a8c:	00004b91 	.word	0x00004b91
     a90:	00000371 	.word	0x00000371
     a94:	00006824 	.word	0x00006824
     a98:	00006878 	.word	0x00006878
     a9c:	00000c5d 	.word	0x00000c5d
     aa0:	00000dd9 	.word	0x00000dd9
     aa4:	00000391 	.word	0x00000391
     aa8:	00006850 	.word	0x00006850
     aac:	00000465 	.word	0x00000465

00000ab0 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ab4:	b086      	sub	sp, #24
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     ab6:	2300      	movs	r3, #0
     ab8:	461a      	mov	r2, r3
     aba:	4619      	mov	r1, r3
     abc:	4822      	ldr	r0, [pc, #136]	; (b48 <ModemTxTask+0x98>)
     abe:	6800      	ldr	r0, [r0, #0]
     ac0:	4c22      	ldr	r4, [pc, #136]	; (b4c <ModemTxTask+0x9c>)
     ac2:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     ac4:	4c22      	ldr	r4, [pc, #136]	; (b50 <ModemTxTask+0xa0>)
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemTxTaskSchedule(void)
{
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     ac6:	4d23      	ldr	r5, [pc, #140]	; (b54 <ModemTxTask+0xa4>)
     ac8:	4e23      	ldr	r6, [pc, #140]	; (b58 <ModemTxTask+0xa8>)
     aca:	e005      	b.n	ad8 <ModemTxTask+0x28>
			kickWatchDog();
     acc:	4b23      	ldr	r3, [pc, #140]	; (b5c <ModemTxTask+0xac>)
     ace:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     ad4:	4b22      	ldr	r3, [pc, #136]	; (b60 <ModemTxTask+0xb0>)
     ad6:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     ad8:	47a0      	blx	r4
     ada:	2804      	cmp	r0, #4
     adc:	d1fc      	bne.n	ad8 <ModemTxTask+0x28>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     ade:	6828      	ldr	r0, [r5, #0]
     ae0:	47b0      	blx	r6
     ae2:	2800      	cmp	r0, #0
     ae4:	d0f2      	beq.n	acc <ModemTxTask+0x1c>
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ae6:	2100      	movs	r1, #0
     ae8:	4b17      	ldr	r3, [pc, #92]	; (b48 <ModemTxTask+0x98>)
     aea:	6818      	ldr	r0, [r3, #0]
     aec:	4b1d      	ldr	r3, [pc, #116]	; (b64 <ModemTxTask+0xb4>)
     aee:	4798      	blx	r3
     af0:	2801      	cmp	r0, #1
     af2:	d1eb      	bne.n	acc <ModemTxTask+0x1c>
		{
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
     af4:	4f1c      	ldr	r7, [pc, #112]	; (b68 <ModemTxTask+0xb8>)
     af6:	f04f 32ff 	mov.w	r2, #4294967295
     afa:	4639      	mov	r1, r7
     afc:	6828      	ldr	r0, [r5, #0]
     afe:	4b1b      	ldr	r3, [pc, #108]	; (b6c <ModemTxTask+0xbc>)
     b00:	4798      	blx	r3
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     b02:	f897 8001 	ldrb.w	r8, [r7, #1]
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     b06:	a901      	add	r1, sp, #4
     b08:	4640      	mov	r0, r8
     b0a:	4b19      	ldr	r3, [pc, #100]	; (b70 <ModemTxTask+0xc0>)
     b0c:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     b0e:	4b19      	ldr	r3, [pc, #100]	; (b74 <ModemTxTask+0xc4>)
     b10:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     b12:	f89d 100c 	ldrb.w	r1, [sp, #12]
     b16:	9802      	ldr	r0, [sp, #8]
     b18:	4b17      	ldr	r3, [pc, #92]	; (b78 <ModemTxTask+0xc8>)
     b1a:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     b1c:	4640      	mov	r0, r8
     b1e:	4b17      	ldr	r3, [pc, #92]	; (b7c <ModemTxTask+0xcc>)
     b20:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     b22:	2000      	movs	r0, #0
     b24:	4b16      	ldr	r3, [pc, #88]	; (b80 <ModemTxTask+0xd0>)
     b26:	4798      	blx	r3
			ConsoleDebugPrint("Task ID",AtTxQueueReceivedData.taskID);
     b28:	7839      	ldrb	r1, [r7, #0]
     b2a:	4816      	ldr	r0, [pc, #88]	; (b84 <ModemTxTask+0xd4>)
     b2c:	4b16      	ldr	r3, [pc, #88]	; (b88 <ModemTxTask+0xd8>)
     b2e:	4798      	blx	r3
			DEBUG_PRINT("Transmitted a command to Modem");
     b30:	4816      	ldr	r0, [pc, #88]	; (b8c <ModemTxTask+0xdc>)
     b32:	4b17      	ldr	r3, [pc, #92]	; (b90 <ModemTxTask+0xe0>)
     b34:	4798      	blx	r3
			xSemaphoreGive(AtTxQueueLoadSemaphore);
     b36:	2300      	movs	r3, #0
     b38:	461a      	mov	r2, r3
     b3a:	4619      	mov	r1, r3
     b3c:	4802      	ldr	r0, [pc, #8]	; (b48 <ModemTxTask+0x98>)
     b3e:	6800      	ldr	r0, [r0, #0]
     b40:	4f02      	ldr	r7, [pc, #8]	; (b4c <ModemTxTask+0x9c>)
     b42:	47b8      	blx	r7
     b44:	e7c2      	b.n	acc <ModemTxTask+0x1c>
     b46:	bf00      	nop
     b48:	20003158 	.word	0x20003158
     b4c:	00003981 	.word	0x00003981
     b50:	00000811 	.word	0x00000811
     b54:	20003154 	.word	0x20003154
     b58:	00003fcd 	.word	0x00003fcd
     b5c:	00000dd9 	.word	0x00000dd9
     b60:	00004691 	.word	0x00004691
     b64:	00003ded 	.word	0x00003ded
     b68:	200001f0 	.word	0x200001f0
     b6c:	00003c65 	.word	0x00003c65
     b70:	00000371 	.word	0x00000371
     b74:	00000641 	.word	0x00000641
     b78:	000005c5 	.word	0x000005c5
     b7c:	00000471 	.word	0x00000471
     b80:	00000465 	.word	0x00000465
     b84:	00006898 	.word	0x00006898
     b88:	00000ca5 	.word	0x00000ca5
     b8c:	000068a0 	.word	0x000068a0
     b90:	00000c5d 	.word	0x00000c5d

00000b94 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b98:	4604      	mov	r4, r0
     b9a:	460e      	mov	r6, r1
     b9c:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     b9e:	4d0e      	ldr	r5, [pc, #56]	; (bd8 <usart_async_write+0x44>)
     ba0:	4620      	mov	r0, r4
     ba2:	47a8      	blx	r5
     ba4:	2800      	cmp	r0, #0
     ba6:	d0fb      	beq.n	ba0 <usart_async_write+0xc>
     ba8:	3e01      	subs	r6, #1
     baa:	f8df 8030 	ldr.w	r8, [pc, #48]	; bdc <usart_async_write+0x48>
     bae:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     bb0:	f8df a02c 	ldr.w	sl, [pc, #44]	; be0 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     bb4:	4d08      	ldr	r5, [pc, #32]	; (bd8 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     bb6:	7873      	ldrb	r3, [r6, #1]
     bb8:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     bbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     bc0:	4620      	mov	r0, r4
     bc2:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     bc4:	4620      	mov	r0, r4
     bc6:	47a8      	blx	r5
     bc8:	2800      	cmp	r0, #0
     bca:	d0fb      	beq.n	bc4 <usart_async_write+0x30>
		;
	} while (++offset < length);
     bcc:	3701      	adds	r7, #1
     bce:	454f      	cmp	r7, r9
     bd0:	d3f1      	bcc.n	bb6 <usart_async_write+0x22>

	return (int32_t)offset;
}
     bd2:	4638      	mov	r0, r7
     bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bd8:	000024b3 	.word	0x000024b3
     bdc:	200001f8 	.word	0x200001f8
     be0:	000024a5 	.word	0x000024a5

00000be4 <SerialDebugTxByteSentCallBack>:
     be4:	2302      	movs	r3, #2
     be6:	7603      	strb	r3, [r0, #24]
     be8:	4770      	bx	lr

00000bea <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     bea:	2380      	movs	r3, #128	; 0x80
     bec:	7603      	strb	r3, [r0, #24]
     bee:	4770      	bx	lr

00000bf0 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     bf0:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     bf2:	4c05      	ldr	r4, [pc, #20]	; (c08 <SerialDebugPrintInit+0x18>)
     bf4:	4905      	ldr	r1, [pc, #20]	; (c0c <SerialDebugPrintInit+0x1c>)
     bf6:	4620      	mov	r0, r4
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <SerialDebugPrintInit+0x20>)
     bfa:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     bfc:	2201      	movs	r2, #1
     bfe:	4611      	mov	r1, r2
     c00:	4620      	mov	r0, r4
     c02:	4b04      	ldr	r3, [pc, #16]	; (c14 <SerialDebugPrintInit+0x24>)
     c04:	4798      	blx	r3
     c06:	bd10      	pop	{r4, pc}
     c08:	20000040 	.word	0x20000040
     c0c:	43000400 	.word	0x43000400
     c10:	0000241d 	.word	0x0000241d
     c14:	000024c9 	.word	0x000024c9

00000c18 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     c18:	b570      	push	{r4, r5, r6, lr}
     c1a:	4605      	mov	r5, r0
     c1c:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     c1e:	4c05      	ldr	r4, [pc, #20]	; (c34 <SerialDebugPrint+0x1c>)
     c20:	4620      	mov	r0, r4
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <SerialDebugPrint+0x20>)
     c24:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     c26:	4632      	mov	r2, r6
     c28:	4629      	mov	r1, r5
     c2a:	4620      	mov	r0, r4
     c2c:	4b03      	ldr	r3, [pc, #12]	; (c3c <SerialDebugPrint+0x24>)
     c2e:	4798      	blx	r3
     c30:	bd70      	pop	{r4, r5, r6, pc}
     c32:	bf00      	nop
     c34:	20000040 	.word	0x20000040
     c38:	00002491 	.word	0x00002491
     c3c:	00000b95 	.word	0x00000b95

00000c40 <SerialDebugTxDoneCallBack>:
{
     c40:	b510      	push	{r4, lr}
     c42:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     c44:	2116      	movs	r1, #22
     c46:	4803      	ldr	r0, [pc, #12]	; (c54 <SerialDebugTxDoneCallBack+0x14>)
     c48:	4b03      	ldr	r3, [pc, #12]	; (c58 <SerialDebugTxDoneCallBack+0x18>)
     c4a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     c4c:	2301      	movs	r3, #1
     c4e:	7623      	strb	r3, [r4, #24]
     c50:	bd10      	pop	{r4, pc}
     c52:	bf00      	nop
     c54:	000068c0 	.word	0x000068c0
     c58:	00000c19 	.word	0x00000c19

00000c5c <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
     c5c:	b510      	push	{r4, lr}
     c5e:	b09a      	sub	sp, #104	; 0x68
     c60:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     c62:	2264      	movs	r2, #100	; 0x64
     c64:	2100      	movs	r1, #0
     c66:	a801      	add	r0, sp, #4
     c68:	4b08      	ldr	r3, [pc, #32]	; (c8c <SerialStringPrint+0x30>)
     c6a:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
     c6c:	4b08      	ldr	r3, [pc, #32]	; (c90 <SerialStringPrint+0x34>)
     c6e:	4622      	mov	r2, r4
     c70:	4908      	ldr	r1, [pc, #32]	; (c94 <SerialStringPrint+0x38>)
     c72:	a801      	add	r0, sp, #4
     c74:	4c08      	ldr	r4, [pc, #32]	; (c98 <SerialStringPrint+0x3c>)
     c76:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     c78:	a801      	add	r0, sp, #4
     c7a:	4b08      	ldr	r3, [pc, #32]	; (c9c <SerialStringPrint+0x40>)
     c7c:	4798      	blx	r3
     c7e:	b281      	uxth	r1, r0
     c80:	a801      	add	r0, sp, #4
     c82:	4b07      	ldr	r3, [pc, #28]	; (ca0 <SerialStringPrint+0x44>)
     c84:	4798      	blx	r3
}
     c86:	b01a      	add	sp, #104	; 0x68
     c88:	bd10      	pop	{r4, pc}
     c8a:	bf00      	nop
     c8c:	000051c3 	.word	0x000051c3
     c90:	000068f4 	.word	0x000068f4
     c94:	000068e4 	.word	0x000068e4
     c98:	0000534d 	.word	0x0000534d
     c9c:	000053a5 	.word	0x000053a5
     ca0:	00000c19 	.word	0x00000c19

00000ca4 <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
     ca4:	b530      	push	{r4, r5, lr}
     ca6:	b09b      	sub	sp, #108	; 0x6c
     ca8:	4605      	mov	r5, r0
     caa:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     cac:	2264      	movs	r2, #100	; 0x64
     cae:	2100      	movs	r1, #0
     cb0:	a801      	add	r0, sp, #4
     cb2:	4b09      	ldr	r3, [pc, #36]	; (cd8 <ConsoleDebugPrint+0x34>)
     cb4:	4798      	blx	r3

	if(intData != 0)
     cb6:	b90c      	cbnz	r4, cbc <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
     cb8:	b01b      	add	sp, #108	; 0x6c
     cba:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
     cbc:	4623      	mov	r3, r4
     cbe:	462a      	mov	r2, r5
     cc0:	4906      	ldr	r1, [pc, #24]	; (cdc <ConsoleDebugPrint+0x38>)
     cc2:	a801      	add	r0, sp, #4
     cc4:	4c06      	ldr	r4, [pc, #24]	; (ce0 <ConsoleDebugPrint+0x3c>)
     cc6:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     cc8:	a801      	add	r0, sp, #4
     cca:	4b06      	ldr	r3, [pc, #24]	; (ce4 <ConsoleDebugPrint+0x40>)
     ccc:	4798      	blx	r3
     cce:	b281      	uxth	r1, r0
     cd0:	a801      	add	r0, sp, #4
     cd2:	4b05      	ldr	r3, [pc, #20]	; (ce8 <ConsoleDebugPrint+0x44>)
     cd4:	4798      	blx	r3
}
     cd6:	e7ef      	b.n	cb8 <ConsoleDebugPrint+0x14>
     cd8:	000051c3 	.word	0x000051c3
     cdc:	000068ec 	.word	0x000068ec
     ce0:	0000534d 	.word	0x0000534d
     ce4:	000053a5 	.word	0x000053a5
     ce8:	00000c19 	.word	0x00000c19

00000cec <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     cec:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     cee:	2204      	movs	r2, #4
     cf0:	4b0b      	ldr	r3, [pc, #44]	; (d20 <SERCOM5_2_Handler+0x34>)
     cf2:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
     cf4:	4d0b      	ldr	r5, [pc, #44]	; (d24 <SERCOM5_2_Handler+0x38>)
     cf6:	4c0c      	ldr	r4, [pc, #48]	; (d28 <SERCOM5_2_Handler+0x3c>)
     cf8:	4628      	mov	r0, r5
     cfa:	47a0      	blx	r4
     cfc:	2800      	cmp	r0, #0
     cfe:	d0fb      	beq.n	cf8 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
     d00:	4808      	ldr	r0, [pc, #32]	; (d24 <SERCOM5_2_Handler+0x38>)
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <SERCOM5_2_Handler+0x40>)
     d04:	4798      	blx	r3
     d06:	490a      	ldr	r1, [pc, #40]	; (d30 <SERCOM5_2_Handler+0x44>)
     d08:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     d0a:	2300      	movs	r3, #0
     d0c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     d0e:	4c09      	ldr	r4, [pc, #36]	; (d34 <SERCOM5_2_Handler+0x48>)
     d10:	4620      	mov	r0, r4
     d12:	4b09      	ldr	r3, [pc, #36]	; (d38 <SERCOM5_2_Handler+0x4c>)
     d14:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     d16:	2105      	movs	r1, #5
     d18:	4620      	mov	r0, r4
     d1a:	4b08      	ldr	r3, [pc, #32]	; (d3c <SERCOM5_2_Handler+0x50>)
     d1c:	4798      	blx	r3
     d1e:	bd38      	pop	{r3, r4, r5, pc}
     d20:	43000400 	.word	0x43000400
     d24:	20000040 	.word	0x20000040
     d28:	000024bd 	.word	0x000024bd
     d2c:	000024ab 	.word	0x000024ab
     d30:	20003978 	.word	0x20003978
     d34:	2000397c 	.word	0x2000397c
     d38:	00005395 	.word	0x00005395
     d3c:	00000c19 	.word	0x00000c19

00000d40 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
     d40:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <configureWatchDogTimeOut+0x2c>)
     d44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d48:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
     d4a:	4c09      	ldr	r4, [pc, #36]	; (d70 <configureWatchDogTimeOut+0x30>)
     d4c:	6820      	ldr	r0, [r4, #0]
     d4e:	2279      	movs	r2, #121	; 0x79
     d50:	4908      	ldr	r1, [pc, #32]	; (d74 <configureWatchDogTimeOut+0x34>)
     d52:	3000      	adds	r0, #0
     d54:	bf18      	it	ne
     d56:	2001      	movne	r0, #1
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <configureWatchDogTimeOut+0x38>)
     d5a:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     d5c:	462a      	mov	r2, r5
     d5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     d62:	4620      	mov	r0, r4
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <configureWatchDogTimeOut+0x3c>)
     d66:	4798      	blx	r3
     d68:	bd38      	pop	{r3, r4, r5, pc}
     d6a:	bf00      	nop
     d6c:	2000005c 	.word	0x2000005c
     d70:	20003a58 	.word	0x20003a58
     d74:	000068f8 	.word	0x000068f8
     d78:	0000199d 	.word	0x0000199d
     d7c:	00002e69 	.word	0x00002e69

00000d80 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
     d80:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
     d82:	2002      	movs	r0, #2
     d84:	4b07      	ldr	r3, [pc, #28]	; (da4 <enableWatchDogTimer+0x24>)
     d86:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     d88:	4c07      	ldr	r4, [pc, #28]	; (da8 <enableWatchDogTimer+0x28>)
     d8a:	6820      	ldr	r0, [r4, #0]
     d8c:	2296      	movs	r2, #150	; 0x96
     d8e:	4907      	ldr	r1, [pc, #28]	; (dac <enableWatchDogTimer+0x2c>)
     d90:	3000      	adds	r0, #0
     d92:	bf18      	it	ne
     d94:	2001      	movne	r0, #1
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <enableWatchDogTimer+0x30>)
     d98:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     d9a:	4620      	mov	r0, r4
     d9c:	4b05      	ldr	r3, [pc, #20]	; (db4 <enableWatchDogTimer+0x34>)
     d9e:	4798      	blx	r3
     da0:	bd10      	pop	{r4, pc}
     da2:	bf00      	nop
     da4:	00000d41 	.word	0x00000d41
     da8:	20003a58 	.word	0x20003a58
     dac:	000068f8 	.word	0x000068f8
     db0:	0000199d 	.word	0x0000199d
     db4:	00002f85 	.word	0x00002f85

00000db8 <atmel_start_init>:
{
     db8:	b508      	push	{r3, lr}
    system_init();
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <atmel_start_init+0x14>)
     dbc:	4798      	blx	r3
    delay_ms(1000);
     dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <atmel_start_init+0x18>)
     dc4:	4798      	blx	r3
    enableWatchDogTimer();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <atmel_start_init+0x1c>)
     dc8:	4798      	blx	r3
     dca:	bd08      	pop	{r3, pc}
     dcc:	00001555 	.word	0x00001555
     dd0:	00001745 	.word	0x00001745
     dd4:	00000d81 	.word	0x00000d81

00000dd8 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
     dd8:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     dda:	4c06      	ldr	r4, [pc, #24]	; (df4 <kickWatchDog+0x1c>)
     ddc:	6820      	ldr	r0, [r4, #0]
     dde:	22b3      	movs	r2, #179	; 0xb3
     de0:	4905      	ldr	r1, [pc, #20]	; (df8 <kickWatchDog+0x20>)
     de2:	3000      	adds	r0, #0
     de4:	bf18      	it	ne
     de6:	2001      	movne	r0, #1
     de8:	4b04      	ldr	r3, [pc, #16]	; (dfc <kickWatchDog+0x24>)
     dea:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     dec:	4620      	mov	r0, r4
     dee:	4b04      	ldr	r3, [pc, #16]	; (e00 <kickWatchDog+0x28>)
     df0:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
     df2:	bd10      	pop	{r4, pc}
     df4:	20003a58 	.word	0x20003a58
     df8:	000068f8 	.word	0x000068f8
     dfc:	0000199d 	.word	0x0000199d
     e00:	00002fc1 	.word	0x00002fc1

00000e04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     e04:	e7fe      	b.n	e04 <Dummy_Handler>
	...

00000e08 <Reset_Handler>:
{
     e08:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     e0a:	4b1c      	ldr	r3, [pc, #112]	; (e7c <Reset_Handler+0x74>)
     e0c:	4a1c      	ldr	r2, [pc, #112]	; (e80 <Reset_Handler+0x78>)
     e0e:	429a      	cmp	r2, r3
     e10:	d010      	beq.n	e34 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     e12:	4b1c      	ldr	r3, [pc, #112]	; (e84 <Reset_Handler+0x7c>)
     e14:	4a19      	ldr	r2, [pc, #100]	; (e7c <Reset_Handler+0x74>)
     e16:	429a      	cmp	r2, r3
     e18:	d20c      	bcs.n	e34 <Reset_Handler+0x2c>
     e1a:	3b01      	subs	r3, #1
     e1c:	1a9b      	subs	r3, r3, r2
     e1e:	f023 0303 	bic.w	r3, r3, #3
     e22:	3304      	adds	r3, #4
     e24:	4413      	add	r3, r2
     e26:	4916      	ldr	r1, [pc, #88]	; (e80 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     e28:	f851 0b04 	ldr.w	r0, [r1], #4
     e2c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     e30:	429a      	cmp	r2, r3
     e32:	d1f9      	bne.n	e28 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     e34:	4b14      	ldr	r3, [pc, #80]	; (e88 <Reset_Handler+0x80>)
     e36:	4a15      	ldr	r2, [pc, #84]	; (e8c <Reset_Handler+0x84>)
     e38:	429a      	cmp	r2, r3
     e3a:	d20a      	bcs.n	e52 <Reset_Handler+0x4a>
     e3c:	3b01      	subs	r3, #1
     e3e:	1a9b      	subs	r3, r3, r2
     e40:	f023 0303 	bic.w	r3, r3, #3
     e44:	3304      	adds	r3, #4
     e46:	4413      	add	r3, r2
                *pDest++ = 0;
     e48:	2100      	movs	r1, #0
     e4a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     e4e:	4293      	cmp	r3, r2
     e50:	d1fb      	bne.n	e4a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     e52:	4b0f      	ldr	r3, [pc, #60]	; (e90 <Reset_Handler+0x88>)
     e54:	4a0f      	ldr	r2, [pc, #60]	; (e94 <Reset_Handler+0x8c>)
     e56:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     e5a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     e60:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     e68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e6c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     e70:	4b09      	ldr	r3, [pc, #36]	; (e98 <Reset_Handler+0x90>)
     e72:	4798      	blx	r3
        main();
     e74:	4b09      	ldr	r3, [pc, #36]	; (e9c <Reset_Handler+0x94>)
     e76:	4798      	blx	r3
     e78:	e7fe      	b.n	e78 <Reset_Handler+0x70>
     e7a:	bf00      	nop
     e7c:	20000000 	.word	0x20000000
     e80:	00007044 	.word	0x00007044
     e84:	2000018c 	.word	0x2000018c
     e88:	20003b44 	.word	0x20003b44
     e8c:	20000190 	.word	0x20000190
     e90:	e000ed00 	.word	0xe000ed00
     e94:	00000000 	.word	0x00000000
     e98:	00005131 	.word	0x00005131
     e9c:	00003061 	.word	0x00003061

00000ea0 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     ea0:	4a04      	ldr	r2, [pc, #16]	; (eb4 <AC_0_CLOCK_init+0x14>)
     ea2:	69d3      	ldr	r3, [r2, #28]
     ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     ea8:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     eaa:	2240      	movs	r2, #64	; 0x40
     eac:	4b02      	ldr	r3, [pc, #8]	; (eb8 <AC_0_CLOCK_init+0x18>)
     eae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     eb2:	4770      	bx	lr
     eb4:	40000800 	.word	0x40000800
     eb8:	40001c00 	.word	0x40001c00

00000ebc <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     ebc:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     ebe:	4b03      	ldr	r3, [pc, #12]	; (ecc <AC_0_init+0x10>)
     ec0:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     ec2:	4903      	ldr	r1, [pc, #12]	; (ed0 <AC_0_init+0x14>)
     ec4:	4803      	ldr	r0, [pc, #12]	; (ed4 <AC_0_init+0x18>)
     ec6:	4b04      	ldr	r3, [pc, #16]	; (ed8 <AC_0_init+0x1c>)
     ec8:	4798      	blx	r3
     eca:	bd08      	pop	{r3, pc}
     ecc:	00000ea1 	.word	0x00000ea1
     ed0:	42002000 	.word	0x42002000
     ed4:	20003a24 	.word	0x20003a24
     ed8:	00001675 	.word	0x00001675

00000edc <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     edc:	4b5d      	ldr	r3, [pc, #372]	; (1054 <ADC_0_PORT_init+0x178>)
     ede:	2204      	movs	r2, #4
     ee0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ee2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ee6:	629a      	str	r2, [r3, #40]	; 0x28
     ee8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     eec:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eee:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     ef2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ef6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     efa:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     efe:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f02:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f06:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f0a:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f0e:	2108      	movs	r1, #8
     f10:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f12:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f16:	6299      	str	r1, [r3, #40]	; 0x28
     f18:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f1a:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     f1e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f22:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f26:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f2a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f2e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f32:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f36:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
     f3e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f46:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     f4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f4e:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     f52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f5a:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f5e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f62:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f66:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f6a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
     f72:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f7a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     f7e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f92:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f96:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f9a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f9e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fa2:	2110      	movs	r1, #16
     fa4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     faa:	6299      	str	r1, [r3, #40]	; 0x28
     fac:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fae:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     fb2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fb6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fba:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fbe:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fc2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     fc6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fca:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fce:	2120      	movs	r1, #32
     fd0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fd2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     fd6:	6299      	str	r1, [r3, #40]	; 0x28
     fd8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fda:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     fde:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fe2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fe6:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fea:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     fee:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ff2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ff6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ffa:	2140      	movs	r1, #64	; 0x40
     ffc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ffe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1002:	6299      	str	r1, [r3, #40]	; 0x28
    1004:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1006:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    100a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    100e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1012:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1016:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    101a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    101e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1022:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1026:	2180      	movs	r1, #128	; 0x80
    1028:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    102a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    102e:	6299      	str	r1, [r3, #40]	; 0x28
    1030:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1032:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    103a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    103e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1042:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1046:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    104a:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    104e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    1052:	4770      	bx	lr
    1054:	41008000 	.word	0x41008000

00001058 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    1058:	4a04      	ldr	r2, [pc, #16]	; (106c <ADC_0_CLOCK_init+0x14>)
    105a:	6a13      	ldr	r3, [r2, #32]
    105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1060:	6213      	str	r3, [r2, #32]
    1062:	2241      	movs	r2, #65	; 0x41
    1064:	4b02      	ldr	r3, [pc, #8]	; (1070 <ADC_0_CLOCK_init+0x18>)
    1066:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    106a:	4770      	bx	lr
    106c:	40000800 	.word	0x40000800
    1070:	40001c00 	.word	0x40001c00

00001074 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    1074:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <ADC_0_init+0x18>)
    1078:	4798      	blx	r3
	ADC_0_PORT_init();
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <ADC_0_init+0x1c>)
    107c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    107e:	2200      	movs	r2, #0
    1080:	4904      	ldr	r1, [pc, #16]	; (1094 <ADC_0_init+0x20>)
    1082:	4805      	ldr	r0, [pc, #20]	; (1098 <ADC_0_init+0x24>)
    1084:	4b05      	ldr	r3, [pc, #20]	; (109c <ADC_0_init+0x28>)
    1086:	4798      	blx	r3
    1088:	bd08      	pop	{r3, pc}
    108a:	bf00      	nop
    108c:	00001059 	.word	0x00001059
    1090:	00000edd 	.word	0x00000edd
    1094:	43001c00 	.word	0x43001c00
    1098:	20003a34 	.word	0x20003a34
    109c:	000016a5 	.word	0x000016a5

000010a0 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    10a0:	4a04      	ldr	r2, [pc, #16]	; (10b4 <ADC_1_CLOCK_init+0x14>)
    10a2:	6a13      	ldr	r3, [r2, #32]
    10a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    10a8:	6213      	str	r3, [r2, #32]
    10aa:	2240      	movs	r2, #64	; 0x40
    10ac:	4b02      	ldr	r3, [pc, #8]	; (10b8 <ADC_1_CLOCK_init+0x18>)
    10ae:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    10b2:	4770      	bx	lr
    10b4:	40000800 	.word	0x40000800
    10b8:	40001c00 	.word	0x40001c00

000010bc <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    10bc:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    10be:	4b04      	ldr	r3, [pc, #16]	; (10d0 <ADC_1_init+0x14>)
    10c0:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    10c2:	2200      	movs	r2, #0
    10c4:	4903      	ldr	r1, [pc, #12]	; (10d4 <ADC_1_init+0x18>)
    10c6:	4804      	ldr	r0, [pc, #16]	; (10d8 <ADC_1_init+0x1c>)
    10c8:	4b04      	ldr	r3, [pc, #16]	; (10dc <ADC_1_init+0x20>)
    10ca:	4798      	blx	r3
    10cc:	bd08      	pop	{r3, pc}
    10ce:	bf00      	nop
    10d0:	000010a1 	.word	0x000010a1
    10d4:	43002000 	.word	0x43002000
    10d8:	20003aec 	.word	0x20003aec
    10dc:	000016a5 	.word	0x000016a5

000010e0 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    10e0:	4a04      	ldr	r2, [pc, #16]	; (10f4 <DAC_0_CLOCK_init+0x14>)
    10e2:	6a13      	ldr	r3, [r2, #32]
    10e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    10e8:	6213      	str	r3, [r2, #32]
    10ea:	2240      	movs	r2, #64	; 0x40
    10ec:	4b02      	ldr	r3, [pc, #8]	; (10f8 <DAC_0_CLOCK_init+0x18>)
    10ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    10f2:	4770      	bx	lr
    10f4:	40000800 	.word	0x40000800
    10f8:	40001c00 	.word	0x40001c00

000010fc <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    10fc:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    10fe:	4b03      	ldr	r3, [pc, #12]	; (110c <DAC_0_init+0x10>)
    1100:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    1102:	4903      	ldr	r1, [pc, #12]	; (1110 <DAC_0_init+0x14>)
    1104:	4803      	ldr	r0, [pc, #12]	; (1114 <DAC_0_init+0x18>)
    1106:	4b04      	ldr	r3, [pc, #16]	; (1118 <DAC_0_init+0x1c>)
    1108:	4798      	blx	r3
    110a:	bd08      	pop	{r3, pc}
    110c:	000010e1 	.word	0x000010e1
    1110:	43002400 	.word	0x43002400
    1114:	20003a5c 	.word	0x20003a5c
    1118:	000016f1 	.word	0x000016f1

0000111c <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    111c:	b508      	push	{r3, lr}
    111e:	2240      	movs	r2, #64	; 0x40
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <EXTERNAL_IRQ_0_init+0x1c>)
    1122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1126:	4a05      	ldr	r2, [pc, #20]	; (113c <EXTERNAL_IRQ_0_init+0x20>)
    1128:	6953      	ldr	r3, [r2, #20]
    112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    112e:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    1130:	4b03      	ldr	r3, [pc, #12]	; (1140 <EXTERNAL_IRQ_0_init+0x24>)
    1132:	4798      	blx	r3
    1134:	bd08      	pop	{r3, pc}
    1136:	bf00      	nop
    1138:	40001c00 	.word	0x40001c00
    113c:	40000800 	.word	0x40000800
    1140:	000017a9 	.word	0x000017a9

00001144 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    1144:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1146:	4a04      	ldr	r2, [pc, #16]	; (1158 <EVENT_SYSTEM_0_init+0x14>)
    1148:	6993      	ldr	r3, [r2, #24]
    114a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    114e:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    1150:	4b02      	ldr	r3, [pc, #8]	; (115c <EVENT_SYSTEM_0_init+0x18>)
    1152:	4798      	blx	r3
    1154:	bd08      	pop	{r3, pc}
    1156:	bf00      	nop
    1158:	40000800 	.word	0x40000800
    115c:	00001765 	.word	0x00001765

00001160 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1160:	4a02      	ldr	r2, [pc, #8]	; (116c <FLASH_0_CLOCK_init+0xc>)
    1162:	6913      	ldr	r3, [r2, #16]
    1164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1168:	6113      	str	r3, [r2, #16]
    116a:	4770      	bx	lr
    116c:	40000800 	.word	0x40000800

00001170 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    1170:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <FLASH_0_init+0x10>)
    1174:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    1176:	4903      	ldr	r1, [pc, #12]	; (1184 <FLASH_0_init+0x14>)
    1178:	4803      	ldr	r0, [pc, #12]	; (1188 <FLASH_0_init+0x18>)
    117a:	4b04      	ldr	r3, [pc, #16]	; (118c <FLASH_0_init+0x1c>)
    117c:	4798      	blx	r3
    117e:	bd08      	pop	{r3, pc}
    1180:	00001161 	.word	0x00001161
    1184:	41004000 	.word	0x41004000
    1188:	200039e8 	.word	0x200039e8
    118c:	000017e1 	.word	0x000017e1

00001190 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1190:	4b10      	ldr	r3, [pc, #64]	; (11d4 <ModemData_PORT_init+0x44>)
    1192:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    1196:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    119a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    119e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11a2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11aa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11b2:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    11b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11c2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11ca:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    11d2:	4770      	bx	lr
    11d4:	41008000 	.word	0x41008000

000011d8 <ModemData_CLOCK_init>:
    11d8:	4b06      	ldr	r3, [pc, #24]	; (11f4 <ModemData_CLOCK_init+0x1c>)
    11da:	2240      	movs	r2, #64	; 0x40
    11dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    11e0:	224a      	movs	r2, #74	; 0x4a
    11e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    11e6:	4a04      	ldr	r2, [pc, #16]	; (11f8 <ModemData_CLOCK_init+0x20>)
    11e8:	6993      	ldr	r3, [r2, #24]
    11ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    11ee:	6193      	str	r3, [r2, #24]
    11f0:	4770      	bx	lr
    11f2:	bf00      	nop
    11f4:	40001c00 	.word	0x40001c00
    11f8:	40000800 	.word	0x40000800

000011fc <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    11fc:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    11fe:	4b03      	ldr	r3, [pc, #12]	; (120c <ModemData_init+0x10>)
    1200:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    1202:	4b03      	ldr	r3, [pc, #12]	; (1210 <ModemData_init+0x14>)
    1204:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    1206:	4b03      	ldr	r3, [pc, #12]	; (1214 <ModemData_init+0x18>)
    1208:	4798      	blx	r3
    120a:	bd08      	pop	{r3, pc}
    120c:	000011d9 	.word	0x000011d9
    1210:	00000489 	.word	0x00000489
    1214:	00001191 	.word	0x00001191

00001218 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1218:	4b10      	ldr	r3, [pc, #64]	; (125c <SerialDebug_PORT_init+0x44>)
    121a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    121e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1222:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1226:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    122a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    122e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1232:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1236:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    123a:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    123e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1242:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1246:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    124a:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    124e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1252:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1256:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    125a:	4770      	bx	lr
    125c:	41008000 	.word	0x41008000

00001260 <SerialDebug_CLOCK_init>:
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <SerialDebug_CLOCK_init+0x1c>)
    1262:	2240      	movs	r2, #64	; 0x40
    1264:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1268:	224a      	movs	r2, #74	; 0x4a
    126a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    126e:	4a04      	ldr	r2, [pc, #16]	; (1280 <SerialDebug_CLOCK_init+0x20>)
    1270:	6a13      	ldr	r3, [r2, #32]
    1272:	f043 0302 	orr.w	r3, r3, #2
    1276:	6213      	str	r3, [r2, #32]
    1278:	4770      	bx	lr
    127a:	bf00      	nop
    127c:	40001c00 	.word	0x40001c00
    1280:	40000800 	.word	0x40000800

00001284 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    1284:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    1286:	4b03      	ldr	r3, [pc, #12]	; (1294 <SerialDebug_init+0x10>)
    1288:	4798      	blx	r3
	SerialDebugPrintInit();
    128a:	4b03      	ldr	r3, [pc, #12]	; (1298 <SerialDebug_init+0x14>)
    128c:	4798      	blx	r3
	SerialDebug_PORT_init();
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <SerialDebug_init+0x18>)
    1290:	4798      	blx	r3
    1292:	bd08      	pop	{r3, pc}
    1294:	00001261 	.word	0x00001261
    1298:	00000bf1 	.word	0x00000bf1
    129c:	00001219 	.word	0x00001219

000012a0 <delay_driver_init>:
}

void delay_driver_init(void)
{
    12a0:	b508      	push	{r3, lr}
	delay_init(SysTick);
    12a2:	4802      	ldr	r0, [pc, #8]	; (12ac <delay_driver_init+0xc>)
    12a4:	4b02      	ldr	r3, [pc, #8]	; (12b0 <delay_driver_init+0x10>)
    12a6:	4798      	blx	r3
    12a8:	bd08      	pop	{r3, pc}
    12aa:	bf00      	nop
    12ac:	e000e010 	.word	0xe000e010
    12b0:	00001731 	.word	0x00001731

000012b4 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    12b4:	4a04      	ldr	r2, [pc, #16]	; (12c8 <PWM_0_CLOCK_init+0x14>)
    12b6:	6953      	ldr	r3, [r2, #20]
    12b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    12bc:	6153      	str	r3, [r2, #20]
    12be:	2240      	movs	r2, #64	; 0x40
    12c0:	4b02      	ldr	r3, [pc, #8]	; (12cc <PWM_0_CLOCK_init+0x18>)
    12c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    12c6:	4770      	bx	lr
    12c8:	40000800 	.word	0x40000800
    12cc:	40001c00 	.word	0x40001c00

000012d0 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    12d0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <PWM_0_init+0x18>)
    12d4:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <PWM_0_init+0x1c>)
    12d8:	4798      	blx	r3
    12da:	4602      	mov	r2, r0
    12dc:	4904      	ldr	r1, [pc, #16]	; (12f0 <PWM_0_init+0x20>)
    12de:	4805      	ldr	r0, [pc, #20]	; (12f4 <PWM_0_init+0x24>)
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <PWM_0_init+0x28>)
    12e2:	4798      	blx	r3
    12e4:	bd08      	pop	{r3, pc}
    12e6:	bf00      	nop
    12e8:	000012b5 	.word	0x000012b5
    12ec:	00002d81 	.word	0x00002d81
    12f0:	40003800 	.word	0x40003800
    12f4:	200039b0 	.word	0x200039b0
    12f8:	0000183d 	.word	0x0000183d

000012fc <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    12fc:	4a04      	ldr	r2, [pc, #16]	; (1310 <PWM_1_CLOCK_init+0x14>)
    12fe:	6953      	ldr	r3, [r2, #20]
    1300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1304:	6153      	str	r3, [r2, #20]
    1306:	2240      	movs	r2, #64	; 0x40
    1308:	4b02      	ldr	r3, [pc, #8]	; (1314 <PWM_1_CLOCK_init+0x18>)
    130a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    130e:	4770      	bx	lr
    1310:	40000800 	.word	0x40000800
    1314:	40001c00 	.word	0x40001c00

00001318 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    1318:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    131a:	4b05      	ldr	r3, [pc, #20]	; (1330 <PWM_1_init+0x18>)
    131c:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    131e:	4b05      	ldr	r3, [pc, #20]	; (1334 <PWM_1_init+0x1c>)
    1320:	4798      	blx	r3
    1322:	4602      	mov	r2, r0
    1324:	4904      	ldr	r1, [pc, #16]	; (1338 <PWM_1_init+0x20>)
    1326:	4805      	ldr	r0, [pc, #20]	; (133c <PWM_1_init+0x24>)
    1328:	4b05      	ldr	r3, [pc, #20]	; (1340 <PWM_1_init+0x28>)
    132a:	4798      	blx	r3
    132c:	bd08      	pop	{r3, pc}
    132e:	bf00      	nop
    1330:	000012fd 	.word	0x000012fd
    1334:	00002d81 	.word	0x00002d81
    1338:	40003c00 	.word	0x40003c00
    133c:	20003ad0 	.word	0x20003ad0
    1340:	0000183d 	.word	0x0000183d

00001344 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1344:	4a04      	ldr	r2, [pc, #16]	; (1358 <PWM_2_CLOCK_init+0x14>)
    1346:	6993      	ldr	r3, [r2, #24]
    1348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    134c:	6193      	str	r3, [r2, #24]
    134e:	2240      	movs	r2, #64	; 0x40
    1350:	4b02      	ldr	r3, [pc, #8]	; (135c <PWM_2_CLOCK_init+0x18>)
    1352:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    1356:	4770      	bx	lr
    1358:	40000800 	.word	0x40000800
    135c:	40001c00 	.word	0x40001c00

00001360 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    1360:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <PWM_2_init+0x18>)
    1364:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <PWM_2_init+0x1c>)
    1368:	4798      	blx	r3
    136a:	4602      	mov	r2, r0
    136c:	4904      	ldr	r1, [pc, #16]	; (1380 <PWM_2_init+0x20>)
    136e:	4805      	ldr	r0, [pc, #20]	; (1384 <PWM_2_init+0x24>)
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <PWM_2_init+0x28>)
    1372:	4798      	blx	r3
    1374:	bd08      	pop	{r3, pc}
    1376:	bf00      	nop
    1378:	00001345 	.word	0x00001345
    137c:	00002d81 	.word	0x00002d81
    1380:	4101a000 	.word	0x4101a000
    1384:	200039cc 	.word	0x200039cc
    1388:	0000183d 	.word	0x0000183d

0000138c <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    138c:	4a04      	ldr	r2, [pc, #16]	; (13a0 <TIMER_3_CLOCK_init+0x14>)
    138e:	6993      	ldr	r3, [r2, #24]
    1390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1394:	6193      	str	r3, [r2, #24]
    1396:	2240      	movs	r2, #64	; 0x40
    1398:	4b02      	ldr	r3, [pc, #8]	; (13a4 <TIMER_3_CLOCK_init+0x18>)
    139a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    139e:	4770      	bx	lr
    13a0:	40000800 	.word	0x40000800
    13a4:	40001c00 	.word	0x40001c00

000013a8 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    13a8:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <TIMER_3_init+0x18>)
    13ac:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    13ae:	4b05      	ldr	r3, [pc, #20]	; (13c4 <TIMER_3_init+0x1c>)
    13b0:	4798      	blx	r3
    13b2:	4602      	mov	r2, r0
    13b4:	4904      	ldr	r1, [pc, #16]	; (13c8 <TIMER_3_init+0x20>)
    13b6:	4805      	ldr	r0, [pc, #20]	; (13cc <TIMER_3_init+0x24>)
    13b8:	4b05      	ldr	r3, [pc, #20]	; (13d0 <TIMER_3_init+0x28>)
    13ba:	4798      	blx	r3
    13bc:	bd08      	pop	{r3, pc}
    13be:	bf00      	nop
    13c0:	0000138d 	.word	0x0000138d
    13c4:	00002839 	.word	0x00002839
    13c8:	41016000 	.word	0x41016000
    13cc:	20003af0 	.word	0x20003af0
    13d0:	00001959 	.word	0x00001959

000013d4 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    13d4:	4a04      	ldr	r2, [pc, #16]	; (13e8 <TIMER_4_CLOCK_init+0x14>)
    13d6:	6993      	ldr	r3, [r2, #24]
    13d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    13dc:	6193      	str	r3, [r2, #24]
    13de:	2240      	movs	r2, #64	; 0x40
    13e0:	4b02      	ldr	r3, [pc, #8]	; (13ec <TIMER_4_CLOCK_init+0x18>)
    13e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    13e6:	4770      	bx	lr
    13e8:	40000800 	.word	0x40000800
    13ec:	40001c00 	.word	0x40001c00

000013f0 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    13f0:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    13f2:	4b05      	ldr	r3, [pc, #20]	; (1408 <TIMER_4_init+0x18>)
    13f4:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    13f6:	4b05      	ldr	r3, [pc, #20]	; (140c <TIMER_4_init+0x1c>)
    13f8:	4798      	blx	r3
    13fa:	4602      	mov	r2, r0
    13fc:	4904      	ldr	r1, [pc, #16]	; (1410 <TIMER_4_init+0x20>)
    13fe:	4805      	ldr	r0, [pc, #20]	; (1414 <TIMER_4_init+0x24>)
    1400:	4b05      	ldr	r3, [pc, #20]	; (1418 <TIMER_4_init+0x28>)
    1402:	4798      	blx	r3
    1404:	bd08      	pop	{r3, pc}
    1406:	bf00      	nop
    1408:	000013d5 	.word	0x000013d5
    140c:	00002839 	.word	0x00002839
    1410:	41018000 	.word	0x41018000
    1414:	20003a38 	.word	0x20003a38
    1418:	00001959 	.word	0x00001959

0000141c <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    141c:	4a04      	ldr	r2, [pc, #16]	; (1430 <TIMER_5_CLOCK_init+0x14>)
    141e:	69d3      	ldr	r3, [r2, #28]
    1420:	f043 0308 	orr.w	r3, r3, #8
    1424:	61d3      	str	r3, [r2, #28]
    1426:	2240      	movs	r2, #64	; 0x40
    1428:	4b02      	ldr	r3, [pc, #8]	; (1434 <TIMER_5_CLOCK_init+0x18>)
    142a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    142e:	4770      	bx	lr
    1430:	40000800 	.word	0x40000800
    1434:	40001c00 	.word	0x40001c00

00001438 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    1438:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <TIMER_5_init+0x18>)
    143c:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    143e:	4b05      	ldr	r3, [pc, #20]	; (1454 <TIMER_5_init+0x1c>)
    1440:	4798      	blx	r3
    1442:	4602      	mov	r2, r0
    1444:	4904      	ldr	r1, [pc, #16]	; (1458 <TIMER_5_init+0x20>)
    1446:	4805      	ldr	r0, [pc, #20]	; (145c <TIMER_5_init+0x24>)
    1448:	4b05      	ldr	r3, [pc, #20]	; (1460 <TIMER_5_init+0x28>)
    144a:	4798      	blx	r3
    144c:	bd08      	pop	{r3, pc}
    144e:	bf00      	nop
    1450:	0000141d 	.word	0x0000141d
    1454:	00002839 	.word	0x00002839
    1458:	42000c00 	.word	0x42000c00
    145c:	20003a90 	.word	0x20003a90
    1460:	00001959 	.word	0x00001959

00001464 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    1464:	4a04      	ldr	r2, [pc, #16]	; (1478 <TIMER_6_CLOCK_init+0x14>)
    1466:	69d3      	ldr	r3, [r2, #28]
    1468:	f043 0310 	orr.w	r3, r3, #16
    146c:	61d3      	str	r3, [r2, #28]
    146e:	2240      	movs	r2, #64	; 0x40
    1470:	4b02      	ldr	r3, [pc, #8]	; (147c <TIMER_6_CLOCK_init+0x18>)
    1472:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1476:	4770      	bx	lr
    1478:	40000800 	.word	0x40000800
    147c:	40001c00 	.word	0x40001c00

00001480 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    1480:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <TIMER_6_init+0x18>)
    1484:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <TIMER_6_init+0x1c>)
    1488:	4798      	blx	r3
    148a:	4602      	mov	r2, r0
    148c:	4904      	ldr	r1, [pc, #16]	; (14a0 <TIMER_6_init+0x20>)
    148e:	4805      	ldr	r0, [pc, #20]	; (14a4 <TIMER_6_init+0x24>)
    1490:	4b05      	ldr	r3, [pc, #20]	; (14a8 <TIMER_6_init+0x28>)
    1492:	4798      	blx	r3
    1494:	bd08      	pop	{r3, pc}
    1496:	bf00      	nop
    1498:	00001465 	.word	0x00001465
    149c:	00002839 	.word	0x00002839
    14a0:	42001000 	.word	0x42001000
    14a4:	20003ab0 	.word	0x20003ab0
    14a8:	00001959 	.word	0x00001959

000014ac <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    14ac:	4a04      	ldr	r2, [pc, #16]	; (14c0 <TIMER_7_CLOCK_init+0x14>)
    14ae:	6a13      	ldr	r3, [r2, #32]
    14b0:	f043 0310 	orr.w	r3, r3, #16
    14b4:	6213      	str	r3, [r2, #32]
    14b6:	2240      	movs	r2, #64	; 0x40
    14b8:	4b02      	ldr	r3, [pc, #8]	; (14c4 <TIMER_7_CLOCK_init+0x18>)
    14ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    14be:	4770      	bx	lr
    14c0:	40000800 	.word	0x40000800
    14c4:	40001c00 	.word	0x40001c00

000014c8 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    14c8:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <TIMER_7_init+0x18>)
    14cc:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <TIMER_7_init+0x1c>)
    14d0:	4798      	blx	r3
    14d2:	4602      	mov	r2, r0
    14d4:	4904      	ldr	r1, [pc, #16]	; (14e8 <TIMER_7_init+0x20>)
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <TIMER_7_init+0x24>)
    14d8:	4b05      	ldr	r3, [pc, #20]	; (14f0 <TIMER_7_init+0x28>)
    14da:	4798      	blx	r3
    14dc:	bd08      	pop	{r3, pc}
    14de:	bf00      	nop
    14e0:	000014ad 	.word	0x000014ad
    14e4:	00002839 	.word	0x00002839
    14e8:	43001000 	.word	0x43001000
    14ec:	20003a04 	.word	0x20003a04
    14f0:	00001959 	.word	0x00001959

000014f4 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    14f4:	4a02      	ldr	r2, [pc, #8]	; (1500 <WDT_0_CLOCK_init+0xc>)
    14f6:	6953      	ldr	r3, [r2, #20]
    14f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    14fc:	6153      	str	r3, [r2, #20]
    14fe:	4770      	bx	lr
    1500:	40000800 	.word	0x40000800

00001504 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    1504:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    1506:	4b0a      	ldr	r3, [pc, #40]	; (1530 <WDT_0_init+0x2c>)
    1508:	4798      	blx	r3
	ASSERT(wdt && hw);
    150a:	2252      	movs	r2, #82	; 0x52
    150c:	4909      	ldr	r1, [pc, #36]	; (1534 <WDT_0_init+0x30>)
    150e:	2001      	movs	r0, #1
    1510:	4b09      	ldr	r3, [pc, #36]	; (1538 <WDT_0_init+0x34>)
    1512:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    1514:	4809      	ldr	r0, [pc, #36]	; (153c <WDT_0_init+0x38>)
    1516:	4b0a      	ldr	r3, [pc, #40]	; (1540 <WDT_0_init+0x3c>)
    1518:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    151a:	4b0a      	ldr	r3, [pc, #40]	; (1544 <WDT_0_init+0x40>)
    151c:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    151e:	b118      	cbz	r0, 1528 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    1520:	4809      	ldr	r0, [pc, #36]	; (1548 <WDT_0_init+0x44>)
    1522:	4b0a      	ldr	r3, [pc, #40]	; (154c <WDT_0_init+0x48>)
    1524:	4798      	blx	r3
    1526:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    1528:	4809      	ldr	r0, [pc, #36]	; (1550 <WDT_0_init+0x4c>)
    152a:	4b08      	ldr	r3, [pc, #32]	; (154c <WDT_0_init+0x48>)
    152c:	4798      	blx	r3
    152e:	bd08      	pop	{r3, pc}
    1530:	000014f5 	.word	0x000014f5
    1534:	000068f8 	.word	0x000068f8
    1538:	0000199d 	.word	0x0000199d
    153c:	20003a58 	.word	0x20003a58
    1540:	40002000 	.word	0x40002000
    1544:	00002dfd 	.word	0x00002dfd
    1548:	00006924 	.word	0x00006924
    154c:	00000c5d 	.word	0x00000c5d
    1550:	00006914 	.word	0x00006914

00001554 <system_init>:
	}
}

void system_init(void)
{
    1554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1558:	4b28      	ldr	r3, [pc, #160]	; (15fc <system_init+0xa8>)
    155a:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    155c:	4b28      	ldr	r3, [pc, #160]	; (1600 <system_init+0xac>)
    155e:	4798      	blx	r3

	AC_0_init();
    1560:	4b28      	ldr	r3, [pc, #160]	; (1604 <system_init+0xb0>)
    1562:	4798      	blx	r3

	ADC_0_init();
    1564:	4b28      	ldr	r3, [pc, #160]	; (1608 <system_init+0xb4>)
    1566:	4798      	blx	r3

	ADC_1_init();
    1568:	4b28      	ldr	r3, [pc, #160]	; (160c <system_init+0xb8>)
    156a:	4798      	blx	r3

	DAC_0_init();
    156c:	4b28      	ldr	r3, [pc, #160]	; (1610 <system_init+0xbc>)
    156e:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1570:	4b28      	ldr	r3, [pc, #160]	; (1614 <system_init+0xc0>)
    1572:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1574:	4b28      	ldr	r3, [pc, #160]	; (1618 <system_init+0xc4>)
    1576:	4798      	blx	r3

	FLASH_0_init();
    1578:	4b28      	ldr	r3, [pc, #160]	; (161c <system_init+0xc8>)
    157a:	4798      	blx	r3

	SerialDebug_init();
    157c:	4b28      	ldr	r3, [pc, #160]	; (1620 <system_init+0xcc>)
    157e:	4798      	blx	r3
	
	ModemData_init();
    1580:	4b28      	ldr	r3, [pc, #160]	; (1624 <system_init+0xd0>)
    1582:	4798      	blx	r3

	PWM_0_init();
    1584:	4b28      	ldr	r3, [pc, #160]	; (1628 <system_init+0xd4>)
    1586:	4798      	blx	r3

	PWM_1_init();
    1588:	4b28      	ldr	r3, [pc, #160]	; (162c <system_init+0xd8>)
    158a:	4798      	blx	r3

	PWM_2_init();
    158c:	4b28      	ldr	r3, [pc, #160]	; (1630 <system_init+0xdc>)
    158e:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1590:	4c28      	ldr	r4, [pc, #160]	; (1634 <system_init+0xe0>)
    1592:	69a3      	ldr	r3, [r4, #24]
    1594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1598:	61a3      	str	r3, [r4, #24]
    159a:	4f27      	ldr	r7, [pc, #156]	; (1638 <system_init+0xe4>)
    159c:	f04f 0840 	mov.w	r8, #64	; 0x40
    15a0:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    15a4:	4e25      	ldr	r6, [pc, #148]	; (163c <system_init+0xe8>)
    15a6:	47b0      	blx	r6
    15a8:	4602      	mov	r2, r0
    15aa:	4925      	ldr	r1, [pc, #148]	; (1640 <system_init+0xec>)
    15ac:	4825      	ldr	r0, [pc, #148]	; (1644 <system_init+0xf0>)
    15ae:	4d26      	ldr	r5, [pc, #152]	; (1648 <system_init+0xf4>)
    15b0:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    15b2:	69e3      	ldr	r3, [r4, #28]
    15b4:	f043 0320 	orr.w	r3, r3, #32
    15b8:	61e3      	str	r3, [r4, #28]
    15ba:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    15be:	47b0      	blx	r6
    15c0:	4602      	mov	r2, r0
    15c2:	4922      	ldr	r1, [pc, #136]	; (164c <system_init+0xf8>)
    15c4:	4822      	ldr	r0, [pc, #136]	; (1650 <system_init+0xfc>)
    15c6:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    15c8:	69e3      	ldr	r3, [r4, #28]
    15ca:	ea43 0308 	orr.w	r3, r3, r8
    15ce:	61e3      	str	r3, [r4, #28]
    15d0:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    15d4:	47b0      	blx	r6
    15d6:	4602      	mov	r2, r0
    15d8:	491e      	ldr	r1, [pc, #120]	; (1654 <system_init+0x100>)
    15da:	481f      	ldr	r0, [pc, #124]	; (1658 <system_init+0x104>)
    15dc:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    15de:	4b1f      	ldr	r3, [pc, #124]	; (165c <system_init+0x108>)
    15e0:	4798      	blx	r3

	TIMER_4_init();
    15e2:	4b1f      	ldr	r3, [pc, #124]	; (1660 <system_init+0x10c>)
    15e4:	4798      	blx	r3

	TIMER_5_init();
    15e6:	4b1f      	ldr	r3, [pc, #124]	; (1664 <system_init+0x110>)
    15e8:	4798      	blx	r3

	TIMER_6_init();
    15ea:	4b1f      	ldr	r3, [pc, #124]	; (1668 <system_init+0x114>)
    15ec:	4798      	blx	r3

	TIMER_7_init();
    15ee:	4b1f      	ldr	r3, [pc, #124]	; (166c <system_init+0x118>)
    15f0:	4798      	blx	r3
	
	WDT_0_init();
    15f2:	4b1f      	ldr	r3, [pc, #124]	; (1670 <system_init+0x11c>)
    15f4:	4798      	blx	r3
    15f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15fa:	bf00      	nop
    15fc:	00001ce9 	.word	0x00001ce9
    1600:	000012a1 	.word	0x000012a1
    1604:	00000ebd 	.word	0x00000ebd
    1608:	00001075 	.word	0x00001075
    160c:	000010bd 	.word	0x000010bd
    1610:	000010fd 	.word	0x000010fd
    1614:	0000111d 	.word	0x0000111d
    1618:	00001145 	.word	0x00001145
    161c:	00001171 	.word	0x00001171
    1620:	00001285 	.word	0x00001285
    1624:	000011fd 	.word	0x000011fd
    1628:	000012d1 	.word	0x000012d1
    162c:	00001319 	.word	0x00001319
    1630:	00001361 	.word	0x00001361
    1634:	40000800 	.word	0x40000800
    1638:	40001c00 	.word	0x40001c00
    163c:	00002d79 	.word	0x00002d79
    1640:	4101c000 	.word	0x4101c000
    1644:	20003b10 	.word	0x20003b10
    1648:	00001959 	.word	0x00001959
    164c:	42001400 	.word	0x42001400
    1650:	20003a70 	.word	0x20003a70
    1654:	42001800 	.word	0x42001800
    1658:	20003990 	.word	0x20003990
    165c:	000013a9 	.word	0x000013a9
    1660:	000013f1 	.word	0x000013f1
    1664:	00001439 	.word	0x00001439
    1668:	00001481 	.word	0x00001481
    166c:	000014c9 	.word	0x000014c9
    1670:	00001505 	.word	0x00001505

00001674 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1674:	b538      	push	{r3, r4, r5, lr}
    1676:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1678:	4605      	mov	r5, r0
    167a:	b158      	cbz	r0, 1694 <ac_sync_init+0x20>
    167c:	1c08      	adds	r0, r1, #0
    167e:	bf18      	it	ne
    1680:	2001      	movne	r0, #1
    1682:	223b      	movs	r2, #59	; 0x3b
    1684:	4904      	ldr	r1, [pc, #16]	; (1698 <ac_sync_init+0x24>)
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <ac_sync_init+0x28>)
    1688:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    168a:	4621      	mov	r1, r4
    168c:	4628      	mov	r0, r5
    168e:	4b04      	ldr	r3, [pc, #16]	; (16a0 <ac_sync_init+0x2c>)
    1690:	4798      	blx	r3
}
    1692:	bd38      	pop	{r3, r4, r5, pc}
    1694:	2000      	movs	r0, #0
    1696:	e7f4      	b.n	1682 <ac_sync_init+0xe>
    1698:	00006940 	.word	0x00006940
    169c:	0000199d 	.word	0x0000199d
    16a0:	00001bb1 	.word	0x00001bb1

000016a4 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    16a4:	b538      	push	{r3, r4, r5, lr}
    16a6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    16a8:	4605      	mov	r5, r0
    16aa:	b158      	cbz	r0, 16c4 <adc_sync_init+0x20>
    16ac:	1c08      	adds	r0, r1, #0
    16ae:	bf18      	it	ne
    16b0:	2001      	movne	r0, #1
    16b2:	2243      	movs	r2, #67	; 0x43
    16b4:	4904      	ldr	r1, [pc, #16]	; (16c8 <adc_sync_init+0x24>)
    16b6:	4b05      	ldr	r3, [pc, #20]	; (16cc <adc_sync_init+0x28>)
    16b8:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    16ba:	4621      	mov	r1, r4
    16bc:	4628      	mov	r0, r5
    16be:	4b04      	ldr	r3, [pc, #16]	; (16d0 <adc_sync_init+0x2c>)
    16c0:	4798      	blx	r3
}
    16c2:	bd38      	pop	{r3, r4, r5, pc}
    16c4:	2000      	movs	r0, #0
    16c6:	e7f4      	b.n	16b2 <adc_sync_init+0xe>
    16c8:	0000695c 	.word	0x0000695c
    16cc:	0000199d 	.word	0x0000199d
    16d0:	00001c89 	.word	0x00001c89

000016d4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    16d8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    16da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    16dc:	f3bf 8f5f 	dmb	sy
    16e0:	4770      	bx	lr

000016e2 <atomic_leave_critical>:
    16e2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    16e6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    16e8:	f383 8810 	msr	PRIMASK, r3
    16ec:	4770      	bx	lr
	...

000016f0 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    16f0:	b538      	push	{r3, r4, r5, lr}
    16f2:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    16f4:	4604      	mov	r4, r0
    16f6:	b198      	cbz	r0, 1720 <dac_sync_init+0x30>
    16f8:	1c08      	adds	r0, r1, #0
    16fa:	bf18      	it	ne
    16fc:	2001      	movne	r0, #1
    16fe:	223c      	movs	r2, #60	; 0x3c
    1700:	4908      	ldr	r1, [pc, #32]	; (1724 <dac_sync_init+0x34>)
    1702:	4b09      	ldr	r3, [pc, #36]	; (1728 <dac_sync_init+0x38>)
    1704:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1706:	4629      	mov	r1, r5
    1708:	4620      	mov	r0, r4
    170a:	4b08      	ldr	r3, [pc, #32]	; (172c <dac_sync_init+0x3c>)
    170c:	4798      	blx	r3
	if (rc) {
    170e:	4602      	mov	r2, r0
    1710:	b920      	cbnz	r0, 171c <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1712:	2300      	movs	r3, #0
    1714:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1716:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1718:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    171a:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    171c:	4610      	mov	r0, r2
    171e:	bd38      	pop	{r3, r4, r5, pc}
    1720:	2000      	movs	r0, #0
    1722:	e7ec      	b.n	16fe <dac_sync_init+0xe>
    1724:	00006978 	.word	0x00006978
    1728:	0000199d 	.word	0x0000199d
    172c:	00001da1 	.word	0x00001da1

00001730 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1730:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1732:	4b02      	ldr	r3, [pc, #8]	; (173c <delay_init+0xc>)
    1734:	6018      	str	r0, [r3, #0]
    1736:	4b02      	ldr	r3, [pc, #8]	; (1740 <delay_init+0x10>)
    1738:	4798      	blx	r3
    173a:	bd08      	pop	{r3, pc}
    173c:	20000204 	.word	0x20000204
    1740:	00002535 	.word	0x00002535

00001744 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1744:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1746:	4b04      	ldr	r3, [pc, #16]	; (1758 <delay_ms+0x14>)
    1748:	681c      	ldr	r4, [r3, #0]
    174a:	4b04      	ldr	r3, [pc, #16]	; (175c <delay_ms+0x18>)
    174c:	4798      	blx	r3
    174e:	4601      	mov	r1, r0
    1750:	4620      	mov	r0, r4
    1752:	4b03      	ldr	r3, [pc, #12]	; (1760 <delay_ms+0x1c>)
    1754:	4798      	blx	r3
    1756:	bd10      	pop	{r4, pc}
    1758:	20000204 	.word	0x20000204
    175c:	00001cdd 	.word	0x00001cdd
    1760:	00002549 	.word	0x00002549

00001764 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1764:	b508      	push	{r3, lr}
	return _event_system_init();
    1766:	4b01      	ldr	r3, [pc, #4]	; (176c <event_system_init+0x8>)
    1768:	4798      	blx	r3
}
    176a:	bd08      	pop	{r3, pc}
    176c:	00001fdd 	.word	0x00001fdd

00001770 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1770:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1772:	4b0c      	ldr	r3, [pc, #48]	; (17a4 <process_ext_irq+0x34>)
    1774:	685c      	ldr	r4, [r3, #4]
    1776:	42a0      	cmp	r0, r4
    1778:	d00e      	beq.n	1798 <process_ext_irq+0x28>
    177a:	2301      	movs	r3, #1
    177c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    177e:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1780:	25ff      	movs	r5, #255	; 0xff
    1782:	e003      	b.n	178c <process_ext_irq+0x1c>
    1784:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1786:	185a      	adds	r2, r3, r1
    1788:	0852      	lsrs	r2, r2, #1
    178a:	d104      	bne.n	1796 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    178c:	42a0      	cmp	r0, r4
    178e:	d9f9      	bls.n	1784 <process_ext_irq+0x14>
	while (upper >= lower) {
    1790:	b13b      	cbz	r3, 17a2 <process_ext_irq+0x32>
			lower = middle + 1;
    1792:	4631      	mov	r1, r6
    1794:	e7f7      	b.n	1786 <process_ext_irq+0x16>
    1796:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <process_ext_irq+0x34>)
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	b10b      	cbz	r3, 17a2 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    179e:	4798      	blx	r3
    17a0:	bd70      	pop	{r4, r5, r6, pc}
    17a2:	bd70      	pop	{r4, r5, r6, pc}
    17a4:	20000208 	.word	0x20000208

000017a8 <ext_irq_init>:
{
    17a8:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <ext_irq_init+0x18>)
    17ac:	f04f 32ff 	mov.w	r2, #4294967295
    17b0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    17b2:	2200      	movs	r2, #0
    17b4:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    17b6:	4803      	ldr	r0, [pc, #12]	; (17c4 <ext_irq_init+0x1c>)
    17b8:	4b03      	ldr	r3, [pc, #12]	; (17c8 <ext_irq_init+0x20>)
    17ba:	4798      	blx	r3
}
    17bc:	bd08      	pop	{r3, pc}
    17be:	bf00      	nop
    17c0:	20000208 	.word	0x20000208
    17c4:	00001771 	.word	0x00001771
    17c8:	00001f5d 	.word	0x00001f5d

000017cc <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    17cc:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    17ce:	6943      	ldr	r3, [r0, #20]
    17d0:	b103      	cbz	r3, 17d4 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    17d2:	4798      	blx	r3
    17d4:	bd08      	pop	{r3, pc}

000017d6 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    17d6:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    17d8:	6983      	ldr	r3, [r0, #24]
    17da:	b103      	cbz	r3, 17de <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    17dc:	4798      	blx	r3
    17de:	bd08      	pop	{r3, pc}

000017e0 <flash_init>:
{
    17e0:	b538      	push	{r3, r4, r5, lr}
    17e2:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    17e4:	4604      	mov	r4, r0
    17e6:	b190      	cbz	r0, 180e <flash_init+0x2e>
    17e8:	1c08      	adds	r0, r1, #0
    17ea:	bf18      	it	ne
    17ec:	2001      	movne	r0, #1
    17ee:	2242      	movs	r2, #66	; 0x42
    17f0:	4908      	ldr	r1, [pc, #32]	; (1814 <flash_init+0x34>)
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <flash_init+0x38>)
    17f4:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    17f6:	4629      	mov	r1, r5
    17f8:	4620      	mov	r0, r4
    17fa:	4b08      	ldr	r3, [pc, #32]	; (181c <flash_init+0x3c>)
    17fc:	4798      	blx	r3
	if (rc) {
    17fe:	4603      	mov	r3, r0
    1800:	b918      	cbnz	r0, 180a <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1802:	4a07      	ldr	r2, [pc, #28]	; (1820 <flash_init+0x40>)
    1804:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1806:	4a07      	ldr	r2, [pc, #28]	; (1824 <flash_init+0x44>)
    1808:	6062      	str	r2, [r4, #4]
}
    180a:	4618      	mov	r0, r3
    180c:	bd38      	pop	{r3, r4, r5, pc}
    180e:	2000      	movs	r0, #0
    1810:	e7ed      	b.n	17ee <flash_init+0xe>
    1812:	bf00      	nop
    1814:	00006994 	.word	0x00006994
    1818:	0000199d 	.word	0x0000199d
    181c:	00002119 	.word	0x00002119
    1820:	000017cd 	.word	0x000017cd
    1824:	000017d7 	.word	0x000017d7

00001828 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1828:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    182a:	6943      	ldr	r3, [r0, #20]
    182c:	b103      	cbz	r3, 1830 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    182e:	4798      	blx	r3
    1830:	bd08      	pop	{r3, pc}

00001832 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1832:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1834:	6983      	ldr	r3, [r0, #24]
    1836:	b103      	cbz	r3, 183a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1838:	4798      	blx	r3
    183a:	bd08      	pop	{r3, pc}

0000183c <pwm_init>:
{
    183c:	b538      	push	{r3, r4, r5, lr}
    183e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1840:	4604      	mov	r4, r0
    1842:	b180      	cbz	r0, 1866 <pwm_init+0x2a>
    1844:	1c08      	adds	r0, r1, #0
    1846:	bf18      	it	ne
    1848:	2001      	movne	r0, #1
    184a:	223d      	movs	r2, #61	; 0x3d
    184c:	4907      	ldr	r1, [pc, #28]	; (186c <pwm_init+0x30>)
    184e:	4b08      	ldr	r3, [pc, #32]	; (1870 <pwm_init+0x34>)
    1850:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1852:	4629      	mov	r1, r5
    1854:	4620      	mov	r0, r4
    1856:	4b07      	ldr	r3, [pc, #28]	; (1874 <pwm_init+0x38>)
    1858:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <pwm_init+0x3c>)
    185c:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <pwm_init+0x40>)
    1860:	6063      	str	r3, [r4, #4]
}
    1862:	2000      	movs	r0, #0
    1864:	bd38      	pop	{r3, r4, r5, pc}
    1866:	2000      	movs	r0, #0
    1868:	e7ef      	b.n	184a <pwm_init+0xe>
    186a:	bf00      	nop
    186c:	000069ac 	.word	0x000069ac
    1870:	0000199d 	.word	0x0000199d
    1874:	00002c61 	.word	0x00002c61
    1878:	00001829 	.word	0x00001829
    187c:	00001833 	.word	0x00001833

00001880 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1882:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1884:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1886:	b12f      	cbz	r7, 1894 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1888:	688d      	ldr	r5, [r1, #8]
    188a:	463c      	mov	r4, r7
    188c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    188e:	f1c2 0e01 	rsb	lr, r2, #1
    1892:	e00b      	b.n	18ac <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1894:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <timer_add_timer_task+0x50>)
    1896:	4798      	blx	r3
		return;
    1898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    189a:	4473      	add	r3, lr
    189c:	68a0      	ldr	r0, [r4, #8]
    189e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    18a0:	42ab      	cmp	r3, r5
    18a2:	d20a      	bcs.n	18ba <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    18a4:	6823      	ldr	r3, [r4, #0]
    18a6:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    18a8:	b153      	cbz	r3, 18c0 <timer_add_timer_task+0x40>
    18aa:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    18ac:	6863      	ldr	r3, [r4, #4]
    18ae:	4293      	cmp	r3, r2
    18b0:	d8f3      	bhi.n	189a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    18b2:	68a0      	ldr	r0, [r4, #8]
    18b4:	4403      	add	r3, r0
    18b6:	1a9b      	subs	r3, r3, r2
    18b8:	e7f2      	b.n	18a0 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    18ba:	42a7      	cmp	r7, r4
    18bc:	d004      	beq.n	18c8 <timer_add_timer_task+0x48>
    18be:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    18c0:	4620      	mov	r0, r4
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <timer_add_timer_task+0x54>)
    18c4:	4798      	blx	r3
    18c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    18c8:	4660      	mov	r0, ip
    18ca:	4b01      	ldr	r3, [pc, #4]	; (18d0 <timer_add_timer_task+0x50>)
    18cc:	4798      	blx	r3
    18ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18d0:	000019c5 	.word	0x000019c5
    18d4:	000019f1 	.word	0x000019f1

000018d8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    18d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    18dc:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    18de:	6907      	ldr	r7, [r0, #16]
    18e0:	3701      	adds	r7, #1
    18e2:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    18e4:	7e03      	ldrb	r3, [r0, #24]
    18e6:	f013 0f01 	tst.w	r3, #1
    18ea:	d113      	bne.n	1914 <timer_process_counted+0x3c>
    18ec:	7e03      	ldrb	r3, [r0, #24]
    18ee:	f013 0f02 	tst.w	r3, #2
    18f2:	d10f      	bne.n	1914 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    18f4:	b354      	cbz	r4, 194c <timer_process_counted+0x74>
    18f6:	6863      	ldr	r3, [r4, #4]
    18f8:	1afb      	subs	r3, r7, r3
    18fa:	68a2      	ldr	r2, [r4, #8]
    18fc:	4293      	cmp	r3, r2
    18fe:	d307      	bcc.n	1910 <timer_process_counted+0x38>
    1900:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1902:	f100 0814 	add.w	r8, r0, #20
    1906:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1950 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    190a:	f8df a048 	ldr.w	sl, [pc, #72]	; 1954 <timer_process_counted+0x7c>
    190e:	e012      	b.n	1936 <timer_process_counted+0x5e>
    1910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1914:	7e03      	ldrb	r3, [r0, #24]
    1916:	f043 0302 	orr.w	r3, r3, #2
    191a:	7603      	strb	r3, [r0, #24]
		return;
    191c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1920:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1922:	68e3      	ldr	r3, [r4, #12]
    1924:	4620      	mov	r0, r4
    1926:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1928:	b185      	cbz	r5, 194c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    192a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    192c:	686b      	ldr	r3, [r5, #4]
    192e:	1afb      	subs	r3, r7, r3
    1930:	68aa      	ldr	r2, [r5, #8]
    1932:	4293      	cmp	r3, r2
    1934:	d30a      	bcc.n	194c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1936:	4640      	mov	r0, r8
    1938:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    193a:	7c23      	ldrb	r3, [r4, #16]
    193c:	2b01      	cmp	r3, #1
    193e:	d1ef      	bne.n	1920 <timer_process_counted+0x48>
			tmp->time_label = time;
    1940:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1942:	463a      	mov	r2, r7
    1944:	4621      	mov	r1, r4
    1946:	4640      	mov	r0, r8
    1948:	47d0      	blx	sl
    194a:	e7e9      	b.n	1920 <timer_process_counted+0x48>
    194c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1950:	000019f9 	.word	0x000019f9
    1954:	00001881 	.word	0x00001881

00001958 <timer_init>:
{
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	460e      	mov	r6, r1
    195c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    195e:	4604      	mov	r4, r0
    1960:	b190      	cbz	r0, 1988 <timer_init+0x30>
    1962:	b199      	cbz	r1, 198c <timer_init+0x34>
    1964:	1c10      	adds	r0, r2, #0
    1966:	bf18      	it	ne
    1968:	2001      	movne	r0, #1
    196a:	2245      	movs	r2, #69	; 0x45
    196c:	4908      	ldr	r1, [pc, #32]	; (1990 <timer_init+0x38>)
    196e:	4b09      	ldr	r3, [pc, #36]	; (1994 <timer_init+0x3c>)
    1970:	4798      	blx	r3
	descr->func = func;
    1972:	4620      	mov	r0, r4
    1974:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1978:	682b      	ldr	r3, [r5, #0]
    197a:	4631      	mov	r1, r6
    197c:	4798      	blx	r3
	descr->time                           = 0;
    197e:	2000      	movs	r0, #0
    1980:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <timer_init+0x40>)
    1984:	6063      	str	r3, [r4, #4]
}
    1986:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1988:	2000      	movs	r0, #0
    198a:	e7ee      	b.n	196a <timer_init+0x12>
    198c:	2000      	movs	r0, #0
    198e:	e7ec      	b.n	196a <timer_init+0x12>
    1990:	000069c4 	.word	0x000069c4
    1994:	0000199d 	.word	0x0000199d
    1998:	000018d9 	.word	0x000018d9

0000199c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    199c:	b900      	cbnz	r0, 19a0 <assert+0x4>
		__asm("BKPT #0");
    199e:	be00      	bkpt	0x0000
    19a0:	4770      	bx	lr

000019a2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    19a2:	6803      	ldr	r3, [r0, #0]
    19a4:	b14b      	cbz	r3, 19ba <is_list_element+0x18>
		if (it == element) {
    19a6:	428b      	cmp	r3, r1
    19a8:	d009      	beq.n	19be <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    19aa:	681b      	ldr	r3, [r3, #0]
    19ac:	b11b      	cbz	r3, 19b6 <is_list_element+0x14>
		if (it == element) {
    19ae:	4299      	cmp	r1, r3
    19b0:	d1fb      	bne.n	19aa <is_list_element+0x8>
			return true;
    19b2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    19b4:	4770      	bx	lr
	return false;
    19b6:	2000      	movs	r0, #0
    19b8:	4770      	bx	lr
    19ba:	2000      	movs	r0, #0
    19bc:	4770      	bx	lr
			return true;
    19be:	2001      	movs	r0, #1
    19c0:	4770      	bx	lr
	...

000019c4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    19c4:	b538      	push	{r3, r4, r5, lr}
    19c6:	4604      	mov	r4, r0
    19c8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    19ca:	4b06      	ldr	r3, [pc, #24]	; (19e4 <list_insert_as_head+0x20>)
    19cc:	4798      	blx	r3
    19ce:	f080 0001 	eor.w	r0, r0, #1
    19d2:	2243      	movs	r2, #67	; 0x43
    19d4:	4904      	ldr	r1, [pc, #16]	; (19e8 <list_insert_as_head+0x24>)
    19d6:	b2c0      	uxtb	r0, r0
    19d8:	4b04      	ldr	r3, [pc, #16]	; (19ec <list_insert_as_head+0x28>)
    19da:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    19dc:	6823      	ldr	r3, [r4, #0]
    19de:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    19e0:	6025      	str	r5, [r4, #0]
    19e2:	bd38      	pop	{r3, r4, r5, pc}
    19e4:	000019a3 	.word	0x000019a3
    19e8:	000069dc 	.word	0x000069dc
    19ec:	0000199d 	.word	0x0000199d

000019f0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    19f0:	6803      	ldr	r3, [r0, #0]
    19f2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    19f4:	6001      	str	r1, [r0, #0]
    19f6:	4770      	bx	lr

000019f8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    19f8:	6803      	ldr	r3, [r0, #0]
    19fa:	b10b      	cbz	r3, 1a00 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    19fc:	681a      	ldr	r2, [r3, #0]
    19fe:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1a00:	4618      	mov	r0, r3
    1a02:	4770      	bx	lr

00001a04 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1a04:	b570      	push	{r4, r5, r6, lr}
    1a06:	460e      	mov	r6, r1
    1a08:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1a0a:	4604      	mov	r4, r0
    1a0c:	b178      	cbz	r0, 1a2e <ringbuffer_init+0x2a>
    1a0e:	b181      	cbz	r1, 1a32 <ringbuffer_init+0x2e>
    1a10:	b1a2      	cbz	r2, 1a3c <ringbuffer_init+0x38>
    1a12:	2001      	movs	r0, #1
    1a14:	2232      	movs	r2, #50	; 0x32
    1a16:	490d      	ldr	r1, [pc, #52]	; (1a4c <ringbuffer_init+0x48>)
    1a18:	4b0d      	ldr	r3, [pc, #52]	; (1a50 <ringbuffer_init+0x4c>)
    1a1a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1a1c:	1e6b      	subs	r3, r5, #1
    1a1e:	421d      	tst	r5, r3
    1a20:	d109      	bne.n	1a36 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1a22:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1a24:	2000      	movs	r0, #0
    1a26:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1a28:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1a2a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1a2c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1a2e:	2000      	movs	r0, #0
    1a30:	e7f0      	b.n	1a14 <ringbuffer_init+0x10>
    1a32:	2000      	movs	r0, #0
    1a34:	e7ee      	b.n	1a14 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1a36:	f06f 000c 	mvn.w	r0, #12
    1a3a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1a3c:	2232      	movs	r2, #50	; 0x32
    1a3e:	4903      	ldr	r1, [pc, #12]	; (1a4c <ringbuffer_init+0x48>)
    1a40:	2000      	movs	r0, #0
    1a42:	4b03      	ldr	r3, [pc, #12]	; (1a50 <ringbuffer_init+0x4c>)
    1a44:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1a46:	1e6b      	subs	r3, r5, #1
    1a48:	e7eb      	b.n	1a22 <ringbuffer_init+0x1e>
    1a4a:	bf00      	nop
    1a4c:	000069fc 	.word	0x000069fc
    1a50:	0000199d 	.word	0x0000199d

00001a54 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1a58:	4604      	mov	r4, r0
    1a5a:	b1a0      	cbz	r0, 1a86 <ringbuffer_get+0x32>
    1a5c:	1c08      	adds	r0, r1, #0
    1a5e:	bf18      	it	ne
    1a60:	2001      	movne	r0, #1
    1a62:	224a      	movs	r2, #74	; 0x4a
    1a64:	490a      	ldr	r1, [pc, #40]	; (1a90 <ringbuffer_get+0x3c>)
    1a66:	4b0b      	ldr	r3, [pc, #44]	; (1a94 <ringbuffer_get+0x40>)
    1a68:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1a6a:	68a3      	ldr	r3, [r4, #8]
    1a6c:	68e2      	ldr	r2, [r4, #12]
    1a6e:	429a      	cmp	r2, r3
    1a70:	d00b      	beq.n	1a8a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1a72:	6862      	ldr	r2, [r4, #4]
    1a74:	4013      	ands	r3, r2
    1a76:	6822      	ldr	r2, [r4, #0]
    1a78:	5cd3      	ldrb	r3, [r2, r3]
    1a7a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1a7c:	68a3      	ldr	r3, [r4, #8]
    1a7e:	3301      	adds	r3, #1
    1a80:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1a82:	2000      	movs	r0, #0
    1a84:	bd38      	pop	{r3, r4, r5, pc}
    1a86:	2000      	movs	r0, #0
    1a88:	e7eb      	b.n	1a62 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1a8a:	f06f 0009 	mvn.w	r0, #9
}
    1a8e:	bd38      	pop	{r3, r4, r5, pc}
    1a90:	000069fc 	.word	0x000069fc
    1a94:	0000199d 	.word	0x0000199d

00001a98 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1a98:	b538      	push	{r3, r4, r5, lr}
    1a9a:	460d      	mov	r5, r1
	ASSERT(rb);
    1a9c:	4604      	mov	r4, r0
    1a9e:	225b      	movs	r2, #91	; 0x5b
    1aa0:	490b      	ldr	r1, [pc, #44]	; (1ad0 <ringbuffer_put+0x38>)
    1aa2:	3000      	adds	r0, #0
    1aa4:	bf18      	it	ne
    1aa6:	2001      	movne	r0, #1
    1aa8:	4b0a      	ldr	r3, [pc, #40]	; (1ad4 <ringbuffer_put+0x3c>)
    1aaa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1aac:	68e3      	ldr	r3, [r4, #12]
    1aae:	6862      	ldr	r2, [r4, #4]
    1ab0:	4013      	ands	r3, r2
    1ab2:	6822      	ldr	r2, [r4, #0]
    1ab4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1ab6:	68e3      	ldr	r3, [r4, #12]
    1ab8:	6861      	ldr	r1, [r4, #4]
    1aba:	68a2      	ldr	r2, [r4, #8]
    1abc:	1a9a      	subs	r2, r3, r2
    1abe:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1ac0:	bf84      	itt	hi
    1ac2:	1a59      	subhi	r1, r3, r1
    1ac4:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1ac6:	3301      	adds	r3, #1
    1ac8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1aca:	2000      	movs	r0, #0
    1acc:	bd38      	pop	{r3, r4, r5, pc}
    1ace:	bf00      	nop
    1ad0:	000069fc 	.word	0x000069fc
    1ad4:	0000199d 	.word	0x0000199d

00001ad8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1ad8:	b510      	push	{r4, lr}
	ASSERT(rb);
    1ada:	4604      	mov	r4, r0
    1adc:	2271      	movs	r2, #113	; 0x71
    1ade:	4905      	ldr	r1, [pc, #20]	; (1af4 <ringbuffer_num+0x1c>)
    1ae0:	3000      	adds	r0, #0
    1ae2:	bf18      	it	ne
    1ae4:	2001      	movne	r0, #1
    1ae6:	4b04      	ldr	r3, [pc, #16]	; (1af8 <ringbuffer_num+0x20>)
    1ae8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1aea:	68e0      	ldr	r0, [r4, #12]
    1aec:	68a3      	ldr	r3, [r4, #8]
}
    1aee:	1ac0      	subs	r0, r0, r3
    1af0:	bd10      	pop	{r4, pc}
    1af2:	bf00      	nop
    1af4:	000069fc 	.word	0x000069fc
    1af8:	0000199d 	.word	0x0000199d

00001afc <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1afc:	b510      	push	{r4, lr}
	ASSERT(rb);
    1afe:	4604      	mov	r4, r0
    1b00:	227b      	movs	r2, #123	; 0x7b
    1b02:	4905      	ldr	r1, [pc, #20]	; (1b18 <ringbuffer_flush+0x1c>)
    1b04:	3000      	adds	r0, #0
    1b06:	bf18      	it	ne
    1b08:	2001      	movne	r0, #1
    1b0a:	4b04      	ldr	r3, [pc, #16]	; (1b1c <ringbuffer_flush+0x20>)
    1b0c:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1b0e:	68e3      	ldr	r3, [r4, #12]
    1b10:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1b12:	2000      	movs	r0, #0
    1b14:	bd10      	pop	{r4, pc}
    1b16:	bf00      	nop
    1b18:	000069fc 	.word	0x000069fc
    1b1c:	0000199d 	.word	0x0000199d

00001b20 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1b20:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1b22:	4a06      	ldr	r2, [pc, #24]	; (1b3c <_sbrk+0x1c>)
    1b24:	6812      	ldr	r2, [r2, #0]
    1b26:	b122      	cbz	r2, 1b32 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1b28:	4a04      	ldr	r2, [pc, #16]	; (1b3c <_sbrk+0x1c>)
    1b2a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1b2c:	4403      	add	r3, r0
    1b2e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1b30:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1b32:	4903      	ldr	r1, [pc, #12]	; (1b40 <_sbrk+0x20>)
    1b34:	4a01      	ldr	r2, [pc, #4]	; (1b3c <_sbrk+0x1c>)
    1b36:	6011      	str	r1, [r2, #0]
    1b38:	e7f6      	b.n	1b28 <_sbrk+0x8>
    1b3a:	bf00      	nop
    1b3c:	20000210 	.word	0x20000210
    1b40:	20013b48 	.word	0x20013b48

00001b44 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1b44:	b510      	push	{r4, lr}
    1b46:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1b48:	f44f 7281 	mov.w	r2, #258	; 0x102
    1b4c:	4915      	ldr	r1, [pc, #84]	; (1ba4 <_ac_init+0x60>)
    1b4e:	4816      	ldr	r0, [pc, #88]	; (1ba8 <_ac_init+0x64>)
    1b50:	4284      	cmp	r4, r0
    1b52:	bf14      	ite	ne
    1b54:	2000      	movne	r0, #0
    1b56:	2001      	moveq	r0, #1
    1b58:	4b14      	ldr	r3, [pc, #80]	; (1bac <_ac_init+0x68>)
    1b5a:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1b5c:	6a23      	ldr	r3, [r4, #32]
    1b5e:	f013 0f01 	tst.w	r3, #1
    1b62:	d1fb      	bne.n	1b5c <_ac_init+0x18>
    1b64:	6a23      	ldr	r3, [r4, #32]
    1b66:	f013 0f03 	tst.w	r3, #3
    1b6a:	d1fb      	bne.n	1b64 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1b6c:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1b6e:	f013 0f02 	tst.w	r3, #2
    1b72:	d114      	bne.n	1b9e <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1b74:	6a23      	ldr	r3, [r4, #32]
    1b76:	f013 0f01 	tst.w	r3, #1
    1b7a:	d1fb      	bne.n	1b74 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1b7c:	7823      	ldrb	r3, [r4, #0]
    1b7e:	f043 0301 	orr.w	r3, r3, #1
    1b82:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1b84:	6a23      	ldr	r3, [r4, #32]
    1b86:	f013 0f01 	tst.w	r3, #1
    1b8a:	d1fb      	bne.n	1b84 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1b8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1b90:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1b92:	2000      	movs	r0, #0
    1b94:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1b96:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1b98:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1b9a:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1b9c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1b9e:	f06f 0010 	mvn.w	r0, #16
}
    1ba2:	bd10      	pop	{r4, pc}
    1ba4:	00006a20 	.word	0x00006a20
    1ba8:	42002000 	.word	0x42002000
    1bac:	0000199d 	.word	0x0000199d

00001bb0 <_ac_sync_init>:
{
    1bb0:	b538      	push	{r3, r4, r5, lr}
    1bb2:	460c      	mov	r4, r1
	ASSERT(device);
    1bb4:	4605      	mov	r5, r0
    1bb6:	226c      	movs	r2, #108	; 0x6c
    1bb8:	4905      	ldr	r1, [pc, #20]	; (1bd0 <_ac_sync_init+0x20>)
    1bba:	3000      	adds	r0, #0
    1bbc:	bf18      	it	ne
    1bbe:	2001      	movne	r0, #1
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <_ac_sync_init+0x24>)
    1bc2:	4798      	blx	r3
	device->hw = hw;
    1bc4:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1bc6:	4620      	mov	r0, r4
    1bc8:	4b03      	ldr	r3, [pc, #12]	; (1bd8 <_ac_sync_init+0x28>)
    1bca:	4798      	blx	r3
}
    1bcc:	bd38      	pop	{r3, r4, r5, pc}
    1bce:	bf00      	nop
    1bd0:	00006a20 	.word	0x00006a20
    1bd4:	0000199d 	.word	0x0000199d
    1bd8:	00001b45 	.word	0x00001b45

00001bdc <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1bdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1bde:	f013 0f01 	tst.w	r3, #1
    1be2:	d1fb      	bne.n	1bdc <_adc_init>
    1be4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1be6:	f013 0f03 	tst.w	r3, #3
    1bea:	d1fb      	bne.n	1be4 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1bec:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1bee:	f013 0f02 	tst.w	r3, #2
    1bf2:	d12a      	bne.n	1c4a <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1bf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1bf6:	f013 0f01 	tst.w	r3, #1
    1bfa:	d1fb      	bne.n	1bf4 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1bfc:	8803      	ldrh	r3, [r0, #0]
    1bfe:	b29b      	uxth	r3, r3
    1c00:	f043 0301 	orr.w	r3, r3, #1
    1c04:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1c06:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1c08:	f013 0f01 	tst.w	r3, #1
    1c0c:	d1fb      	bne.n	1c06 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1c0e:	2216      	movs	r2, #22
    1c10:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <_adc_init+0x74>)
    1c12:	fb02 3101 	mla	r1, r2, r1, r3
    1c16:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1c18:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1c1a:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1c1c:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1c1e:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1c20:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1c22:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1c24:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1c26:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1c28:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1c2a:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1c2c:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1c2e:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1c30:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1c32:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1c34:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1c36:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1c38:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1c3a:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1c3c:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1c3e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1c40:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1c42:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1c44:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    1c46:	2000      	movs	r0, #0
    1c48:	4770      	bx	lr
		return ERR_DENIED;
    1c4a:	f06f 0010 	mvn.w	r0, #16
}
    1c4e:	4770      	bx	lr
    1c50:	00006a34 	.word	0x00006a34

00001c54 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1c54:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1c58:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1c5c:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1c60:	b148      	cbz	r0, 1c76 <_adc_get_regs+0x22>
    1c62:	2801      	cmp	r0, #1
    1c64:	d009      	beq.n	1c7a <_adc_get_regs+0x26>
{
    1c66:	b508      	push	{r3, lr}
	ASSERT(false);
    1c68:	2291      	movs	r2, #145	; 0x91
    1c6a:	4905      	ldr	r1, [pc, #20]	; (1c80 <_adc_get_regs+0x2c>)
    1c6c:	2000      	movs	r0, #0
    1c6e:	4b05      	ldr	r3, [pc, #20]	; (1c84 <_adc_get_regs+0x30>)
    1c70:	4798      	blx	r3
	return 0;
    1c72:	2000      	movs	r0, #0
    1c74:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1c76:	2000      	movs	r0, #0
    1c78:	4770      	bx	lr
    1c7a:	2001      	movs	r0, #1
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop
    1c80:	00006a60 	.word	0x00006a60
    1c84:	0000199d 	.word	0x0000199d

00001c88 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1c88:	b538      	push	{r3, r4, r5, lr}
    1c8a:	460c      	mov	r4, r1
	ASSERT(device);
    1c8c:	4605      	mov	r5, r0
    1c8e:	22d5      	movs	r2, #213	; 0xd5
    1c90:	4907      	ldr	r1, [pc, #28]	; (1cb0 <_adc_sync_init+0x28>)
    1c92:	3000      	adds	r0, #0
    1c94:	bf18      	it	ne
    1c96:	2001      	movne	r0, #1
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <_adc_sync_init+0x2c>)
    1c9a:	4798      	blx	r3

	device->hw = hw;
    1c9c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1c9e:	4620      	mov	r0, r4
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <_adc_sync_init+0x30>)
    1ca2:	4798      	blx	r3
    1ca4:	4601      	mov	r1, r0
    1ca6:	4620      	mov	r0, r4
    1ca8:	4b04      	ldr	r3, [pc, #16]	; (1cbc <_adc_sync_init+0x34>)
    1caa:	4798      	blx	r3
}
    1cac:	bd38      	pop	{r3, r4, r5, pc}
    1cae:	bf00      	nop
    1cb0:	00006a60 	.word	0x00006a60
    1cb4:	0000199d 	.word	0x0000199d
    1cb8:	00001c55 	.word	0x00001c55
    1cbc:	00001bdd 	.word	0x00001bdd

00001cc0 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1cc0:	0943      	lsrs	r3, r0, #5
    1cc2:	f000 001f 	and.w	r0, r0, #31
    1cc6:	2201      	movs	r2, #1
    1cc8:	fa02 f000 	lsl.w	r0, r2, r0
    1ccc:	3340      	adds	r3, #64	; 0x40
    1cce:	4a02      	ldr	r2, [pc, #8]	; (1cd8 <_irq_set+0x18>)
    1cd0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1cd4:	4770      	bx	lr
    1cd6:	bf00      	nop
    1cd8:	e000e100 	.word	0xe000e100

00001cdc <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1cdc:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1ce0:	fb03 f000 	mul.w	r0, r3, r0
    1ce4:	4770      	bx	lr
	...

00001ce8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1ce8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1cea:	4a0c      	ldr	r2, [pc, #48]	; (1d1c <_init_chip+0x34>)
    1cec:	8813      	ldrh	r3, [r2, #0]
    1cee:	b29b      	uxth	r3, r3
    1cf0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1cf2:	4b0b      	ldr	r3, [pc, #44]	; (1d20 <_init_chip+0x38>)
    1cf4:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    1cf6:	4b0b      	ldr	r3, [pc, #44]	; (1d24 <_init_chip+0x3c>)
    1cf8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1cfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1cfe:	4c0a      	ldr	r4, [pc, #40]	; (1d28 <_init_chip+0x40>)
    1d00:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1d02:	4b0a      	ldr	r3, [pc, #40]	; (1d2c <_init_chip+0x44>)
    1d04:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1d06:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1d0a:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1d0c:	4a08      	ldr	r2, [pc, #32]	; (1d30 <_init_chip+0x48>)
    1d0e:	6913      	ldr	r3, [r2, #16]
    1d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1d14:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1d16:	4b07      	ldr	r3, [pc, #28]	; (1d34 <_init_chip+0x4c>)
    1d18:	4798      	blx	r3
    1d1a:	bd10      	pop	{r4, pc}
    1d1c:	41004000 	.word	0x41004000
    1d20:	000021b9 	.word	0x000021b9
    1d24:	000020e1 	.word	0x000020e1
    1d28:	00002039 	.word	0x00002039
    1d2c:	000021e5 	.word	0x000021e5
    1d30:	40000800 	.word	0x40000800
    1d34:	00001e41 	.word	0x00001e41

00001d38 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    1d38:	b510      	push	{r4, lr}
    1d3a:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    1d3c:	22f3      	movs	r2, #243	; 0xf3
    1d3e:	4915      	ldr	r1, [pc, #84]	; (1d94 <_dac_init+0x5c>)
    1d40:	4815      	ldr	r0, [pc, #84]	; (1d98 <_dac_init+0x60>)
    1d42:	4284      	cmp	r4, r0
    1d44:	bf14      	ite	ne
    1d46:	2000      	movne	r0, #0
    1d48:	2001      	moveq	r0, #1
    1d4a:	4b14      	ldr	r3, [pc, #80]	; (1d9c <_dac_init+0x64>)
    1d4c:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1d4e:	68a3      	ldr	r3, [r4, #8]
    1d50:	f013 0f01 	tst.w	r3, #1
    1d54:	d1fb      	bne.n	1d4e <_dac_init+0x16>
    1d56:	68a3      	ldr	r3, [r4, #8]
    1d58:	f013 0f03 	tst.w	r3, #3
    1d5c:	d1fb      	bne.n	1d56 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1d5e:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1d60:	f013 0f02 	tst.w	r3, #2
    1d64:	d113      	bne.n	1d8e <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1d66:	68a3      	ldr	r3, [r4, #8]
    1d68:	f013 0f01 	tst.w	r3, #1
    1d6c:	d1fb      	bne.n	1d66 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    1d6e:	7823      	ldrb	r3, [r4, #0]
    1d70:	f043 0301 	orr.w	r3, r3, #1
    1d74:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1d76:	68a3      	ldr	r3, [r4, #8]
    1d78:	f013 0f01 	tst.w	r3, #1
    1d7c:	d1fb      	bne.n	1d76 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    1d7e:	2000      	movs	r0, #0
    1d80:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1d82:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    1d84:	81a0      	strh	r0, [r4, #12]
    1d86:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1d88:	2301      	movs	r3, #1
    1d8a:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1d8c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    1d8e:	f06f 0003 	mvn.w	r0, #3
}
    1d92:	bd10      	pop	{r4, pc}
    1d94:	00006a78 	.word	0x00006a78
    1d98:	43002400 	.word	0x43002400
    1d9c:	0000199d 	.word	0x0000199d

00001da0 <_dac_sync_init>:
{
    1da0:	b538      	push	{r3, r4, r5, lr}
    1da2:	460c      	mov	r4, r1
	ASSERT(device);
    1da4:	4605      	mov	r5, r0
    1da6:	2261      	movs	r2, #97	; 0x61
    1da8:	4905      	ldr	r1, [pc, #20]	; (1dc0 <_dac_sync_init+0x20>)
    1daa:	3000      	adds	r0, #0
    1dac:	bf18      	it	ne
    1dae:	2001      	movne	r0, #1
    1db0:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <_dac_sync_init+0x24>)
    1db2:	4798      	blx	r3
	device->hw = hw;
    1db4:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1db6:	4620      	mov	r0, r4
    1db8:	4b03      	ldr	r3, [pc, #12]	; (1dc8 <_dac_sync_init+0x28>)
    1dba:	4798      	blx	r3
}
    1dbc:	bd38      	pop	{r3, r4, r5, pc}
    1dbe:	bf00      	nop
    1dc0:	00006a78 	.word	0x00006a78
    1dc4:	0000199d 	.word	0x0000199d
    1dc8:	00001d39 	.word	0x00001d39

00001dcc <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1dcc:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1dce:	4a1a      	ldr	r2, [pc, #104]	; (1e38 <_dmac_handler+0x6c>)
    1dd0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1dd2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1dd6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1dda:	4818      	ldr	r0, [pc, #96]	; (1e3c <_dmac_handler+0x70>)
    1ddc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1de0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1de4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1de8:	f012 0f01 	tst.w	r2, #1
    1dec:	d10a      	bne.n	1e04 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1dee:	011a      	lsls	r2, r3, #4
    1df0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1df4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1df8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1dfc:	f012 0f02 	tst.w	r2, #2
    1e00:	d10b      	bne.n	1e1a <_dmac_handler+0x4e>
    1e02:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1e04:	011a      	lsls	r2, r3, #4
    1e06:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e0a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1e0e:	2101      	movs	r1, #1
    1e10:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1e14:	6843      	ldr	r3, [r0, #4]
    1e16:	4798      	blx	r3
    1e18:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1e1a:	011a      	lsls	r2, r3, #4
    1e1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e20:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1e24:	2102      	movs	r1, #2
    1e26:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1e2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e2e:	4a03      	ldr	r2, [pc, #12]	; (1e3c <_dmac_handler+0x70>)
    1e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e34:	4798      	blx	r3
	}
}
    1e36:	e7e4      	b.n	1e02 <_dmac_handler+0x36>
    1e38:	4100a000 	.word	0x4100a000
    1e3c:	20000220 	.word	0x20000220

00001e40 <_dma_init>:
{
    1e40:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1e42:	4a33      	ldr	r2, [pc, #204]	; (1f10 <_dma_init+0xd0>)
    1e44:	8813      	ldrh	r3, [r2, #0]
    1e46:	f023 0302 	bic.w	r3, r3, #2
    1e4a:	041b      	lsls	r3, r3, #16
    1e4c:	0c1b      	lsrs	r3, r3, #16
    1e4e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1e50:	8853      	ldrh	r3, [r2, #2]
    1e52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1e56:	041b      	lsls	r3, r3, #16
    1e58:	0c1b      	lsrs	r3, r3, #16
    1e5a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1e5c:	8813      	ldrh	r3, [r2, #0]
    1e5e:	b29b      	uxth	r3, r3
    1e60:	f043 0301 	orr.w	r3, r3, #1
    1e64:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1e66:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1e68:	f013 0f01 	tst.w	r3, #1
    1e6c:	d1fb      	bne.n	1e66 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1e6e:	4b28      	ldr	r3, [pc, #160]	; (1f10 <_dma_init+0xd0>)
    1e70:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1e74:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1e76:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1e7c:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1e7e:	2000      	movs	r0, #0
    1e80:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1e82:	4a24      	ldr	r2, [pc, #144]	; (1f14 <_dma_init+0xd4>)
    1e84:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1e88:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1e8a:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1e8e:	639a      	str	r2, [r3, #56]	; 0x38
    1e90:	4b21      	ldr	r3, [pc, #132]	; (1f18 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1e92:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1e96:	681c      	ldr	r4, [r3, #0]
    1e98:	0101      	lsls	r1, r0, #4
    1e9a:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    1e9e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1ea2:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1ea4:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1ea6:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1eaa:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1eac:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1eb0:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1eb2:	4429      	add	r1, r5
    1eb4:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    1eb8:	3001      	adds	r0, #1
    1eba:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1ebc:	2820      	cmp	r0, #32
    1ebe:	d1ea      	bne.n	1e96 <_dma_init+0x56>
    1ec0:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ec2:	2001      	movs	r0, #1
    1ec4:	4915      	ldr	r1, [pc, #84]	; (1f1c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1ec6:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1ec8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1ecc:	d00b      	beq.n	1ee6 <_dma_init+0xa6>
    1ece:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1ed0:	2b24      	cmp	r3, #36	; 0x24
    1ed2:	d1f8      	bne.n	1ec6 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1ed4:	4a0e      	ldr	r2, [pc, #56]	; (1f10 <_dma_init+0xd0>)
    1ed6:	8813      	ldrh	r3, [r2, #0]
    1ed8:	b29b      	uxth	r3, r3
    1eda:	f043 0302 	orr.w	r3, r3, #2
    1ede:	8013      	strh	r3, [r2, #0]
}
    1ee0:	2000      	movs	r0, #0
    1ee2:	bc30      	pop	{r4, r5}
    1ee4:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ee6:	095c      	lsrs	r4, r3, #5
    1ee8:	f002 021f 	and.w	r2, r2, #31
    1eec:	fa00 f202 	lsl.w	r2, r0, r2
    1ef0:	f104 0520 	add.w	r5, r4, #32
    1ef4:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1efc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f00:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1f04:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f08:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1f0c:	e7df      	b.n	1ece <_dma_init+0x8e>
    1f0e:	bf00      	nop
    1f10:	4100a000 	.word	0x4100a000
    1f14:	20000220 	.word	0x20000220
    1f18:	00006a90 	.word	0x00006a90
    1f1c:	e000e100 	.word	0xe000e100

00001f20 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1f20:	b508      	push	{r3, lr}
	_dmac_handler();
    1f22:	4b01      	ldr	r3, [pc, #4]	; (1f28 <DMAC_0_Handler+0x8>)
    1f24:	4798      	blx	r3
    1f26:	bd08      	pop	{r3, pc}
    1f28:	00001dcd 	.word	0x00001dcd

00001f2c <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1f2c:	b508      	push	{r3, lr}
	_dmac_handler();
    1f2e:	4b01      	ldr	r3, [pc, #4]	; (1f34 <DMAC_1_Handler+0x8>)
    1f30:	4798      	blx	r3
    1f32:	bd08      	pop	{r3, pc}
    1f34:	00001dcd 	.word	0x00001dcd

00001f38 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    1f38:	b508      	push	{r3, lr}
	_dmac_handler();
    1f3a:	4b01      	ldr	r3, [pc, #4]	; (1f40 <DMAC_2_Handler+0x8>)
    1f3c:	4798      	blx	r3
    1f3e:	bd08      	pop	{r3, pc}
    1f40:	00001dcd 	.word	0x00001dcd

00001f44 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    1f44:	b508      	push	{r3, lr}
	_dmac_handler();
    1f46:	4b01      	ldr	r3, [pc, #4]	; (1f4c <DMAC_3_Handler+0x8>)
    1f48:	4798      	blx	r3
    1f4a:	bd08      	pop	{r3, pc}
    1f4c:	00001dcd 	.word	0x00001dcd

00001f50 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1f50:	b508      	push	{r3, lr}
	_dmac_handler();
    1f52:	4b01      	ldr	r3, [pc, #4]	; (1f58 <DMAC_4_Handler+0x8>)
    1f54:	4798      	blx	r3
    1f56:	bd08      	pop	{r3, pc}
    1f58:	00001dcd 	.word	0x00001dcd

00001f5c <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1f5c:	4a1e      	ldr	r2, [pc, #120]	; (1fd8 <_ext_irq_init+0x7c>)
    1f5e:	6853      	ldr	r3, [r2, #4]
    1f60:	f013 0f01 	tst.w	r3, #1
    1f64:	d1fb      	bne.n	1f5e <_ext_irq_init+0x2>
    1f66:	4a1c      	ldr	r2, [pc, #112]	; (1fd8 <_ext_irq_init+0x7c>)
    1f68:	6853      	ldr	r3, [r2, #4]
    1f6a:	f013 0f03 	tst.w	r3, #3
    1f6e:	d1fb      	bne.n	1f68 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1f70:	4b19      	ldr	r3, [pc, #100]	; (1fd8 <_ext_irq_init+0x7c>)
    1f72:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1f74:	f013 0f02 	tst.w	r3, #2
    1f78:	d12b      	bne.n	1fd2 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1f7a:	4a17      	ldr	r2, [pc, #92]	; (1fd8 <_ext_irq_init+0x7c>)
    1f7c:	6853      	ldr	r3, [r2, #4]
    1f7e:	f013 0f01 	tst.w	r3, #1
    1f82:	d1fb      	bne.n	1f7c <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1f84:	4a14      	ldr	r2, [pc, #80]	; (1fd8 <_ext_irq_init+0x7c>)
    1f86:	7813      	ldrb	r3, [r2, #0]
    1f88:	f043 0301 	orr.w	r3, r3, #1
    1f8c:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1f8e:	6853      	ldr	r3, [r2, #4]
    1f90:	f013 0f01 	tst.w	r3, #1
    1f94:	d1fb      	bne.n	1f8e <_ext_irq_init+0x32>
    1f96:	4a10      	ldr	r2, [pc, #64]	; (1fd8 <_ext_irq_init+0x7c>)
    1f98:	6853      	ldr	r3, [r2, #4]
    1f9a:	f013 0f03 	tst.w	r3, #3
    1f9e:	d1fb      	bne.n	1f98 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1fa0:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <_ext_irq_init+0x7c>)
    1fa2:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1fa4:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1fa8:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1faa:	2200      	movs	r2, #0
    1fac:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1fae:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1fb0:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1fb2:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1fb4:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1fb6:	61da      	str	r2, [r3, #28]
    1fb8:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1fba:	461a      	mov	r2, r3
    1fbc:	6853      	ldr	r3, [r2, #4]
    1fbe:	f013 0f03 	tst.w	r3, #3
    1fc2:	d1fb      	bne.n	1fbc <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1fc4:	4a04      	ldr	r2, [pc, #16]	; (1fd8 <_ext_irq_init+0x7c>)
    1fc6:	7813      	ldrb	r3, [r2, #0]
    1fc8:	f043 0302 	orr.w	r3, r3, #2
    1fcc:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    1fce:	2000      	movs	r0, #0
    1fd0:	4770      	bx	lr
		return ERR_DENIED;
    1fd2:	f06f 0010 	mvn.w	r0, #16
}
    1fd6:	4770      	bx	lr
    1fd8:	40002800 	.word	0x40002800

00001fdc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1fdc:	b430      	push	{r4, r5}
    1fde:	4814      	ldr	r0, [pc, #80]	; (2030 <_event_system_init+0x54>)
    1fe0:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1fe4:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1fe6:	4c13      	ldr	r4, [pc, #76]	; (2034 <_event_system_init+0x58>)
    1fe8:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1fea:	f813 1b01 	ldrb.w	r1, [r3], #1
    1fee:	3248      	adds	r2, #72	; 0x48
    1ff0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1ff4:	42ab      	cmp	r3, r5
    1ff6:	d1f7      	bne.n	1fe8 <_event_system_init+0xc>
    1ff8:	480d      	ldr	r0, [pc, #52]	; (2030 <_event_system_init+0x54>)
    1ffa:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1ffe:	3080      	adds	r0, #128	; 0x80
    2000:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2002:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2006:	00ca      	lsls	r2, r1, #3
    2008:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    200c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2010:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2012:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2016:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2018:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    201c:	43db      	mvns	r3, r3
    201e:	b2db      	uxtb	r3, r3
    2020:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2024:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2026:	2920      	cmp	r1, #32
    2028:	d1eb      	bne.n	2002 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    202a:	2000      	movs	r0, #0
    202c:	bc30      	pop	{r4, r5}
    202e:	4770      	bx	lr
    2030:	00006b90 	.word	0x00006b90
    2034:	4100e000 	.word	0x4100e000

00002038 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2038:	f010 0f01 	tst.w	r0, #1
    203c:	d002      	beq.n	2044 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    203e:	4a23      	ldr	r2, [pc, #140]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2040:	4b23      	ldr	r3, [pc, #140]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    2042:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    2044:	f010 0f02 	tst.w	r0, #2
    2048:	d002      	beq.n	2050 <_gclk_init_generators_by_fref+0x18>
    204a:	4a22      	ldr	r2, [pc, #136]	; (20d4 <_gclk_init_generators_by_fref+0x9c>)
    204c:	4b20      	ldr	r3, [pc, #128]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    204e:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    2050:	f010 0f04 	tst.w	r0, #4
    2054:	d002      	beq.n	205c <_gclk_init_generators_by_fref+0x24>
    2056:	4a1d      	ldr	r2, [pc, #116]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2058:	4b1d      	ldr	r3, [pc, #116]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    205a:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    205c:	f010 0f08 	tst.w	r0, #8
    2060:	d002      	beq.n	2068 <_gclk_init_generators_by_fref+0x30>
    2062:	4a1a      	ldr	r2, [pc, #104]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2064:	4b1a      	ldr	r3, [pc, #104]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    2066:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    2068:	f010 0f10 	tst.w	r0, #16
    206c:	d002      	beq.n	2074 <_gclk_init_generators_by_fref+0x3c>
    206e:	4a17      	ldr	r2, [pc, #92]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2070:	4b17      	ldr	r3, [pc, #92]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    2072:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    2074:	f010 0f20 	tst.w	r0, #32
    2078:	d002      	beq.n	2080 <_gclk_init_generators_by_fref+0x48>
    207a:	4a14      	ldr	r2, [pc, #80]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    207c:	4b14      	ldr	r3, [pc, #80]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    207e:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    2080:	f010 0f40 	tst.w	r0, #64	; 0x40
    2084:	d002      	beq.n	208c <_gclk_init_generators_by_fref+0x54>
    2086:	4a11      	ldr	r2, [pc, #68]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2088:	4b11      	ldr	r3, [pc, #68]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    208a:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    208c:	f010 0f80 	tst.w	r0, #128	; 0x80
    2090:	d002      	beq.n	2098 <_gclk_init_generators_by_fref+0x60>
    2092:	4a0e      	ldr	r2, [pc, #56]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    2094:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    2096:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    2098:	f410 7f80 	tst.w	r0, #256	; 0x100
    209c:	d002      	beq.n	20a4 <_gclk_init_generators_by_fref+0x6c>
    209e:	4a0b      	ldr	r2, [pc, #44]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    20a0:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    20a2:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    20a4:	f410 7f00 	tst.w	r0, #512	; 0x200
    20a8:	d002      	beq.n	20b0 <_gclk_init_generators_by_fref+0x78>
    20aa:	4a08      	ldr	r2, [pc, #32]	; (20cc <_gclk_init_generators_by_fref+0x94>)
    20ac:	4b08      	ldr	r3, [pc, #32]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    20ae:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    20b0:	f410 6f80 	tst.w	r0, #1024	; 0x400
    20b4:	d002      	beq.n	20bc <_gclk_init_generators_by_fref+0x84>
    20b6:	4a08      	ldr	r2, [pc, #32]	; (20d8 <_gclk_init_generators_by_fref+0xa0>)
    20b8:	4b05      	ldr	r3, [pc, #20]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    20ba:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    20bc:	f410 6f00 	tst.w	r0, #2048	; 0x800
    20c0:	d002      	beq.n	20c8 <_gclk_init_generators_by_fref+0x90>
    20c2:	4a06      	ldr	r2, [pc, #24]	; (20dc <_gclk_init_generators_by_fref+0xa4>)
    20c4:	4b02      	ldr	r3, [pc, #8]	; (20d0 <_gclk_init_generators_by_fref+0x98>)
    20c6:	64da      	str	r2, [r3, #76]	; 0x4c
    20c8:	4770      	bx	lr
    20ca:	bf00      	nop
    20cc:	00012b06 	.word	0x00012b06
    20d0:	40001c00 	.word	0x40001c00
    20d4:	00012306 	.word	0x00012306
    20d8:	00012b05 	.word	0x00012b05
    20dc:	00013b05 	.word	0x00013b05

000020e0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    20e0:	2201      	movs	r2, #1
    20e2:	4b01      	ldr	r3, [pc, #4]	; (20e8 <_mclk_init+0x8>)
    20e4:	715a      	strb	r2, [r3, #5]
    20e6:	4770      	bx	lr
    20e8:	40000800 	.word	0x40000800

000020ec <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    20ec:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    20ee:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    20f0:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    20f2:	f012 0f01 	tst.w	r2, #1
    20f6:	d005      	beq.n	2104 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    20f8:	2201      	movs	r2, #1
    20fa:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    20fc:	6803      	ldr	r3, [r0, #0]
    20fe:	b153      	cbz	r3, 2116 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2100:	4798      	blx	r3
    2102:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2104:	8a1a      	ldrh	r2, [r3, #16]
    2106:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2108:	b12a      	cbz	r2, 2116 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    210a:	f240 225e 	movw	r2, #606	; 0x25e
    210e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2110:	6843      	ldr	r3, [r0, #4]
    2112:	b103      	cbz	r3, 2116 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2114:	4798      	blx	r3
    2116:	bd08      	pop	{r3, pc}

00002118 <_flash_init>:
{
    2118:	b538      	push	{r3, r4, r5, lr}
    211a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    211c:	4605      	mov	r5, r0
    211e:	b350      	cbz	r0, 2176 <_flash_init+0x5e>
    2120:	4816      	ldr	r0, [pc, #88]	; (217c <_flash_init+0x64>)
    2122:	4281      	cmp	r1, r0
    2124:	bf14      	ite	ne
    2126:	2000      	movne	r0, #0
    2128:	2001      	moveq	r0, #1
    212a:	2256      	movs	r2, #86	; 0x56
    212c:	4914      	ldr	r1, [pc, #80]	; (2180 <_flash_init+0x68>)
    212e:	4b15      	ldr	r3, [pc, #84]	; (2184 <_flash_init+0x6c>)
    2130:	4798      	blx	r3
	device->hw = hw;
    2132:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2134:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2136:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    213a:	049b      	lsls	r3, r3, #18
    213c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    213e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2140:	4b11      	ldr	r3, [pc, #68]	; (2188 <_flash_init+0x70>)
    2142:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2144:	4b11      	ldr	r3, [pc, #68]	; (218c <_flash_init+0x74>)
    2146:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    214a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    214e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2152:	f3bf 8f6f 	isb	sy
    2156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    215a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    215e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2162:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2166:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    216a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    216e:	6019      	str	r1, [r3, #0]
    2170:	601a      	str	r2, [r3, #0]
}
    2172:	2000      	movs	r0, #0
    2174:	bd38      	pop	{r3, r4, r5, pc}
    2176:	2000      	movs	r0, #0
    2178:	e7d7      	b.n	212a <_flash_init+0x12>
    217a:	bf00      	nop
    217c:	41004000 	.word	0x41004000
    2180:	00006c94 	.word	0x00006c94
    2184:	0000199d 	.word	0x0000199d
    2188:	200007a0 	.word	0x200007a0
    218c:	e000e100 	.word	0xe000e100

00002190 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2190:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2192:	4b02      	ldr	r3, [pc, #8]	; (219c <NVMCTRL_0_Handler+0xc>)
    2194:	6818      	ldr	r0, [r3, #0]
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <NVMCTRL_0_Handler+0x10>)
    2198:	4798      	blx	r3
    219a:	bd08      	pop	{r3, pc}
    219c:	200007a0 	.word	0x200007a0
    21a0:	000020ed 	.word	0x000020ed

000021a4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    21a4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    21a6:	4b02      	ldr	r3, [pc, #8]	; (21b0 <NVMCTRL_1_Handler+0xc>)
    21a8:	6818      	ldr	r0, [r3, #0]
    21aa:	4b02      	ldr	r3, [pc, #8]	; (21b4 <NVMCTRL_1_Handler+0x10>)
    21ac:	4798      	blx	r3
    21ae:	bd08      	pop	{r3, pc}
    21b0:	200007a0 	.word	0x200007a0
    21b4:	000020ed 	.word	0x000020ed

000021b8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    21b8:	4b09      	ldr	r3, [pc, #36]	; (21e0 <_osc32kctrl_init_sources+0x28>)
    21ba:	f242 024e 	movw	r2, #8270	; 0x204e
    21be:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    21c0:	2201      	movs	r2, #1
    21c2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    21c4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    21c6:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    21c8:	2200      	movs	r2, #0
    21ca:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    21cc:	461a      	mov	r2, r3
    21ce:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    21d0:	f013 0f01 	tst.w	r3, #1
    21d4:	d0fb      	beq.n	21ce <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    21d6:	2204      	movs	r2, #4
    21d8:	4b01      	ldr	r3, [pc, #4]	; (21e0 <_osc32kctrl_init_sources+0x28>)
    21da:	741a      	strb	r2, [r3, #16]
    21dc:	4770      	bx	lr
    21de:	bf00      	nop
    21e0:	40001400 	.word	0x40001400

000021e4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    21e4:	4a2b      	ldr	r2, [pc, #172]	; (2294 <_oscctrl_init_referenced_generators+0xb0>)
    21e6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    21e8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    21ec:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    21f0:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    21f2:	4b29      	ldr	r3, [pc, #164]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    21f4:	2200      	movs	r2, #0
    21f6:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    21f8:	4a28      	ldr	r2, [pc, #160]	; (229c <_oscctrl_init_referenced_generators+0xb8>)
    21fa:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    21fc:	461a      	mov	r2, r3
    21fe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2202:	f013 0f10 	tst.w	r3, #16
    2206:	d1fa      	bne.n	21fe <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2208:	2200      	movs	r2, #0
    220a:	4b23      	ldr	r3, [pc, #140]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    220c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2210:	461a      	mov	r2, r3
    2212:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2216:	f013 0f04 	tst.w	r3, #4
    221a:	d1fa      	bne.n	2212 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    221c:	2242      	movs	r2, #66	; 0x42
    221e:	4b1e      	ldr	r3, [pc, #120]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2220:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2222:	461a      	mov	r2, r3
    2224:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2228:	f013 0f02 	tst.w	r3, #2
    222c:	d1fa      	bne.n	2224 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    222e:	4b1a      	ldr	r3, [pc, #104]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2232:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2234:	461a      	mov	r2, r3
    2236:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    223a:	f013 0f08 	tst.w	r3, #8
    223e:	d1fa      	bne.n	2236 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2240:	2282      	movs	r2, #130	; 0x82
    2242:	4b15      	ldr	r3, [pc, #84]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2244:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2248:	461a      	mov	r2, r3
    224a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    224e:	f013 0f04 	tst.w	r3, #4
    2252:	d1fa      	bne.n	224a <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2254:	4b10      	ldr	r3, [pc, #64]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2256:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    225a:	f013 0f01 	tst.w	r3, #1
    225e:	d012      	beq.n	2286 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2260:	4a0d      	ldr	r2, [pc, #52]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2262:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2264:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2268:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    226c:	d1f9      	bne.n	2262 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    226e:	4a09      	ldr	r2, [pc, #36]	; (2294 <_oscctrl_init_referenced_generators+0xb0>)
    2270:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2272:	2b00      	cmp	r3, #0
    2274:	d1fc      	bne.n	2270 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2276:	4a07      	ldr	r2, [pc, #28]	; (2294 <_oscctrl_init_referenced_generators+0xb0>)
    2278:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    227a:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    227e:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2282:	6213      	str	r3, [r2, #32]
    2284:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2286:	4a04      	ldr	r2, [pc, #16]	; (2298 <_oscctrl_init_referenced_generators+0xb4>)
    2288:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    228a:	f413 7f80 	tst.w	r3, #256	; 0x100
    228e:	d0fb      	beq.n	2288 <_oscctrl_init_referenced_generators+0xa4>
    2290:	e7ed      	b.n	226e <_oscctrl_init_referenced_generators+0x8a>
    2292:	bf00      	nop
    2294:	40001c00 	.word	0x40001c00
    2298:	40001000 	.word	0x40001000
    229c:	04010000 	.word	0x04010000

000022a0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    22a0:	b500      	push	{lr}
    22a2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    22a4:	4b0d      	ldr	r3, [pc, #52]	; (22dc <RAMECC_Handler+0x3c>)
    22a6:	789b      	ldrb	r3, [r3, #2]
    22a8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    22aa:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    22ac:	9b01      	ldr	r3, [sp, #4]
    22ae:	f013 0f02 	tst.w	r3, #2
    22b2:	d006      	beq.n	22c2 <RAMECC_Handler+0x22>
    22b4:	4b0a      	ldr	r3, [pc, #40]	; (22e0 <RAMECC_Handler+0x40>)
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	b11b      	cbz	r3, 22c2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    22ba:	4a08      	ldr	r2, [pc, #32]	; (22dc <RAMECC_Handler+0x3c>)
    22bc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    22be:	4798      	blx	r3
    22c0:	e009      	b.n	22d6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    22c2:	9b01      	ldr	r3, [sp, #4]
    22c4:	f013 0f01 	tst.w	r3, #1
    22c8:	d005      	beq.n	22d6 <RAMECC_Handler+0x36>
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <RAMECC_Handler+0x40>)
    22cc:	685b      	ldr	r3, [r3, #4]
    22ce:	b113      	cbz	r3, 22d6 <RAMECC_Handler+0x36>
    22d0:	4a02      	ldr	r2, [pc, #8]	; (22dc <RAMECC_Handler+0x3c>)
    22d2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    22d4:	4798      	blx	r3
	} else {
		return;
	}
}
    22d6:	b003      	add	sp, #12
    22d8:	f85d fb04 	ldr.w	pc, [sp], #4
    22dc:	41020000 	.word	0x41020000
    22e0:	20003b30 	.word	0x20003b30

000022e4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    22e4:	b470      	push	{r4, r5, r6}
    22e6:	b087      	sub	sp, #28
    22e8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    22ea:	466c      	mov	r4, sp
    22ec:	4d0c      	ldr	r5, [pc, #48]	; (2320 <_sercom_get_hardware_index+0x3c>)
    22ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    22f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    22f2:	e895 0003 	ldmia.w	r5, {r0, r1}
    22f6:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    22fa:	9b00      	ldr	r3, [sp, #0]
    22fc:	42b3      	cmp	r3, r6
    22fe:	d00c      	beq.n	231a <_sercom_get_hardware_index+0x36>
    2300:	4632      	mov	r2, r6
    2302:	2001      	movs	r0, #1
    2304:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2308:	4293      	cmp	r3, r2
    230a:	d007      	beq.n	231c <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    230c:	3001      	adds	r0, #1
    230e:	2806      	cmp	r0, #6
    2310:	d1f8      	bne.n	2304 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    2312:	2000      	movs	r0, #0
}
    2314:	b007      	add	sp, #28
    2316:	bc70      	pop	{r4, r5, r6}
    2318:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    231a:	2000      	movs	r0, #0
			return i;
    231c:	b2c0      	uxtb	r0, r0
    231e:	e7f9      	b.n	2314 <_sercom_get_hardware_index+0x30>
    2320:	00006cb4 	.word	0x00006cb4

00002324 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2324:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <_sercom_get_irq_num+0x10>)
    2328:	4798      	blx	r3
    232a:	0080      	lsls	r0, r0, #2
    232c:	302e      	adds	r0, #46	; 0x2e
}
    232e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2332:	bd08      	pop	{r3, pc}
    2334:	000022e5 	.word	0x000022e5

00002338 <_usart_init>:
{
    2338:	b538      	push	{r3, r4, r5, lr}
    233a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    233c:	4b33      	ldr	r3, [pc, #204]	; (240c <_usart_init+0xd4>)
    233e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2340:	2803      	cmp	r0, #3
    2342:	d056      	beq.n	23f2 <_usart_init+0xba>
    2344:	2804      	cmp	r0, #4
    2346:	d052      	beq.n	23ee <_usart_init+0xb6>
    2348:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    234a:	bf08      	it	eq
    234c:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    234e:	d006      	beq.n	235e <_usart_init+0x26>
	ASSERT(false);
    2350:	f240 2263 	movw	r2, #611	; 0x263
    2354:	492e      	ldr	r1, [pc, #184]	; (2410 <_usart_init+0xd8>)
    2356:	2000      	movs	r0, #0
    2358:	4b2e      	ldr	r3, [pc, #184]	; (2414 <_usart_init+0xdc>)
    235a:	4798      	blx	r3
	return 0;
    235c:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    235e:	69e3      	ldr	r3, [r4, #28]
    2360:	f013 0f01 	tst.w	r3, #1
    2364:	d1fb      	bne.n	235e <_usart_init+0x26>
    2366:	69e3      	ldr	r3, [r4, #28]
    2368:	f013 0f03 	tst.w	r3, #3
    236c:	d1fb      	bne.n	2366 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    236e:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    2370:	f013 0f02 	tst.w	r3, #2
    2374:	d147      	bne.n	2406 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2376:	69e3      	ldr	r3, [r4, #28]
    2378:	f013 0f01 	tst.w	r3, #1
    237c:	d1fb      	bne.n	2376 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    237e:	6823      	ldr	r3, [r4, #0]
    2380:	f043 0301 	orr.w	r3, r3, #1
    2384:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2386:	69e3      	ldr	r3, [r4, #28]
    2388:	f013 0f01 	tst.w	r3, #1
    238c:	d1fb      	bne.n	2386 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    238e:	4610      	mov	r0, r2
    2390:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2394:	4920      	ldr	r1, [pc, #128]	; (2418 <_usart_init+0xe0>)
    2396:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    239a:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    239c:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    239e:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    23a0:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    23a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    23a4:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    23a6:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    23aa:	d024      	beq.n	23f6 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    23ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    23b0:	4b19      	ldr	r3, [pc, #100]	; (2418 <_usart_init+0xe0>)
    23b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    23b6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    23b8:	89a3      	ldrh	r3, [r4, #12]
    23ba:	f361 030c 	bfi	r3, r1, #0, #13
    23be:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    23c0:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    23c4:	89a3      	ldrh	r3, [r4, #12]
    23c6:	f362 334f 	bfi	r3, r2, #13, #3
    23ca:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    23cc:	4b12      	ldr	r3, [pc, #72]	; (2418 <_usart_init+0xe0>)
    23ce:	0042      	lsls	r2, r0, #1
    23d0:	1811      	adds	r1, r2, r0
    23d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    23d6:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    23da:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    23dc:	4402      	add	r2, r0
    23de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    23e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    23e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    23ea:	2000      	movs	r0, #0
    23ec:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    23ee:	2201      	movs	r2, #1
    23f0:	e7b5      	b.n	235e <_usart_init+0x26>
    23f2:	2200      	movs	r2, #0
    23f4:	e7b3      	b.n	235e <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    23f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    23fa:	4b07      	ldr	r3, [pc, #28]	; (2418 <_usart_init+0xe0>)
    23fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2400:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2402:	81a3      	strh	r3, [r4, #12]
    2404:	e7e2      	b.n	23cc <_usart_init+0x94>
		return ERR_DENIED;
    2406:	f06f 0010 	mvn.w	r0, #16
}
    240a:	bd38      	pop	{r3, r4, r5, pc}
    240c:	000022e5 	.word	0x000022e5
    2410:	00006d40 	.word	0x00006d40
    2414:	0000199d 	.word	0x0000199d
    2418:	00006cb4 	.word	0x00006cb4

0000241c <_usart_async_init>:
{
    241c:	b570      	push	{r4, r5, r6, lr}
    241e:	460d      	mov	r5, r1
	ASSERT(device);
    2420:	4606      	mov	r6, r0
    2422:	22da      	movs	r2, #218	; 0xda
    2424:	4916      	ldr	r1, [pc, #88]	; (2480 <_usart_async_init+0x64>)
    2426:	3000      	adds	r0, #0
    2428:	bf18      	it	ne
    242a:	2001      	movne	r0, #1
    242c:	4b15      	ldr	r3, [pc, #84]	; (2484 <_usart_async_init+0x68>)
    242e:	4798      	blx	r3
	init_status = _usart_init(hw);
    2430:	4628      	mov	r0, r5
    2432:	4b15      	ldr	r3, [pc, #84]	; (2488 <_usart_async_init+0x6c>)
    2434:	4798      	blx	r3
	if (init_status) {
    2436:	4604      	mov	r4, r0
    2438:	b9f8      	cbnz	r0, 247a <_usart_async_init+0x5e>
	device->hw = hw;
    243a:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    243c:	4628      	mov	r0, r5
    243e:	4b13      	ldr	r3, [pc, #76]	; (248c <_usart_async_init+0x70>)
    2440:	4798      	blx	r3
		irq = irq +2;
    2442:	3002      	adds	r0, #2
    2444:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2446:	f000 031f 	and.w	r3, r0, #31
    244a:	2201      	movs	r2, #1
    244c:	409a      	lsls	r2, r3
    244e:	0943      	lsrs	r3, r0, #5
    2450:	009b      	lsls	r3, r3, #2
    2452:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2456:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    245a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    245e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2462:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2466:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    246a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    246e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2472:	21e0      	movs	r1, #224	; 0xe0
    2474:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2478:	601a      	str	r2, [r3, #0]
}
    247a:	4620      	mov	r0, r4
    247c:	bd70      	pop	{r4, r5, r6, pc}
    247e:	bf00      	nop
    2480:	00006d40 	.word	0x00006d40
    2484:	0000199d 	.word	0x0000199d
    2488:	00002339 	.word	0x00002339
    248c:	00002325 	.word	0x00002325

00002490 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2490:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2492:	69d3      	ldr	r3, [r2, #28]
    2494:	f013 0f03 	tst.w	r3, #3
    2498:	d1fb      	bne.n	2492 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    249a:	6813      	ldr	r3, [r2, #0]
    249c:	f043 0302 	orr.w	r3, r3, #2
    24a0:	6013      	str	r3, [r2, #0]
    24a2:	4770      	bx	lr

000024a4 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    24a4:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    24a6:	6299      	str	r1, [r3, #40]	; 0x28
    24a8:	4770      	bx	lr

000024aa <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    24aa:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    24ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    24ae:	b2c0      	uxtb	r0, r0
    24b0:	4770      	bx	lr

000024b2 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    24b2:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    24b4:	7e18      	ldrb	r0, [r3, #24]
}
    24b6:	f000 0001 	and.w	r0, r0, #1
    24ba:	4770      	bx	lr

000024bc <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    24bc:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    24be:	7e18      	ldrb	r0, [r3, #24]
}
    24c0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    24c4:	4770      	bx	lr
	...

000024c8 <_usart_async_set_irq_state>:
{
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	460c      	mov	r4, r1
    24cc:	4616      	mov	r6, r2
	ASSERT(device);
    24ce:	4605      	mov	r5, r0
    24d0:	f240 2245 	movw	r2, #581	; 0x245
    24d4:	4915      	ldr	r1, [pc, #84]	; (252c <_usart_async_set_irq_state+0x64>)
    24d6:	3000      	adds	r0, #0
    24d8:	bf18      	it	ne
    24da:	2001      	movne	r0, #1
    24dc:	4b14      	ldr	r3, [pc, #80]	; (2530 <_usart_async_set_irq_state+0x68>)
    24de:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    24e0:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    24e4:	d10d      	bne.n	2502 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    24e6:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    24e8:	b92e      	cbnz	r6, 24f6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    24ea:	2201      	movs	r2, #1
    24ec:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    24ee:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    24f0:	2202      	movs	r2, #2
    24f2:	751a      	strb	r2, [r3, #20]
    24f4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    24f6:	2201      	movs	r2, #1
    24f8:	759a      	strb	r2, [r3, #22]
    24fa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    24fc:	2202      	movs	r2, #2
    24fe:	759a      	strb	r2, [r3, #22]
    2500:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    2502:	2c01      	cmp	r4, #1
    2504:	d002      	beq.n	250c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    2506:	2c03      	cmp	r4, #3
    2508:	d008      	beq.n	251c <_usart_async_set_irq_state+0x54>
    250a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    250c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    250e:	b916      	cbnz	r6, 2516 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2510:	2204      	movs	r2, #4
    2512:	751a      	strb	r2, [r3, #20]
    2514:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    2516:	2204      	movs	r2, #4
    2518:	759a      	strb	r2, [r3, #22]
    251a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    251c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    251e:	b116      	cbz	r6, 2526 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2520:	2280      	movs	r2, #128	; 0x80
    2522:	759a      	strb	r2, [r3, #22]
}
    2524:	e7f1      	b.n	250a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2526:	2280      	movs	r2, #128	; 0x80
    2528:	751a      	strb	r2, [r3, #20]
    252a:	bd70      	pop	{r4, r5, r6, pc}
    252c:	00006d40 	.word	0x00006d40
    2530:	0000199d 	.word	0x0000199d

00002534 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2534:	4b03      	ldr	r3, [pc, #12]	; (2544 <_delay_init+0x10>)
    2536:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    253a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    253c:	2205      	movs	r2, #5
    253e:	601a      	str	r2, [r3, #0]
    2540:	4770      	bx	lr
    2542:	bf00      	nop
    2544:	e000e010 	.word	0xe000e010

00002548 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2548:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    254a:	b303      	cbz	r3, 258e <_delay_cycles+0x46>
{
    254c:	b430      	push	{r4, r5}
    254e:	1e5d      	subs	r5, r3, #1
    2550:	b2ed      	uxtb	r5, r5
	while (n--) {
    2552:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2554:	4a12      	ldr	r2, [pc, #72]	; (25a0 <_delay_cycles+0x58>)
    2556:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    255a:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    255c:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    255e:	6813      	ldr	r3, [r2, #0]
    2560:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2564:	d0fb      	beq.n	255e <_delay_cycles+0x16>
	while (n--) {
    2566:	3801      	subs	r0, #1
    2568:	b2c0      	uxtb	r0, r0
    256a:	28ff      	cmp	r0, #255	; 0xff
    256c:	d1f5      	bne.n	255a <_delay_cycles+0x12>
    256e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2572:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2576:	3101      	adds	r1, #1
    2578:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    257a:	4b09      	ldr	r3, [pc, #36]	; (25a0 <_delay_cycles+0x58>)
    257c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    257e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2580:	461a      	mov	r2, r3
    2582:	6813      	ldr	r3, [r2, #0]
    2584:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2588:	d0fb      	beq.n	2582 <_delay_cycles+0x3a>
		;
}
    258a:	bc30      	pop	{r4, r5}
    258c:	4770      	bx	lr
	SysTick->LOAD = buf;
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <_delay_cycles+0x58>)
    2590:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2592:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2594:	461a      	mov	r2, r3
    2596:	6813      	ldr	r3, [r2, #0]
    2598:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    259c:	d0fb      	beq.n	2596 <_delay_cycles+0x4e>
    259e:	4770      	bx	lr
    25a0:	e000e010 	.word	0xe000e010

000025a4 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    25a4:	b470      	push	{r4, r5, r6}
    25a6:	b087      	sub	sp, #28
    25a8:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    25aa:	ac01      	add	r4, sp, #4
    25ac:	4d14      	ldr	r5, [pc, #80]	; (2600 <_get_irq_num+0x5c>)
    25ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    25b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    25b2:	682b      	ldr	r3, [r5, #0]
    25b4:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    25b6:	42b0      	cmp	r0, r6
    25b8:	d017      	beq.n	25ea <_get_irq_num+0x46>
    25ba:	4631      	mov	r1, r6
    25bc:	2301      	movs	r3, #1
    25be:	a801      	add	r0, sp, #4
    25c0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    25c4:	428a      	cmp	r2, r1
    25c6:	d006      	beq.n	25d6 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    25c8:	3301      	adds	r3, #1
    25ca:	2b05      	cmp	r3, #5
    25cc:	d1f8      	bne.n	25c0 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    25ce:	2055      	movs	r0, #85	; 0x55
}
    25d0:	b007      	add	sp, #28
    25d2:	bc70      	pop	{r4, r5, r6}
    25d4:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    25d6:	b2db      	uxtb	r3, r3
    25d8:	2b04      	cmp	r3, #4
    25da:	d80c      	bhi.n	25f6 <_get_irq_num+0x52>
    25dc:	e8df f003 	tbb	[pc, r3]
    25e0:	070d0305 	.word	0x070d0305
    25e4:	09          	.byte	0x09
    25e5:	00          	.byte	0x00
		return TCC1_0_IRQn;
    25e6:	205c      	movs	r0, #92	; 0x5c
    25e8:	e7f2      	b.n	25d0 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    25ea:	2055      	movs	r0, #85	; 0x55
    25ec:	e7f0      	b.n	25d0 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    25ee:	2065      	movs	r0, #101	; 0x65
    25f0:	e7ee      	b.n	25d0 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    25f2:	2068      	movs	r0, #104	; 0x68
    25f4:	e7ec      	b.n	25d0 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    25f6:	2089      	movs	r0, #137	; 0x89
    25f8:	e7ea      	b.n	25d0 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    25fa:	2061      	movs	r0, #97	; 0x61
    25fc:	e7e8      	b.n	25d0 <_get_irq_num+0x2c>
    25fe:	bf00      	nop
    2600:	00006d5c 	.word	0x00006d5c

00002604 <_tcc_timer_deinit>:
{
    2604:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2606:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2608:	4620      	mov	r0, r4
    260a:	4b10      	ldr	r3, [pc, #64]	; (264c <_tcc_timer_deinit+0x48>)
    260c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    260e:	0943      	lsrs	r3, r0, #5
    2610:	f000 001f 	and.w	r0, r0, #31
    2614:	2201      	movs	r2, #1
    2616:	fa02 f000 	lsl.w	r0, r2, r0
    261a:	3320      	adds	r3, #32
    261c:	4a0c      	ldr	r2, [pc, #48]	; (2650 <_tcc_timer_deinit+0x4c>)
    261e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2626:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    262a:	68a3      	ldr	r3, [r4, #8]
    262c:	f013 0f03 	tst.w	r3, #3
    2630:	d1fb      	bne.n	262a <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2632:	6823      	ldr	r3, [r4, #0]
    2634:	f023 0302 	bic.w	r3, r3, #2
    2638:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    263a:	68a3      	ldr	r3, [r4, #8]
    263c:	f013 0f01 	tst.w	r3, #1
    2640:	d1fb      	bne.n	263a <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2642:	6823      	ldr	r3, [r4, #0]
    2644:	f043 0301 	orr.w	r3, r3, #1
    2648:	6023      	str	r3, [r4, #0]
    264a:	bd10      	pop	{r4, pc}
    264c:	000025a5 	.word	0x000025a5
    2650:	e000e100 	.word	0xe000e100

00002654 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2654:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2656:	6893      	ldr	r3, [r2, #8]
    2658:	f013 0f03 	tst.w	r3, #3
    265c:	d1fb      	bne.n	2656 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    265e:	6813      	ldr	r3, [r2, #0]
    2660:	f043 0302 	orr.w	r3, r3, #2
    2664:	6013      	str	r3, [r2, #0]
    2666:	4770      	bx	lr

00002668 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2668:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    266a:	6893      	ldr	r3, [r2, #8]
    266c:	f013 0f03 	tst.w	r3, #3
    2670:	d1fb      	bne.n	266a <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2672:	6813      	ldr	r3, [r2, #0]
    2674:	f023 0302 	bic.w	r3, r3, #2
    2678:	6013      	str	r3, [r2, #0]
    267a:	4770      	bx	lr

0000267c <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    267c:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    267e:	6419      	str	r1, [r3, #64]	; 0x40
    2680:	4770      	bx	lr

00002682 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2682:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2684:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2686:	4770      	bx	lr

00002688 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2688:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    268a:	6893      	ldr	r3, [r2, #8]
    268c:	f013 0f03 	tst.w	r3, #3
    2690:	d1fb      	bne.n	268a <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2692:	6810      	ldr	r0, [r2, #0]
}
    2694:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2698:	4770      	bx	lr

0000269a <tcc_interrupt_handler>:
{
    269a:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    269c:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    26a0:	f012 0f01 	tst.w	r2, #1
    26a4:	d100      	bne.n	26a8 <tcc_interrupt_handler+0xe>
    26a6:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    26a8:	2201      	movs	r2, #1
    26aa:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    26ac:	6803      	ldr	r3, [r0, #0]
    26ae:	4798      	blx	r3
}
    26b0:	e7f9      	b.n	26a6 <tcc_interrupt_handler+0xc>
	...

000026b4 <_tcc_timer_init>:
{
    26b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26b6:	b087      	sub	sp, #28
    26b8:	4605      	mov	r5, r0
    26ba:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    26bc:	ae01      	add	r6, sp, #4
    26be:	4f4e      	ldr	r7, [pc, #312]	; (27f8 <_tcc_timer_init+0x144>)
    26c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    26c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    26c8:	42a0      	cmp	r0, r4
    26ca:	d00c      	beq.n	26e6 <_tcc_timer_init+0x32>
    26cc:	4621      	mov	r1, r4
    26ce:	2301      	movs	r3, #1
    26d0:	a801      	add	r0, sp, #4
    26d2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    26d6:	428a      	cmp	r2, r1
    26d8:	d006      	beq.n	26e8 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    26da:	3301      	adds	r3, #1
    26dc:	2b05      	cmp	r3, #5
    26de:	d1f8      	bne.n	26d2 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    26e0:	2600      	movs	r6, #0
			return i;
    26e2:	b276      	sxtb	r6, r6
    26e4:	e015      	b.n	2712 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    26e6:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    26e8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    26ec:	d073      	beq.n	27d6 <_tcc_timer_init+0x122>
    26ee:	2b01      	cmp	r3, #1
    26f0:	d06b      	beq.n	27ca <_tcc_timer_init+0x116>
    26f2:	2b02      	cmp	r3, #2
    26f4:	d06b      	beq.n	27ce <_tcc_timer_init+0x11a>
    26f6:	2b03      	cmp	r3, #3
    26f8:	d06b      	beq.n	27d2 <_tcc_timer_init+0x11e>
    26fa:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    26fc:	bf08      	it	eq
    26fe:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2700:	d0ef      	beq.n	26e2 <_tcc_timer_init+0x2e>
	ASSERT(false);
    2702:	f240 128b 	movw	r2, #395	; 0x18b
    2706:	493d      	ldr	r1, [pc, #244]	; (27fc <_tcc_timer_init+0x148>)
    2708:	2000      	movs	r0, #0
    270a:	4b3d      	ldr	r3, [pc, #244]	; (2800 <_tcc_timer_init+0x14c>)
    270c:	4798      	blx	r3
	return -1;
    270e:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2712:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2714:	22e4      	movs	r2, #228	; 0xe4
    2716:	4939      	ldr	r1, [pc, #228]	; (27fc <_tcc_timer_init+0x148>)
    2718:	2001      	movs	r0, #1
    271a:	4b39      	ldr	r3, [pc, #228]	; (2800 <_tcc_timer_init+0x14c>)
    271c:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    271e:	68a3      	ldr	r3, [r4, #8]
    2720:	f013 0f01 	tst.w	r3, #1
    2724:	d1fb      	bne.n	271e <_tcc_timer_init+0x6a>
    2726:	68a3      	ldr	r3, [r4, #8]
    2728:	f013 0f03 	tst.w	r3, #3
    272c:	d1fb      	bne.n	2726 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    272e:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2730:	f013 0f02 	tst.w	r3, #2
    2734:	d15d      	bne.n	27f2 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2736:	68a3      	ldr	r3, [r4, #8]
    2738:	f013 0f01 	tst.w	r3, #1
    273c:	d1fb      	bne.n	2736 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    273e:	6823      	ldr	r3, [r4, #0]
    2740:	f043 0301 	orr.w	r3, r3, #1
    2744:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2746:	68a3      	ldr	r3, [r4, #8]
    2748:	f013 0f01 	tst.w	r3, #1
    274c:	d1fb      	bne.n	2746 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    274e:	4a2a      	ldr	r2, [pc, #168]	; (27f8 <_tcc_timer_init+0x144>)
    2750:	00f1      	lsls	r1, r6, #3
    2752:	198b      	adds	r3, r1, r6
    2754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2758:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    275a:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    275c:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    275e:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2760:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2762:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2764:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2766:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2768:	440e      	add	r6, r1
    276a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    276e:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2770:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2772:	2301      	movs	r3, #1
    2774:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2776:	4b23      	ldr	r3, [pc, #140]	; (2804 <_tcc_timer_init+0x150>)
    2778:	429c      	cmp	r4, r3
    277a:	d02e      	beq.n	27da <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    277c:	4b22      	ldr	r3, [pc, #136]	; (2808 <_tcc_timer_init+0x154>)
    277e:	429c      	cmp	r4, r3
    2780:	d02e      	beq.n	27e0 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2782:	4b22      	ldr	r3, [pc, #136]	; (280c <_tcc_timer_init+0x158>)
    2784:	429c      	cmp	r4, r3
    2786:	d02e      	beq.n	27e6 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2788:	4b21      	ldr	r3, [pc, #132]	; (2810 <_tcc_timer_init+0x15c>)
    278a:	429c      	cmp	r4, r3
    278c:	d02e      	beq.n	27ec <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    278e:	4b21      	ldr	r3, [pc, #132]	; (2814 <_tcc_timer_init+0x160>)
    2790:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2792:	bf04      	itt	eq
    2794:	4b20      	ldreq	r3, [pc, #128]	; (2818 <_tcc_timer_init+0x164>)
    2796:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2798:	4620      	mov	r0, r4
    279a:	4b20      	ldr	r3, [pc, #128]	; (281c <_tcc_timer_init+0x168>)
    279c:	4798      	blx	r3
    279e:	f000 031f 	and.w	r3, r0, #31
    27a2:	2201      	movs	r2, #1
    27a4:	409a      	lsls	r2, r3
    27a6:	0943      	lsrs	r3, r0, #5
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    27ae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    27b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    27b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27ba:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    27be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    27c2:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    27c4:	2000      	movs	r0, #0
}
    27c6:	b007      	add	sp, #28
    27c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    27ca:	2601      	movs	r6, #1
    27cc:	e789      	b.n	26e2 <_tcc_timer_init+0x2e>
    27ce:	2602      	movs	r6, #2
    27d0:	e787      	b.n	26e2 <_tcc_timer_init+0x2e>
    27d2:	2603      	movs	r6, #3
    27d4:	e785      	b.n	26e2 <_tcc_timer_init+0x2e>
    27d6:	2600      	movs	r6, #0
    27d8:	e783      	b.n	26e2 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    27da:	4b0f      	ldr	r3, [pc, #60]	; (2818 <_tcc_timer_init+0x164>)
    27dc:	601d      	str	r5, [r3, #0]
    27de:	e7d3      	b.n	2788 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    27e0:	4b0d      	ldr	r3, [pc, #52]	; (2818 <_tcc_timer_init+0x164>)
    27e2:	605d      	str	r5, [r3, #4]
    27e4:	e7d3      	b.n	278e <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    27e6:	4b0c      	ldr	r3, [pc, #48]	; (2818 <_tcc_timer_init+0x164>)
    27e8:	609d      	str	r5, [r3, #8]
    27ea:	e7d5      	b.n	2798 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    27ec:	4b0a      	ldr	r3, [pc, #40]	; (2818 <_tcc_timer_init+0x164>)
    27ee:	60dd      	str	r5, [r3, #12]
    27f0:	e7d2      	b.n	2798 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    27f2:	f06f 0010 	mvn.w	r0, #16
    27f6:	e7e6      	b.n	27c6 <_tcc_timer_init+0x112>
    27f8:	00006d5c 	.word	0x00006d5c
    27fc:	00006e24 	.word	0x00006e24
    2800:	0000199d 	.word	0x0000199d
    2804:	41016000 	.word	0x41016000
    2808:	41018000 	.word	0x41018000
    280c:	42000c00 	.word	0x42000c00
    2810:	42001000 	.word	0x42001000
    2814:	43001000 	.word	0x43001000
    2818:	200007a4 	.word	0x200007a4
    281c:	000025a5 	.word	0x000025a5

00002820 <_tcc_timer_set_irq>:
{
    2820:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2822:	68c0      	ldr	r0, [r0, #12]
    2824:	4b02      	ldr	r3, [pc, #8]	; (2830 <_tcc_timer_set_irq+0x10>)
    2826:	4798      	blx	r3
    2828:	4b02      	ldr	r3, [pc, #8]	; (2834 <_tcc_timer_set_irq+0x14>)
    282a:	4798      	blx	r3
    282c:	bd08      	pop	{r3, pc}
    282e:	bf00      	nop
    2830:	000025a5 	.word	0x000025a5
    2834:	00001cc1 	.word	0x00001cc1

00002838 <_tcc_get_timer>:
}
    2838:	4800      	ldr	r0, [pc, #0]	; (283c <_tcc_get_timer+0x4>)
    283a:	4770      	bx	lr
    283c:	20000068 	.word	0x20000068

00002840 <TCC0_0_Handler>:
{
    2840:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2842:	4b02      	ldr	r3, [pc, #8]	; (284c <TCC0_0_Handler+0xc>)
    2844:	6818      	ldr	r0, [r3, #0]
    2846:	4b02      	ldr	r3, [pc, #8]	; (2850 <TCC0_0_Handler+0x10>)
    2848:	4798      	blx	r3
    284a:	bd08      	pop	{r3, pc}
    284c:	200007a4 	.word	0x200007a4
    2850:	0000269b 	.word	0x0000269b

00002854 <TCC1_0_Handler>:
{
    2854:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2856:	4b02      	ldr	r3, [pc, #8]	; (2860 <TCC1_0_Handler+0xc>)
    2858:	6858      	ldr	r0, [r3, #4]
    285a:	4b02      	ldr	r3, [pc, #8]	; (2864 <TCC1_0_Handler+0x10>)
    285c:	4798      	blx	r3
    285e:	bd08      	pop	{r3, pc}
    2860:	200007a4 	.word	0x200007a4
    2864:	0000269b 	.word	0x0000269b

00002868 <TCC2_0_Handler>:
{
    2868:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    286a:	4b02      	ldr	r3, [pc, #8]	; (2874 <TCC2_0_Handler+0xc>)
    286c:	6898      	ldr	r0, [r3, #8]
    286e:	4b02      	ldr	r3, [pc, #8]	; (2878 <TCC2_0_Handler+0x10>)
    2870:	4798      	blx	r3
    2872:	bd08      	pop	{r3, pc}
    2874:	200007a4 	.word	0x200007a4
    2878:	0000269b 	.word	0x0000269b

0000287c <TCC3_0_Handler>:
{
    287c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    287e:	4b02      	ldr	r3, [pc, #8]	; (2888 <TCC3_0_Handler+0xc>)
    2880:	68d8      	ldr	r0, [r3, #12]
    2882:	4b02      	ldr	r3, [pc, #8]	; (288c <TCC3_0_Handler+0x10>)
    2884:	4798      	blx	r3
    2886:	bd08      	pop	{r3, pc}
    2888:	200007a4 	.word	0x200007a4
    288c:	0000269b 	.word	0x0000269b

00002890 <TCC4_0_Handler>:
{
    2890:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2892:	4b02      	ldr	r3, [pc, #8]	; (289c <TCC4_0_Handler+0xc>)
    2894:	6918      	ldr	r0, [r3, #16]
    2896:	4b02      	ldr	r3, [pc, #8]	; (28a0 <TCC4_0_Handler+0x10>)
    2898:	4798      	blx	r3
    289a:	bd08      	pop	{r3, pc}
    289c:	200007a4 	.word	0x200007a4
    28a0:	0000269b 	.word	0x0000269b

000028a4 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    28a4:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28a6:	6913      	ldr	r3, [r2, #16]
    28a8:	f013 0f03 	tst.w	r3, #3
    28ac:	d1fb      	bne.n	28a6 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    28ae:	6813      	ldr	r3, [r2, #0]
    28b0:	f043 0302 	orr.w	r3, r3, #2
    28b4:	6013      	str	r3, [r2, #0]
    28b6:	4770      	bx	lr

000028b8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    28b8:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28ba:	6913      	ldr	r3, [r2, #16]
    28bc:	f013 0f03 	tst.w	r3, #3
    28c0:	d1fb      	bne.n	28ba <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    28c2:	6813      	ldr	r3, [r2, #0]
    28c4:	f023 0302 	bic.w	r3, r3, #2
    28c8:	6013      	str	r3, [r2, #0]
    28ca:	4770      	bx	lr

000028cc <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    28cc:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    28ce:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28d0:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28d4:	2b02      	cmp	r3, #2
    28d6:	d00b      	beq.n	28f0 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    28d8:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28da:	f013 0f0c 	tst.w	r3, #12
    28de:	d009      	beq.n	28f4 <_tc_timer_set_period+0x28>
    28e0:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    28e6:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    28e8:	bf04      	itt	eq
    28ea:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    28ec:	76d1      	strbeq	r1, [r2, #27]
    28ee:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    28f0:	61d1      	str	r1, [r2, #28]
    28f2:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    28f4:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    28f6:	8391      	strh	r1, [r2, #28]
    28f8:	4770      	bx	lr

000028fa <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    28fa:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    28fc:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    28fe:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2902:	2b02      	cmp	r3, #2
    2904:	d00c      	beq.n	2920 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2906:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2908:	f013 0f0c 	tst.w	r3, #12
    290c:	d00a      	beq.n	2924 <_tc_timer_get_period+0x2a>
    290e:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2910:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2914:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2916:	bf06      	itte	eq
    2918:	7ed0      	ldrbeq	r0, [r2, #27]
    291a:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    291c:	2000      	movne	r0, #0
}
    291e:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2920:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2922:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2924:	8b90      	ldrh	r0, [r2, #28]
    2926:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2928:	4770      	bx	lr

0000292a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    292a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    292c:	6913      	ldr	r3, [r2, #16]
    292e:	f013 0f03 	tst.w	r3, #3
    2932:	d1fb      	bne.n	292c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2934:	6810      	ldr	r0, [r2, #0]
}
    2936:	f3c0 0040 	ubfx	r0, r0, #1, #1
    293a:	4770      	bx	lr

0000293c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    293c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    293e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2940:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2942:	f012 0f01 	tst.w	r2, #1
    2946:	d100      	bne.n	294a <tc_interrupt_handler+0xe>
    2948:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    294a:	2201      	movs	r2, #1
    294c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    294e:	6803      	ldr	r3, [r0, #0]
    2950:	4798      	blx	r3
	}
}
    2952:	e7f9      	b.n	2948 <tc_interrupt_handler+0xc>

00002954 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2954:	b538      	push	{r3, r4, r5, lr}
    2956:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2958:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    295a:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    295c:	f013 0f01 	tst.w	r3, #1
    2960:	d004      	beq.n	296c <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2962:	2301      	movs	r3, #1
    2964:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2966:	6803      	ldr	r3, [r0, #0]
    2968:	b103      	cbz	r3, 296c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    296a:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    296c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    296e:	f013 0f02 	tst.w	r3, #2
    2972:	d005      	beq.n	2980 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2974:	2302      	movs	r3, #2
    2976:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2978:	686b      	ldr	r3, [r5, #4]
    297a:	b10b      	cbz	r3, 2980 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    297c:	4628      	mov	r0, r5
    297e:	4798      	blx	r3
    2980:	bd38      	pop	{r3, r4, r5, pc}
	...

00002984 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2984:	4b11      	ldr	r3, [pc, #68]	; (29cc <_tc_init_irq_param+0x48>)
    2986:	4298      	cmp	r0, r3
    2988:	d011      	beq.n	29ae <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    298a:	4b11      	ldr	r3, [pc, #68]	; (29d0 <_tc_init_irq_param+0x4c>)
    298c:	4298      	cmp	r0, r3
    298e:	d011      	beq.n	29b4 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2990:	4b10      	ldr	r3, [pc, #64]	; (29d4 <_tc_init_irq_param+0x50>)
    2992:	4298      	cmp	r0, r3
    2994:	d011      	beq.n	29ba <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2996:	4b10      	ldr	r3, [pc, #64]	; (29d8 <_tc_init_irq_param+0x54>)
    2998:	4298      	cmp	r0, r3
    299a:	d011      	beq.n	29c0 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    299c:	4b0f      	ldr	r3, [pc, #60]	; (29dc <_tc_init_irq_param+0x58>)
    299e:	4298      	cmp	r0, r3
    29a0:	d011      	beq.n	29c6 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    29a2:	4b0f      	ldr	r3, [pc, #60]	; (29e0 <_tc_init_irq_param+0x5c>)
    29a4:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    29a6:	bf04      	itt	eq
    29a8:	4b0e      	ldreq	r3, [pc, #56]	; (29e4 <_tc_init_irq_param+0x60>)
    29aa:	6159      	streq	r1, [r3, #20]
    29ac:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    29ae:	4b0d      	ldr	r3, [pc, #52]	; (29e4 <_tc_init_irq_param+0x60>)
    29b0:	6019      	str	r1, [r3, #0]
    29b2:	e7f0      	b.n	2996 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    29b4:	4b0b      	ldr	r3, [pc, #44]	; (29e4 <_tc_init_irq_param+0x60>)
    29b6:	6059      	str	r1, [r3, #4]
    29b8:	e7f0      	b.n	299c <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    29ba:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <_tc_init_irq_param+0x60>)
    29bc:	6099      	str	r1, [r3, #8]
    29be:	e7f0      	b.n	29a2 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    29c0:	4b08      	ldr	r3, [pc, #32]	; (29e4 <_tc_init_irq_param+0x60>)
    29c2:	60d9      	str	r1, [r3, #12]
    29c4:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    29c6:	4b07      	ldr	r3, [pc, #28]	; (29e4 <_tc_init_irq_param+0x60>)
    29c8:	6119      	str	r1, [r3, #16]
    29ca:	4770      	bx	lr
    29cc:	40003800 	.word	0x40003800
    29d0:	40003c00 	.word	0x40003c00
    29d4:	4101a000 	.word	0x4101a000
    29d8:	4101c000 	.word	0x4101c000
    29dc:	42001400 	.word	0x42001400
    29e0:	42001800 	.word	0x42001800
    29e4:	200007b8 	.word	0x200007b8

000029e8 <get_tc_index>:
{
    29e8:	b570      	push	{r4, r5, r6, lr}
    29ea:	b086      	sub	sp, #24
    29ec:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    29ee:	466c      	mov	r4, sp
    29f0:	4d18      	ldr	r5, [pc, #96]	; (2a54 <get_tc_index+0x6c>)
    29f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    29f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    29f6:	e895 0003 	ldmia.w	r5, {r0, r1}
    29fa:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    29fe:	9b00      	ldr	r3, [sp, #0]
    2a00:	42b3      	cmp	r3, r6
    2a02:	d021      	beq.n	2a48 <get_tc_index+0x60>
    2a04:	4631      	mov	r1, r6
    2a06:	2301      	movs	r3, #1
    2a08:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2a0c:	428a      	cmp	r2, r1
    2a0e:	d01c      	beq.n	2a4a <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2a10:	3301      	adds	r3, #1
    2a12:	2b06      	cmp	r3, #6
    2a14:	d1f8      	bne.n	2a08 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2a16:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2a18:	4a0f      	ldr	r2, [pc, #60]	; (2a58 <get_tc_index+0x70>)
    2a1a:	7812      	ldrb	r2, [r2, #0]
    2a1c:	429a      	cmp	r2, r3
    2a1e:	d016      	beq.n	2a4e <get_tc_index+0x66>
    2a20:	4a0d      	ldr	r2, [pc, #52]	; (2a58 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2a22:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2a24:	7d11      	ldrb	r1, [r2, #20]
    2a26:	4299      	cmp	r1, r3
    2a28:	d012      	beq.n	2a50 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2a2a:	3001      	adds	r0, #1
    2a2c:	b2c0      	uxtb	r0, r0
    2a2e:	3214      	adds	r2, #20
    2a30:	2806      	cmp	r0, #6
    2a32:	d1f7      	bne.n	2a24 <get_tc_index+0x3c>
	ASSERT(false);
    2a34:	f240 2227 	movw	r2, #551	; 0x227
    2a38:	4908      	ldr	r1, [pc, #32]	; (2a5c <get_tc_index+0x74>)
    2a3a:	2000      	movs	r0, #0
    2a3c:	4b08      	ldr	r3, [pc, #32]	; (2a60 <get_tc_index+0x78>)
    2a3e:	4798      	blx	r3
	return -1;
    2a40:	f04f 30ff 	mov.w	r0, #4294967295
}
    2a44:	b006      	add	sp, #24
    2a46:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2a48:	2300      	movs	r3, #0
			return i;
    2a4a:	b2db      	uxtb	r3, r3
    2a4c:	e7e4      	b.n	2a18 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2a4e:	2000      	movs	r0, #0
			return i;
    2a50:	b240      	sxtb	r0, r0
    2a52:	e7f7      	b.n	2a44 <get_tc_index+0x5c>
    2a54:	00006e3c 	.word	0x00006e3c
    2a58:	20000088 	.word	0x20000088
    2a5c:	00006e54 	.word	0x00006e54
    2a60:	0000199d 	.word	0x0000199d

00002a64 <_tc_timer_init>:
{
    2a64:	b570      	push	{r4, r5, r6, lr}
    2a66:	4606      	mov	r6, r0
    2a68:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2a6a:	4608      	mov	r0, r1
    2a6c:	4b48      	ldr	r3, [pc, #288]	; (2b90 <_tc_timer_init+0x12c>)
    2a6e:	4798      	blx	r3
    2a70:	4605      	mov	r5, r0
	device->hw = hw;
    2a72:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2a74:	22af      	movs	r2, #175	; 0xaf
    2a76:	4947      	ldr	r1, [pc, #284]	; (2b94 <_tc_timer_init+0x130>)
    2a78:	2001      	movs	r0, #1
    2a7a:	4b47      	ldr	r3, [pc, #284]	; (2b98 <_tc_timer_init+0x134>)
    2a7c:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a7e:	6923      	ldr	r3, [r4, #16]
    2a80:	f013 0f01 	tst.w	r3, #1
    2a84:	d1fb      	bne.n	2a7e <_tc_timer_init+0x1a>
    2a86:	6923      	ldr	r3, [r4, #16]
    2a88:	f013 0f03 	tst.w	r3, #3
    2a8c:	d1fb      	bne.n	2a86 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2a8e:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2a90:	f013 0f02 	tst.w	r3, #2
    2a94:	d175      	bne.n	2b82 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a96:	6923      	ldr	r3, [r4, #16]
    2a98:	f013 0f01 	tst.w	r3, #1
    2a9c:	d1fb      	bne.n	2a96 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2a9e:	6823      	ldr	r3, [r4, #0]
    2aa0:	f043 0301 	orr.w	r3, r3, #1
    2aa4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2aa6:	6923      	ldr	r3, [r4, #16]
    2aa8:	f013 0f01 	tst.w	r3, #1
    2aac:	d1fb      	bne.n	2aa6 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2aae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ab2:	4a3a      	ldr	r2, [pc, #232]	; (2b9c <_tc_timer_init+0x138>)
    2ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ab8:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2aba:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2abc:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2abe:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2ac0:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2ac2:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2ac4:	2201      	movs	r2, #1
    2ac6:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2ac8:	685b      	ldr	r3, [r3, #4]
    2aca:	f003 030c 	and.w	r3, r3, #12
    2ace:	2b08      	cmp	r3, #8
    2ad0:	d03f      	beq.n	2b52 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d147      	bne.n	2b66 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2ad6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ada:	4a30      	ldr	r2, [pc, #192]	; (2b9c <_tc_timer_init+0x138>)
    2adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ae0:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2ae2:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2ae4:	8a1b      	ldrh	r3, [r3, #16]
    2ae6:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2ae8:	2301      	movs	r3, #1
    2aea:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2aec:	4631      	mov	r1, r6
    2aee:	4620      	mov	r0, r4
    2af0:	4b2b      	ldr	r3, [pc, #172]	; (2ba0 <_tc_timer_init+0x13c>)
    2af2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2af4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2af8:	4a28      	ldr	r2, [pc, #160]	; (2b9c <_tc_timer_init+0x138>)
    2afa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b02:	2b00      	cmp	r3, #0
    2b04:	db40      	blt.n	2b88 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b06:	095a      	lsrs	r2, r3, #5
    2b08:	f003 031f 	and.w	r3, r3, #31
    2b0c:	2101      	movs	r1, #1
    2b0e:	fa01 f303 	lsl.w	r3, r1, r3
    2b12:	3220      	adds	r2, #32
    2b14:	4923      	ldr	r1, [pc, #140]	; (2ba4 <_tc_timer_init+0x140>)
    2b16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b1e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2b22:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b26:	4b1d      	ldr	r3, [pc, #116]	; (2b9c <_tc_timer_init+0x138>)
    2b28:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2b2c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2b30:	2b00      	cmp	r3, #0
    2b32:	db2b      	blt.n	2b8c <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b34:	0959      	lsrs	r1, r3, #5
    2b36:	f003 031f 	and.w	r3, r3, #31
    2b3a:	2201      	movs	r2, #1
    2b3c:	fa02 f303 	lsl.w	r3, r2, r3
    2b40:	4a18      	ldr	r2, [pc, #96]	; (2ba4 <_tc_timer_init+0x140>)
    2b42:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2b46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2b4e:	2000      	movs	r0, #0
    2b50:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2b52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b56:	4a11      	ldr	r2, [pc, #68]	; (2b9c <_tc_timer_init+0x138>)
    2b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b5c:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b5e:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2b60:	691b      	ldr	r3, [r3, #16]
    2b62:	6223      	str	r3, [r4, #32]
    2b64:	e7c0      	b.n	2ae8 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2b66:	2b04      	cmp	r3, #4
    2b68:	d1be      	bne.n	2ae8 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2b6a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b6e:	4a0b      	ldr	r2, [pc, #44]	; (2b9c <_tc_timer_init+0x138>)
    2b70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b74:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2b76:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2b78:	7c1a      	ldrb	r2, [r3, #16]
    2b7a:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2b7c:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2b7e:	76e3      	strb	r3, [r4, #27]
    2b80:	e7b2      	b.n	2ae8 <_tc_timer_init+0x84>
		return ERR_DENIED;
    2b82:	f06f 0010 	mvn.w	r0, #16
    2b86:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2b88:	2000      	movs	r0, #0
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
    2b8c:	2000      	movs	r0, #0
}
    2b8e:	bd70      	pop	{r4, r5, r6, pc}
    2b90:	000029e9 	.word	0x000029e9
    2b94:	00006e54 	.word	0x00006e54
    2b98:	0000199d 	.word	0x0000199d
    2b9c:	20000088 	.word	0x20000088
    2ba0:	00002985 	.word	0x00002985
    2ba4:	e000e100 	.word	0xe000e100

00002ba8 <_tc_timer_deinit>:
{
    2ba8:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2baa:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2bac:	4620      	mov	r0, r4
    2bae:	4b18      	ldr	r3, [pc, #96]	; (2c10 <_tc_timer_deinit+0x68>)
    2bb0:	4798      	blx	r3
    2bb2:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2bb4:	f240 1201 	movw	r2, #257	; 0x101
    2bb8:	4916      	ldr	r1, [pc, #88]	; (2c14 <_tc_timer_deinit+0x6c>)
    2bba:	2001      	movs	r0, #1
    2bbc:	4b16      	ldr	r3, [pc, #88]	; (2c18 <_tc_timer_deinit+0x70>)
    2bbe:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2bc0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2bc4:	4b15      	ldr	r3, [pc, #84]	; (2c1c <_tc_timer_deinit+0x74>)
    2bc6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2bca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2bce:	2b00      	cmp	r3, #0
    2bd0:	db0d      	blt.n	2bee <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2bd2:	095a      	lsrs	r2, r3, #5
    2bd4:	f003 031f 	and.w	r3, r3, #31
    2bd8:	2101      	movs	r1, #1
    2bda:	fa01 f303 	lsl.w	r3, r1, r3
    2bde:	3220      	adds	r2, #32
    2be0:	490f      	ldr	r1, [pc, #60]	; (2c20 <_tc_timer_deinit+0x78>)
    2be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bea:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bee:	6923      	ldr	r3, [r4, #16]
    2bf0:	f013 0f03 	tst.w	r3, #3
    2bf4:	d1fb      	bne.n	2bee <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2bf6:	6823      	ldr	r3, [r4, #0]
    2bf8:	f023 0302 	bic.w	r3, r3, #2
    2bfc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bfe:	6923      	ldr	r3, [r4, #16]
    2c00:	f013 0f01 	tst.w	r3, #1
    2c04:	d1fb      	bne.n	2bfe <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2c06:	6823      	ldr	r3, [r4, #0]
    2c08:	f043 0301 	orr.w	r3, r3, #1
    2c0c:	6023      	str	r3, [r4, #0]
    2c0e:	bd38      	pop	{r3, r4, r5, pc}
    2c10:	000029e9 	.word	0x000029e9
    2c14:	00006e54 	.word	0x00006e54
    2c18:	0000199d 	.word	0x0000199d
    2c1c:	20000088 	.word	0x20000088
    2c20:	e000e100 	.word	0xe000e100

00002c24 <_tc_timer_set_irq>:
{
    2c24:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2c26:	68c0      	ldr	r0, [r0, #12]
    2c28:	4b08      	ldr	r3, [pc, #32]	; (2c4c <_tc_timer_set_irq+0x28>)
    2c2a:	4798      	blx	r3
    2c2c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2c2e:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    2c32:	4907      	ldr	r1, [pc, #28]	; (2c50 <_tc_timer_set_irq+0x2c>)
    2c34:	2001      	movs	r0, #1
    2c36:	4b07      	ldr	r3, [pc, #28]	; (2c54 <_tc_timer_set_irq+0x30>)
    2c38:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2c3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2c3e:	4b06      	ldr	r3, [pc, #24]	; (2c58 <_tc_timer_set_irq+0x34>)
    2c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2c44:	78a0      	ldrb	r0, [r4, #2]
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <_tc_timer_set_irq+0x38>)
    2c48:	4798      	blx	r3
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	000029e9 	.word	0x000029e9
    2c50:	00006e54 	.word	0x00006e54
    2c54:	0000199d 	.word	0x0000199d
    2c58:	20000088 	.word	0x20000088
    2c5c:	00001cc1 	.word	0x00001cc1

00002c60 <_pwm_init>:
{
    2c60:	b570      	push	{r4, r5, r6, lr}
    2c62:	4606      	mov	r6, r0
    2c64:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2c66:	4608      	mov	r0, r1
    2c68:	4b3f      	ldr	r3, [pc, #252]	; (2d68 <_pwm_init+0x108>)
    2c6a:	4798      	blx	r3
    2c6c:	4605      	mov	r5, r0
	device->hw = hw;
    2c6e:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c70:	6923      	ldr	r3, [r4, #16]
    2c72:	f013 0f01 	tst.w	r3, #1
    2c76:	d1fb      	bne.n	2c70 <_pwm_init+0x10>
    2c78:	6923      	ldr	r3, [r4, #16]
    2c7a:	f013 0f03 	tst.w	r3, #3
    2c7e:	d1fb      	bne.n	2c78 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2c80:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2c82:	f013 0f02 	tst.w	r3, #2
    2c86:	d165      	bne.n	2d54 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c88:	6923      	ldr	r3, [r4, #16]
    2c8a:	f013 0f01 	tst.w	r3, #1
    2c8e:	d1fb      	bne.n	2c88 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2c90:	6823      	ldr	r3, [r4, #0]
    2c92:	f043 0301 	orr.w	r3, r3, #1
    2c96:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c98:	6923      	ldr	r3, [r4, #16]
    2c9a:	f013 0f01 	tst.w	r3, #1
    2c9e:	d1fb      	bne.n	2c98 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2ca0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ca4:	4a31      	ldr	r2, [pc, #196]	; (2d6c <_pwm_init+0x10c>)
    2ca6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2caa:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2cac:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2cae:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2cb0:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2cb2:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2cb4:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2cb6:	2203      	movs	r2, #3
    2cb8:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2cba:	685b      	ldr	r3, [r3, #4]
    2cbc:	f003 030c 	and.w	r3, r3, #12
    2cc0:	2b08      	cmp	r3, #8
    2cc2:	d03d      	beq.n	2d40 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d148      	bne.n	2d5a <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2cc8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ccc:	4a27      	ldr	r2, [pc, #156]	; (2d6c <_pwm_init+0x10c>)
    2cce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2cd2:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2cd4:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2cd6:	8a1b      	ldrh	r3, [r3, #16]
    2cd8:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2cda:	4631      	mov	r1, r6
    2cdc:	4620      	mov	r0, r4
    2cde:	4b24      	ldr	r3, [pc, #144]	; (2d70 <_pwm_init+0x110>)
    2ce0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2ce2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ce6:	4a21      	ldr	r2, [pc, #132]	; (2d6c <_pwm_init+0x10c>)
    2ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	db35      	blt.n	2d60 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2cf4:	095a      	lsrs	r2, r3, #5
    2cf6:	f003 031f 	and.w	r3, r3, #31
    2cfa:	2101      	movs	r1, #1
    2cfc:	fa01 f303 	lsl.w	r3, r1, r3
    2d00:	3220      	adds	r2, #32
    2d02:	491c      	ldr	r1, [pc, #112]	; (2d74 <_pwm_init+0x114>)
    2d04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d0c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2d10:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2d14:	4b15      	ldr	r3, [pc, #84]	; (2d6c <_pwm_init+0x10c>)
    2d16:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2d1a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2d1e:	2b00      	cmp	r3, #0
    2d20:	db20      	blt.n	2d64 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d22:	0959      	lsrs	r1, r3, #5
    2d24:	f003 031f 	and.w	r3, r3, #31
    2d28:	2201      	movs	r2, #1
    2d2a:	fa02 f303 	lsl.w	r3, r2, r3
    2d2e:	4a11      	ldr	r2, [pc, #68]	; (2d74 <_pwm_init+0x114>)
    2d30:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2d34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2d3c:	2000      	movs	r0, #0
    2d3e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2d40:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d44:	4a09      	ldr	r2, [pc, #36]	; (2d6c <_pwm_init+0x10c>)
    2d46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d4a:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2d4c:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2d4e:	691b      	ldr	r3, [r3, #16]
    2d50:	6223      	str	r3, [r4, #32]
    2d52:	e7c2      	b.n	2cda <_pwm_init+0x7a>
		return ERR_DENIED;
    2d54:	f06f 0010 	mvn.w	r0, #16
    2d58:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2d5a:	f04f 30ff 	mov.w	r0, #4294967295
    2d5e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2d60:	2000      	movs	r0, #0
    2d62:	bd70      	pop	{r4, r5, r6, pc}
    2d64:	2000      	movs	r0, #0
}
    2d66:	bd70      	pop	{r4, r5, r6, pc}
    2d68:	000029e9 	.word	0x000029e9
    2d6c:	20000088 	.word	0x20000088
    2d70:	00002985 	.word	0x00002985
    2d74:	e000e100 	.word	0xe000e100

00002d78 <_tc_get_timer>:
}
    2d78:	4800      	ldr	r0, [pc, #0]	; (2d7c <_tc_get_timer+0x4>)
    2d7a:	4770      	bx	lr
    2d7c:	20000100 	.word	0x20000100

00002d80 <_tc_get_pwm>:
}
    2d80:	2000      	movs	r0, #0
    2d82:	4770      	bx	lr

00002d84 <TC0_Handler>:
{
    2d84:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2d86:	4b02      	ldr	r3, [pc, #8]	; (2d90 <TC0_Handler+0xc>)
    2d88:	6818      	ldr	r0, [r3, #0]
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <TC0_Handler+0x10>)
    2d8c:	4798      	blx	r3
    2d8e:	bd08      	pop	{r3, pc}
    2d90:	200007b8 	.word	0x200007b8
    2d94:	00002955 	.word	0x00002955

00002d98 <TC1_Handler>:
{
    2d98:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    2d9a:	4b02      	ldr	r3, [pc, #8]	; (2da4 <TC1_Handler+0xc>)
    2d9c:	6858      	ldr	r0, [r3, #4]
    2d9e:	4b02      	ldr	r3, [pc, #8]	; (2da8 <TC1_Handler+0x10>)
    2da0:	4798      	blx	r3
    2da2:	bd08      	pop	{r3, pc}
    2da4:	200007b8 	.word	0x200007b8
    2da8:	00002955 	.word	0x00002955

00002dac <TC2_Handler>:
{
    2dac:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    2dae:	4b02      	ldr	r3, [pc, #8]	; (2db8 <TC2_Handler+0xc>)
    2db0:	6898      	ldr	r0, [r3, #8]
    2db2:	4b02      	ldr	r3, [pc, #8]	; (2dbc <TC2_Handler+0x10>)
    2db4:	4798      	blx	r3
    2db6:	bd08      	pop	{r3, pc}
    2db8:	200007b8 	.word	0x200007b8
    2dbc:	00002955 	.word	0x00002955

00002dc0 <TC3_Handler>:
{
    2dc0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    2dc2:	4b02      	ldr	r3, [pc, #8]	; (2dcc <TC3_Handler+0xc>)
    2dc4:	68d8      	ldr	r0, [r3, #12]
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <TC3_Handler+0x10>)
    2dc8:	4798      	blx	r3
    2dca:	bd08      	pop	{r3, pc}
    2dcc:	200007b8 	.word	0x200007b8
    2dd0:	0000293d 	.word	0x0000293d

00002dd4 <TC4_Handler>:
{
    2dd4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    2dd6:	4b02      	ldr	r3, [pc, #8]	; (2de0 <TC4_Handler+0xc>)
    2dd8:	6918      	ldr	r0, [r3, #16]
    2dda:	4b02      	ldr	r3, [pc, #8]	; (2de4 <TC4_Handler+0x10>)
    2ddc:	4798      	blx	r3
    2dde:	bd08      	pop	{r3, pc}
    2de0:	200007b8 	.word	0x200007b8
    2de4:	0000293d 	.word	0x0000293d

00002de8 <TC5_Handler>:
{
    2de8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    2dea:	4b02      	ldr	r3, [pc, #8]	; (2df4 <TC5_Handler+0xc>)
    2dec:	6958      	ldr	r0, [r3, #20]
    2dee:	4b02      	ldr	r3, [pc, #8]	; (2df8 <TC5_Handler+0x10>)
    2df0:	4798      	blx	r3
    2df2:	bd08      	pop	{r3, pc}
    2df4:	200007b8 	.word	0x200007b8
    2df8:	0000293d 	.word	0x0000293d

00002dfc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2dfc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2dfe:	4604      	mov	r4, r0
    2e00:	b330      	cbz	r0, 2e50 <_wdt_init+0x54>
    2e02:	6800      	ldr	r0, [r0, #0]
    2e04:	3000      	adds	r0, #0
    2e06:	bf18      	it	ne
    2e08:	2001      	movne	r0, #1
    2e0a:	225a      	movs	r2, #90	; 0x5a
    2e0c:	4914      	ldr	r1, [pc, #80]	; (2e60 <_wdt_init+0x64>)
    2e0e:	4b15      	ldr	r3, [pc, #84]	; (2e64 <_wdt_init+0x68>)
    2e10:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    2e12:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2e14:	689a      	ldr	r2, [r3, #8]
    2e16:	f012 0f0e 	tst.w	r2, #14
    2e1a:	d1fb      	bne.n	2e14 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2e1c:	781a      	ldrb	r2, [r3, #0]
    2e1e:	09d2      	lsrs	r2, r2, #7
    2e20:	d118      	bne.n	2e54 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2e22:	689a      	ldr	r2, [r3, #8]
    2e24:	f012 0f0e 	tst.w	r2, #14
    2e28:	d1fb      	bne.n	2e22 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2e2a:	781a      	ldrb	r2, [r3, #0]
    2e2c:	f012 0f02 	tst.w	r2, #2
    2e30:	d113      	bne.n	2e5a <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2e32:	689a      	ldr	r2, [r3, #8]
    2e34:	f012 0f0e 	tst.w	r2, #14
    2e38:	d1fb      	bne.n	2e32 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    2e3a:	781a      	ldrb	r2, [r3, #0]
    2e3c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2e40:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    2e42:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2e44:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2e4a:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2e4c:	2000      	movs	r0, #0
    2e4e:	bd10      	pop	{r4, pc}
    2e50:	2000      	movs	r0, #0
    2e52:	e7da      	b.n	2e0a <_wdt_init+0xe>
		return ERR_DENIED;
    2e54:	f06f 0010 	mvn.w	r0, #16
    2e58:	bd10      	pop	{r4, pc}
    2e5a:	f06f 0010 	mvn.w	r0, #16
}
    2e5e:	bd10      	pop	{r4, pc}
    2e60:	00006e68 	.word	0x00006e68
    2e64:	0000199d 	.word	0x0000199d

00002e68 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    2e68:	b570      	push	{r4, r5, r6, lr}
    2e6a:	460d      	mov	r5, r1
    2e6c:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2e6e:	4606      	mov	r6, r0
    2e70:	2800      	cmp	r0, #0
    2e72:	d044      	beq.n	2efe <_wdt_set_timeout_period+0x96>
    2e74:	6800      	ldr	r0, [r0, #0]
    2e76:	3000      	adds	r0, #0
    2e78:	bf18      	it	ne
    2e7a:	2001      	movne	r0, #1
    2e7c:	2284      	movs	r2, #132	; 0x84
    2e7e:	493f      	ldr	r1, [pc, #252]	; (2f7c <_wdt_set_timeout_period+0x114>)
    2e80:	4b3f      	ldr	r3, [pc, #252]	; (2f80 <_wdt_set_timeout_period+0x118>)
    2e82:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    2e84:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2e86:	6893      	ldr	r3, [r2, #8]
    2e88:	f013 0f0e 	tst.w	r3, #14
    2e8c:	d1fb      	bne.n	2e86 <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    2e8e:	7813      	ldrb	r3, [r2, #0]
    2e90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e94:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    2e96:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2e98:	688b      	ldr	r3, [r1, #8]
    2e9a:	f013 0f0e 	tst.w	r3, #14
    2e9e:	d1fb      	bne.n	2e98 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    2ea0:	780b      	ldrb	r3, [r1, #0]
    2ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ea6:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    2ea8:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2eaa:	6899      	ldr	r1, [r3, #8]
    2eac:	f011 0f0e 	tst.w	r1, #14
    2eb0:	d1fb      	bne.n	2eaa <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2eb2:	781a      	ldrb	r2, [r3, #0]
    2eb4:	09d2      	lsrs	r2, r2, #7
    2eb6:	d158      	bne.n	2f6a <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2eb8:	6899      	ldr	r1, [r3, #8]
    2eba:	f011 0f0e 	tst.w	r1, #14
    2ebe:	d1fb      	bne.n	2eb8 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2ec0:	781a      	ldrb	r2, [r3, #0]
    2ec2:	f012 0f02 	tst.w	r2, #2
    2ec6:	d153      	bne.n	2f70 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    2ec8:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    2ecc:	4628      	mov	r0, r5
    2ece:	2100      	movs	r1, #0
    2ed0:	ea50 0201 	orrs.w	r2, r0, r1
    2ed4:	d14f      	bne.n	2f76 <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    2ed6:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    2eda:	d038      	beq.n	2f4e <_wdt_set_timeout_period+0xe6>
    2edc:	d911      	bls.n	2f02 <_wdt_set_timeout_period+0x9a>
    2ede:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    2ee2:	d038      	beq.n	2f56 <_wdt_set_timeout_period+0xee>
    2ee4:	d927      	bls.n	2f36 <_wdt_set_timeout_period+0xce>
    2ee6:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    2eea:	d038      	beq.n	2f5e <_wdt_set_timeout_period+0xf6>
    2eec:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    2ef0:	d037      	beq.n	2f62 <_wdt_set_timeout_period+0xfa>
    2ef2:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    2ef6:	d030      	beq.n	2f5a <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    2ef8:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    2efc:	bd70      	pop	{r4, r5, r6, pc}
    2efe:	2000      	movs	r0, #0
    2f00:	e7bc      	b.n	2e7c <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    2f02:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    2f06:	d01e      	beq.n	2f46 <_wdt_set_timeout_period+0xde>
    2f08:	d80d      	bhi.n	2f26 <_wdt_set_timeout_period+0xbe>
    2f0a:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    2f0e:	d02a      	beq.n	2f66 <_wdt_set_timeout_period+0xfe>
    2f10:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    2f14:	d1f0      	bne.n	2ef8 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    2f16:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2f18:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2f1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    2f1e:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    2f20:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    2f22:	2000      	movs	r0, #0
    2f24:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    2f26:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    2f2a:	d00e      	beq.n	2f4a <_wdt_set_timeout_period+0xe2>
    2f2c:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    2f30:	d1e2      	bne.n	2ef8 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    2f32:	2104      	movs	r1, #4
			break;
    2f34:	e7f0      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    2f36:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    2f3a:	d00a      	beq.n	2f52 <_wdt_set_timeout_period+0xea>
    2f3c:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    2f40:	d1da      	bne.n	2ef8 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    2f42:	2107      	movs	r1, #7
			break;
    2f44:	e7e8      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    2f46:	2102      	movs	r1, #2
			break;
    2f48:	e7e6      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    2f4a:	2103      	movs	r1, #3
			break;
    2f4c:	e7e4      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    2f4e:	2105      	movs	r1, #5
			break;
    2f50:	e7e2      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    2f52:	2106      	movs	r1, #6
			break;
    2f54:	e7e0      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    2f56:	2108      	movs	r1, #8
			break;
    2f58:	e7de      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    2f5a:	2109      	movs	r1, #9
			break;
    2f5c:	e7dc      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    2f5e:	210a      	movs	r1, #10
			break;
    2f60:	e7da      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    2f62:	210b      	movs	r1, #11
			break;
    2f64:	e7d8      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    2f66:	2100      	movs	r1, #0
    2f68:	e7d6      	b.n	2f18 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    2f6a:	f06f 0010 	mvn.w	r0, #16
    2f6e:	bd70      	pop	{r4, r5, r6, pc}
    2f70:	f06f 0010 	mvn.w	r0, #16
    2f74:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    2f76:	f06f 000c 	mvn.w	r0, #12
    2f7a:	bd70      	pop	{r4, r5, r6, pc}
    2f7c:	00006e68 	.word	0x00006e68
    2f80:	0000199d 	.word	0x0000199d

00002f84 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    2f84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2f86:	4604      	mov	r4, r0
    2f88:	b198      	cbz	r0, 2fb2 <_wdt_enable+0x2e>
    2f8a:	6800      	ldr	r0, [r0, #0]
    2f8c:	3000      	adds	r0, #0
    2f8e:	bf18      	it	ne
    2f90:	2001      	movne	r0, #1
    2f92:	f240 1207 	movw	r2, #263	; 0x107
    2f96:	4908      	ldr	r1, [pc, #32]	; (2fb8 <_wdt_enable+0x34>)
    2f98:	4b08      	ldr	r3, [pc, #32]	; (2fbc <_wdt_enable+0x38>)
    2f9a:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    2f9c:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2f9e:	6893      	ldr	r3, [r2, #8]
    2fa0:	f013 0f0e 	tst.w	r3, #14
    2fa4:	d1fb      	bne.n	2f9e <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    2fa6:	7813      	ldrb	r3, [r2, #0]
    2fa8:	f043 0302 	orr.w	r3, r3, #2
    2fac:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    2fae:	2000      	movs	r0, #0
    2fb0:	bd10      	pop	{r4, pc}
    2fb2:	2000      	movs	r0, #0
    2fb4:	e7ed      	b.n	2f92 <_wdt_enable+0xe>
    2fb6:	bf00      	nop
    2fb8:	00006e68 	.word	0x00006e68
    2fbc:	0000199d 	.word	0x0000199d

00002fc0 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    2fc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2fc2:	4604      	mov	r4, r0
    2fc4:	b168      	cbz	r0, 2fe2 <_wdt_feed+0x22>
    2fc6:	6800      	ldr	r0, [r0, #0]
    2fc8:	3000      	adds	r0, #0
    2fca:	bf18      	it	ne
    2fcc:	2001      	movne	r0, #1
    2fce:	f240 1225 	movw	r2, #293	; 0x125
    2fd2:	4905      	ldr	r1, [pc, #20]	; (2fe8 <_wdt_feed+0x28>)
    2fd4:	4b05      	ldr	r3, [pc, #20]	; (2fec <_wdt_feed+0x2c>)
    2fd6:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    2fd8:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    2fda:	22a5      	movs	r2, #165	; 0xa5
    2fdc:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    2fde:	2000      	movs	r0, #0
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	2000      	movs	r0, #0
    2fe4:	e7f3      	b.n	2fce <_wdt_feed+0xe>
    2fe6:	bf00      	nop
    2fe8:	00006e68 	.word	0x00006e68
    2fec:	0000199d 	.word	0x0000199d

00002ff0 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    2ff0:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    2ff2:	2200      	movs	r2, #0
    2ff4:	2108      	movs	r1, #8
    2ff6:	2001      	movs	r0, #1
    2ff8:	4c11      	ldr	r4, [pc, #68]	; (3040 <createQueuesAndSemaphores+0x50>)
    2ffa:	47a0      	blx	r4
    2ffc:	4d11      	ldr	r5, [pc, #68]	; (3044 <createQueuesAndSemaphores+0x54>)
    2ffe:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    3000:	2200      	movs	r2, #0
    3002:	2101      	movs	r1, #1
    3004:	4608      	mov	r0, r1
    3006:	47a0      	blx	r4
    3008:	4b0f      	ldr	r3, [pc, #60]	; (3048 <createQueuesAndSemaphores+0x58>)
    300a:	6018      	str	r0, [r3, #0]
    DiagResponseQueue  = xQueueCreate(MAX_DIAG_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    300c:	2200      	movs	r2, #0
    300e:	210c      	movs	r1, #12
    3010:	2001      	movs	r0, #1
    3012:	47a0      	blx	r4
    3014:	4b0d      	ldr	r3, [pc, #52]	; (304c <createQueuesAndSemaphores+0x5c>)
    3016:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    3018:	682b      	ldr	r3, [r5, #0]
    301a:	b183      	cbz	r3, 303e <createQueuesAndSemaphores+0x4e>
       (AtReceiveQueue  != NULL) &&
    301c:	4b0a      	ldr	r3, [pc, #40]	; (3048 <createQueuesAndSemaphores+0x58>)
    if((AtTransmitQueue != NULL) &&
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	b16b      	cbz	r3, 303e <createQueuesAndSemaphores+0x4e>
       (AtReceiveQueue  != NULL) &&
    3022:	b160      	cbz	r0, 303e <createQueuesAndSemaphores+0x4e>
	   (DiagResponseQueue != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    3024:	480a      	ldr	r0, [pc, #40]	; (3050 <createQueuesAndSemaphores+0x60>)
    3026:	4b0b      	ldr	r3, [pc, #44]	; (3054 <createQueuesAndSemaphores+0x64>)
    3028:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    302a:	2203      	movs	r2, #3
    302c:	2100      	movs	r1, #0
    302e:	2001      	movs	r0, #1
    3030:	47a0      	blx	r4
    3032:	4b09      	ldr	r3, [pc, #36]	; (3058 <createQueuesAndSemaphores+0x68>)
    3034:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL))
    3036:	b110      	cbz	r0, 303e <createQueuesAndSemaphores+0x4e>
		{
			DEBUG_PRINT("Semaphores are created");
    3038:	4808      	ldr	r0, [pc, #32]	; (305c <createQueuesAndSemaphores+0x6c>)
    303a:	4b06      	ldr	r3, [pc, #24]	; (3054 <createQueuesAndSemaphores+0x64>)
    303c:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    303e:	bd38      	pop	{r3, r4, r5, pc}
    3040:	00003929 	.word	0x00003929
    3044:	20003154 	.word	0x20003154
    3048:	2000315c 	.word	0x2000315c
    304c:	20003138 	.word	0x20003138
    3050:	00006e80 	.word	0x00006e80
    3054:	00000c5d 	.word	0x00000c5d
    3058:	20003158 	.word	0x20003158
    305c:	00006e9c 	.word	0x00006e9c

00003060 <main>:
{
    3060:	b580      	push	{r7, lr}
    3062:	b082      	sub	sp, #8
    atmel_start_init();	
    3064:	4b29      	ldr	r3, [pc, #164]	; (310c <main+0xac>)
    3066:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    3068:	4b29      	ldr	r3, [pc, #164]	; (3110 <main+0xb0>)
    306a:	9301      	str	r3, [sp, #4]
    306c:	2702      	movs	r7, #2
    306e:	9700      	str	r7, [sp, #0]
    3070:	2300      	movs	r3, #0
    3072:	2296      	movs	r2, #150	; 0x96
    3074:	4927      	ldr	r1, [pc, #156]	; (3114 <main+0xb4>)
    3076:	4828      	ldr	r0, [pc, #160]	; (3118 <main+0xb8>)
    3078:	4d28      	ldr	r5, [pc, #160]	; (311c <main+0xbc>)
    307a:	47a8      	blx	r5
    307c:	4c28      	ldr	r4, [pc, #160]	; (3120 <main+0xc0>)
    307e:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    3080:	4b28      	ldr	r3, [pc, #160]	; (3124 <main+0xc4>)
    3082:	9301      	str	r3, [sp, #4]
    3084:	2601      	movs	r6, #1
    3086:	9600      	str	r6, [sp, #0]
    3088:	2300      	movs	r3, #0
    308a:	2296      	movs	r2, #150	; 0x96
    308c:	4926      	ldr	r1, [pc, #152]	; (3128 <main+0xc8>)
    308e:	4827      	ldr	r0, [pc, #156]	; (312c <main+0xcc>)
    3090:	47a8      	blx	r5
    3092:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    3094:	4b26      	ldr	r3, [pc, #152]	; (3130 <main+0xd0>)
    3096:	9301      	str	r3, [sp, #4]
    3098:	9700      	str	r7, [sp, #0]
    309a:	2300      	movs	r3, #0
    309c:	2296      	movs	r2, #150	; 0x96
    309e:	4925      	ldr	r1, [pc, #148]	; (3134 <main+0xd4>)
    30a0:	4825      	ldr	r0, [pc, #148]	; (3138 <main+0xd8>)
    30a2:	47a8      	blx	r5
    30a4:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    30a6:	4b25      	ldr	r3, [pc, #148]	; (313c <main+0xdc>)
    30a8:	9301      	str	r3, [sp, #4]
    30aa:	9600      	str	r6, [sp, #0]
    30ac:	2300      	movs	r3, #0
    30ae:	2296      	movs	r2, #150	; 0x96
    30b0:	4923      	ldr	r1, [pc, #140]	; (3140 <main+0xe0>)
    30b2:	4824      	ldr	r0, [pc, #144]	; (3144 <main+0xe4>)
    30b4:	47a8      	blx	r5
    30b6:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    30b8:	4b23      	ldr	r3, [pc, #140]	; (3148 <main+0xe8>)
    30ba:	9301      	str	r3, [sp, #4]
    30bc:	9600      	str	r6, [sp, #0]
    30be:	2300      	movs	r3, #0
    30c0:	2296      	movs	r2, #150	; 0x96
    30c2:	4922      	ldr	r1, [pc, #136]	; (314c <main+0xec>)
    30c4:	4822      	ldr	r0, [pc, #136]	; (3150 <main+0xf0>)
    30c6:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    30c8:	6823      	ldr	r3, [r4, #0]
    30ca:	42b3      	cmp	r3, r6
    30cc:	d006      	beq.n	30dc <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    30ce:	4821      	ldr	r0, [pc, #132]	; (3154 <main+0xf4>)
    30d0:	4b21      	ldr	r3, [pc, #132]	; (3158 <main+0xf8>)
    30d2:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    30d4:	4821      	ldr	r0, [pc, #132]	; (315c <main+0xfc>)
    30d6:	4b20      	ldr	r3, [pc, #128]	; (3158 <main+0xf8>)
    30d8:	4798      	blx	r3
    30da:	e7fe      	b.n	30da <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    30dc:	68e3      	ldr	r3, [r4, #12]
    30de:	42b3      	cmp	r3, r6
    30e0:	d1f5      	bne.n	30ce <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    30e2:	6863      	ldr	r3, [r4, #4]
    30e4:	42b3      	cmp	r3, r6
    30e6:	d1f2      	bne.n	30ce <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    30e8:	68a3      	ldr	r3, [r4, #8]
    30ea:	42b3      	cmp	r3, r6
    30ec:	d1ef      	bne.n	30ce <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    30ee:	42b0      	cmp	r0, r6
    30f0:	d1ed      	bne.n	30ce <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    30f2:	481b      	ldr	r0, [pc, #108]	; (3160 <main+0x100>)
    30f4:	4b18      	ldr	r3, [pc, #96]	; (3158 <main+0xf8>)
    30f6:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    30f8:	4b1a      	ldr	r3, [pc, #104]	; (3164 <main+0x104>)
    30fa:	4798      	blx	r3
    30fc:	b110      	cbz	r0, 3104 <main+0xa4>
    		vTaskStartScheduler();
    30fe:	4b1a      	ldr	r3, [pc, #104]	; (3168 <main+0x108>)
    3100:	4798      	blx	r3
    3102:	e7e7      	b.n	30d4 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    3104:	4819      	ldr	r0, [pc, #100]	; (316c <main+0x10c>)
    3106:	4b14      	ldr	r3, [pc, #80]	; (3158 <main+0xf8>)
    3108:	4798      	blx	r3
    310a:	e7e3      	b.n	30d4 <main+0x74>
    310c:	00000db9 	.word	0x00000db9
    3110:	2000314c 	.word	0x2000314c
    3114:	00006eb4 	.word	0x00006eb4
    3118:	00000339 	.word	0x00000339
    311c:	0000412d 	.word	0x0000412d
    3120:	200007d0 	.word	0x200007d0
    3124:	20003130 	.word	0x20003130
    3128:	00006ec4 	.word	0x00006ec4
    312c:	00000ab1 	.word	0x00000ab1
    3130:	20003148 	.word	0x20003148
    3134:	00006ed0 	.word	0x00006ed0
    3138:	00000a39 	.word	0x00000a39
    313c:	2000313c 	.word	0x2000313c
    3140:	00006edc 	.word	0x00006edc
    3144:	000009bd 	.word	0x000009bd
    3148:	20003140 	.word	0x20003140
    314c:	00006ef0 	.word	0x00006ef0
    3150:	00000655 	.word	0x00000655
    3154:	00006f40 	.word	0x00006f40
    3158:	00000c5d 	.word	0x00000c5d
    315c:	00006f58 	.word	0x00006f58
    3160:	00006f00 	.word	0x00006f00
    3164:	00002ff1 	.word	0x00002ff1
    3168:	00004309 	.word	0x00004309
    316c:	00006f20 	.word	0x00006f20

00003170 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3170:	f100 0308 	add.w	r3, r0, #8
    3174:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3176:	f04f 32ff 	mov.w	r2, #4294967295
    317a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    317c:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    317e:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3180:	2300      	movs	r3, #0
    3182:	6003      	str	r3, [r0, #0]
    3184:	4770      	bx	lr

00003186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3186:	2300      	movs	r3, #0
    3188:	6103      	str	r3, [r0, #16]
    318a:	4770      	bx	lr

0000318c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    318c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    318e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3190:	689a      	ldr	r2, [r3, #8]
    3192:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3194:	689a      	ldr	r2, [r3, #8]
    3196:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    3198:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    319a:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    319c:	6803      	ldr	r3, [r0, #0]
    319e:	3301      	adds	r3, #1
    31a0:	6003      	str	r3, [r0, #0]
    31a2:	4770      	bx	lr

000031a4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    31a4:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    31a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    31a8:	f1b5 3fff 	cmp.w	r5, #4294967295
    31ac:	d002      	beq.n	31b4 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    31ae:	f100 0208 	add.w	r2, r0, #8
    31b2:	e002      	b.n	31ba <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    31b4:	6902      	ldr	r2, [r0, #16]
    31b6:	e004      	b.n	31c2 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    31b8:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    31ba:	6853      	ldr	r3, [r2, #4]
    31bc:	681c      	ldr	r4, [r3, #0]
    31be:	42a5      	cmp	r5, r4
    31c0:	d2fa      	bcs.n	31b8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    31c2:	6853      	ldr	r3, [r2, #4]
    31c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    31c6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    31c8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    31ca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    31cc:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    31ce:	6803      	ldr	r3, [r0, #0]
    31d0:	3301      	adds	r3, #1
    31d2:	6003      	str	r3, [r0, #0]
}
    31d4:	bc30      	pop	{r4, r5}
    31d6:	4770      	bx	lr

000031d8 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    31d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    31da:	6842      	ldr	r2, [r0, #4]
    31dc:	6881      	ldr	r1, [r0, #8]
    31de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    31e0:	6882      	ldr	r2, [r0, #8]
    31e2:	6841      	ldr	r1, [r0, #4]
    31e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    31e6:	685a      	ldr	r2, [r3, #4]
    31e8:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    31ea:	bf04      	itt	eq
    31ec:	6882      	ldreq	r2, [r0, #8]
    31ee:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    31f0:	2200      	movs	r2, #0
    31f2:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    31f4:	681a      	ldr	r2, [r3, #0]
    31f6:	3a01      	subs	r2, #1
    31f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    31fa:	6818      	ldr	r0, [r3, #0]
}
    31fc:	4770      	bx	lr
	...

00003200 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    3200:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    3202:	2300      	movs	r3, #0
    3204:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    3206:	4b0d      	ldr	r3, [pc, #52]	; (323c <prvTaskExitError+0x3c>)
    3208:	681b      	ldr	r3, [r3, #0]
    320a:	f1b3 3fff 	cmp.w	r3, #4294967295
    320e:	d008      	beq.n	3222 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    3210:	f04f 0380 	mov.w	r3, #128	; 0x80
    3214:	f383 8811 	msr	BASEPRI, r3
    3218:	f3bf 8f6f 	isb	sy
    321c:	f3bf 8f4f 	dsb	sy
    3220:	e7fe      	b.n	3220 <prvTaskExitError+0x20>
    3222:	f04f 0380 	mov.w	r3, #128	; 0x80
    3226:	f383 8811 	msr	BASEPRI, r3
    322a:	f3bf 8f6f 	isb	sy
    322e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	2b00      	cmp	r3, #0
    3236:	d0fc      	beq.n	3232 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    3238:	b002      	add	sp, #8
    323a:	4770      	bx	lr
    323c:	20000120 	.word	0x20000120

00003240 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    3240:	4808      	ldr	r0, [pc, #32]	; (3264 <prvPortStartFirstTask+0x24>)
    3242:	6800      	ldr	r0, [r0, #0]
    3244:	6800      	ldr	r0, [r0, #0]
    3246:	f380 8808 	msr	MSP, r0
    324a:	f04f 0000 	mov.w	r0, #0
    324e:	f380 8814 	msr	CONTROL, r0
    3252:	b662      	cpsie	i
    3254:	b661      	cpsie	f
    3256:	f3bf 8f4f 	dsb	sy
    325a:	f3bf 8f6f 	isb	sy
    325e:	df00      	svc	0
    3260:	bf00      	nop
    3262:	0000      	.short	0x0000
    3264:	e000ed08 	.word	0xe000ed08

00003268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    3268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 3278 <vPortEnableVFP+0x10>
    326c:	6801      	ldr	r1, [r0, #0]
    326e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3272:	6001      	str	r1, [r0, #0]
    3274:	4770      	bx	lr
    3276:	0000      	.short	0x0000
    3278:	e000ed88 	.word	0xe000ed88

0000327c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    327c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3280:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3284:	f021 0101 	bic.w	r1, r1, #1
    3288:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    328c:	4b05      	ldr	r3, [pc, #20]	; (32a4 <pxPortInitialiseStack+0x28>)
    328e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3292:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    3296:	f06f 0302 	mvn.w	r3, #2
    329a:	f840 3c24 	str.w	r3, [r0, #-36]
}
    329e:	3844      	subs	r0, #68	; 0x44
    32a0:	4770      	bx	lr
    32a2:	bf00      	nop
    32a4:	00003201 	.word	0x00003201
	...

000032b0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    32b0:	4b07      	ldr	r3, [pc, #28]	; (32d0 <pxCurrentTCBConst2>)
    32b2:	6819      	ldr	r1, [r3, #0]
    32b4:	6808      	ldr	r0, [r1, #0]
    32b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32ba:	f380 8809 	msr	PSP, r0
    32be:	f3bf 8f6f 	isb	sy
    32c2:	f04f 0000 	mov.w	r0, #0
    32c6:	f380 8811 	msr	BASEPRI, r0
    32ca:	4770      	bx	lr
    32cc:	f3af 8000 	nop.w

000032d0 <pxCurrentTCBConst2>:
    32d0:	20003094 	.word	0x20003094

000032d4 <vPortEnterCritical>:
    32d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    32d8:	f383 8811 	msr	BASEPRI, r3
    32dc:	f3bf 8f6f 	isb	sy
    32e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    32e4:	4a0a      	ldr	r2, [pc, #40]	; (3310 <vPortEnterCritical+0x3c>)
    32e6:	6813      	ldr	r3, [r2, #0]
    32e8:	3301      	adds	r3, #1
    32ea:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    32ec:	2b01      	cmp	r3, #1
    32ee:	d10d      	bne.n	330c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <vPortEnterCritical+0x40>)
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	f013 0fff 	tst.w	r3, #255	; 0xff
    32f8:	d008      	beq.n	330c <vPortEnterCritical+0x38>
    32fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    32fe:	f383 8811 	msr	BASEPRI, r3
    3302:	f3bf 8f6f 	isb	sy
    3306:	f3bf 8f4f 	dsb	sy
    330a:	e7fe      	b.n	330a <vPortEnterCritical+0x36>
    330c:	4770      	bx	lr
    330e:	bf00      	nop
    3310:	20000120 	.word	0x20000120
    3314:	e000ed04 	.word	0xe000ed04

00003318 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    3318:	4b09      	ldr	r3, [pc, #36]	; (3340 <vPortExitCritical+0x28>)
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	b943      	cbnz	r3, 3330 <vPortExitCritical+0x18>
    331e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3322:	f383 8811 	msr	BASEPRI, r3
    3326:	f3bf 8f6f 	isb	sy
    332a:	f3bf 8f4f 	dsb	sy
    332e:	e7fe      	b.n	332e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    3330:	3b01      	subs	r3, #1
    3332:	4a03      	ldr	r2, [pc, #12]	; (3340 <vPortExitCritical+0x28>)
    3334:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    3336:	b90b      	cbnz	r3, 333c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3338:	f383 8811 	msr	BASEPRI, r3
    333c:	4770      	bx	lr
    333e:	bf00      	nop
    3340:	20000120 	.word	0x20000120
	...

00003350 <PendSV_Handler>:
	__asm volatile(
    3350:	f3ef 8009 	mrs	r0, PSP
    3354:	f3bf 8f6f 	isb	sy
    3358:	4b15      	ldr	r3, [pc, #84]	; (33b0 <pxCurrentTCBConst>)
    335a:	681a      	ldr	r2, [r3, #0]
    335c:	f01e 0f10 	tst.w	lr, #16
    3360:	bf08      	it	eq
    3362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    336a:	6010      	str	r0, [r2, #0]
    336c:	e92d 0009 	stmdb	sp!, {r0, r3}
    3370:	f04f 0080 	mov.w	r0, #128	; 0x80
    3374:	f380 8811 	msr	BASEPRI, r0
    3378:	f3bf 8f4f 	dsb	sy
    337c:	f3bf 8f6f 	isb	sy
    3380:	f001 f9b2 	bl	46e8 <vTaskSwitchContext>
    3384:	f04f 0000 	mov.w	r0, #0
    3388:	f380 8811 	msr	BASEPRI, r0
    338c:	bc09      	pop	{r0, r3}
    338e:	6819      	ldr	r1, [r3, #0]
    3390:	6808      	ldr	r0, [r1, #0]
    3392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3396:	f01e 0f10 	tst.w	lr, #16
    339a:	bf08      	it	eq
    339c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    33a0:	f380 8809 	msr	PSP, r0
    33a4:	f3bf 8f6f 	isb	sy
    33a8:	4770      	bx	lr
    33aa:	bf00      	nop
    33ac:	f3af 8000 	nop.w

000033b0 <pxCurrentTCBConst>:
    33b0:	20003094 	.word	0x20003094

000033b4 <SysTick_Handler>:
{
    33b4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    33b6:	f04f 0380 	mov.w	r3, #128	; 0x80
    33ba:	f383 8811 	msr	BASEPRI, r3
    33be:	f3bf 8f6f 	isb	sy
    33c2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    33c6:	4b05      	ldr	r3, [pc, #20]	; (33dc <SysTick_Handler+0x28>)
    33c8:	4798      	blx	r3
    33ca:	b118      	cbz	r0, 33d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    33cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    33d0:	4b03      	ldr	r3, [pc, #12]	; (33e0 <SysTick_Handler+0x2c>)
    33d2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    33d4:	2300      	movs	r3, #0
    33d6:	f383 8811 	msr	BASEPRI, r3
    33da:	bd08      	pop	{r3, pc}
    33dc:	000043b1 	.word	0x000043b1
    33e0:	e000ed04 	.word	0xe000ed04

000033e4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    33e4:	4b05      	ldr	r3, [pc, #20]	; (33fc <vPortSetupTimerInterrupt+0x18>)
    33e6:	2200      	movs	r2, #0
    33e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    33ea:	4905      	ldr	r1, [pc, #20]	; (3400 <vPortSetupTimerInterrupt+0x1c>)
    33ec:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    33ee:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    33f2:	4a04      	ldr	r2, [pc, #16]	; (3404 <vPortSetupTimerInterrupt+0x20>)
    33f4:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    33f6:	2207      	movs	r2, #7
    33f8:	601a      	str	r2, [r3, #0]
    33fa:	4770      	bx	lr
    33fc:	e000e010 	.word	0xe000e010
    3400:	e000e018 	.word	0xe000e018
    3404:	e000e014 	.word	0xe000e014

00003408 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    3408:	4b3b      	ldr	r3, [pc, #236]	; (34f8 <xPortStartScheduler+0xf0>)
    340a:	681a      	ldr	r2, [r3, #0]
    340c:	4b3b      	ldr	r3, [pc, #236]	; (34fc <xPortStartScheduler+0xf4>)
    340e:	429a      	cmp	r2, r3
    3410:	d108      	bne.n	3424 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    3412:	f04f 0380 	mov.w	r3, #128	; 0x80
    3416:	f383 8811 	msr	BASEPRI, r3
    341a:	f3bf 8f6f 	isb	sy
    341e:	f3bf 8f4f 	dsb	sy
    3422:	e7fe      	b.n	3422 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    3424:	4b34      	ldr	r3, [pc, #208]	; (34f8 <xPortStartScheduler+0xf0>)
    3426:	681a      	ldr	r2, [r3, #0]
    3428:	4b35      	ldr	r3, [pc, #212]	; (3500 <xPortStartScheduler+0xf8>)
    342a:	429a      	cmp	r2, r3
    342c:	d108      	bne.n	3440 <xPortStartScheduler+0x38>
    342e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3432:	f383 8811 	msr	BASEPRI, r3
    3436:	f3bf 8f6f 	isb	sy
    343a:	f3bf 8f4f 	dsb	sy
    343e:	e7fe      	b.n	343e <xPortStartScheduler+0x36>
{
    3440:	b510      	push	{r4, lr}
    3442:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    3444:	4b2f      	ldr	r3, [pc, #188]	; (3504 <xPortStartScheduler+0xfc>)
    3446:	781a      	ldrb	r2, [r3, #0]
    3448:	b2d2      	uxtb	r2, r2
    344a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    344c:	22ff      	movs	r2, #255	; 0xff
    344e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	b2db      	uxtb	r3, r3
    3454:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3458:	f89d 3003 	ldrb.w	r3, [sp, #3]
    345c:	4a2a      	ldr	r2, [pc, #168]	; (3508 <xPortStartScheduler+0x100>)
    345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3462:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3464:	2307      	movs	r3, #7
    3466:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3468:	f89d 3003 	ldrb.w	r3, [sp, #3]
    346c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3470:	d012      	beq.n	3498 <xPortStartScheduler+0x90>
    3472:	2306      	movs	r3, #6
    3474:	e000      	b.n	3478 <xPortStartScheduler+0x70>
    3476:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3478:	f89d 2003 	ldrb.w	r2, [sp, #3]
    347c:	0052      	lsls	r2, r2, #1
    347e:	b2d2      	uxtb	r2, r2
    3480:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3484:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3488:	1e59      	subs	r1, r3, #1
    348a:	f012 0f80 	tst.w	r2, #128	; 0x80
    348e:	d1f2      	bne.n	3476 <xPortStartScheduler+0x6e>
    3490:	4a1d      	ldr	r2, [pc, #116]	; (3508 <xPortStartScheduler+0x100>)
    3492:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3494:	2b04      	cmp	r3, #4
    3496:	d008      	beq.n	34aa <xPortStartScheduler+0xa2>
    3498:	f04f 0380 	mov.w	r3, #128	; 0x80
    349c:	f383 8811 	msr	BASEPRI, r3
    34a0:	f3bf 8f6f 	isb	sy
    34a4:	f3bf 8f4f 	dsb	sy
    34a8:	e7fe      	b.n	34a8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    34aa:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    34ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    34b0:	4a15      	ldr	r2, [pc, #84]	; (3508 <xPortStartScheduler+0x100>)
    34b2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    34b4:	9b01      	ldr	r3, [sp, #4]
    34b6:	b2db      	uxtb	r3, r3
    34b8:	4a12      	ldr	r2, [pc, #72]	; (3504 <xPortStartScheduler+0xfc>)
    34ba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    34bc:	4b13      	ldr	r3, [pc, #76]	; (350c <xPortStartScheduler+0x104>)
    34be:	681a      	ldr	r2, [r3, #0]
    34c0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    34c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    34c6:	681a      	ldr	r2, [r3, #0]
    34c8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    34cc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    34ce:	4b10      	ldr	r3, [pc, #64]	; (3510 <xPortStartScheduler+0x108>)
    34d0:	4798      	blx	r3
	uxCriticalNesting = 0;
    34d2:	2400      	movs	r4, #0
    34d4:	4b0f      	ldr	r3, [pc, #60]	; (3514 <xPortStartScheduler+0x10c>)
    34d6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    34d8:	4b0f      	ldr	r3, [pc, #60]	; (3518 <xPortStartScheduler+0x110>)
    34da:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    34dc:	4a0f      	ldr	r2, [pc, #60]	; (351c <xPortStartScheduler+0x114>)
    34de:	6813      	ldr	r3, [r2, #0]
    34e0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    34e4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    34e6:	4b0e      	ldr	r3, [pc, #56]	; (3520 <xPortStartScheduler+0x118>)
    34e8:	4798      	blx	r3
	vTaskSwitchContext();
    34ea:	4b0e      	ldr	r3, [pc, #56]	; (3524 <xPortStartScheduler+0x11c>)
    34ec:	4798      	blx	r3
	prvTaskExitError();
    34ee:	4b0e      	ldr	r3, [pc, #56]	; (3528 <xPortStartScheduler+0x120>)
    34f0:	4798      	blx	r3
}
    34f2:	4620      	mov	r0, r4
    34f4:	b002      	add	sp, #8
    34f6:	bd10      	pop	{r4, pc}
    34f8:	e000ed00 	.word	0xe000ed00
    34fc:	410fc271 	.word	0x410fc271
    3500:	410fc270 	.word	0x410fc270
    3504:	e000e400 	.word	0xe000e400
    3508:	200007e0 	.word	0x200007e0
    350c:	e000ed20 	.word	0xe000ed20
    3510:	000033e5 	.word	0x000033e5
    3514:	20000120 	.word	0x20000120
    3518:	00003269 	.word	0x00003269
    351c:	e000ef34 	.word	0xe000ef34
    3520:	00003241 	.word	0x00003241
    3524:	000046e9 	.word	0x000046e9
    3528:	00003201 	.word	0x00003201

0000352c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    352c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    3530:	2b0f      	cmp	r3, #15
    3532:	d90f      	bls.n	3554 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    3534:	4a10      	ldr	r2, [pc, #64]	; (3578 <vPortValidateInterruptPriority+0x4c>)
    3536:	5c9b      	ldrb	r3, [r3, r2]
    3538:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    353a:	4a10      	ldr	r2, [pc, #64]	; (357c <vPortValidateInterruptPriority+0x50>)
    353c:	7812      	ldrb	r2, [r2, #0]
    353e:	429a      	cmp	r2, r3
    3540:	d908      	bls.n	3554 <vPortValidateInterruptPriority+0x28>
    3542:	f04f 0380 	mov.w	r3, #128	; 0x80
    3546:	f383 8811 	msr	BASEPRI, r3
    354a:	f3bf 8f6f 	isb	sy
    354e:	f3bf 8f4f 	dsb	sy
    3552:	e7fe      	b.n	3552 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3554:	4b0a      	ldr	r3, [pc, #40]	; (3580 <vPortValidateInterruptPriority+0x54>)
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    355c:	4a07      	ldr	r2, [pc, #28]	; (357c <vPortValidateInterruptPriority+0x50>)
    355e:	6852      	ldr	r2, [r2, #4]
    3560:	4293      	cmp	r3, r2
    3562:	d908      	bls.n	3576 <vPortValidateInterruptPriority+0x4a>
    3564:	f04f 0380 	mov.w	r3, #128	; 0x80
    3568:	f383 8811 	msr	BASEPRI, r3
    356c:	f3bf 8f6f 	isb	sy
    3570:	f3bf 8f4f 	dsb	sy
    3574:	e7fe      	b.n	3574 <vPortValidateInterruptPriority+0x48>
    3576:	4770      	bx	lr
    3578:	e000e3f0 	.word	0xe000e3f0
    357c:	200007e0 	.word	0x200007e0
    3580:	e000ed0c 	.word	0xe000ed0c

00003584 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3584:	b570      	push	{r4, r5, r6, lr}
    3586:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    3588:	4b2d      	ldr	r3, [pc, #180]	; (3640 <pvPortMalloc+0xbc>)
    358a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    358c:	4b2d      	ldr	r3, [pc, #180]	; (3644 <pvPortMalloc+0xc0>)
    358e:	689b      	ldr	r3, [r3, #8]
    3590:	b183      	cbz	r3, 35b4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    3592:	2c00      	cmp	r4, #0
    3594:	d04d      	beq.n	3632 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    3596:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    3598:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    359c:	bf1c      	itt	ne
    359e:	f024 0407 	bicne.w	r4, r4, #7
    35a2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    35a4:	1e62      	subs	r2, r4, #1
    35a6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    35aa:	429a      	cmp	r2, r3
    35ac:	d843      	bhi.n	3636 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    35ae:	4925      	ldr	r1, [pc, #148]	; (3644 <pvPortMalloc+0xc0>)
    35b0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    35b2:	e017      	b.n	35e4 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    35b4:	4923      	ldr	r1, [pc, #140]	; (3644 <pvPortMalloc+0xc0>)
    35b6:	f101 0314 	add.w	r3, r1, #20
    35ba:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    35be:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    35c0:	2500      	movs	r5, #0
    35c2:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    35c4:	4a20      	ldr	r2, [pc, #128]	; (3648 <pvPortMalloc+0xc4>)
    35c6:	f242 70f8 	movw	r0, #10232	; 0x27f8
    35ca:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    35ce:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    35d2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    35d4:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    35d8:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    35da:	2301      	movs	r3, #1
    35dc:	608b      	str	r3, [r1, #8]
    35de:	e7d8      	b.n	3592 <pvPortMalloc+0xe>
    35e0:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    35e2:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    35e4:	685a      	ldr	r2, [r3, #4]
    35e6:	4294      	cmp	r4, r2
    35e8:	d902      	bls.n	35f0 <pvPortMalloc+0x6c>
    35ea:	681a      	ldr	r2, [r3, #0]
    35ec:	2a00      	cmp	r2, #0
    35ee:	d1f7      	bne.n	35e0 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    35f0:	4a16      	ldr	r2, [pc, #88]	; (364c <pvPortMalloc+0xc8>)
    35f2:	4293      	cmp	r3, r2
    35f4:	d021      	beq.n	363a <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    35f6:	680d      	ldr	r5, [r1, #0]
    35f8:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    35fa:	681a      	ldr	r2, [r3, #0]
    35fc:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    35fe:	685a      	ldr	r2, [r3, #4]
    3600:	1b12      	subs	r2, r2, r4
    3602:	2a10      	cmp	r2, #16
    3604:	d90c      	bls.n	3620 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    3606:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    3608:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    360a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    360c:	6874      	ldr	r4, [r6, #4]
    360e:	490d      	ldr	r1, [pc, #52]	; (3644 <pvPortMalloc+0xc0>)
    3610:	e000      	b.n	3614 <pvPortMalloc+0x90>
    3612:	4611      	mov	r1, r2
    3614:	680a      	ldr	r2, [r1, #0]
    3616:	6850      	ldr	r0, [r2, #4]
    3618:	4284      	cmp	r4, r0
    361a:	d8fa      	bhi.n	3612 <pvPortMalloc+0x8e>
    361c:	6032      	str	r2, [r6, #0]
    361e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    3620:	490b      	ldr	r1, [pc, #44]	; (3650 <pvPortMalloc+0xcc>)
    3622:	680a      	ldr	r2, [r1, #0]
    3624:	685b      	ldr	r3, [r3, #4]
    3626:	1ad2      	subs	r2, r2, r3
    3628:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    362a:	4b0a      	ldr	r3, [pc, #40]	; (3654 <pvPortMalloc+0xd0>)
    362c:	4798      	blx	r3
}
    362e:	4628      	mov	r0, r5
    3630:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    3632:	2500      	movs	r5, #0
    3634:	e7f9      	b.n	362a <pvPortMalloc+0xa6>
    3636:	2500      	movs	r5, #0
    3638:	e7f7      	b.n	362a <pvPortMalloc+0xa6>
    363a:	2500      	movs	r5, #0
    363c:	e7f5      	b.n	362a <pvPortMalloc+0xa6>
    363e:	bf00      	nop
    3640:	00004391 	.word	0x00004391
    3644:	200007e8 	.word	0x200007e8
    3648:	200029d8 	.word	0x200029d8
    364c:	20002ff4 	.word	0x20002ff4
    3650:	20000124 	.word	0x20000124
    3654:	000044d9 	.word	0x000044d9

00003658 <vPortFree>:
	if( pv != NULL )
    3658:	b1d0      	cbz	r0, 3690 <vPortFree+0x38>
{
    365a:	b570      	push	{r4, r5, r6, lr}
    365c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    365e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    3662:	4b0c      	ldr	r3, [pc, #48]	; (3694 <vPortFree+0x3c>)
    3664:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    3666:	f855 4c04 	ldr.w	r4, [r5, #-4]
    366a:	4a0b      	ldr	r2, [pc, #44]	; (3698 <vPortFree+0x40>)
    366c:	e000      	b.n	3670 <vPortFree+0x18>
    366e:	461a      	mov	r2, r3
    3670:	6813      	ldr	r3, [r2, #0]
    3672:	6859      	ldr	r1, [r3, #4]
    3674:	428c      	cmp	r4, r1
    3676:	d8fa      	bhi.n	366e <vPortFree+0x16>
    3678:	f845 3c08 	str.w	r3, [r5, #-8]
    367c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    367e:	4a07      	ldr	r2, [pc, #28]	; (369c <vPortFree+0x44>)
    3680:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3684:	6811      	ldr	r1, [r2, #0]
    3686:	440b      	add	r3, r1
    3688:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    368a:	4b05      	ldr	r3, [pc, #20]	; (36a0 <vPortFree+0x48>)
    368c:	4798      	blx	r3
    368e:	bd70      	pop	{r4, r5, r6, pc}
    3690:	4770      	bx	lr
    3692:	bf00      	nop
    3694:	00004391 	.word	0x00004391
    3698:	200007e8 	.word	0x200007e8
    369c:	20000124 	.word	0x20000124
    36a0:	000044d9 	.word	0x000044d9

000036a4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    36a4:	b510      	push	{r4, lr}
    36a6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    36a8:	4b04      	ldr	r3, [pc, #16]	; (36bc <prvIsQueueEmpty+0x18>)
    36aa:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    36ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    36ae:	4b04      	ldr	r3, [pc, #16]	; (36c0 <prvIsQueueEmpty+0x1c>)
    36b0:	4798      	blx	r3

	return xReturn;
}
    36b2:	fab4 f084 	clz	r0, r4
    36b6:	0940      	lsrs	r0, r0, #5
    36b8:	bd10      	pop	{r4, pc}
    36ba:	bf00      	nop
    36bc:	000032d5 	.word	0x000032d5
    36c0:	00003319 	.word	0x00003319

000036c4 <prvCopyDataToQueue>:
{
    36c4:	b570      	push	{r4, r5, r6, lr}
    36c6:	4604      	mov	r4, r0
    36c8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    36ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    36cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    36ce:	b952      	cbnz	r2, 36e6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    36d0:	6803      	ldr	r3, [r0, #0]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d12a      	bne.n	372c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    36d6:	6840      	ldr	r0, [r0, #4]
    36d8:	4b18      	ldr	r3, [pc, #96]	; (373c <prvCopyDataToQueue+0x78>)
    36da:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    36dc:	2300      	movs	r3, #0
    36de:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    36e0:	3501      	adds	r5, #1
    36e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    36e4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    36e6:	b96e      	cbnz	r6, 3704 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    36e8:	6880      	ldr	r0, [r0, #8]
    36ea:	4b15      	ldr	r3, [pc, #84]	; (3740 <prvCopyDataToQueue+0x7c>)
    36ec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    36ee:	68a3      	ldr	r3, [r4, #8]
    36f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    36f2:	4413      	add	r3, r2
    36f4:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    36f6:	6862      	ldr	r2, [r4, #4]
    36f8:	4293      	cmp	r3, r2
    36fa:	d319      	bcc.n	3730 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    36fc:	6823      	ldr	r3, [r4, #0]
    36fe:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3700:	2000      	movs	r0, #0
    3702:	e7ed      	b.n	36e0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3704:	68c0      	ldr	r0, [r0, #12]
    3706:	4b0e      	ldr	r3, [pc, #56]	; (3740 <prvCopyDataToQueue+0x7c>)
    3708:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    370a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    370c:	425b      	negs	r3, r3
    370e:	68e2      	ldr	r2, [r4, #12]
    3710:	441a      	add	r2, r3
    3712:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3714:	6821      	ldr	r1, [r4, #0]
    3716:	428a      	cmp	r2, r1
    3718:	d202      	bcs.n	3720 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    371a:	6862      	ldr	r2, [r4, #4]
    371c:	4413      	add	r3, r2
    371e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3720:	2e02      	cmp	r6, #2
    3722:	d107      	bne.n	3734 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3724:	b145      	cbz	r5, 3738 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3726:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3728:	2000      	movs	r0, #0
    372a:	e7d9      	b.n	36e0 <prvCopyDataToQueue+0x1c>
    372c:	2000      	movs	r0, #0
    372e:	e7d7      	b.n	36e0 <prvCopyDataToQueue+0x1c>
    3730:	2000      	movs	r0, #0
    3732:	e7d5      	b.n	36e0 <prvCopyDataToQueue+0x1c>
    3734:	2000      	movs	r0, #0
    3736:	e7d3      	b.n	36e0 <prvCopyDataToQueue+0x1c>
    3738:	2000      	movs	r0, #0
    373a:	e7d1      	b.n	36e0 <prvCopyDataToQueue+0x1c>
    373c:	00004a29 	.word	0x00004a29
    3740:	00005179 	.word	0x00005179

00003744 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3744:	b570      	push	{r4, r5, r6, lr}
    3746:	b082      	sub	sp, #8
    3748:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    374a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    374c:	b164      	cbz	r4, 3768 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    374e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3752:	429a      	cmp	r2, r3
    3754:	d311      	bcc.n	377a <prvNotifyQueueSetContainer+0x36>
    3756:	f04f 0380 	mov.w	r3, #128	; 0x80
    375a:	f383 8811 	msr	BASEPRI, r3
    375e:	f3bf 8f6f 	isb	sy
    3762:	f3bf 8f4f 	dsb	sy
    3766:	e7fe      	b.n	3766 <prvNotifyQueueSetContainer+0x22>
    3768:	f04f 0380 	mov.w	r3, #128	; 0x80
    376c:	f383 8811 	msr	BASEPRI, r3
    3770:	f3bf 8f6f 	isb	sy
    3774:	f3bf 8f4f 	dsb	sy
    3778:	e7fe      	b.n	3778 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    377a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    377c:	4293      	cmp	r3, r2
    377e:	d803      	bhi.n	3788 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3780:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3782:	4630      	mov	r0, r6
    3784:	b002      	add	sp, #8
    3786:	bd70      	pop	{r4, r5, r6, pc}
    3788:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    378a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    378e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3790:	a901      	add	r1, sp, #4
    3792:	4620      	mov	r0, r4
    3794:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <prvNotifyQueueSetContainer+0x7c>)
    3796:	4798      	blx	r3
    3798:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    379a:	f1b5 3fff 	cmp.w	r5, #4294967295
    379e:	d10a      	bne.n	37b6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    37a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37a2:	2b00      	cmp	r3, #0
    37a4:	d0ed      	beq.n	3782 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    37a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    37aa:	4b06      	ldr	r3, [pc, #24]	; (37c4 <prvNotifyQueueSetContainer+0x80>)
    37ac:	4798      	blx	r3
    37ae:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    37b0:	bf18      	it	ne
    37b2:	2601      	movne	r6, #1
    37b4:	e7e5      	b.n	3782 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    37b6:	1c6b      	adds	r3, r5, #1
    37b8:	b25b      	sxtb	r3, r3
    37ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    37be:	e7e0      	b.n	3782 <prvNotifyQueueSetContainer+0x3e>
    37c0:	000036c5 	.word	0x000036c5
    37c4:	00004825 	.word	0x00004825

000037c8 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    37c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    37ca:	b172      	cbz	r2, 37ea <prvCopyDataFromQueue+0x22>
{
    37cc:	b510      	push	{r4, lr}
    37ce:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    37d0:	68c4      	ldr	r4, [r0, #12]
    37d2:	4414      	add	r4, r2
    37d4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    37d6:	6840      	ldr	r0, [r0, #4]
    37d8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    37da:	bf24      	itt	cs
    37dc:	6818      	ldrcs	r0, [r3, #0]
    37de:	60d8      	strcs	r0, [r3, #12]
    37e0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    37e2:	68d9      	ldr	r1, [r3, #12]
    37e4:	4b01      	ldr	r3, [pc, #4]	; (37ec <prvCopyDataFromQueue+0x24>)
    37e6:	4798      	blx	r3
    37e8:	bd10      	pop	{r4, pc}
    37ea:	4770      	bx	lr
    37ec:	00005179 	.word	0x00005179

000037f0 <prvUnlockQueue>:
{
    37f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37f4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    37f6:	4b23      	ldr	r3, [pc, #140]	; (3884 <prvUnlockQueue+0x94>)
    37f8:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    37fa:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    37fe:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3800:	2c00      	cmp	r4, #0
    3802:	dd19      	ble.n	3838 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3804:	4e20      	ldr	r6, [pc, #128]	; (3888 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3806:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3894 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    380a:	4f20      	ldr	r7, [pc, #128]	; (388c <prvUnlockQueue+0x9c>)
    380c:	e008      	b.n	3820 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    380e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3810:	b193      	cbz	r3, 3838 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3812:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3816:	47b8      	blx	r7
    3818:	b960      	cbnz	r0, 3834 <prvUnlockQueue+0x44>
    381a:	3c01      	subs	r4, #1
    381c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    381e:	b15c      	cbz	r4, 3838 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3820:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3822:	2b00      	cmp	r3, #0
    3824:	d0f3      	beq.n	380e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3826:	2100      	movs	r1, #0
    3828:	4628      	mov	r0, r5
    382a:	47b0      	blx	r6
    382c:	2800      	cmp	r0, #0
    382e:	d0f4      	beq.n	381a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3830:	47c0      	blx	r8
    3832:	e7f2      	b.n	381a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3834:	47c0      	blx	r8
    3836:	e7f0      	b.n	381a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3838:	23ff      	movs	r3, #255	; 0xff
    383a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    383e:	4b14      	ldr	r3, [pc, #80]	; (3890 <prvUnlockQueue+0xa0>)
    3840:	4798      	blx	r3
	taskENTER_CRITICAL();
    3842:	4b10      	ldr	r3, [pc, #64]	; (3884 <prvUnlockQueue+0x94>)
    3844:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3846:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    384a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    384c:	2c00      	cmp	r4, #0
    384e:	dd12      	ble.n	3876 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3850:	692b      	ldr	r3, [r5, #16]
    3852:	b183      	cbz	r3, 3876 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3854:	f105 0710 	add.w	r7, r5, #16
    3858:	4e0c      	ldr	r6, [pc, #48]	; (388c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    385a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3894 <prvUnlockQueue+0xa4>
    385e:	e004      	b.n	386a <prvUnlockQueue+0x7a>
    3860:	3c01      	subs	r4, #1
    3862:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3864:	b13c      	cbz	r4, 3876 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3866:	692b      	ldr	r3, [r5, #16]
    3868:	b12b      	cbz	r3, 3876 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    386a:	4638      	mov	r0, r7
    386c:	47b0      	blx	r6
    386e:	2800      	cmp	r0, #0
    3870:	d0f6      	beq.n	3860 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3872:	47c0      	blx	r8
    3874:	e7f4      	b.n	3860 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3876:	23ff      	movs	r3, #255	; 0xff
    3878:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    387c:	4b04      	ldr	r3, [pc, #16]	; (3890 <prvUnlockQueue+0xa0>)
    387e:	4798      	blx	r3
    3880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3884:	000032d5 	.word	0x000032d5
    3888:	00003745 	.word	0x00003745
    388c:	00004825 	.word	0x00004825
    3890:	00003319 	.word	0x00003319
    3894:	00004955 	.word	0x00004955

00003898 <xQueueGenericReset>:
{
    3898:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    389a:	b330      	cbz	r0, 38ea <xQueueGenericReset+0x52>
    389c:	4604      	mov	r4, r0
    389e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    38a0:	4b1c      	ldr	r3, [pc, #112]	; (3914 <xQueueGenericReset+0x7c>)
    38a2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    38a4:	6822      	ldr	r2, [r4, #0]
    38a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    38a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    38aa:	fb03 f301 	mul.w	r3, r3, r1
    38ae:	18d0      	adds	r0, r2, r3
    38b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    38b2:	2000      	movs	r0, #0
    38b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    38b6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    38b8:	1a5b      	subs	r3, r3, r1
    38ba:	4413      	add	r3, r2
    38bc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    38be:	23ff      	movs	r3, #255	; 0xff
    38c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    38c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    38c8:	b9c5      	cbnz	r5, 38fc <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    38ca:	6923      	ldr	r3, [r4, #16]
    38cc:	b1eb      	cbz	r3, 390a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    38ce:	f104 0010 	add.w	r0, r4, #16
    38d2:	4b11      	ldr	r3, [pc, #68]	; (3918 <xQueueGenericReset+0x80>)
    38d4:	4798      	blx	r3
    38d6:	b1c0      	cbz	r0, 390a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    38d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    38dc:	4b0f      	ldr	r3, [pc, #60]	; (391c <xQueueGenericReset+0x84>)
    38de:	601a      	str	r2, [r3, #0]
    38e0:	f3bf 8f4f 	dsb	sy
    38e4:	f3bf 8f6f 	isb	sy
    38e8:	e00f      	b.n	390a <xQueueGenericReset+0x72>
    38ea:	f04f 0380 	mov.w	r3, #128	; 0x80
    38ee:	f383 8811 	msr	BASEPRI, r3
    38f2:	f3bf 8f6f 	isb	sy
    38f6:	f3bf 8f4f 	dsb	sy
    38fa:	e7fe      	b.n	38fa <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    38fc:	f104 0010 	add.w	r0, r4, #16
    3900:	4d07      	ldr	r5, [pc, #28]	; (3920 <xQueueGenericReset+0x88>)
    3902:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3904:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3908:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    390a:	4b06      	ldr	r3, [pc, #24]	; (3924 <xQueueGenericReset+0x8c>)
    390c:	4798      	blx	r3
}
    390e:	2001      	movs	r0, #1
    3910:	bd38      	pop	{r3, r4, r5, pc}
    3912:	bf00      	nop
    3914:	000032d5 	.word	0x000032d5
    3918:	00004825 	.word	0x00004825
    391c:	e000ed04 	.word	0xe000ed04
    3920:	00003171 	.word	0x00003171
    3924:	00003319 	.word	0x00003319

00003928 <xQueueGenericCreate>:
{
    3928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    392a:	b940      	cbnz	r0, 393e <xQueueGenericCreate+0x16>
    392c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3930:	f383 8811 	msr	BASEPRI, r3
    3934:	f3bf 8f6f 	isb	sy
    3938:	f3bf 8f4f 	dsb	sy
    393c:	e7fe      	b.n	393c <xQueueGenericCreate+0x14>
    393e:	4606      	mov	r6, r0
    3940:	4617      	mov	r7, r2
    3942:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3944:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3948:	3054      	adds	r0, #84	; 0x54
    394a:	4b0b      	ldr	r3, [pc, #44]	; (3978 <xQueueGenericCreate+0x50>)
    394c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    394e:	4604      	mov	r4, r0
    3950:	b178      	cbz	r0, 3972 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3952:	b11d      	cbz	r5, 395c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3954:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3958:	6003      	str	r3, [r0, #0]
    395a:	e000      	b.n	395e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    395c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    395e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3960:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3962:	2101      	movs	r1, #1
    3964:	4620      	mov	r0, r4
    3966:	4b05      	ldr	r3, [pc, #20]	; (397c <xQueueGenericCreate+0x54>)
    3968:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    396a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    396e:	2300      	movs	r3, #0
    3970:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3972:	4620      	mov	r0, r4
    3974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3976:	bf00      	nop
    3978:	00003585 	.word	0x00003585
    397c:	00003899 	.word	0x00003899

00003980 <xQueueGenericSend>:
{
    3980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3984:	b085      	sub	sp, #20
    3986:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3988:	b198      	cbz	r0, 39b2 <xQueueGenericSend+0x32>
    398a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    398c:	b1d1      	cbz	r1, 39c4 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    398e:	2b02      	cmp	r3, #2
    3990:	d024      	beq.n	39dc <xQueueGenericSend+0x5c>
    3992:	461e      	mov	r6, r3
    3994:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3996:	4b64      	ldr	r3, [pc, #400]	; (3b28 <xQueueGenericSend+0x1a8>)
    3998:	4798      	blx	r3
    399a:	bb58      	cbnz	r0, 39f4 <xQueueGenericSend+0x74>
    399c:	9b01      	ldr	r3, [sp, #4]
    399e:	b38b      	cbz	r3, 3a04 <xQueueGenericSend+0x84>
    39a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    39a4:	f383 8811 	msr	BASEPRI, r3
    39a8:	f3bf 8f6f 	isb	sy
    39ac:	f3bf 8f4f 	dsb	sy
    39b0:	e7fe      	b.n	39b0 <xQueueGenericSend+0x30>
    39b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    39b6:	f383 8811 	msr	BASEPRI, r3
    39ba:	f3bf 8f6f 	isb	sy
    39be:	f3bf 8f4f 	dsb	sy
    39c2:	e7fe      	b.n	39c2 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    39c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    39c6:	2a00      	cmp	r2, #0
    39c8:	d0e1      	beq.n	398e <xQueueGenericSend+0xe>
    39ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    39ce:	f383 8811 	msr	BASEPRI, r3
    39d2:	f3bf 8f6f 	isb	sy
    39d6:	f3bf 8f4f 	dsb	sy
    39da:	e7fe      	b.n	39da <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    39dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    39de:	2a01      	cmp	r2, #1
    39e0:	d0d7      	beq.n	3992 <xQueueGenericSend+0x12>
    39e2:	f04f 0380 	mov.w	r3, #128	; 0x80
    39e6:	f383 8811 	msr	BASEPRI, r3
    39ea:	f3bf 8f6f 	isb	sy
    39ee:	f3bf 8f4f 	dsb	sy
    39f2:	e7fe      	b.n	39f2 <xQueueGenericSend+0x72>
    39f4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    39f6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3b54 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    39fa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3b58 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    39fe:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3b34 <xQueueGenericSend+0x1b4>
    3a02:	e041      	b.n	3a88 <xQueueGenericSend+0x108>
    3a04:	2500      	movs	r5, #0
    3a06:	e7f6      	b.n	39f6 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3a08:	4632      	mov	r2, r6
    3a0a:	4639      	mov	r1, r7
    3a0c:	4620      	mov	r0, r4
    3a0e:	4b47      	ldr	r3, [pc, #284]	; (3b2c <xQueueGenericSend+0x1ac>)
    3a10:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3a12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3a14:	b193      	cbz	r3, 3a3c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3a16:	4631      	mov	r1, r6
    3a18:	4620      	mov	r0, r4
    3a1a:	4b45      	ldr	r3, [pc, #276]	; (3b30 <xQueueGenericSend+0x1b0>)
    3a1c:	4798      	blx	r3
    3a1e:	b138      	cbz	r0, 3a30 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3a24:	4b43      	ldr	r3, [pc, #268]	; (3b34 <xQueueGenericSend+0x1b4>)
    3a26:	601a      	str	r2, [r3, #0]
    3a28:	f3bf 8f4f 	dsb	sy
    3a2c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3a30:	4b41      	ldr	r3, [pc, #260]	; (3b38 <xQueueGenericSend+0x1b8>)
    3a32:	4798      	blx	r3
				return pdPASS;
    3a34:	2001      	movs	r0, #1
}
    3a36:	b005      	add	sp, #20
    3a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3a3e:	b173      	cbz	r3, 3a5e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3a40:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3a44:	4b3d      	ldr	r3, [pc, #244]	; (3b3c <xQueueGenericSend+0x1bc>)
    3a46:	4798      	blx	r3
    3a48:	2800      	cmp	r0, #0
    3a4a:	d0f1      	beq.n	3a30 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3a50:	4b38      	ldr	r3, [pc, #224]	; (3b34 <xQueueGenericSend+0x1b4>)
    3a52:	601a      	str	r2, [r3, #0]
    3a54:	f3bf 8f4f 	dsb	sy
    3a58:	f3bf 8f6f 	isb	sy
    3a5c:	e7e8      	b.n	3a30 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3a5e:	2800      	cmp	r0, #0
    3a60:	d0e6      	beq.n	3a30 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3a66:	4b33      	ldr	r3, [pc, #204]	; (3b34 <xQueueGenericSend+0x1b4>)
    3a68:	601a      	str	r2, [r3, #0]
    3a6a:	f3bf 8f4f 	dsb	sy
    3a6e:	f3bf 8f6f 	isb	sy
    3a72:	e7dd      	b.n	3a30 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3a74:	4b30      	ldr	r3, [pc, #192]	; (3b38 <xQueueGenericSend+0x1b8>)
    3a76:	4798      	blx	r3
					return errQUEUE_FULL;
    3a78:	2000      	movs	r0, #0
    3a7a:	e7dc      	b.n	3a36 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3a7c:	4620      	mov	r0, r4
    3a7e:	4b30      	ldr	r3, [pc, #192]	; (3b40 <xQueueGenericSend+0x1c0>)
    3a80:	4798      	blx	r3
				(void)xTaskResumeAll();
    3a82:	4b30      	ldr	r3, [pc, #192]	; (3b44 <xQueueGenericSend+0x1c4>)
    3a84:	4798      	blx	r3
    3a86:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3a88:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3a8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3a8e:	429a      	cmp	r2, r3
    3a90:	d3ba      	bcc.n	3a08 <xQueueGenericSend+0x88>
    3a92:	2e02      	cmp	r6, #2
    3a94:	d0b8      	beq.n	3a08 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3a96:	9b01      	ldr	r3, [sp, #4]
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d0eb      	beq.n	3a74 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3a9c:	b90d      	cbnz	r5, 3aa2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3a9e:	a802      	add	r0, sp, #8
    3aa0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3aa2:	4b25      	ldr	r3, [pc, #148]	; (3b38 <xQueueGenericSend+0x1b8>)
    3aa4:	4798      	blx	r3
		vTaskSuspendAll();
    3aa6:	4b28      	ldr	r3, [pc, #160]	; (3b48 <xQueueGenericSend+0x1c8>)
    3aa8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3aaa:	47c0      	blx	r8
    3aac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3ab0:	b25b      	sxtb	r3, r3
    3ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ab6:	bf04      	itt	eq
    3ab8:	2300      	moveq	r3, #0
    3aba:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3abe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3ac2:	b25b      	sxtb	r3, r3
    3ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ac8:	bf04      	itt	eq
    3aca:	2300      	moveq	r3, #0
    3acc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3ad0:	4b19      	ldr	r3, [pc, #100]	; (3b38 <xQueueGenericSend+0x1b8>)
    3ad2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3ad4:	a901      	add	r1, sp, #4
    3ad6:	a802      	add	r0, sp, #8
    3ad8:	4b1c      	ldr	r3, [pc, #112]	; (3b4c <xQueueGenericSend+0x1cc>)
    3ada:	4798      	blx	r3
    3adc:	b9e0      	cbnz	r0, 3b18 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3ade:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3ae0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3ae4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3ae6:	4b14      	ldr	r3, [pc, #80]	; (3b38 <xQueueGenericSend+0x1b8>)
    3ae8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3aea:	45ab      	cmp	fp, r5
    3aec:	d1c6      	bne.n	3a7c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3aee:	9901      	ldr	r1, [sp, #4]
    3af0:	f104 0010 	add.w	r0, r4, #16
    3af4:	4b16      	ldr	r3, [pc, #88]	; (3b50 <xQueueGenericSend+0x1d0>)
    3af6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3af8:	4620      	mov	r0, r4
    3afa:	4b11      	ldr	r3, [pc, #68]	; (3b40 <xQueueGenericSend+0x1c0>)
    3afc:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3afe:	4b11      	ldr	r3, [pc, #68]	; (3b44 <xQueueGenericSend+0x1c4>)
    3b00:	4798      	blx	r3
    3b02:	2800      	cmp	r0, #0
    3b04:	d1bf      	bne.n	3a86 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3b06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3b0a:	f8c9 3000 	str.w	r3, [r9]
    3b0e:	f3bf 8f4f 	dsb	sy
    3b12:	f3bf 8f6f 	isb	sy
    3b16:	e7b6      	b.n	3a86 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3b18:	4620      	mov	r0, r4
    3b1a:	4b09      	ldr	r3, [pc, #36]	; (3b40 <xQueueGenericSend+0x1c0>)
    3b1c:	4798      	blx	r3
			(void)xTaskResumeAll();
    3b1e:	4b09      	ldr	r3, [pc, #36]	; (3b44 <xQueueGenericSend+0x1c4>)
    3b20:	4798      	blx	r3
			return errQUEUE_FULL;
    3b22:	2000      	movs	r0, #0
    3b24:	e787      	b.n	3a36 <xQueueGenericSend+0xb6>
    3b26:	bf00      	nop
    3b28:	00004965 	.word	0x00004965
    3b2c:	000036c5 	.word	0x000036c5
    3b30:	00003745 	.word	0x00003745
    3b34:	e000ed04 	.word	0xe000ed04
    3b38:	00003319 	.word	0x00003319
    3b3c:	00004825 	.word	0x00004825
    3b40:	000037f1 	.word	0x000037f1
    3b44:	000044d9 	.word	0x000044d9
    3b48:	00004391 	.word	0x00004391
    3b4c:	000048c9 	.word	0x000048c9
    3b50:	000047a5 	.word	0x000047a5
    3b54:	000032d5 	.word	0x000032d5
    3b58:	000048b5 	.word	0x000048b5

00003b5c <xQueueGenericSendFromISR>:
{
    3b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3b60:	2800      	cmp	r0, #0
    3b62:	d036      	beq.n	3bd2 <xQueueGenericSendFromISR+0x76>
    3b64:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3b66:	2900      	cmp	r1, #0
    3b68:	d03c      	beq.n	3be4 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3b6a:	2b02      	cmp	r3, #2
    3b6c:	d046      	beq.n	3bfc <xQueueGenericSendFromISR+0xa0>
    3b6e:	461f      	mov	r7, r3
    3b70:	4690      	mov	r8, r2
    3b72:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3b74:	4b37      	ldr	r3, [pc, #220]	; (3c54 <xQueueGenericSendFromISR+0xf8>)
    3b76:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3b78:	f3ef 8611 	mrs	r6, BASEPRI
    3b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b80:	f383 8811 	msr	BASEPRI, r3
    3b84:	f3bf 8f6f 	isb	sy
    3b88:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3b8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b90:	429a      	cmp	r2, r3
    3b92:	d301      	bcc.n	3b98 <xQueueGenericSendFromISR+0x3c>
    3b94:	2f02      	cmp	r7, #2
    3b96:	d151      	bne.n	3c3c <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3b98:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3b9c:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3b9e:	463a      	mov	r2, r7
    3ba0:	4649      	mov	r1, r9
    3ba2:	4620      	mov	r0, r4
    3ba4:	4b2c      	ldr	r3, [pc, #176]	; (3c58 <xQueueGenericSendFromISR+0xfc>)
    3ba6:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3ba8:	f1b5 3fff 	cmp.w	r5, #4294967295
    3bac:	d140      	bne.n	3c30 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    3bae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3bb0:	b383      	cbz	r3, 3c14 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3bb2:	4639      	mov	r1, r7
    3bb4:	4620      	mov	r0, r4
    3bb6:	4b29      	ldr	r3, [pc, #164]	; (3c5c <xQueueGenericSendFromISR+0x100>)
    3bb8:	4798      	blx	r3
    3bba:	2800      	cmp	r0, #0
    3bbc:	d040      	beq.n	3c40 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    3bbe:	f1b8 0f00 	cmp.w	r8, #0
    3bc2:	d03f      	beq.n	3c44 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3bc4:	2001      	movs	r0, #1
    3bc6:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3bca:	f386 8811 	msr	BASEPRI, r6
}
    3bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    3bd2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bd6:	f383 8811 	msr	BASEPRI, r3
    3bda:	f3bf 8f6f 	isb	sy
    3bde:	f3bf 8f4f 	dsb	sy
    3be2:	e7fe      	b.n	3be2 <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3be4:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3be6:	2800      	cmp	r0, #0
    3be8:	d0bf      	beq.n	3b6a <xQueueGenericSendFromISR+0xe>
    3bea:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bee:	f383 8811 	msr	BASEPRI, r3
    3bf2:	f3bf 8f6f 	isb	sy
    3bf6:	f3bf 8f4f 	dsb	sy
    3bfa:	e7fe      	b.n	3bfa <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3bfc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3bfe:	2801      	cmp	r0, #1
    3c00:	d0b5      	beq.n	3b6e <xQueueGenericSendFromISR+0x12>
    3c02:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c06:	f383 8811 	msr	BASEPRI, r3
    3c0a:	f3bf 8f6f 	isb	sy
    3c0e:	f3bf 8f4f 	dsb	sy
    3c12:	e7fe      	b.n	3c12 <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c16:	b1bb      	cbz	r3, 3c48 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3c1c:	4b10      	ldr	r3, [pc, #64]	; (3c60 <xQueueGenericSendFromISR+0x104>)
    3c1e:	4798      	blx	r3
    3c20:	b1a0      	cbz	r0, 3c4c <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    3c22:	f1b8 0f00 	cmp.w	r8, #0
    3c26:	d013      	beq.n	3c50 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3c28:	2001      	movs	r0, #1
    3c2a:	f8c8 0000 	str.w	r0, [r8]
    3c2e:	e7cc      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    3c30:	1c6b      	adds	r3, r5, #1
    3c32:	b25b      	sxtb	r3, r3
    3c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    3c38:	2001      	movs	r0, #1
    3c3a:	e7c6      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    3c3c:	2000      	movs	r0, #0
    3c3e:	e7c4      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    3c40:	2001      	movs	r0, #1
    3c42:	e7c2      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
    3c44:	2001      	movs	r0, #1
    3c46:	e7c0      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
    3c48:	2001      	movs	r0, #1
    3c4a:	e7be      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
    3c4c:	2001      	movs	r0, #1
    3c4e:	e7bc      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
    3c50:	2001      	movs	r0, #1
    3c52:	e7ba      	b.n	3bca <xQueueGenericSendFromISR+0x6e>
    3c54:	0000352d 	.word	0x0000352d
    3c58:	000036c5 	.word	0x000036c5
    3c5c:	00003745 	.word	0x00003745
    3c60:	00004825 	.word	0x00004825

00003c64 <xQueueReceive>:
{
    3c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c68:	b084      	sub	sp, #16
    3c6a:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    3c6c:	b180      	cbz	r0, 3c90 <xQueueReceive+0x2c>
    3c6e:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3c70:	b1b9      	cbz	r1, 3ca2 <xQueueReceive+0x3e>
    3c72:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3c74:	4b50      	ldr	r3, [pc, #320]	; (3db8 <xQueueReceive+0x154>)
    3c76:	4798      	blx	r3
    3c78:	b9f8      	cbnz	r0, 3cba <xQueueReceive+0x56>
    3c7a:	9b01      	ldr	r3, [sp, #4]
    3c7c:	b32b      	cbz	r3, 3cca <xQueueReceive+0x66>
    3c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c82:	f383 8811 	msr	BASEPRI, r3
    3c86:	f3bf 8f6f 	isb	sy
    3c8a:	f3bf 8f4f 	dsb	sy
    3c8e:	e7fe      	b.n	3c8e <xQueueReceive+0x2a>
    3c90:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c94:	f383 8811 	msr	BASEPRI, r3
    3c98:	f3bf 8f6f 	isb	sy
    3c9c:	f3bf 8f4f 	dsb	sy
    3ca0:	e7fe      	b.n	3ca0 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3ca2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d0e4      	beq.n	3c72 <xQueueReceive+0xe>
    3ca8:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cac:	f383 8811 	msr	BASEPRI, r3
    3cb0:	f3bf 8f6f 	isb	sy
    3cb4:	f3bf 8f4f 	dsb	sy
    3cb8:	e7fe      	b.n	3cb8 <xQueueReceive+0x54>
    3cba:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3cbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3de4 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3cc0:	f8df a124 	ldr.w	sl, [pc, #292]	; 3de8 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    3cc4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3dc4 <xQueueReceive+0x160>
    3cc8:	e029      	b.n	3d1e <xQueueReceive+0xba>
    3cca:	2700      	movs	r7, #0
    3ccc:	e7f6      	b.n	3cbc <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    3cce:	4631      	mov	r1, r6
    3cd0:	4620      	mov	r0, r4
    3cd2:	4b3a      	ldr	r3, [pc, #232]	; (3dbc <xQueueReceive+0x158>)
    3cd4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    3cd6:	3d01      	subs	r5, #1
    3cd8:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3cda:	6923      	ldr	r3, [r4, #16]
    3cdc:	b163      	cbz	r3, 3cf8 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3cde:	f104 0010 	add.w	r0, r4, #16
    3ce2:	4b37      	ldr	r3, [pc, #220]	; (3dc0 <xQueueReceive+0x15c>)
    3ce4:	4798      	blx	r3
    3ce6:	b138      	cbz	r0, 3cf8 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    3ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3cec:	4b35      	ldr	r3, [pc, #212]	; (3dc4 <xQueueReceive+0x160>)
    3cee:	601a      	str	r2, [r3, #0]
    3cf0:	f3bf 8f4f 	dsb	sy
    3cf4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3cf8:	4b33      	ldr	r3, [pc, #204]	; (3dc8 <xQueueReceive+0x164>)
    3cfa:	4798      	blx	r3
				return pdPASS;
    3cfc:	2001      	movs	r0, #1
}
    3cfe:	b004      	add	sp, #16
    3d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    3d04:	4b30      	ldr	r3, [pc, #192]	; (3dc8 <xQueueReceive+0x164>)
    3d06:	4798      	blx	r3
					return errQUEUE_EMPTY;
    3d08:	2000      	movs	r0, #0
    3d0a:	e7f8      	b.n	3cfe <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3d0c:	a802      	add	r0, sp, #8
    3d0e:	47d0      	blx	sl
    3d10:	e00e      	b.n	3d30 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    3d12:	4620      	mov	r0, r4
    3d14:	4b2d      	ldr	r3, [pc, #180]	; (3dcc <xQueueReceive+0x168>)
    3d16:	4798      	blx	r3
				(void)xTaskResumeAll();
    3d18:	4b2d      	ldr	r3, [pc, #180]	; (3dd0 <xQueueReceive+0x16c>)
    3d1a:	4798      	blx	r3
    3d1c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3d1e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3d20:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3d22:	2d00      	cmp	r5, #0
    3d24:	d1d3      	bne.n	3cce <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    3d26:	9b01      	ldr	r3, [sp, #4]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d0eb      	beq.n	3d04 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    3d2c:	2f00      	cmp	r7, #0
    3d2e:	d0ed      	beq.n	3d0c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    3d30:	4b25      	ldr	r3, [pc, #148]	; (3dc8 <xQueueReceive+0x164>)
    3d32:	4798      	blx	r3
		vTaskSuspendAll();
    3d34:	4b27      	ldr	r3, [pc, #156]	; (3dd4 <xQueueReceive+0x170>)
    3d36:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3d38:	47c0      	blx	r8
    3d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3d3e:	b25b      	sxtb	r3, r3
    3d40:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d44:	bf04      	itt	eq
    3d46:	2300      	moveq	r3, #0
    3d48:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3d4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3d50:	b25b      	sxtb	r3, r3
    3d52:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d56:	bf04      	itt	eq
    3d58:	2300      	moveq	r3, #0
    3d5a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3d5e:	4b1a      	ldr	r3, [pc, #104]	; (3dc8 <xQueueReceive+0x164>)
    3d60:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3d62:	a901      	add	r1, sp, #4
    3d64:	a802      	add	r0, sp, #8
    3d66:	4b1c      	ldr	r3, [pc, #112]	; (3dd8 <xQueueReceive+0x174>)
    3d68:	4798      	blx	r3
    3d6a:	b9c8      	cbnz	r0, 3da0 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3d6c:	4620      	mov	r0, r4
    3d6e:	4b1b      	ldr	r3, [pc, #108]	; (3ddc <xQueueReceive+0x178>)
    3d70:	4798      	blx	r3
    3d72:	2800      	cmp	r0, #0
    3d74:	d0cd      	beq.n	3d12 <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    3d76:	9901      	ldr	r1, [sp, #4]
    3d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3d7c:	4b18      	ldr	r3, [pc, #96]	; (3de0 <xQueueReceive+0x17c>)
    3d7e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3d80:	4620      	mov	r0, r4
    3d82:	4b12      	ldr	r3, [pc, #72]	; (3dcc <xQueueReceive+0x168>)
    3d84:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3d86:	4b12      	ldr	r3, [pc, #72]	; (3dd0 <xQueueReceive+0x16c>)
    3d88:	4798      	blx	r3
    3d8a:	2800      	cmp	r0, #0
    3d8c:	d1c6      	bne.n	3d1c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    3d8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d92:	f8c9 3000 	str.w	r3, [r9]
    3d96:	f3bf 8f4f 	dsb	sy
    3d9a:	f3bf 8f6f 	isb	sy
    3d9e:	e7bd      	b.n	3d1c <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    3da0:	4620      	mov	r0, r4
    3da2:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <xQueueReceive+0x168>)
    3da4:	4798      	blx	r3
			(void)xTaskResumeAll();
    3da6:	4b0a      	ldr	r3, [pc, #40]	; (3dd0 <xQueueReceive+0x16c>)
    3da8:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3daa:	4620      	mov	r0, r4
    3dac:	4b0b      	ldr	r3, [pc, #44]	; (3ddc <xQueueReceive+0x178>)
    3dae:	4798      	blx	r3
    3db0:	2800      	cmp	r0, #0
    3db2:	d0b3      	beq.n	3d1c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    3db4:	2000      	movs	r0, #0
    3db6:	e7a2      	b.n	3cfe <xQueueReceive+0x9a>
    3db8:	00004965 	.word	0x00004965
    3dbc:	000037c9 	.word	0x000037c9
    3dc0:	00004825 	.word	0x00004825
    3dc4:	e000ed04 	.word	0xe000ed04
    3dc8:	00003319 	.word	0x00003319
    3dcc:	000037f1 	.word	0x000037f1
    3dd0:	000044d9 	.word	0x000044d9
    3dd4:	00004391 	.word	0x00004391
    3dd8:	000048c9 	.word	0x000048c9
    3ddc:	000036a5 	.word	0x000036a5
    3de0:	000047a5 	.word	0x000047a5
    3de4:	000032d5 	.word	0x000032d5
    3de8:	000048b5 	.word	0x000048b5

00003dec <xQueueSemaphoreTake>:
{
    3dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3df0:	b085      	sub	sp, #20
    3df2:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    3df4:	b158      	cbz	r0, 3e0e <xQueueSemaphoreTake+0x22>
    3df6:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    3df8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3dfa:	b18b      	cbz	r3, 3e20 <xQueueSemaphoreTake+0x34>
    3dfc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e00:	f383 8811 	msr	BASEPRI, r3
    3e04:	f3bf 8f6f 	isb	sy
    3e08:	f3bf 8f4f 	dsb	sy
    3e0c:	e7fe      	b.n	3e0c <xQueueSemaphoreTake+0x20>
    3e0e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e12:	f383 8811 	msr	BASEPRI, r3
    3e16:	f3bf 8f6f 	isb	sy
    3e1a:	f3bf 8f4f 	dsb	sy
    3e1e:	e7fe      	b.n	3e1e <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3e20:	4b5b      	ldr	r3, [pc, #364]	; (3f90 <xQueueSemaphoreTake+0x1a4>)
    3e22:	4798      	blx	r3
    3e24:	b950      	cbnz	r0, 3e3c <xQueueSemaphoreTake+0x50>
    3e26:	9b01      	ldr	r3, [sp, #4]
    3e28:	b183      	cbz	r3, 3e4c <xQueueSemaphoreTake+0x60>
    3e2a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e2e:	f383 8811 	msr	BASEPRI, r3
    3e32:	f3bf 8f6f 	isb	sy
    3e36:	f3bf 8f4f 	dsb	sy
    3e3a:	e7fe      	b.n	3e3a <xQueueSemaphoreTake+0x4e>
    3e3c:	2500      	movs	r5, #0
    3e3e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    3e40:	4e54      	ldr	r6, [pc, #336]	; (3f94 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    3e42:	f8df 9184 	ldr.w	r9, [pc, #388]	; 3fc8 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    3e46:	f8df 8158 	ldr.w	r8, [pc, #344]	; 3fa0 <xQueueSemaphoreTake+0x1b4>
    3e4a:	e048      	b.n	3ede <xQueueSemaphoreTake+0xf2>
    3e4c:	2500      	movs	r5, #0
    3e4e:	462f      	mov	r7, r5
    3e50:	e7f6      	b.n	3e40 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    3e52:	3b01      	subs	r3, #1
    3e54:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    3e56:	6823      	ldr	r3, [r4, #0]
    3e58:	b913      	cbnz	r3, 3e60 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    3e5a:	4b4f      	ldr	r3, [pc, #316]	; (3f98 <xQueueSemaphoreTake+0x1ac>)
    3e5c:	4798      	blx	r3
    3e5e:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3e60:	6923      	ldr	r3, [r4, #16]
    3e62:	b163      	cbz	r3, 3e7e <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3e64:	f104 0010 	add.w	r0, r4, #16
    3e68:	4b4c      	ldr	r3, [pc, #304]	; (3f9c <xQueueSemaphoreTake+0x1b0>)
    3e6a:	4798      	blx	r3
    3e6c:	b138      	cbz	r0, 3e7e <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    3e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e72:	4b4b      	ldr	r3, [pc, #300]	; (3fa0 <xQueueSemaphoreTake+0x1b4>)
    3e74:	601a      	str	r2, [r3, #0]
    3e76:	f3bf 8f4f 	dsb	sy
    3e7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3e7e:	4b49      	ldr	r3, [pc, #292]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3e80:	4798      	blx	r3
				return pdPASS;
    3e82:	2501      	movs	r5, #1
}
    3e84:	4628      	mov	r0, r5
    3e86:	b005      	add	sp, #20
    3e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    3e8c:	b145      	cbz	r5, 3ea0 <xQueueSemaphoreTake+0xb4>
    3e8e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e92:	f383 8811 	msr	BASEPRI, r3
    3e96:	f3bf 8f6f 	isb	sy
    3e9a:	f3bf 8f4f 	dsb	sy
    3e9e:	e7fe      	b.n	3e9e <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    3ea0:	4b40      	ldr	r3, [pc, #256]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3ea2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    3ea4:	e7ee      	b.n	3e84 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3ea6:	a802      	add	r0, sp, #8
    3ea8:	47c8      	blx	r9
    3eaa:	e021      	b.n	3ef0 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    3eac:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    3eae:	6860      	ldr	r0, [r4, #4]
    3eb0:	4b3d      	ldr	r3, [pc, #244]	; (3fa8 <xQueueSemaphoreTake+0x1bc>)
    3eb2:	4798      	blx	r3
    3eb4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    3eb6:	4b3b      	ldr	r3, [pc, #236]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3eb8:	4798      	blx	r3
    3eba:	e040      	b.n	3f3e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    3ebc:	4620      	mov	r0, r4
    3ebe:	4b3b      	ldr	r3, [pc, #236]	; (3fac <xQueueSemaphoreTake+0x1c0>)
    3ec0:	4798      	blx	r3
				(void)xTaskResumeAll();
    3ec2:	4b3b      	ldr	r3, [pc, #236]	; (3fb0 <xQueueSemaphoreTake+0x1c4>)
    3ec4:	4798      	blx	r3
    3ec6:	e009      	b.n	3edc <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    3ec8:	4620      	mov	r0, r4
    3eca:	4b38      	ldr	r3, [pc, #224]	; (3fac <xQueueSemaphoreTake+0x1c0>)
    3ecc:	4798      	blx	r3
			(void)xTaskResumeAll();
    3ece:	4b38      	ldr	r3, [pc, #224]	; (3fb0 <xQueueSemaphoreTake+0x1c4>)
    3ed0:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3ed2:	4620      	mov	r0, r4
    3ed4:	4b37      	ldr	r3, [pc, #220]	; (3fb4 <xQueueSemaphoreTake+0x1c8>)
    3ed6:	4798      	blx	r3
    3ed8:	2800      	cmp	r0, #0
    3eda:	d145      	bne.n	3f68 <xQueueSemaphoreTake+0x17c>
    3edc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3ede:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    3ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d1b5      	bne.n	3e52 <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    3ee6:	9b01      	ldr	r3, [sp, #4]
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d0cf      	beq.n	3e8c <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    3eec:	2f00      	cmp	r7, #0
    3eee:	d0da      	beq.n	3ea6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    3ef0:	4b2c      	ldr	r3, [pc, #176]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3ef2:	4798      	blx	r3
		vTaskSuspendAll();
    3ef4:	4b30      	ldr	r3, [pc, #192]	; (3fb8 <xQueueSemaphoreTake+0x1cc>)
    3ef6:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3ef8:	47b0      	blx	r6
    3efa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3efe:	b25b      	sxtb	r3, r3
    3f00:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f04:	bf04      	itt	eq
    3f06:	2300      	moveq	r3, #0
    3f08:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3f0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3f10:	b25b      	sxtb	r3, r3
    3f12:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f16:	bf04      	itt	eq
    3f18:	2300      	moveq	r3, #0
    3f1a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3f1e:	4b21      	ldr	r3, [pc, #132]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3f20:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3f22:	a901      	add	r1, sp, #4
    3f24:	a802      	add	r0, sp, #8
    3f26:	4b25      	ldr	r3, [pc, #148]	; (3fbc <xQueueSemaphoreTake+0x1d0>)
    3f28:	4798      	blx	r3
    3f2a:	2800      	cmp	r0, #0
    3f2c:	d1cc      	bne.n	3ec8 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3f2e:	4620      	mov	r0, r4
    3f30:	4b20      	ldr	r3, [pc, #128]	; (3fb4 <xQueueSemaphoreTake+0x1c8>)
    3f32:	4798      	blx	r3
    3f34:	2800      	cmp	r0, #0
    3f36:	d0c1      	beq.n	3ebc <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    3f38:	6823      	ldr	r3, [r4, #0]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d0b6      	beq.n	3eac <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    3f3e:	9901      	ldr	r1, [sp, #4]
    3f40:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3f44:	4b1e      	ldr	r3, [pc, #120]	; (3fc0 <xQueueSemaphoreTake+0x1d4>)
    3f46:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3f48:	4620      	mov	r0, r4
    3f4a:	4b18      	ldr	r3, [pc, #96]	; (3fac <xQueueSemaphoreTake+0x1c0>)
    3f4c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3f4e:	4b18      	ldr	r3, [pc, #96]	; (3fb0 <xQueueSemaphoreTake+0x1c4>)
    3f50:	4798      	blx	r3
    3f52:	2800      	cmp	r0, #0
    3f54:	d1c2      	bne.n	3edc <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    3f56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3f5a:	f8c8 3000 	str.w	r3, [r8]
    3f5e:	f3bf 8f4f 	dsb	sy
    3f62:	f3bf 8f6f 	isb	sy
    3f66:	e7b9      	b.n	3edc <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    3f68:	2d00      	cmp	r5, #0
    3f6a:	d08b      	beq.n	3e84 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    3f6c:	4b09      	ldr	r3, [pc, #36]	; (3f94 <xQueueSemaphoreTake+0x1a8>)
    3f6e:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    3f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3f72:	b153      	cbz	r3, 3f8a <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    3f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3f76:	6819      	ldr	r1, [r3, #0]
    3f78:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    3f7c:	6860      	ldr	r0, [r4, #4]
    3f7e:	4b11      	ldr	r3, [pc, #68]	; (3fc4 <xQueueSemaphoreTake+0x1d8>)
    3f80:	4798      	blx	r3
						taskEXIT_CRITICAL();
    3f82:	4b08      	ldr	r3, [pc, #32]	; (3fa4 <xQueueSemaphoreTake+0x1b8>)
    3f84:	4798      	blx	r3
				return errQUEUE_EMPTY;
    3f86:	2500      	movs	r5, #0
    3f88:	e77c      	b.n	3e84 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    3f8a:	2100      	movs	r1, #0
    3f8c:	e7f6      	b.n	3f7c <xQueueSemaphoreTake+0x190>
    3f8e:	bf00      	nop
    3f90:	00004965 	.word	0x00004965
    3f94:	000032d5 	.word	0x000032d5
    3f98:	00004b71 	.word	0x00004b71
    3f9c:	00004825 	.word	0x00004825
    3fa0:	e000ed04 	.word	0xe000ed04
    3fa4:	00003319 	.word	0x00003319
    3fa8:	00004985 	.word	0x00004985
    3fac:	000037f1 	.word	0x000037f1
    3fb0:	000044d9 	.word	0x000044d9
    3fb4:	000036a5 	.word	0x000036a5
    3fb8:	00004391 	.word	0x00004391
    3fbc:	000048c9 	.word	0x000048c9
    3fc0:	000047a5 	.word	0x000047a5
    3fc4:	00004ac5 	.word	0x00004ac5
    3fc8:	000048b5 	.word	0x000048b5

00003fcc <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    3fcc:	b940      	cbnz	r0, 3fe0 <uxQueueMessagesWaiting+0x14>
    3fce:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fd2:	f383 8811 	msr	BASEPRI, r3
    3fd6:	f3bf 8f6f 	isb	sy
    3fda:	f3bf 8f4f 	dsb	sy
    3fde:	e7fe      	b.n	3fde <uxQueueMessagesWaiting+0x12>
{
    3fe0:	b510      	push	{r4, lr}
    3fe2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    3fe4:	4b03      	ldr	r3, [pc, #12]	; (3ff4 <uxQueueMessagesWaiting+0x28>)
    3fe6:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    3fe8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    3fea:	4b03      	ldr	r3, [pc, #12]	; (3ff8 <uxQueueMessagesWaiting+0x2c>)
    3fec:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3fee:	4620      	mov	r0, r4
    3ff0:	bd10      	pop	{r4, pc}
    3ff2:	bf00      	nop
    3ff4:	000032d5 	.word	0x000032d5
    3ff8:	00003319 	.word	0x00003319

00003ffc <vQueueWaitForMessageRestricted>:
{
    3ffc:	b570      	push	{r4, r5, r6, lr}
    3ffe:	4604      	mov	r4, r0
    4000:	460d      	mov	r5, r1
    4002:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4004:	4b11      	ldr	r3, [pc, #68]	; (404c <vQueueWaitForMessageRestricted+0x50>)
    4006:	4798      	blx	r3
    4008:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    400c:	b25b      	sxtb	r3, r3
    400e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4012:	bf04      	itt	eq
    4014:	2300      	moveq	r3, #0
    4016:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    401a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    401e:	b25b      	sxtb	r3, r3
    4020:	f1b3 3fff 	cmp.w	r3, #4294967295
    4024:	bf04      	itt	eq
    4026:	2300      	moveq	r3, #0
    4028:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    402c:	4b08      	ldr	r3, [pc, #32]	; (4050 <vQueueWaitForMessageRestricted+0x54>)
    402e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    4030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4032:	b11b      	cbz	r3, 403c <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4034:	4620      	mov	r0, r4
    4036:	4b07      	ldr	r3, [pc, #28]	; (4054 <vQueueWaitForMessageRestricted+0x58>)
    4038:	4798      	blx	r3
    403a:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    403c:	4632      	mov	r2, r6
    403e:	4629      	mov	r1, r5
    4040:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4044:	4b04      	ldr	r3, [pc, #16]	; (4058 <vQueueWaitForMessageRestricted+0x5c>)
    4046:	4798      	blx	r3
    4048:	e7f4      	b.n	4034 <vQueueWaitForMessageRestricted+0x38>
    404a:	bf00      	nop
    404c:	000032d5 	.word	0x000032d5
    4050:	00003319 	.word	0x00003319
    4054:	000037f1 	.word	0x000037f1
    4058:	000047e1 	.word	0x000047e1

0000405c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    405c:	4a06      	ldr	r2, [pc, #24]	; (4078 <prvIdleTask+0x1c>)
				taskYIELD();
    405e:	4807      	ldr	r0, [pc, #28]	; (407c <prvIdleTask+0x20>)
    4060:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4064:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4066:	2b01      	cmp	r3, #1
    4068:	d9fc      	bls.n	4064 <prvIdleTask+0x8>
				taskYIELD();
    406a:	6001      	str	r1, [r0, #0]
    406c:	f3bf 8f4f 	dsb	sy
    4070:	f3bf 8f6f 	isb	sy
    4074:	e7f6      	b.n	4064 <prvIdleTask+0x8>
    4076:	bf00      	nop
    4078:	20002ffc 	.word	0x20002ffc
    407c:	e000ed04 	.word	0xe000ed04

00004080 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    4080:	4b09      	ldr	r3, [pc, #36]	; (40a8 <prvResetNextTaskUnblockTime+0x28>)
    4082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	b143      	cbz	r3, 409c <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    408a:	4b07      	ldr	r3, [pc, #28]	; (40a8 <prvResetNextTaskUnblockTime+0x28>)
    408c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    4090:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    4092:	68d2      	ldr	r2, [r2, #12]
    4094:	6852      	ldr	r2, [r2, #4]
    4096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    409a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    409c:	f04f 32ff 	mov.w	r2, #4294967295
    40a0:	4b01      	ldr	r3, [pc, #4]	; (40a8 <prvResetNextTaskUnblockTime+0x28>)
    40a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    40a6:	4770      	bx	lr
    40a8:	20002ffc 	.word	0x20002ffc

000040ac <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    40ac:	b570      	push	{r4, r5, r6, lr}
    40ae:	4604      	mov	r4, r0
    40b0:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    40b2:	4b1a      	ldr	r3, [pc, #104]	; (411c <prvAddCurrentTaskToDelayedList+0x70>)
    40b4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    40b8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    40bc:	3004      	adds	r0, #4
    40be:	4b18      	ldr	r3, [pc, #96]	; (4120 <prvAddCurrentTaskToDelayedList+0x74>)
    40c0:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    40c2:	f1b4 3fff 	cmp.w	r4, #4294967295
    40c6:	d016      	beq.n	40f6 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    40c8:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    40ca:	4b14      	ldr	r3, [pc, #80]	; (411c <prvAddCurrentTaskToDelayedList+0x70>)
    40cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    40d0:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    40d2:	42a5      	cmp	r5, r4
    40d4:	d818      	bhi.n	4108 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    40d6:	4d11      	ldr	r5, [pc, #68]	; (411c <prvAddCurrentTaskToDelayedList+0x70>)
    40d8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    40dc:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    40e0:	3104      	adds	r1, #4
    40e2:	4b10      	ldr	r3, [pc, #64]	; (4124 <prvAddCurrentTaskToDelayedList+0x78>)
    40e4:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    40e6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    40ea:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    40ec:	bf3c      	itt	cc
    40ee:	462b      	movcc	r3, r5
    40f0:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    40f4:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    40f6:	2e00      	cmp	r6, #0
    40f8:	d0e6      	beq.n	40c8 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    40fa:	4808      	ldr	r0, [pc, #32]	; (411c <prvAddCurrentTaskToDelayedList+0x70>)
    40fc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    4100:	3104      	adds	r1, #4
    4102:	4b09      	ldr	r3, [pc, #36]	; (4128 <prvAddCurrentTaskToDelayedList+0x7c>)
    4104:	4798      	blx	r3
    4106:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4108:	4b04      	ldr	r3, [pc, #16]	; (411c <prvAddCurrentTaskToDelayedList+0x70>)
    410a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    410e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4112:	3104      	adds	r1, #4
    4114:	4b03      	ldr	r3, [pc, #12]	; (4124 <prvAddCurrentTaskToDelayedList+0x78>)
    4116:	4798      	blx	r3
    4118:	bd70      	pop	{r4, r5, r6, pc}
    411a:	bf00      	nop
    411c:	20002ffc 	.word	0x20002ffc
    4120:	000031d9 	.word	0x000031d9
    4124:	000031a5 	.word	0x000031a5
    4128:	0000318d 	.word	0x0000318d

0000412c <xTaskCreate>:
{
    412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4130:	b083      	sub	sp, #12
    4132:	4683      	mov	fp, r0
    4134:	460d      	mov	r5, r1
    4136:	9301      	str	r3, [sp, #4]
    4138:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    413c:	0096      	lsls	r6, r2, #2
    413e:	4630      	mov	r0, r6
    4140:	4b66      	ldr	r3, [pc, #408]	; (42dc <xTaskCreate+0x1b0>)
    4142:	4798      	blx	r3
		if (pxStack != NULL) {
    4144:	2800      	cmp	r0, #0
    4146:	f000 8096 	beq.w	4276 <xTaskCreate+0x14a>
    414a:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    414c:	2054      	movs	r0, #84	; 0x54
    414e:	4b63      	ldr	r3, [pc, #396]	; (42dc <xTaskCreate+0x1b0>)
    4150:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    4152:	4604      	mov	r4, r0
    4154:	2800      	cmp	r0, #0
    4156:	f000 808b 	beq.w	4270 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    415a:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    415c:	4632      	mov	r2, r6
    415e:	21a5      	movs	r1, #165	; 0xa5
    4160:	4638      	mov	r0, r7
    4162:	4b5f      	ldr	r3, [pc, #380]	; (42e0 <xTaskCreate+0x1b4>)
    4164:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4166:	3e04      	subs	r6, #4
    4168:	6b23      	ldr	r3, [r4, #48]	; 0x30
    416a:	441e      	add	r6, r3
		                      & (~(
    416c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4170:	782b      	ldrb	r3, [r5, #0]
    4172:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4176:	782b      	ldrb	r3, [r5, #0]
    4178:	b15b      	cbz	r3, 4192 <xTaskCreate+0x66>
    417a:	462b      	mov	r3, r5
    417c:	f104 0235 	add.w	r2, r4, #53	; 0x35
    4180:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4182:	7858      	ldrb	r0, [r3, #1]
    4184:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    4188:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    418c:	b108      	cbz	r0, 4192 <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    418e:	4299      	cmp	r1, r3
    4190:	d1f7      	bne.n	4182 <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    4192:	2700      	movs	r7, #0
    4194:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    4198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    419a:	2d04      	cmp	r5, #4
    419c:	bf28      	it	cs
    419e:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    41a0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    41a2:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    41a4:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    41a6:	f104 0804 	add.w	r8, r4, #4
    41aa:	4640      	mov	r0, r8
    41ac:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4304 <xTaskCreate+0x1d8>
    41b0:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    41b2:	f104 0018 	add.w	r0, r4, #24
    41b6:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    41b8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    41ba:	f1c5 0505 	rsb	r5, r5, #5
    41be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    41c0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    41c2:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    41c4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    41c8:	9a01      	ldr	r2, [sp, #4]
    41ca:	4659      	mov	r1, fp
    41cc:	4630      	mov	r0, r6
    41ce:	4b45      	ldr	r3, [pc, #276]	; (42e4 <xTaskCreate+0x1b8>)
    41d0:	4798      	blx	r3
    41d2:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    41d4:	f1ba 0f00 	cmp.w	sl, #0
    41d8:	d001      	beq.n	41de <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    41da:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    41de:	4b42      	ldr	r3, [pc, #264]	; (42e8 <xTaskCreate+0x1bc>)
    41e0:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    41e2:	4b42      	ldr	r3, [pc, #264]	; (42ec <xTaskCreate+0x1c0>)
    41e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    41e8:	3201      	adds	r2, #1
    41ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    41ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    41f2:	2b00      	cmp	r3, #0
    41f4:	d042      	beq.n	427c <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    41f6:	4b3d      	ldr	r3, [pc, #244]	; (42ec <xTaskCreate+0x1c0>)
    41f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    41fc:	b94b      	cbnz	r3, 4212 <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    41fe:	4b3b      	ldr	r3, [pc, #236]	; (42ec <xTaskCreate+0x1c0>)
    4200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4208:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    420a:	bf9c      	itt	ls
    420c:	4b37      	ldrls	r3, [pc, #220]	; (42ec <xTaskCreate+0x1c0>)
    420e:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    4212:	4a36      	ldr	r2, [pc, #216]	; (42ec <xTaskCreate+0x1c0>)
    4214:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4218:	3301      	adds	r3, #1
    421a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    421e:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    4220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4222:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4226:	4293      	cmp	r3, r2
    4228:	bf84      	itt	hi
    422a:	4a30      	ldrhi	r2, [pc, #192]	; (42ec <xTaskCreate+0x1c0>)
    422c:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    4230:	4d2e      	ldr	r5, [pc, #184]	; (42ec <xTaskCreate+0x1c0>)
    4232:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    423a:	4641      	mov	r1, r8
    423c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4240:	4b2b      	ldr	r3, [pc, #172]	; (42f0 <xTaskCreate+0x1c4>)
    4242:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4244:	4b2b      	ldr	r3, [pc, #172]	; (42f4 <xTaskCreate+0x1c8>)
    4246:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4248:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    424c:	2b00      	cmp	r3, #0
    424e:	d03f      	beq.n	42d0 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    4250:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4258:	429a      	cmp	r2, r3
    425a:	d23d      	bcs.n	42d8 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    425c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4260:	4b25      	ldr	r3, [pc, #148]	; (42f8 <xTaskCreate+0x1cc>)
    4262:	601a      	str	r2, [r3, #0]
    4264:	f3bf 8f4f 	dsb	sy
    4268:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    426c:	2001      	movs	r0, #1
    426e:	e030      	b.n	42d2 <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    4270:	4638      	mov	r0, r7
    4272:	4b22      	ldr	r3, [pc, #136]	; (42fc <xTaskCreate+0x1d0>)
    4274:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4276:	f04f 30ff 	mov.w	r0, #4294967295
    427a:	e02a      	b.n	42d2 <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    427c:	4b1b      	ldr	r3, [pc, #108]	; (42ec <xTaskCreate+0x1c0>)
    427e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    4282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4286:	2b01      	cmp	r3, #1
    4288:	d1c3      	bne.n	4212 <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    428a:	4d18      	ldr	r5, [pc, #96]	; (42ec <xTaskCreate+0x1c0>)
    428c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4290:	4e1b      	ldr	r6, [pc, #108]	; (4300 <xTaskCreate+0x1d4>)
    4292:	47b0      	blx	r6
    4294:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    4298:	47b0      	blx	r6
    429a:	f105 0050 	add.w	r0, r5, #80	; 0x50
    429e:	47b0      	blx	r6
    42a0:	f105 0064 	add.w	r0, r5, #100	; 0x64
    42a4:	47b0      	blx	r6
    42a6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    42aa:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    42ac:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    42b0:	4648      	mov	r0, r9
    42b2:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    42b4:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    42b8:	4638      	mov	r0, r7
    42ba:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    42bc:	f105 0014 	add.w	r0, r5, #20
    42c0:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    42c2:	4628      	mov	r0, r5
    42c4:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    42c6:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    42ca:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    42ce:	e7a0      	b.n	4212 <xTaskCreate+0xe6>
		xReturn = pdPASS;
    42d0:	2001      	movs	r0, #1
}
    42d2:	b003      	add	sp, #12
    42d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    42d8:	2001      	movs	r0, #1
	return xReturn;
    42da:	e7fa      	b.n	42d2 <xTaskCreate+0x1a6>
    42dc:	00003585 	.word	0x00003585
    42e0:	000051c3 	.word	0x000051c3
    42e4:	0000327d 	.word	0x0000327d
    42e8:	000032d5 	.word	0x000032d5
    42ec:	20002ffc 	.word	0x20002ffc
    42f0:	0000318d 	.word	0x0000318d
    42f4:	00003319 	.word	0x00003319
    42f8:	e000ed04 	.word	0xe000ed04
    42fc:	00003659 	.word	0x00003659
    4300:	00003171 	.word	0x00003171
    4304:	00003187 	.word	0x00003187

00004308 <vTaskStartScheduler>:
{
    4308:	b510      	push	{r4, lr}
    430a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    430c:	4b19      	ldr	r3, [pc, #100]	; (4374 <vTaskStartScheduler+0x6c>)
    430e:	9301      	str	r3, [sp, #4]
    4310:	2300      	movs	r3, #0
    4312:	9300      	str	r3, [sp, #0]
    4314:	2280      	movs	r2, #128	; 0x80
    4316:	4918      	ldr	r1, [pc, #96]	; (4378 <vTaskStartScheduler+0x70>)
    4318:	4818      	ldr	r0, [pc, #96]	; (437c <vTaskStartScheduler+0x74>)
    431a:	4c19      	ldr	r4, [pc, #100]	; (4380 <vTaskStartScheduler+0x78>)
    431c:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    431e:	2801      	cmp	r0, #1
    4320:	d004      	beq.n	432c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    4322:	f1b0 3fff 	cmp.w	r0, #4294967295
    4326:	d01b      	beq.n	4360 <vTaskStartScheduler+0x58>
}
    4328:	b002      	add	sp, #8
    432a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    432c:	4b15      	ldr	r3, [pc, #84]	; (4384 <vTaskStartScheduler+0x7c>)
    432e:	4798      	blx	r3
	if (xReturn == pdPASS) {
    4330:	2801      	cmp	r0, #1
    4332:	d1f6      	bne.n	4322 <vTaskStartScheduler+0x1a>
    4334:	f04f 0380 	mov.w	r3, #128	; 0x80
    4338:	f383 8811 	msr	BASEPRI, r3
    433c:	f3bf 8f6f 	isb	sy
    4340:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4344:	4b10      	ldr	r3, [pc, #64]	; (4388 <vTaskStartScheduler+0x80>)
    4346:	f04f 32ff 	mov.w	r2, #4294967295
    434a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    434e:	2201      	movs	r2, #1
    4350:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4354:	2200      	movs	r2, #0
    4356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    435a:	4b0c      	ldr	r3, [pc, #48]	; (438c <vTaskStartScheduler+0x84>)
    435c:	4798      	blx	r3
    435e:	e7e3      	b.n	4328 <vTaskStartScheduler+0x20>
    4360:	f04f 0380 	mov.w	r3, #128	; 0x80
    4364:	f383 8811 	msr	BASEPRI, r3
    4368:	f3bf 8f6f 	isb	sy
    436c:	f3bf 8f4f 	dsb	sy
    4370:	e7fe      	b.n	4370 <vTaskStartScheduler+0x68>
    4372:	bf00      	nop
    4374:	200030d8 	.word	0x200030d8
    4378:	00006f70 	.word	0x00006f70
    437c:	0000405d 	.word	0x0000405d
    4380:	0000412d 	.word	0x0000412d
    4384:	00004dfd 	.word	0x00004dfd
    4388:	20002ffc 	.word	0x20002ffc
    438c:	00003409 	.word	0x00003409

00004390 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    4390:	4a03      	ldr	r2, [pc, #12]	; (43a0 <vTaskSuspendAll+0x10>)
    4392:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    4396:	3301      	adds	r3, #1
    4398:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    439c:	4770      	bx	lr
    439e:	bf00      	nop
    43a0:	20002ffc 	.word	0x20002ffc

000043a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
    43a4:	4b01      	ldr	r3, [pc, #4]	; (43ac <xTaskGetTickCount+0x8>)
    43a6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    43aa:	4770      	bx	lr
    43ac:	20002ffc 	.word	0x20002ffc

000043b0 <xTaskIncrementTick>:
{
    43b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    43b4:	4b44      	ldr	r3, [pc, #272]	; (44c8 <xTaskIncrementTick+0x118>)
    43b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    43ba:	2b00      	cmp	r3, #0
    43bc:	d173      	bne.n	44a6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    43be:	4b42      	ldr	r3, [pc, #264]	; (44c8 <xTaskIncrementTick+0x118>)
    43c0:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    43c4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    43c6:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    43ca:	b9e6      	cbnz	r6, 4406 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    43cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	b143      	cbz	r3, 43e6 <xTaskIncrementTick+0x36>
    43d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    43d8:	f383 8811 	msr	BASEPRI, r3
    43dc:	f3bf 8f6f 	isb	sy
    43e0:	f3bf 8f4f 	dsb	sy
    43e4:	e7fe      	b.n	43e4 <xTaskIncrementTick+0x34>
    43e6:	4b38      	ldr	r3, [pc, #224]	; (44c8 <xTaskIncrementTick+0x118>)
    43e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    43ec:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    43f0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    43f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    43f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    43fc:	3201      	adds	r2, #1
    43fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    4402:	4b32      	ldr	r3, [pc, #200]	; (44cc <xTaskIncrementTick+0x11c>)
    4404:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4406:	4b30      	ldr	r3, [pc, #192]	; (44c8 <xTaskIncrementTick+0x118>)
    4408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    440c:	429e      	cmp	r6, r3
    440e:	d20d      	bcs.n	442c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    4410:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    4412:	4b2d      	ldr	r3, [pc, #180]	; (44c8 <xTaskIncrementTick+0x118>)
    4414:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    441a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    441e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4424:	2b02      	cmp	r3, #2
    4426:	bf28      	it	cs
    4428:	2401      	movcs	r4, #1
    442a:	e043      	b.n	44b4 <xTaskIncrementTick+0x104>
    442c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    442e:	4d26      	ldr	r5, [pc, #152]	; (44c8 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4430:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 44d4 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4434:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4438:	e021      	b.n	447e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    443a:	f04f 32ff 	mov.w	r2, #4294967295
    443e:	4b22      	ldr	r3, [pc, #136]	; (44c8 <xTaskIncrementTick+0x118>)
    4440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4444:	e7e5      	b.n	4412 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4446:	4a20      	ldr	r2, [pc, #128]	; (44c8 <xTaskIncrementTick+0x118>)
    4448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    444c:	e7e1      	b.n	4412 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    444e:	f107 0018 	add.w	r0, r7, #24
    4452:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4456:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    445a:	4298      	cmp	r0, r3
    445c:	bf88      	it	hi
    445e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    4462:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4466:	4649      	mov	r1, r9
    4468:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    446c:	4b18      	ldr	r3, [pc, #96]	; (44d0 <xTaskIncrementTick+0x120>)
    446e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4470:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4478:	429a      	cmp	r2, r3
    447a:	bf28      	it	cs
    447c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    447e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	2b00      	cmp	r3, #0
    4486:	d0d8      	beq.n	443a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4488:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    448c:	68db      	ldr	r3, [r3, #12]
    448e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    4490:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    4492:	429e      	cmp	r6, r3
    4494:	d3d7      	bcc.n	4446 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4496:	f107 0904 	add.w	r9, r7, #4
    449a:	4648      	mov	r0, r9
    449c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44a0:	2b00      	cmp	r3, #0
    44a2:	d1d4      	bne.n	444e <xTaskIncrementTick+0x9e>
    44a4:	e7d6      	b.n	4454 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    44a6:	4a08      	ldr	r2, [pc, #32]	; (44c8 <xTaskIncrementTick+0x118>)
    44a8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    44ac:	3301      	adds	r3, #1
    44ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    44b2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    44b4:	4b04      	ldr	r3, [pc, #16]	; (44c8 <xTaskIncrementTick+0x118>)
    44b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    44ba:	2b00      	cmp	r3, #0
}
    44bc:	bf0c      	ite	eq
    44be:	4620      	moveq	r0, r4
    44c0:	2001      	movne	r0, #1
    44c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44c6:	bf00      	nop
    44c8:	20002ffc 	.word	0x20002ffc
    44cc:	00004081 	.word	0x00004081
    44d0:	0000318d 	.word	0x0000318d
    44d4:	000031d9 	.word	0x000031d9

000044d8 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    44d8:	4b3a      	ldr	r3, [pc, #232]	; (45c4 <xTaskResumeAll+0xec>)
    44da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    44de:	b943      	cbnz	r3, 44f2 <xTaskResumeAll+0x1a>
    44e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    44e4:	f383 8811 	msr	BASEPRI, r3
    44e8:	f3bf 8f6f 	isb	sy
    44ec:	f3bf 8f4f 	dsb	sy
    44f0:	e7fe      	b.n	44f0 <xTaskResumeAll+0x18>
{
    44f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    44f6:	4b34      	ldr	r3, [pc, #208]	; (45c8 <xTaskResumeAll+0xf0>)
    44f8:	4798      	blx	r3
		--uxSchedulerSuspended;
    44fa:	4b32      	ldr	r3, [pc, #200]	; (45c4 <xTaskResumeAll+0xec>)
    44fc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    4500:	3a01      	subs	r2, #1
    4502:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4506:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    450a:	2b00      	cmp	r3, #0
    450c:	d155      	bne.n	45ba <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    450e:	4b2d      	ldr	r3, [pc, #180]	; (45c4 <xTaskResumeAll+0xec>)
    4510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4514:	b92b      	cbnz	r3, 4522 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4516:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4518:	4b2c      	ldr	r3, [pc, #176]	; (45cc <xTaskResumeAll+0xf4>)
    451a:	4798      	blx	r3
}
    451c:	4620      	mov	r0, r4
    451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4522:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4524:	4c27      	ldr	r4, [pc, #156]	; (45c4 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4526:	4e2a      	ldr	r6, [pc, #168]	; (45d0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4528:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    452c:	6963      	ldr	r3, [r4, #20]
    452e:	b1fb      	cbz	r3, 4570 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    4530:	6a23      	ldr	r3, [r4, #32]
    4532:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4534:	f105 0018 	add.w	r0, r5, #24
    4538:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    453a:	1d2f      	adds	r7, r5, #4
    453c:	4638      	mov	r0, r7
    453e:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4540:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4542:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4546:	4298      	cmp	r0, r3
    4548:	bf88      	it	hi
    454a:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    454e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4552:	4639      	mov	r1, r7
    4554:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4558:	4b1e      	ldr	r3, [pc, #120]	; (45d4 <xTaskResumeAll+0xfc>)
    455a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    455c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4560:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4564:	429a      	cmp	r2, r3
    4566:	d3e1      	bcc.n	452c <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4568:	2301      	movs	r3, #1
    456a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    456e:	e7dd      	b.n	452c <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    4570:	b10d      	cbz	r5, 4576 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    4572:	4b19      	ldr	r3, [pc, #100]	; (45d8 <xTaskResumeAll+0x100>)
    4574:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4576:	4b13      	ldr	r3, [pc, #76]	; (45c4 <xTaskResumeAll+0xec>)
    4578:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    457c:	b17c      	cbz	r4, 459e <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    457e:	4f17      	ldr	r7, [pc, #92]	; (45dc <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    4580:	461e      	mov	r6, r3
    4582:	2501      	movs	r5, #1
    4584:	e001      	b.n	458a <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    4586:	3c01      	subs	r4, #1
    4588:	d005      	beq.n	4596 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    458a:	47b8      	blx	r7
    458c:	2800      	cmp	r0, #0
    458e:	d0fa      	beq.n	4586 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    4590:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    4594:	e7f7      	b.n	4586 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    4596:	2200      	movs	r2, #0
    4598:	4b0a      	ldr	r3, [pc, #40]	; (45c4 <xTaskResumeAll+0xec>)
    459a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    459e:	4b09      	ldr	r3, [pc, #36]	; (45c4 <xTaskResumeAll+0xec>)
    45a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    45a4:	b15b      	cbz	r3, 45be <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    45a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    45aa:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <xTaskResumeAll+0x108>)
    45ac:	601a      	str	r2, [r3, #0]
    45ae:	f3bf 8f4f 	dsb	sy
    45b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    45b6:	2401      	movs	r4, #1
    45b8:	e7ae      	b.n	4518 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    45ba:	2400      	movs	r4, #0
    45bc:	e7ac      	b.n	4518 <xTaskResumeAll+0x40>
    45be:	2400      	movs	r4, #0
    45c0:	e7aa      	b.n	4518 <xTaskResumeAll+0x40>
    45c2:	bf00      	nop
    45c4:	20002ffc 	.word	0x20002ffc
    45c8:	000032d5 	.word	0x000032d5
    45cc:	00003319 	.word	0x00003319
    45d0:	000031d9 	.word	0x000031d9
    45d4:	0000318d 	.word	0x0000318d
    45d8:	00004081 	.word	0x00004081
    45dc:	000043b1 	.word	0x000043b1
    45e0:	e000ed04 	.word	0xe000ed04

000045e4 <vTaskDelayUntil>:
{
    45e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    45e6:	b150      	cbz	r0, 45fe <vTaskDelayUntil+0x1a>
    45e8:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    45ea:	b989      	cbnz	r1, 4610 <vTaskDelayUntil+0x2c>
    45ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    45f0:	f383 8811 	msr	BASEPRI, r3
    45f4:	f3bf 8f6f 	isb	sy
    45f8:	f3bf 8f4f 	dsb	sy
    45fc:	e7fe      	b.n	45fc <vTaskDelayUntil+0x18>
    45fe:	f04f 0380 	mov.w	r3, #128	; 0x80
    4602:	f383 8811 	msr	BASEPRI, r3
    4606:	f3bf 8f6f 	isb	sy
    460a:	f3bf 8f4f 	dsb	sy
    460e:	e7fe      	b.n	460e <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4610:	4b1a      	ldr	r3, [pc, #104]	; (467c <vTaskDelayUntil+0x98>)
    4612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4616:	b143      	cbz	r3, 462a <vTaskDelayUntil+0x46>
    4618:	f04f 0380 	mov.w	r3, #128	; 0x80
    461c:	f383 8811 	msr	BASEPRI, r3
    4620:	f3bf 8f6f 	isb	sy
    4624:	f3bf 8f4f 	dsb	sy
    4628:	e7fe      	b.n	4628 <vTaskDelayUntil+0x44>
    462a:	460c      	mov	r4, r1
	vTaskSuspendAll();
    462c:	4b14      	ldr	r3, [pc, #80]	; (4680 <vTaskDelayUntil+0x9c>)
    462e:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4630:	4b12      	ldr	r3, [pc, #72]	; (467c <vTaskDelayUntil+0x98>)
    4632:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4636:	682a      	ldr	r2, [r5, #0]
    4638:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    463a:	4290      	cmp	r0, r2
    463c:	d214      	bcs.n	4668 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    463e:	42a2      	cmp	r2, r4
    4640:	d916      	bls.n	4670 <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4642:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4644:	42a0      	cmp	r0, r4
    4646:	d203      	bcs.n	4650 <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4648:	2100      	movs	r1, #0
    464a:	1a20      	subs	r0, r4, r0
    464c:	4b0d      	ldr	r3, [pc, #52]	; (4684 <vTaskDelayUntil+0xa0>)
    464e:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4650:	4b0d      	ldr	r3, [pc, #52]	; (4688 <vTaskDelayUntil+0xa4>)
    4652:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4654:	b980      	cbnz	r0, 4678 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    465a:	4b0c      	ldr	r3, [pc, #48]	; (468c <vTaskDelayUntil+0xa8>)
    465c:	601a      	str	r2, [r3, #0]
    465e:	f3bf 8f4f 	dsb	sy
    4662:	f3bf 8f6f 	isb	sy
}
    4666:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4668:	42a2      	cmp	r2, r4
    466a:	d803      	bhi.n	4674 <vTaskDelayUntil+0x90>
    466c:	42a0      	cmp	r0, r4
    466e:	d301      	bcc.n	4674 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4670:	602c      	str	r4, [r5, #0]
    4672:	e7ed      	b.n	4650 <vTaskDelayUntil+0x6c>
    4674:	602c      	str	r4, [r5, #0]
    4676:	e7e7      	b.n	4648 <vTaskDelayUntil+0x64>
    4678:	bd38      	pop	{r3, r4, r5, pc}
    467a:	bf00      	nop
    467c:	20002ffc 	.word	0x20002ffc
    4680:	00004391 	.word	0x00004391
    4684:	000040ad 	.word	0x000040ad
    4688:	000044d9 	.word	0x000044d9
    468c:	e000ed04 	.word	0xe000ed04

00004690 <vTaskDelay>:
{
    4690:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    4692:	b1b0      	cbz	r0, 46c2 <vTaskDelay+0x32>
    4694:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    4696:	4b0f      	ldr	r3, [pc, #60]	; (46d4 <vTaskDelay+0x44>)
    4698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    469c:	b143      	cbz	r3, 46b0 <vTaskDelay+0x20>
    469e:	f04f 0380 	mov.w	r3, #128	; 0x80
    46a2:	f383 8811 	msr	BASEPRI, r3
    46a6:	f3bf 8f6f 	isb	sy
    46aa:	f3bf 8f4f 	dsb	sy
    46ae:	e7fe      	b.n	46ae <vTaskDelay+0x1e>
		vTaskSuspendAll();
    46b0:	4b09      	ldr	r3, [pc, #36]	; (46d8 <vTaskDelay+0x48>)
    46b2:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    46b4:	2100      	movs	r1, #0
    46b6:	4620      	mov	r0, r4
    46b8:	4b08      	ldr	r3, [pc, #32]	; (46dc <vTaskDelay+0x4c>)
    46ba:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    46bc:	4b08      	ldr	r3, [pc, #32]	; (46e0 <vTaskDelay+0x50>)
    46be:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    46c0:	b938      	cbnz	r0, 46d2 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    46c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46c6:	4b07      	ldr	r3, [pc, #28]	; (46e4 <vTaskDelay+0x54>)
    46c8:	601a      	str	r2, [r3, #0]
    46ca:	f3bf 8f4f 	dsb	sy
    46ce:	f3bf 8f6f 	isb	sy
    46d2:	bd10      	pop	{r4, pc}
    46d4:	20002ffc 	.word	0x20002ffc
    46d8:	00004391 	.word	0x00004391
    46dc:	000040ad 	.word	0x000040ad
    46e0:	000044d9 	.word	0x000044d9
    46e4:	e000ed04 	.word	0xe000ed04

000046e8 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    46e8:	4b2c      	ldr	r3, [pc, #176]	; (479c <vTaskSwitchContext+0xb4>)
    46ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    46ee:	bb8b      	cbnz	r3, 4754 <vTaskSwitchContext+0x6c>
{
    46f0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    46f2:	4b2a      	ldr	r3, [pc, #168]	; (479c <vTaskSwitchContext+0xb4>)
    46f4:	2200      	movs	r2, #0
    46f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    46fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    46fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4702:	6812      	ldr	r2, [r2, #0]
    4704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4706:	429a      	cmp	r2, r3
    4708:	d807      	bhi.n	471a <vTaskSwitchContext+0x32>
    470a:	4b24      	ldr	r3, [pc, #144]	; (479c <vTaskSwitchContext+0xb4>)
    470c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4710:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4714:	3134      	adds	r1, #52	; 0x34
    4716:	4b22      	ldr	r3, [pc, #136]	; (47a0 <vTaskSwitchContext+0xb8>)
    4718:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    471a:	4a20      	ldr	r2, [pc, #128]	; (479c <vTaskSwitchContext+0xb4>)
    471c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4720:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4724:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4728:	6a92      	ldr	r2, [r2, #40]	; 0x28
    472a:	b9c2      	cbnz	r2, 475e <vTaskSwitchContext+0x76>
    472c:	b14b      	cbz	r3, 4742 <vTaskSwitchContext+0x5a>
    472e:	491b      	ldr	r1, [pc, #108]	; (479c <vTaskSwitchContext+0xb4>)
    4730:	3b01      	subs	r3, #1
    4732:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4736:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    473a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    473c:	b97a      	cbnz	r2, 475e <vTaskSwitchContext+0x76>
    473e:	2b00      	cmp	r3, #0
    4740:	d1f6      	bne.n	4730 <vTaskSwitchContext+0x48>
    4742:	f04f 0380 	mov.w	r3, #128	; 0x80
    4746:	f383 8811 	msr	BASEPRI, r3
    474a:	f3bf 8f6f 	isb	sy
    474e:	f3bf 8f4f 	dsb	sy
    4752:	e7fe      	b.n	4752 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4754:	2201      	movs	r2, #1
    4756:	4b11      	ldr	r3, [pc, #68]	; (479c <vTaskSwitchContext+0xb4>)
    4758:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    475c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    475e:	4a0f      	ldr	r2, [pc, #60]	; (479c <vTaskSwitchContext+0xb4>)
    4760:	0099      	lsls	r1, r3, #2
    4762:	18c8      	adds	r0, r1, r3
    4764:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4768:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    476a:	6864      	ldr	r4, [r4, #4]
    476c:	62c4      	str	r4, [r0, #44]	; 0x2c
    476e:	4419      	add	r1, r3
    4770:	4602      	mov	r2, r0
    4772:	3230      	adds	r2, #48	; 0x30
    4774:	4294      	cmp	r4, r2
    4776:	d00b      	beq.n	4790 <vTaskSwitchContext+0xa8>
    4778:	4a08      	ldr	r2, [pc, #32]	; (479c <vTaskSwitchContext+0xb4>)
    477a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    477e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4782:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4784:	68c9      	ldr	r1, [r1, #12]
    4786:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    478a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    478e:	bd10      	pop	{r4, pc}
    4790:	6860      	ldr	r0, [r4, #4]
    4792:	4a02      	ldr	r2, [pc, #8]	; (479c <vTaskSwitchContext+0xb4>)
    4794:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4798:	62d0      	str	r0, [r2, #44]	; 0x2c
    479a:	e7ed      	b.n	4778 <vTaskSwitchContext+0x90>
    479c:	20002ffc 	.word	0x20002ffc
    47a0:	000002d1 	.word	0x000002d1

000047a4 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    47a4:	b940      	cbnz	r0, 47b8 <vTaskPlaceOnEventList+0x14>
    47a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    47aa:	f383 8811 	msr	BASEPRI, r3
    47ae:	f3bf 8f6f 	isb	sy
    47b2:	f3bf 8f4f 	dsb	sy
    47b6:	e7fe      	b.n	47b6 <vTaskPlaceOnEventList+0x12>
{
    47b8:	b510      	push	{r4, lr}
    47ba:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    47bc:	4b05      	ldr	r3, [pc, #20]	; (47d4 <vTaskPlaceOnEventList+0x30>)
    47be:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    47c2:	3118      	adds	r1, #24
    47c4:	4b04      	ldr	r3, [pc, #16]	; (47d8 <vTaskPlaceOnEventList+0x34>)
    47c6:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    47c8:	2101      	movs	r1, #1
    47ca:	4620      	mov	r0, r4
    47cc:	4b03      	ldr	r3, [pc, #12]	; (47dc <vTaskPlaceOnEventList+0x38>)
    47ce:	4798      	blx	r3
    47d0:	bd10      	pop	{r4, pc}
    47d2:	bf00      	nop
    47d4:	20002ffc 	.word	0x20002ffc
    47d8:	000031a5 	.word	0x000031a5
    47dc:	000040ad 	.word	0x000040ad

000047e0 <vTaskPlaceOnEventListRestricted>:
{
    47e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    47e2:	b180      	cbz	r0, 4806 <vTaskPlaceOnEventListRestricted+0x26>
    47e4:	4614      	mov	r4, r2
    47e6:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    47e8:	4b0b      	ldr	r3, [pc, #44]	; (4818 <vTaskPlaceOnEventListRestricted+0x38>)
    47ea:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    47ee:	3118      	adds	r1, #24
    47f0:	4b0a      	ldr	r3, [pc, #40]	; (481c <vTaskPlaceOnEventListRestricted+0x3c>)
    47f2:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    47f4:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    47f6:	4621      	mov	r1, r4
    47f8:	bf0c      	ite	eq
    47fa:	4628      	moveq	r0, r5
    47fc:	f04f 30ff 	movne.w	r0, #4294967295
    4800:	4b07      	ldr	r3, [pc, #28]	; (4820 <vTaskPlaceOnEventListRestricted+0x40>)
    4802:	4798      	blx	r3
    4804:	bd38      	pop	{r3, r4, r5, pc}
    4806:	f04f 0380 	mov.w	r3, #128	; 0x80
    480a:	f383 8811 	msr	BASEPRI, r3
    480e:	f3bf 8f6f 	isb	sy
    4812:	f3bf 8f4f 	dsb	sy
    4816:	e7fe      	b.n	4816 <vTaskPlaceOnEventListRestricted+0x36>
    4818:	20002ffc 	.word	0x20002ffc
    481c:	0000318d 	.word	0x0000318d
    4820:	000040ad 	.word	0x000040ad

00004824 <xTaskRemoveFromEventList>:
{
    4824:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4826:	68c3      	ldr	r3, [r0, #12]
    4828:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    482a:	2c00      	cmp	r4, #0
    482c:	d02a      	beq.n	4884 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    482e:	f104 0518 	add.w	r5, r4, #24
    4832:	4628      	mov	r0, r5
    4834:	4b1a      	ldr	r3, [pc, #104]	; (48a0 <xTaskRemoveFromEventList+0x7c>)
    4836:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4838:	4b1a      	ldr	r3, [pc, #104]	; (48a4 <xTaskRemoveFromEventList+0x80>)
    483a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    483e:	bb53      	cbnz	r3, 4896 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4840:	1d25      	adds	r5, r4, #4
    4842:	4628      	mov	r0, r5
    4844:	4b16      	ldr	r3, [pc, #88]	; (48a0 <xTaskRemoveFromEventList+0x7c>)
    4846:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4848:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    484a:	4b16      	ldr	r3, [pc, #88]	; (48a4 <xTaskRemoveFromEventList+0x80>)
    484c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4850:	4298      	cmp	r0, r3
    4852:	bf84      	itt	hi
    4854:	4b13      	ldrhi	r3, [pc, #76]	; (48a4 <xTaskRemoveFromEventList+0x80>)
    4856:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    485a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    485e:	4629      	mov	r1, r5
    4860:	4b11      	ldr	r3, [pc, #68]	; (48a8 <xTaskRemoveFromEventList+0x84>)
    4862:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4866:	4b11      	ldr	r3, [pc, #68]	; (48ac <xTaskRemoveFromEventList+0x88>)
    4868:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    486a:	4b0e      	ldr	r3, [pc, #56]	; (48a4 <xTaskRemoveFromEventList+0x80>)
    486c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4870:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4874:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4876:	bf83      	ittte	hi
    4878:	2001      	movhi	r0, #1
    487a:	4b0a      	ldrhi	r3, [pc, #40]	; (48a4 <xTaskRemoveFromEventList+0x80>)
    487c:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4880:	2000      	movls	r0, #0
}
    4882:	bd38      	pop	{r3, r4, r5, pc}
    4884:	f04f 0380 	mov.w	r3, #128	; 0x80
    4888:	f383 8811 	msr	BASEPRI, r3
    488c:	f3bf 8f6f 	isb	sy
    4890:	f3bf 8f4f 	dsb	sy
    4894:	e7fe      	b.n	4894 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4896:	4629      	mov	r1, r5
    4898:	4805      	ldr	r0, [pc, #20]	; (48b0 <xTaskRemoveFromEventList+0x8c>)
    489a:	4b04      	ldr	r3, [pc, #16]	; (48ac <xTaskRemoveFromEventList+0x88>)
    489c:	4798      	blx	r3
    489e:	e7e4      	b.n	486a <xTaskRemoveFromEventList+0x46>
    48a0:	000031d9 	.word	0x000031d9
    48a4:	20002ffc 	.word	0x20002ffc
    48a8:	20003024 	.word	0x20003024
    48ac:	0000318d 	.word	0x0000318d
    48b0:	20003010 	.word	0x20003010

000048b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    48b4:	4b03      	ldr	r3, [pc, #12]	; (48c4 <vTaskInternalSetTimeOutState+0x10>)
    48b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    48ba:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    48bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    48c0:	6043      	str	r3, [r0, #4]
    48c2:	4770      	bx	lr
    48c4:	20002ffc 	.word	0x20002ffc

000048c8 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    48c8:	b1f8      	cbz	r0, 490a <xTaskCheckForTimeOut+0x42>
{
    48ca:	b570      	push	{r4, r5, r6, lr}
    48cc:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    48ce:	b329      	cbz	r1, 491c <xTaskCheckForTimeOut+0x54>
    48d0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    48d2:	4b1c      	ldr	r3, [pc, #112]	; (4944 <xTaskCheckForTimeOut+0x7c>)
    48d4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    48d6:	4b1c      	ldr	r3, [pc, #112]	; (4948 <xTaskCheckForTimeOut+0x80>)
    48d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    48dc:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    48de:	6823      	ldr	r3, [r4, #0]
    48e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    48e4:	d02a      	beq.n	493c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    48e6:	4818      	ldr	r0, [pc, #96]	; (4948 <xTaskCheckForTimeOut+0x80>)
    48e8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    48ec:	682e      	ldr	r6, [r5, #0]
    48ee:	4286      	cmp	r6, r0
    48f0:	d001      	beq.n	48f6 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    48f2:	428a      	cmp	r2, r1
    48f4:	d224      	bcs.n	4940 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    48f6:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    48f8:	429a      	cmp	r2, r3
    48fa:	d318      	bcc.n	492e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    48fc:	2300      	movs	r3, #0
    48fe:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4900:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4902:	4b12      	ldr	r3, [pc, #72]	; (494c <xTaskCheckForTimeOut+0x84>)
    4904:	4798      	blx	r3
}
    4906:	4620      	mov	r0, r4
    4908:	bd70      	pop	{r4, r5, r6, pc}
    490a:	f04f 0380 	mov.w	r3, #128	; 0x80
    490e:	f383 8811 	msr	BASEPRI, r3
    4912:	f3bf 8f6f 	isb	sy
    4916:	f3bf 8f4f 	dsb	sy
    491a:	e7fe      	b.n	491a <xTaskCheckForTimeOut+0x52>
    491c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4920:	f383 8811 	msr	BASEPRI, r3
    4924:	f3bf 8f6f 	isb	sy
    4928:	f3bf 8f4f 	dsb	sy
    492c:	e7fe      	b.n	492c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    492e:	1a9b      	subs	r3, r3, r2
    4930:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4932:	4628      	mov	r0, r5
    4934:	4b06      	ldr	r3, [pc, #24]	; (4950 <xTaskCheckForTimeOut+0x88>)
    4936:	4798      	blx	r3
			xReturn = pdFALSE;
    4938:	2400      	movs	r4, #0
    493a:	e7e2      	b.n	4902 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    493c:	2400      	movs	r4, #0
    493e:	e7e0      	b.n	4902 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4940:	2401      	movs	r4, #1
    4942:	e7de      	b.n	4902 <xTaskCheckForTimeOut+0x3a>
    4944:	000032d5 	.word	0x000032d5
    4948:	20002ffc 	.word	0x20002ffc
    494c:	00003319 	.word	0x00003319
    4950:	000048b5 	.word	0x000048b5

00004954 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4954:	2201      	movs	r2, #1
    4956:	4b02      	ldr	r3, [pc, #8]	; (4960 <vTaskMissedYield+0xc>)
    4958:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	20002ffc 	.word	0x20002ffc

00004964 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4964:	4b06      	ldr	r3, [pc, #24]	; (4980 <xTaskGetSchedulerState+0x1c>)
    4966:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    496a:	b13b      	cbz	r3, 497c <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    496c:	4b04      	ldr	r3, [pc, #16]	; (4980 <xTaskGetSchedulerState+0x1c>)
    496e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4972:	2b00      	cmp	r3, #0
    4974:	bf0c      	ite	eq
    4976:	2002      	moveq	r0, #2
    4978:	2000      	movne	r0, #0
    497a:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    497c:	2001      	movs	r0, #1
}
    497e:	4770      	bx	lr
    4980:	20002ffc 	.word	0x20002ffc

00004984 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4984:	2800      	cmp	r0, #0
    4986:	d045      	beq.n	4a14 <xTaskPriorityInherit+0x90>
{
    4988:	b538      	push	{r3, r4, r5, lr}
    498a:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    498c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    498e:	4922      	ldr	r1, [pc, #136]	; (4a18 <xTaskPriorityInherit+0x94>)
    4990:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4994:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4996:	428a      	cmp	r2, r1
    4998:	d232      	bcs.n	4a00 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    499a:	6981      	ldr	r1, [r0, #24]
    499c:	2900      	cmp	r1, #0
    499e:	db06      	blt.n	49ae <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    49a0:	491d      	ldr	r1, [pc, #116]	; (4a18 <xTaskPriorityInherit+0x94>)
    49a2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    49a6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    49a8:	f1c1 0105 	rsb	r1, r1, #5
    49ac:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    49ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    49b2:	491a      	ldr	r1, [pc, #104]	; (4a1c <xTaskPriorityInherit+0x98>)
    49b4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    49b8:	6969      	ldr	r1, [r5, #20]
    49ba:	4291      	cmp	r1, r2
    49bc:	d006      	beq.n	49cc <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    49be:	4a16      	ldr	r2, [pc, #88]	; (4a18 <xTaskPriorityInherit+0x94>)
    49c0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    49c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    49c6:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    49c8:	2001      	movs	r0, #1
    49ca:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    49cc:	1d2c      	adds	r4, r5, #4
    49ce:	4620      	mov	r0, r4
    49d0:	4b13      	ldr	r3, [pc, #76]	; (4a20 <xTaskPriorityInherit+0x9c>)
    49d2:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    49d4:	4b10      	ldr	r3, [pc, #64]	; (4a18 <xTaskPriorityInherit+0x94>)
    49d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    49da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    49dc:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    49de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    49e2:	4298      	cmp	r0, r3
    49e4:	bf84      	itt	hi
    49e6:	4b0c      	ldrhi	r3, [pc, #48]	; (4a18 <xTaskPriorityInherit+0x94>)
    49e8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    49ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    49f0:	4621      	mov	r1, r4
    49f2:	4b0a      	ldr	r3, [pc, #40]	; (4a1c <xTaskPriorityInherit+0x98>)
    49f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    49f8:	4b0a      	ldr	r3, [pc, #40]	; (4a24 <xTaskPriorityInherit+0xa0>)
    49fa:	4798      	blx	r3
			xReturn = pdTRUE;
    49fc:	2001      	movs	r0, #1
    49fe:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4a00:	4a05      	ldr	r2, [pc, #20]	; (4a18 <xTaskPriorityInherit+0x94>)
    4a02:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4a06:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4a08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4a0a:	4298      	cmp	r0, r3
    4a0c:	bf2c      	ite	cs
    4a0e:	2000      	movcs	r0, #0
    4a10:	2001      	movcc	r0, #1
    4a12:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4a14:	2000      	movs	r0, #0
	return xReturn;
    4a16:	4770      	bx	lr
    4a18:	20002ffc 	.word	0x20002ffc
    4a1c:	20003024 	.word	0x20003024
    4a20:	000031d9 	.word	0x000031d9
    4a24:	0000318d 	.word	0x0000318d

00004a28 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4a28:	2800      	cmp	r0, #0
    4a2a:	d03c      	beq.n	4aa6 <xTaskPriorityDisinherit+0x7e>
{
    4a2c:	b538      	push	{r3, r4, r5, lr}
    4a2e:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4a30:	4a20      	ldr	r2, [pc, #128]	; (4ab4 <xTaskPriorityDisinherit+0x8c>)
    4a32:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4a36:	4290      	cmp	r0, r2
    4a38:	d008      	beq.n	4a4c <xTaskPriorityDisinherit+0x24>
    4a3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a3e:	f383 8811 	msr	BASEPRI, r3
    4a42:	f3bf 8f6f 	isb	sy
    4a46:	f3bf 8f4f 	dsb	sy
    4a4a:	e7fe      	b.n	4a4a <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4a4c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4a4e:	b942      	cbnz	r2, 4a62 <xTaskPriorityDisinherit+0x3a>
    4a50:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a54:	f383 8811 	msr	BASEPRI, r3
    4a58:	f3bf 8f6f 	isb	sy
    4a5c:	f3bf 8f4f 	dsb	sy
    4a60:	e7fe      	b.n	4a60 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4a62:	3a01      	subs	r2, #1
    4a64:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4a66:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4a68:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4a6a:	4288      	cmp	r0, r1
    4a6c:	d01d      	beq.n	4aaa <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4a6e:	b9f2      	cbnz	r2, 4aae <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4a70:	1d25      	adds	r5, r4, #4
    4a72:	4628      	mov	r0, r5
    4a74:	4b10      	ldr	r3, [pc, #64]	; (4ab8 <xTaskPriorityDisinherit+0x90>)
    4a76:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4a78:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4a7a:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4a7c:	f1c0 0305 	rsb	r3, r0, #5
    4a80:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4a82:	4b0c      	ldr	r3, [pc, #48]	; (4ab4 <xTaskPriorityDisinherit+0x8c>)
    4a84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4a88:	4298      	cmp	r0, r3
    4a8a:	bf84      	itt	hi
    4a8c:	4b09      	ldrhi	r3, [pc, #36]	; (4ab4 <xTaskPriorityDisinherit+0x8c>)
    4a8e:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4a92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4a96:	4629      	mov	r1, r5
    4a98:	4b08      	ldr	r3, [pc, #32]	; (4abc <xTaskPriorityDisinherit+0x94>)
    4a9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a9e:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <xTaskPriorityDisinherit+0x98>)
    4aa0:	4798      	blx	r3
				xReturn = pdTRUE;
    4aa2:	2001      	movs	r0, #1
    4aa4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4aa6:	2000      	movs	r0, #0
    4aa8:	4770      	bx	lr
    4aaa:	2000      	movs	r0, #0
    4aac:	bd38      	pop	{r3, r4, r5, pc}
    4aae:	2000      	movs	r0, #0
}
    4ab0:	bd38      	pop	{r3, r4, r5, pc}
    4ab2:	bf00      	nop
    4ab4:	20002ffc 	.word	0x20002ffc
    4ab8:	000031d9 	.word	0x000031d9
    4abc:	20003024 	.word	0x20003024
    4ac0:	0000318d 	.word	0x0000318d

00004ac4 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d049      	beq.n	4b5c <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4ac8:	b538      	push	{r3, r4, r5, lr}
    4aca:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4acc:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4ace:	b940      	cbnz	r0, 4ae2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4ad0:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ad4:	f383 8811 	msr	BASEPRI, r3
    4ad8:	f3bf 8f6f 	isb	sy
    4adc:	f3bf 8f4f 	dsb	sy
    4ae0:	e7fe      	b.n	4ae0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4ae2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4ae4:	428a      	cmp	r2, r1
    4ae6:	bf38      	it	cc
    4ae8:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4aea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4aec:	4291      	cmp	r1, r2
    4aee:	d001      	beq.n	4af4 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4af0:	2801      	cmp	r0, #1
    4af2:	d000      	beq.n	4af6 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4af4:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4af6:	481a      	ldr	r0, [pc, #104]	; (4b60 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4af8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4afc:	4284      	cmp	r4, r0
    4afe:	d108      	bne.n	4b12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4b00:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b04:	f383 8811 	msr	BASEPRI, r3
    4b08:	f3bf 8f6f 	isb	sy
    4b0c:	f3bf 8f4f 	dsb	sy
    4b10:	e7fe      	b.n	4b10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4b12:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4b14:	69a0      	ldr	r0, [r4, #24]
    4b16:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4b18:	bfa4      	itt	ge
    4b1a:	f1c2 0205 	rsbge	r2, r2, #5
    4b1e:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4b20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4b24:	4a0f      	ldr	r2, [pc, #60]	; (4b64 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4b26:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4b2a:	6962      	ldr	r2, [r4, #20]
    4b2c:	428a      	cmp	r2, r1
    4b2e:	d1e1      	bne.n	4af4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4b30:	1d25      	adds	r5, r4, #4
    4b32:	4628      	mov	r0, r5
    4b34:	4b0c      	ldr	r3, [pc, #48]	; (4b68 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    4b36:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    4b38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4b3a:	4b09      	ldr	r3, [pc, #36]	; (4b60 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4b3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4b40:	4298      	cmp	r0, r3
    4b42:	bf84      	itt	hi
    4b44:	4b06      	ldrhi	r3, [pc, #24]	; (4b60 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4b46:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4b4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4b4e:	4629      	mov	r1, r5
    4b50:	4b04      	ldr	r3, [pc, #16]	; (4b64 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4b52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b56:	4b05      	ldr	r3, [pc, #20]	; (4b6c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    4b58:	4798      	blx	r3
}
    4b5a:	e7cb      	b.n	4af4 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4b5c:	4770      	bx	lr
    4b5e:	bf00      	nop
    4b60:	20002ffc 	.word	0x20002ffc
    4b64:	20003024 	.word	0x20003024
    4b68:	000031d9 	.word	0x000031d9
    4b6c:	0000318d 	.word	0x0000318d

00004b70 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    4b70:	4b06      	ldr	r3, [pc, #24]	; (4b8c <pvTaskIncrementMutexHeldCount+0x1c>)
    4b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4b76:	b12b      	cbz	r3, 4b84 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    4b78:	4b04      	ldr	r3, [pc, #16]	; (4b8c <pvTaskIncrementMutexHeldCount+0x1c>)
    4b7a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b7e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4b80:	3301      	adds	r3, #1
    4b82:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    4b84:	4b01      	ldr	r3, [pc, #4]	; (4b8c <pvTaskIncrementMutexHeldCount+0x1c>)
    4b86:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    4b8a:	4770      	bx	lr
    4b8c:	20002ffc 	.word	0x20002ffc

00004b90 <xTaskNotifyWait>:
{
    4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b92:	4607      	mov	r7, r0
    4b94:	460d      	mov	r5, r1
    4b96:	4614      	mov	r4, r2
    4b98:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    4b9a:	4b25      	ldr	r3, [pc, #148]	; (4c30 <xTaskNotifyWait+0xa0>)
    4b9c:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4b9e:	4b25      	ldr	r3, [pc, #148]	; (4c34 <xTaskNotifyWait+0xa4>)
    4ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	2b02      	cmp	r3, #2
    4bac:	d00c      	beq.n	4bc8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4bae:	4b21      	ldr	r3, [pc, #132]	; (4c34 <xTaskNotifyWait+0xa4>)
    4bb0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4bb4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4bb6:	ea20 0007 	bic.w	r0, r0, r7
    4bba:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4bc0:	2201      	movs	r2, #1
    4bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    4bc6:	b9e6      	cbnz	r6, 4c02 <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    4bc8:	4b1b      	ldr	r3, [pc, #108]	; (4c38 <xTaskNotifyWait+0xa8>)
    4bca:	4798      	blx	r3
	taskENTER_CRITICAL();
    4bcc:	4b18      	ldr	r3, [pc, #96]	; (4c30 <xTaskNotifyWait+0xa0>)
    4bce:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    4bd0:	b124      	cbz	r4, 4bdc <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4bd2:	4b18      	ldr	r3, [pc, #96]	; (4c34 <xTaskNotifyWait+0xa4>)
    4bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bda:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4bdc:	4b15      	ldr	r3, [pc, #84]	; (4c34 <xTaskNotifyWait+0xa4>)
    4bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4be6:	b2db      	uxtb	r3, r3
    4be8:	2b02      	cmp	r3, #2
    4bea:	d017      	beq.n	4c1c <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    4bec:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4bee:	4b11      	ldr	r3, [pc, #68]	; (4c34 <xTaskNotifyWait+0xa4>)
    4bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4bf4:	2200      	movs	r2, #0
    4bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    4bfa:	4b0f      	ldr	r3, [pc, #60]	; (4c38 <xTaskNotifyWait+0xa8>)
    4bfc:	4798      	blx	r3
}
    4bfe:	4620      	mov	r0, r4
    4c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4c02:	4611      	mov	r1, r2
    4c04:	4630      	mov	r0, r6
    4c06:	4b0d      	ldr	r3, [pc, #52]	; (4c3c <xTaskNotifyWait+0xac>)
    4c08:	4798      	blx	r3
				portYIELD_WITHIN_API();
    4c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c0e:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <xTaskNotifyWait+0xb0>)
    4c10:	601a      	str	r2, [r3, #0]
    4c12:	f3bf 8f4f 	dsb	sy
    4c16:	f3bf 8f6f 	isb	sy
    4c1a:	e7d5      	b.n	4bc8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4c1c:	4b05      	ldr	r3, [pc, #20]	; (4c34 <xTaskNotifyWait+0xa4>)
    4c1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4c22:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    4c24:	ea23 0505 	bic.w	r5, r3, r5
    4c28:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    4c2a:	2401      	movs	r4, #1
    4c2c:	e7df      	b.n	4bee <xTaskNotifyWait+0x5e>
    4c2e:	bf00      	nop
    4c30:	000032d5 	.word	0x000032d5
    4c34:	20002ffc 	.word	0x20002ffc
    4c38:	00003319 	.word	0x00003319
    4c3c:	000040ad 	.word	0x000040ad
    4c40:	e000ed04 	.word	0xe000ed04

00004c44 <xTaskGenericNotifyFromISR>:
{
    4c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c48:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    4c4a:	b310      	cbz	r0, 4c92 <xTaskGenericNotifyFromISR+0x4e>
    4c4c:	4604      	mov	r4, r0
    4c4e:	4699      	mov	r9, r3
    4c50:	4617      	mov	r7, r2
    4c52:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4c54:	4b3e      	ldr	r3, [pc, #248]	; (4d50 <xTaskGenericNotifyFromISR+0x10c>)
    4c56:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4c58:	f3ef 8511 	mrs	r5, BASEPRI
    4c5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c60:	f383 8811 	msr	BASEPRI, r3
    4c64:	f3bf 8f6f 	isb	sy
    4c68:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    4c6c:	f1b9 0f00 	cmp.w	r9, #0
    4c70:	d002      	beq.n	4c78 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4c72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4c74:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    4c78:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    4c7c:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    4c7e:	2202      	movs	r2, #2
    4c80:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    4c84:	1e7a      	subs	r2, r7, #1
    4c86:	2a03      	cmp	r2, #3
    4c88:	d810      	bhi.n	4cac <xTaskGenericNotifyFromISR+0x68>
    4c8a:	e8df f002 	tbb	[pc, r2]
    4c8e:	1c0b      	.short	0x1c0b
    4c90:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    4c92:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c96:	f383 8811 	msr	BASEPRI, r3
    4c9a:	f3bf 8f6f 	isb	sy
    4c9e:	f3bf 8f4f 	dsb	sy
    4ca2:	e7fe      	b.n	4ca2 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    4ca4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4ca6:	ea42 0208 	orr.w	r2, r2, r8
    4caa:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    4cac:	2b01      	cmp	r3, #1
    4cae:	d147      	bne.n	4d40 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    4cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4cb2:	b1a3      	cbz	r3, 4cde <xTaskGenericNotifyFromISR+0x9a>
    4cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cb8:	f383 8811 	msr	BASEPRI, r3
    4cbc:	f3bf 8f6f 	isb	sy
    4cc0:	f3bf 8f4f 	dsb	sy
    4cc4:	e7fe      	b.n	4cc4 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    4cc6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4cc8:	3201      	adds	r2, #1
    4cca:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    4ccc:	e7ee      	b.n	4cac <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    4cce:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    4cd2:	e7eb      	b.n	4cac <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    4cd4:	2b02      	cmp	r3, #2
    4cd6:	d031      	beq.n	4d3c <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    4cd8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    4cdc:	e7e6      	b.n	4cac <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4cde:	4b1d      	ldr	r3, [pc, #116]	; (4d54 <xTaskGenericNotifyFromISR+0x110>)
    4ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4ce4:	b9fb      	cbnz	r3, 4d26 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    4ce6:	1d27      	adds	r7, r4, #4
    4ce8:	4638      	mov	r0, r7
    4cea:	4b1b      	ldr	r3, [pc, #108]	; (4d58 <xTaskGenericNotifyFromISR+0x114>)
    4cec:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    4cee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4cf0:	4b18      	ldr	r3, [pc, #96]	; (4d54 <xTaskGenericNotifyFromISR+0x110>)
    4cf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4cf6:	4298      	cmp	r0, r3
    4cf8:	bf84      	itt	hi
    4cfa:	4b16      	ldrhi	r3, [pc, #88]	; (4d54 <xTaskGenericNotifyFromISR+0x110>)
    4cfc:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4d00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4d04:	4639      	mov	r1, r7
    4d06:	4b15      	ldr	r3, [pc, #84]	; (4d5c <xTaskGenericNotifyFromISR+0x118>)
    4d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4d0c:	4b14      	ldr	r3, [pc, #80]	; (4d60 <xTaskGenericNotifyFromISR+0x11c>)
    4d0e:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4d10:	4b10      	ldr	r3, [pc, #64]	; (4d54 <xTaskGenericNotifyFromISR+0x110>)
    4d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4d16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d1a:	429a      	cmp	r2, r3
    4d1c:	d915      	bls.n	4d4a <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    4d1e:	b146      	cbz	r6, 4d32 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    4d20:	2001      	movs	r0, #1
    4d22:	6030      	str	r0, [r6, #0]
    4d24:	e00d      	b.n	4d42 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    4d26:	f104 0118 	add.w	r1, r4, #24
    4d2a:	480e      	ldr	r0, [pc, #56]	; (4d64 <xTaskGenericNotifyFromISR+0x120>)
    4d2c:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <xTaskGenericNotifyFromISR+0x11c>)
    4d2e:	4798      	blx	r3
    4d30:	e7ee      	b.n	4d10 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    4d32:	2001      	movs	r0, #1
    4d34:	4b07      	ldr	r3, [pc, #28]	; (4d54 <xTaskGenericNotifyFromISR+0x110>)
    4d36:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    4d3a:	e002      	b.n	4d42 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    4d3c:	2000      	movs	r0, #0
    4d3e:	e000      	b.n	4d42 <xTaskGenericNotifyFromISR+0xfe>
    4d40:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4d42:	f385 8811 	msr	BASEPRI, r5
}
    4d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d4a:	2001      	movs	r0, #1
    4d4c:	e7f9      	b.n	4d42 <xTaskGenericNotifyFromISR+0xfe>
    4d4e:	bf00      	nop
    4d50:	0000352d 	.word	0x0000352d
    4d54:	20002ffc 	.word	0x20002ffc
    4d58:	000031d9 	.word	0x000031d9
    4d5c:	20003024 	.word	0x20003024
    4d60:	0000318d 	.word	0x0000318d
    4d64:	20003010 	.word	0x20003010

00004d68 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    4d68:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    4d6a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    4d6c:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    4d6e:	4291      	cmp	r1, r2
    4d70:	d80c      	bhi.n	4d8c <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    4d72:	1ad2      	subs	r2, r2, r3
    4d74:	6983      	ldr	r3, [r0, #24]
    4d76:	429a      	cmp	r2, r3
    4d78:	d301      	bcc.n	4d7e <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4d7a:	2001      	movs	r0, #1
    4d7c:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    4d7e:	1d01      	adds	r1, r0, #4
    4d80:	4b09      	ldr	r3, [pc, #36]	; (4da8 <prvInsertTimerInActiveList+0x40>)
    4d82:	6818      	ldr	r0, [r3, #0]
    4d84:	4b09      	ldr	r3, [pc, #36]	; (4dac <prvInsertTimerInActiveList+0x44>)
    4d86:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    4d88:	2000      	movs	r0, #0
    4d8a:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    4d8c:	429a      	cmp	r2, r3
    4d8e:	d201      	bcs.n	4d94 <prvInsertTimerInActiveList+0x2c>
    4d90:	4299      	cmp	r1, r3
    4d92:	d206      	bcs.n	4da2 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    4d94:	1d01      	adds	r1, r0, #4
    4d96:	4b04      	ldr	r3, [pc, #16]	; (4da8 <prvInsertTimerInActiveList+0x40>)
    4d98:	6858      	ldr	r0, [r3, #4]
    4d9a:	4b04      	ldr	r3, [pc, #16]	; (4dac <prvInsertTimerInActiveList+0x44>)
    4d9c:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    4d9e:	2000      	movs	r0, #0
    4da0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    4da2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    4da4:	bd08      	pop	{r3, pc}
    4da6:	bf00      	nop
    4da8:	200030e8 	.word	0x200030e8
    4dac:	000031a5 	.word	0x000031a5

00004db0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    4db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    4db2:	4b0d      	ldr	r3, [pc, #52]	; (4de8 <prvCheckForValidListAndQueue+0x38>)
    4db4:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    4db6:	4b0d      	ldr	r3, [pc, #52]	; (4dec <prvCheckForValidListAndQueue+0x3c>)
    4db8:	689b      	ldr	r3, [r3, #8]
    4dba:	b113      	cbz	r3, 4dc2 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4dbc:	4b0c      	ldr	r3, [pc, #48]	; (4df0 <prvCheckForValidListAndQueue+0x40>)
    4dbe:	4798      	blx	r3
    4dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    4dc2:	4c0a      	ldr	r4, [pc, #40]	; (4dec <prvCheckForValidListAndQueue+0x3c>)
    4dc4:	f104 060c 	add.w	r6, r4, #12
    4dc8:	4630      	mov	r0, r6
    4dca:	4f0a      	ldr	r7, [pc, #40]	; (4df4 <prvCheckForValidListAndQueue+0x44>)
    4dcc:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    4dce:	f104 0520 	add.w	r5, r4, #32
    4dd2:	4628      	mov	r0, r5
    4dd4:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    4dd6:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    4dd8:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    4dda:	2200      	movs	r2, #0
    4ddc:	210c      	movs	r1, #12
    4dde:	2014      	movs	r0, #20
    4de0:	4b05      	ldr	r3, [pc, #20]	; (4df8 <prvCheckForValidListAndQueue+0x48>)
    4de2:	4798      	blx	r3
    4de4:	60a0      	str	r0, [r4, #8]
    4de6:	e7e9      	b.n	4dbc <prvCheckForValidListAndQueue+0xc>
    4de8:	000032d5 	.word	0x000032d5
    4dec:	200030e8 	.word	0x200030e8
    4df0:	00003319 	.word	0x00003319
    4df4:	00003171 	.word	0x00003171
    4df8:	00003929 	.word	0x00003929

00004dfc <xTimerCreateTimerTask>:
{
    4dfc:	b510      	push	{r4, lr}
    4dfe:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    4e00:	4b0d      	ldr	r3, [pc, #52]	; (4e38 <xTimerCreateTimerTask+0x3c>)
    4e02:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    4e04:	4b0d      	ldr	r3, [pc, #52]	; (4e3c <xTimerCreateTimerTask+0x40>)
    4e06:	689b      	ldr	r3, [r3, #8]
    4e08:	b163      	cbz	r3, 4e24 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    4e0a:	4b0d      	ldr	r3, [pc, #52]	; (4e40 <xTimerCreateTimerTask+0x44>)
    4e0c:	9301      	str	r3, [sp, #4]
    4e0e:	2303      	movs	r3, #3
    4e10:	9300      	str	r3, [sp, #0]
    4e12:	2300      	movs	r3, #0
    4e14:	2280      	movs	r2, #128	; 0x80
    4e16:	490b      	ldr	r1, [pc, #44]	; (4e44 <xTimerCreateTimerTask+0x48>)
    4e18:	480b      	ldr	r0, [pc, #44]	; (4e48 <xTimerCreateTimerTask+0x4c>)
    4e1a:	4c0c      	ldr	r4, [pc, #48]	; (4e4c <xTimerCreateTimerTask+0x50>)
    4e1c:	47a0      	blx	r4
	configASSERT(xReturn);
    4e1e:	b108      	cbz	r0, 4e24 <xTimerCreateTimerTask+0x28>
}
    4e20:	b002      	add	sp, #8
    4e22:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    4e24:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e28:	f383 8811 	msr	BASEPRI, r3
    4e2c:	f3bf 8f6f 	isb	sy
    4e30:	f3bf 8f4f 	dsb	sy
    4e34:	e7fe      	b.n	4e34 <xTimerCreateTimerTask+0x38>
    4e36:	bf00      	nop
    4e38:	00004db1 	.word	0x00004db1
    4e3c:	200030e8 	.word	0x200030e8
    4e40:	2000311c 	.word	0x2000311c
    4e44:	00006f88 	.word	0x00006f88
    4e48:	00004f69 	.word	0x00004f69
    4e4c:	0000412d 	.word	0x0000412d

00004e50 <xTimerGenericCommand>:
	configASSERT(xTimer);
    4e50:	b1d8      	cbz	r0, 4e8a <xTimerGenericCommand+0x3a>
{
    4e52:	b530      	push	{r4, r5, lr}
    4e54:	b085      	sub	sp, #20
    4e56:	4615      	mov	r5, r2
    4e58:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    4e5a:	4a14      	ldr	r2, [pc, #80]	; (4eac <xTimerGenericCommand+0x5c>)
    4e5c:	6890      	ldr	r0, [r2, #8]
    4e5e:	b310      	cbz	r0, 4ea6 <xTimerGenericCommand+0x56>
    4e60:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    4e62:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4e64:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    4e66:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    4e68:	2905      	cmp	r1, #5
    4e6a:	dc17      	bgt.n	4e9c <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    4e6c:	4b10      	ldr	r3, [pc, #64]	; (4eb0 <xTimerGenericCommand+0x60>)
    4e6e:	4798      	blx	r3
    4e70:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    4e72:	f04f 0300 	mov.w	r3, #0
    4e76:	bf0c      	ite	eq
    4e78:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    4e7a:	461a      	movne	r2, r3
    4e7c:	a901      	add	r1, sp, #4
    4e7e:	480b      	ldr	r0, [pc, #44]	; (4eac <xTimerGenericCommand+0x5c>)
    4e80:	6880      	ldr	r0, [r0, #8]
    4e82:	4c0c      	ldr	r4, [pc, #48]	; (4eb4 <xTimerGenericCommand+0x64>)
    4e84:	47a0      	blx	r4
}
    4e86:	b005      	add	sp, #20
    4e88:	bd30      	pop	{r4, r5, pc}
    4e8a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e8e:	f383 8811 	msr	BASEPRI, r3
    4e92:	f3bf 8f6f 	isb	sy
    4e96:	f3bf 8f4f 	dsb	sy
    4e9a:	e7fe      	b.n	4e9a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    4e9c:	2300      	movs	r3, #0
    4e9e:	a901      	add	r1, sp, #4
    4ea0:	4c05      	ldr	r4, [pc, #20]	; (4eb8 <xTimerGenericCommand+0x68>)
    4ea2:	47a0      	blx	r4
    4ea4:	e7ef      	b.n	4e86 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    4ea6:	2000      	movs	r0, #0
	return xReturn;
    4ea8:	e7ed      	b.n	4e86 <xTimerGenericCommand+0x36>
    4eaa:	bf00      	nop
    4eac:	200030e8 	.word	0x200030e8
    4eb0:	00004965 	.word	0x00004965
    4eb4:	00003981 	.word	0x00003981
    4eb8:	00003b5d 	.word	0x00003b5d

00004ebc <prvSampleTimeNow>:
{
    4ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ec0:	b082      	sub	sp, #8
    4ec2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    4ec4:	4b23      	ldr	r3, [pc, #140]	; (4f54 <prvSampleTimeNow+0x98>)
    4ec6:	4798      	blx	r3
    4ec8:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    4eca:	4b23      	ldr	r3, [pc, #140]	; (4f58 <prvSampleTimeNow+0x9c>)
    4ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ece:	4298      	cmp	r0, r3
    4ed0:	d319      	bcc.n	4f06 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    4ed2:	2300      	movs	r3, #0
    4ed4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    4ed8:	4b1f      	ldr	r3, [pc, #124]	; (4f58 <prvSampleTimeNow+0x9c>)
    4eda:	639f      	str	r7, [r3, #56]	; 0x38
}
    4edc:	4638      	mov	r0, r7
    4ede:	b002      	add	sp, #8
    4ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    4ee4:	2100      	movs	r1, #0
    4ee6:	9100      	str	r1, [sp, #0]
    4ee8:	460b      	mov	r3, r1
    4eea:	4652      	mov	r2, sl
    4eec:	4620      	mov	r0, r4
    4eee:	4c1b      	ldr	r4, [pc, #108]	; (4f5c <prvSampleTimeNow+0xa0>)
    4ef0:	47a0      	blx	r4
				configASSERT(xResult);
    4ef2:	b950      	cbnz	r0, 4f0a <prvSampleTimeNow+0x4e>
    4ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ef8:	f383 8811 	msr	BASEPRI, r3
    4efc:	f3bf 8f6f 	isb	sy
    4f00:	f3bf 8f4f 	dsb	sy
    4f04:	e7fe      	b.n	4f04 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    4f06:	4d14      	ldr	r5, [pc, #80]	; (4f58 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4f08:	4e15      	ldr	r6, [pc, #84]	; (4f60 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    4f0a:	686b      	ldr	r3, [r5, #4]
    4f0c:	681a      	ldr	r2, [r3, #0]
    4f0e:	b1c2      	cbz	r2, 4f42 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    4f10:	68db      	ldr	r3, [r3, #12]
    4f12:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    4f16:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4f18:	f104 0904 	add.w	r9, r4, #4
    4f1c:	4648      	mov	r0, r9
    4f1e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    4f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f22:	4620      	mov	r0, r4
    4f24:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    4f26:	69e3      	ldr	r3, [r4, #28]
    4f28:	2b01      	cmp	r3, #1
    4f2a:	d1ee      	bne.n	4f0a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    4f2c:	69a3      	ldr	r3, [r4, #24]
    4f2e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    4f30:	459a      	cmp	sl, r3
    4f32:	d2d7      	bcs.n	4ee4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    4f34:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    4f36:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    4f38:	4649      	mov	r1, r9
    4f3a:	6868      	ldr	r0, [r5, #4]
    4f3c:	4b09      	ldr	r3, [pc, #36]	; (4f64 <prvSampleTimeNow+0xa8>)
    4f3e:	4798      	blx	r3
    4f40:	e7e3      	b.n	4f0a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    4f42:	4a05      	ldr	r2, [pc, #20]	; (4f58 <prvSampleTimeNow+0x9c>)
    4f44:	6811      	ldr	r1, [r2, #0]
    4f46:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    4f48:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    4f4a:	2301      	movs	r3, #1
    4f4c:	f8c8 3000 	str.w	r3, [r8]
    4f50:	e7c2      	b.n	4ed8 <prvSampleTimeNow+0x1c>
    4f52:	bf00      	nop
    4f54:	000043a5 	.word	0x000043a5
    4f58:	200030e8 	.word	0x200030e8
    4f5c:	00004e51 	.word	0x00004e51
    4f60:	000031d9 	.word	0x000031d9
    4f64:	000031a5 	.word	0x000031a5

00004f68 <prvTimerTask>:
{
    4f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f6c:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    4f6e:	4c65      	ldr	r4, [pc, #404]	; (5104 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    4f70:	4f65      	ldr	r7, [pc, #404]	; (5108 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    4f72:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5128 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    4f76:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 512c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    4f7a:	6863      	ldr	r3, [r4, #4]
    4f7c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    4f7e:	b172      	cbz	r2, 4f9e <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    4f80:	68db      	ldr	r3, [r3, #12]
    4f82:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    4f84:	4b61      	ldr	r3, [pc, #388]	; (510c <prvTimerTask+0x1a4>)
    4f86:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    4f88:	a803      	add	r0, sp, #12
    4f8a:	4b61      	ldr	r3, [pc, #388]	; (5110 <prvTimerTask+0x1a8>)
    4f8c:	4798      	blx	r3
    4f8e:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    4f90:	9b03      	ldr	r3, [sp, #12]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d179      	bne.n	508a <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    4f96:	42a8      	cmp	r0, r5
    4f98:	d24a      	bcs.n	5030 <prvTimerTask+0xc8>
    4f9a:	2200      	movs	r2, #0
    4f9c:	e00e      	b.n	4fbc <prvTimerTask+0x54>
	vTaskSuspendAll();
    4f9e:	4b5b      	ldr	r3, [pc, #364]	; (510c <prvTimerTask+0x1a4>)
    4fa0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    4fa2:	a803      	add	r0, sp, #12
    4fa4:	4b5a      	ldr	r3, [pc, #360]	; (5110 <prvTimerTask+0x1a8>)
    4fa6:	4798      	blx	r3
    4fa8:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    4faa:	9b03      	ldr	r3, [sp, #12]
    4fac:	2b00      	cmp	r3, #0
    4fae:	d16c      	bne.n	508a <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    4fb0:	6823      	ldr	r3, [r4, #0]
    4fb2:	681a      	ldr	r2, [r3, #0]
    4fb4:	fab2 f282 	clz	r2, r2
    4fb8:	0952      	lsrs	r2, r2, #5
    4fba:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    4fbc:	1ba9      	subs	r1, r5, r6
    4fbe:	68a0      	ldr	r0, [r4, #8]
    4fc0:	4b54      	ldr	r3, [pc, #336]	; (5114 <prvTimerTask+0x1ac>)
    4fc2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4fc4:	47b8      	blx	r7
    4fc6:	b938      	cbnz	r0, 4fd8 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    4fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4fcc:	f8c9 3000 	str.w	r3, [r9]
    4fd0:	f3bf 8f4f 	dsb	sy
    4fd4:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    4fd8:	4d4f      	ldr	r5, [pc, #316]	; (5118 <prvTimerTask+0x1b0>)
    4fda:	2200      	movs	r2, #0
    4fdc:	a903      	add	r1, sp, #12
    4fde:	68a0      	ldr	r0, [r4, #8]
    4fe0:	47a8      	blx	r5
    4fe2:	2800      	cmp	r0, #0
    4fe4:	d0c9      	beq.n	4f7a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    4fe6:	9b03      	ldr	r3, [sp, #12]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	dbf6      	blt.n	4fda <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4fec:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    4fee:	6973      	ldr	r3, [r6, #20]
    4ff0:	b10b      	cbz	r3, 4ff6 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    4ff2:	1d30      	adds	r0, r6, #4
    4ff4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    4ff6:	a802      	add	r0, sp, #8
    4ff8:	4b45      	ldr	r3, [pc, #276]	; (5110 <prvTimerTask+0x1a8>)
    4ffa:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    4ffc:	9b03      	ldr	r3, [sp, #12]
    4ffe:	2b09      	cmp	r3, #9
    5000:	d8eb      	bhi.n	4fda <prvTimerTask+0x72>
    5002:	a201      	add	r2, pc, #4	; (adr r2, 5008 <prvTimerTask+0xa0>)
    5004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5008:	0000508f 	.word	0x0000508f
    500c:	0000508f 	.word	0x0000508f
    5010:	0000508f 	.word	0x0000508f
    5014:	00004fdb 	.word	0x00004fdb
    5018:	000050d7 	.word	0x000050d7
    501c:	000050fd 	.word	0x000050fd
    5020:	0000508f 	.word	0x0000508f
    5024:	0000508f 	.word	0x0000508f
    5028:	00004fdb 	.word	0x00004fdb
    502c:	000050d7 	.word	0x000050d7
				(void)xTaskResumeAll();
    5030:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5032:	6863      	ldr	r3, [r4, #4]
    5034:	68db      	ldr	r3, [r3, #12]
    5036:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    503a:	f10a 0004 	add.w	r0, sl, #4
    503e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5040:	f8da 301c 	ldr.w	r3, [sl, #28]
    5044:	2b01      	cmp	r3, #1
    5046:	d004      	beq.n	5052 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5048:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    504c:	4650      	mov	r0, sl
    504e:	4798      	blx	r3
    5050:	e7c2      	b.n	4fd8 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    5052:	f8da 1018 	ldr.w	r1, [sl, #24]
    5056:	462b      	mov	r3, r5
    5058:	4632      	mov	r2, r6
    505a:	4429      	add	r1, r5
    505c:	4650      	mov	r0, sl
    505e:	4e2f      	ldr	r6, [pc, #188]	; (511c <prvTimerTask+0x1b4>)
    5060:	47b0      	blx	r6
    5062:	2800      	cmp	r0, #0
    5064:	d0f0      	beq.n	5048 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5066:	2100      	movs	r1, #0
    5068:	9100      	str	r1, [sp, #0]
    506a:	460b      	mov	r3, r1
    506c:	462a      	mov	r2, r5
    506e:	4650      	mov	r0, sl
    5070:	4d2b      	ldr	r5, [pc, #172]	; (5120 <prvTimerTask+0x1b8>)
    5072:	47a8      	blx	r5
			configASSERT(xResult);
    5074:	2800      	cmp	r0, #0
    5076:	d1e7      	bne.n	5048 <prvTimerTask+0xe0>
    5078:	f04f 0380 	mov.w	r3, #128	; 0x80
    507c:	f383 8811 	msr	BASEPRI, r3
    5080:	f3bf 8f6f 	isb	sy
    5084:	f3bf 8f4f 	dsb	sy
    5088:	e7fe      	b.n	5088 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    508a:	47b8      	blx	r7
    508c:	e7a4      	b.n	4fd8 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    508e:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    5090:	69b1      	ldr	r1, [r6, #24]
    5092:	462b      	mov	r3, r5
    5094:	4602      	mov	r2, r0
    5096:	4429      	add	r1, r5
    5098:	4630      	mov	r0, r6
    509a:	4d20      	ldr	r5, [pc, #128]	; (511c <prvTimerTask+0x1b4>)
    509c:	47a8      	blx	r5
    509e:	2800      	cmp	r0, #0
    50a0:	d09a      	beq.n	4fd8 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    50a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    50a4:	4630      	mov	r0, r6
    50a6:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    50a8:	69f3      	ldr	r3, [r6, #28]
    50aa:	2b01      	cmp	r3, #1
    50ac:	d194      	bne.n	4fd8 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    50ae:	69b2      	ldr	r2, [r6, #24]
    50b0:	2100      	movs	r1, #0
    50b2:	9100      	str	r1, [sp, #0]
    50b4:	460b      	mov	r3, r1
    50b6:	9804      	ldr	r0, [sp, #16]
    50b8:	4402      	add	r2, r0
    50ba:	4630      	mov	r0, r6
    50bc:	4d18      	ldr	r5, [pc, #96]	; (5120 <prvTimerTask+0x1b8>)
    50be:	47a8      	blx	r5
						configASSERT(xResult);
    50c0:	2800      	cmp	r0, #0
    50c2:	d189      	bne.n	4fd8 <prvTimerTask+0x70>
    50c4:	f04f 0380 	mov.w	r3, #128	; 0x80
    50c8:	f383 8811 	msr	BASEPRI, r3
    50cc:	f3bf 8f6f 	isb	sy
    50d0:	f3bf 8f4f 	dsb	sy
    50d4:	e7fe      	b.n	50d4 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    50d6:	9904      	ldr	r1, [sp, #16]
    50d8:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    50da:	b131      	cbz	r1, 50ea <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    50dc:	4603      	mov	r3, r0
    50de:	4602      	mov	r2, r0
    50e0:	4401      	add	r1, r0
    50e2:	4630      	mov	r0, r6
    50e4:	4d0d      	ldr	r5, [pc, #52]	; (511c <prvTimerTask+0x1b4>)
    50e6:	47a8      	blx	r5
    50e8:	e776      	b.n	4fd8 <prvTimerTask+0x70>
    50ea:	f04f 0380 	mov.w	r3, #128	; 0x80
    50ee:	f383 8811 	msr	BASEPRI, r3
    50f2:	f3bf 8f6f 	isb	sy
    50f6:	f3bf 8f4f 	dsb	sy
    50fa:	e7fe      	b.n	50fa <prvTimerTask+0x192>
				vPortFree(pxTimer);
    50fc:	4630      	mov	r0, r6
    50fe:	4b09      	ldr	r3, [pc, #36]	; (5124 <prvTimerTask+0x1bc>)
    5100:	4798      	blx	r3
    5102:	e769      	b.n	4fd8 <prvTimerTask+0x70>
    5104:	200030e8 	.word	0x200030e8
    5108:	000044d9 	.word	0x000044d9
    510c:	00004391 	.word	0x00004391
    5110:	00004ebd 	.word	0x00004ebd
    5114:	00003ffd 	.word	0x00003ffd
    5118:	00003c65 	.word	0x00003c65
    511c:	00004d69 	.word	0x00004d69
    5120:	00004e51 	.word	0x00004e51
    5124:	00003659 	.word	0x00003659
    5128:	e000ed04 	.word	0xe000ed04
    512c:	000031d9 	.word	0x000031d9

00005130 <__libc_init_array>:
    5130:	b570      	push	{r4, r5, r6, lr}
    5132:	4e0d      	ldr	r6, [pc, #52]	; (5168 <__libc_init_array+0x38>)
    5134:	4c0d      	ldr	r4, [pc, #52]	; (516c <__libc_init_array+0x3c>)
    5136:	1ba4      	subs	r4, r4, r6
    5138:	10a4      	asrs	r4, r4, #2
    513a:	2500      	movs	r5, #0
    513c:	42a5      	cmp	r5, r4
    513e:	d109      	bne.n	5154 <__libc_init_array+0x24>
    5140:	4e0b      	ldr	r6, [pc, #44]	; (5170 <__libc_init_array+0x40>)
    5142:	4c0c      	ldr	r4, [pc, #48]	; (5174 <__libc_init_array+0x44>)
    5144:	f001 ff6e 	bl	7024 <_init>
    5148:	1ba4      	subs	r4, r4, r6
    514a:	10a4      	asrs	r4, r4, #2
    514c:	2500      	movs	r5, #0
    514e:	42a5      	cmp	r5, r4
    5150:	d105      	bne.n	515e <__libc_init_array+0x2e>
    5152:	bd70      	pop	{r4, r5, r6, pc}
    5154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5158:	4798      	blx	r3
    515a:	3501      	adds	r5, #1
    515c:	e7ee      	b.n	513c <__libc_init_array+0xc>
    515e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5162:	4798      	blx	r3
    5164:	3501      	adds	r5, #1
    5166:	e7f2      	b.n	514e <__libc_init_array+0x1e>
    5168:	00007030 	.word	0x00007030
    516c:	00007030 	.word	0x00007030
    5170:	00007030 	.word	0x00007030
    5174:	00007034 	.word	0x00007034

00005178 <memcpy>:
    5178:	b510      	push	{r4, lr}
    517a:	1e43      	subs	r3, r0, #1
    517c:	440a      	add	r2, r1
    517e:	4291      	cmp	r1, r2
    5180:	d100      	bne.n	5184 <memcpy+0xc>
    5182:	bd10      	pop	{r4, pc}
    5184:	f811 4b01 	ldrb.w	r4, [r1], #1
    5188:	f803 4f01 	strb.w	r4, [r3, #1]!
    518c:	e7f7      	b.n	517e <memcpy+0x6>

0000518e <memmove>:
    518e:	4288      	cmp	r0, r1
    5190:	b510      	push	{r4, lr}
    5192:	eb01 0302 	add.w	r3, r1, r2
    5196:	d803      	bhi.n	51a0 <memmove+0x12>
    5198:	1e42      	subs	r2, r0, #1
    519a:	4299      	cmp	r1, r3
    519c:	d10c      	bne.n	51b8 <memmove+0x2a>
    519e:	bd10      	pop	{r4, pc}
    51a0:	4298      	cmp	r0, r3
    51a2:	d2f9      	bcs.n	5198 <memmove+0xa>
    51a4:	1881      	adds	r1, r0, r2
    51a6:	1ad2      	subs	r2, r2, r3
    51a8:	42d3      	cmn	r3, r2
    51aa:	d100      	bne.n	51ae <memmove+0x20>
    51ac:	bd10      	pop	{r4, pc}
    51ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    51b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
    51b6:	e7f7      	b.n	51a8 <memmove+0x1a>
    51b8:	f811 4b01 	ldrb.w	r4, [r1], #1
    51bc:	f802 4f01 	strb.w	r4, [r2, #1]!
    51c0:	e7eb      	b.n	519a <memmove+0xc>

000051c2 <memset>:
    51c2:	4402      	add	r2, r0
    51c4:	4603      	mov	r3, r0
    51c6:	4293      	cmp	r3, r2
    51c8:	d100      	bne.n	51cc <memset+0xa>
    51ca:	4770      	bx	lr
    51cc:	f803 1b01 	strb.w	r1, [r3], #1
    51d0:	e7f9      	b.n	51c6 <memset+0x4>
	...

000051d4 <_free_r>:
    51d4:	b538      	push	{r3, r4, r5, lr}
    51d6:	4605      	mov	r5, r0
    51d8:	2900      	cmp	r1, #0
    51da:	d045      	beq.n	5268 <_free_r+0x94>
    51dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    51e0:	1f0c      	subs	r4, r1, #4
    51e2:	2b00      	cmp	r3, #0
    51e4:	bfb8      	it	lt
    51e6:	18e4      	addlt	r4, r4, r3
    51e8:	f000 f8f6 	bl	53d8 <__malloc_lock>
    51ec:	4a1f      	ldr	r2, [pc, #124]	; (526c <_free_r+0x98>)
    51ee:	6813      	ldr	r3, [r2, #0]
    51f0:	4610      	mov	r0, r2
    51f2:	b933      	cbnz	r3, 5202 <_free_r+0x2e>
    51f4:	6063      	str	r3, [r4, #4]
    51f6:	6014      	str	r4, [r2, #0]
    51f8:	4628      	mov	r0, r5
    51fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    51fe:	f000 b8ec 	b.w	53da <__malloc_unlock>
    5202:	42a3      	cmp	r3, r4
    5204:	d90c      	bls.n	5220 <_free_r+0x4c>
    5206:	6821      	ldr	r1, [r4, #0]
    5208:	1862      	adds	r2, r4, r1
    520a:	4293      	cmp	r3, r2
    520c:	bf04      	itt	eq
    520e:	681a      	ldreq	r2, [r3, #0]
    5210:	685b      	ldreq	r3, [r3, #4]
    5212:	6063      	str	r3, [r4, #4]
    5214:	bf04      	itt	eq
    5216:	1852      	addeq	r2, r2, r1
    5218:	6022      	streq	r2, [r4, #0]
    521a:	6004      	str	r4, [r0, #0]
    521c:	e7ec      	b.n	51f8 <_free_r+0x24>
    521e:	4613      	mov	r3, r2
    5220:	685a      	ldr	r2, [r3, #4]
    5222:	b10a      	cbz	r2, 5228 <_free_r+0x54>
    5224:	42a2      	cmp	r2, r4
    5226:	d9fa      	bls.n	521e <_free_r+0x4a>
    5228:	6819      	ldr	r1, [r3, #0]
    522a:	1858      	adds	r0, r3, r1
    522c:	42a0      	cmp	r0, r4
    522e:	d10b      	bne.n	5248 <_free_r+0x74>
    5230:	6820      	ldr	r0, [r4, #0]
    5232:	4401      	add	r1, r0
    5234:	1858      	adds	r0, r3, r1
    5236:	4282      	cmp	r2, r0
    5238:	6019      	str	r1, [r3, #0]
    523a:	d1dd      	bne.n	51f8 <_free_r+0x24>
    523c:	6810      	ldr	r0, [r2, #0]
    523e:	6852      	ldr	r2, [r2, #4]
    5240:	605a      	str	r2, [r3, #4]
    5242:	4401      	add	r1, r0
    5244:	6019      	str	r1, [r3, #0]
    5246:	e7d7      	b.n	51f8 <_free_r+0x24>
    5248:	d902      	bls.n	5250 <_free_r+0x7c>
    524a:	230c      	movs	r3, #12
    524c:	602b      	str	r3, [r5, #0]
    524e:	e7d3      	b.n	51f8 <_free_r+0x24>
    5250:	6820      	ldr	r0, [r4, #0]
    5252:	1821      	adds	r1, r4, r0
    5254:	428a      	cmp	r2, r1
    5256:	bf04      	itt	eq
    5258:	6811      	ldreq	r1, [r2, #0]
    525a:	6852      	ldreq	r2, [r2, #4]
    525c:	6062      	str	r2, [r4, #4]
    525e:	bf04      	itt	eq
    5260:	1809      	addeq	r1, r1, r0
    5262:	6021      	streq	r1, [r4, #0]
    5264:	605c      	str	r4, [r3, #4]
    5266:	e7c7      	b.n	51f8 <_free_r+0x24>
    5268:	bd38      	pop	{r3, r4, r5, pc}
    526a:	bf00      	nop
    526c:	20003124 	.word	0x20003124

00005270 <_malloc_r>:
    5270:	b570      	push	{r4, r5, r6, lr}
    5272:	1ccd      	adds	r5, r1, #3
    5274:	f025 0503 	bic.w	r5, r5, #3
    5278:	3508      	adds	r5, #8
    527a:	2d0c      	cmp	r5, #12
    527c:	bf38      	it	cc
    527e:	250c      	movcc	r5, #12
    5280:	2d00      	cmp	r5, #0
    5282:	4606      	mov	r6, r0
    5284:	db01      	blt.n	528a <_malloc_r+0x1a>
    5286:	42a9      	cmp	r1, r5
    5288:	d903      	bls.n	5292 <_malloc_r+0x22>
    528a:	230c      	movs	r3, #12
    528c:	6033      	str	r3, [r6, #0]
    528e:	2000      	movs	r0, #0
    5290:	bd70      	pop	{r4, r5, r6, pc}
    5292:	f000 f8a1 	bl	53d8 <__malloc_lock>
    5296:	4a23      	ldr	r2, [pc, #140]	; (5324 <_malloc_r+0xb4>)
    5298:	6814      	ldr	r4, [r2, #0]
    529a:	4621      	mov	r1, r4
    529c:	b991      	cbnz	r1, 52c4 <_malloc_r+0x54>
    529e:	4c22      	ldr	r4, [pc, #136]	; (5328 <_malloc_r+0xb8>)
    52a0:	6823      	ldr	r3, [r4, #0]
    52a2:	b91b      	cbnz	r3, 52ac <_malloc_r+0x3c>
    52a4:	4630      	mov	r0, r6
    52a6:	f000 f841 	bl	532c <_sbrk_r>
    52aa:	6020      	str	r0, [r4, #0]
    52ac:	4629      	mov	r1, r5
    52ae:	4630      	mov	r0, r6
    52b0:	f000 f83c 	bl	532c <_sbrk_r>
    52b4:	1c43      	adds	r3, r0, #1
    52b6:	d126      	bne.n	5306 <_malloc_r+0x96>
    52b8:	230c      	movs	r3, #12
    52ba:	6033      	str	r3, [r6, #0]
    52bc:	4630      	mov	r0, r6
    52be:	f000 f88c 	bl	53da <__malloc_unlock>
    52c2:	e7e4      	b.n	528e <_malloc_r+0x1e>
    52c4:	680b      	ldr	r3, [r1, #0]
    52c6:	1b5b      	subs	r3, r3, r5
    52c8:	d41a      	bmi.n	5300 <_malloc_r+0x90>
    52ca:	2b0b      	cmp	r3, #11
    52cc:	d90f      	bls.n	52ee <_malloc_r+0x7e>
    52ce:	600b      	str	r3, [r1, #0]
    52d0:	50cd      	str	r5, [r1, r3]
    52d2:	18cc      	adds	r4, r1, r3
    52d4:	4630      	mov	r0, r6
    52d6:	f000 f880 	bl	53da <__malloc_unlock>
    52da:	f104 000b 	add.w	r0, r4, #11
    52de:	1d23      	adds	r3, r4, #4
    52e0:	f020 0007 	bic.w	r0, r0, #7
    52e4:	1ac3      	subs	r3, r0, r3
    52e6:	d01b      	beq.n	5320 <_malloc_r+0xb0>
    52e8:	425a      	negs	r2, r3
    52ea:	50e2      	str	r2, [r4, r3]
    52ec:	bd70      	pop	{r4, r5, r6, pc}
    52ee:	428c      	cmp	r4, r1
    52f0:	bf0d      	iteet	eq
    52f2:	6863      	ldreq	r3, [r4, #4]
    52f4:	684b      	ldrne	r3, [r1, #4]
    52f6:	6063      	strne	r3, [r4, #4]
    52f8:	6013      	streq	r3, [r2, #0]
    52fa:	bf18      	it	ne
    52fc:	460c      	movne	r4, r1
    52fe:	e7e9      	b.n	52d4 <_malloc_r+0x64>
    5300:	460c      	mov	r4, r1
    5302:	6849      	ldr	r1, [r1, #4]
    5304:	e7ca      	b.n	529c <_malloc_r+0x2c>
    5306:	1cc4      	adds	r4, r0, #3
    5308:	f024 0403 	bic.w	r4, r4, #3
    530c:	42a0      	cmp	r0, r4
    530e:	d005      	beq.n	531c <_malloc_r+0xac>
    5310:	1a21      	subs	r1, r4, r0
    5312:	4630      	mov	r0, r6
    5314:	f000 f80a 	bl	532c <_sbrk_r>
    5318:	3001      	adds	r0, #1
    531a:	d0cd      	beq.n	52b8 <_malloc_r+0x48>
    531c:	6025      	str	r5, [r4, #0]
    531e:	e7d9      	b.n	52d4 <_malloc_r+0x64>
    5320:	bd70      	pop	{r4, r5, r6, pc}
    5322:	bf00      	nop
    5324:	20003124 	.word	0x20003124
    5328:	20003128 	.word	0x20003128

0000532c <_sbrk_r>:
    532c:	b538      	push	{r3, r4, r5, lr}
    532e:	4c06      	ldr	r4, [pc, #24]	; (5348 <_sbrk_r+0x1c>)
    5330:	2300      	movs	r3, #0
    5332:	4605      	mov	r5, r0
    5334:	4608      	mov	r0, r1
    5336:	6023      	str	r3, [r4, #0]
    5338:	f7fc fbf2 	bl	1b20 <_sbrk>
    533c:	1c43      	adds	r3, r0, #1
    533e:	d102      	bne.n	5346 <_sbrk_r+0x1a>
    5340:	6823      	ldr	r3, [r4, #0]
    5342:	b103      	cbz	r3, 5346 <_sbrk_r+0x1a>
    5344:	602b      	str	r3, [r5, #0]
    5346:	bd38      	pop	{r3, r4, r5, pc}
    5348:	20003b40 	.word	0x20003b40

0000534c <siprintf>:
    534c:	b40e      	push	{r1, r2, r3}
    534e:	b500      	push	{lr}
    5350:	b09c      	sub	sp, #112	; 0x70
    5352:	f44f 7102 	mov.w	r1, #520	; 0x208
    5356:	ab1d      	add	r3, sp, #116	; 0x74
    5358:	f8ad 1014 	strh.w	r1, [sp, #20]
    535c:	9002      	str	r0, [sp, #8]
    535e:	9006      	str	r0, [sp, #24]
    5360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5364:	480a      	ldr	r0, [pc, #40]	; (5390 <siprintf+0x44>)
    5366:	9104      	str	r1, [sp, #16]
    5368:	9107      	str	r1, [sp, #28]
    536a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    536e:	f853 2b04 	ldr.w	r2, [r3], #4
    5372:	f8ad 1016 	strh.w	r1, [sp, #22]
    5376:	6800      	ldr	r0, [r0, #0]
    5378:	9301      	str	r3, [sp, #4]
    537a:	a902      	add	r1, sp, #8
    537c:	f000 f88a 	bl	5494 <_svfiprintf_r>
    5380:	9b02      	ldr	r3, [sp, #8]
    5382:	2200      	movs	r2, #0
    5384:	701a      	strb	r2, [r3, #0]
    5386:	b01c      	add	sp, #112	; 0x70
    5388:	f85d eb04 	ldr.w	lr, [sp], #4
    538c:	b003      	add	sp, #12
    538e:	4770      	bx	lr
    5390:	20000128 	.word	0x20000128

00005394 <strcpy>:
    5394:	4603      	mov	r3, r0
    5396:	f811 2b01 	ldrb.w	r2, [r1], #1
    539a:	f803 2b01 	strb.w	r2, [r3], #1
    539e:	2a00      	cmp	r2, #0
    53a0:	d1f9      	bne.n	5396 <strcpy+0x2>
    53a2:	4770      	bx	lr

000053a4 <strlen>:
    53a4:	4603      	mov	r3, r0
    53a6:	f813 2b01 	ldrb.w	r2, [r3], #1
    53aa:	2a00      	cmp	r2, #0
    53ac:	d1fb      	bne.n	53a6 <strlen+0x2>
    53ae:	1a18      	subs	r0, r3, r0
    53b0:	3801      	subs	r0, #1
    53b2:	4770      	bx	lr

000053b4 <strncmp>:
    53b4:	b510      	push	{r4, lr}
    53b6:	b16a      	cbz	r2, 53d4 <strncmp+0x20>
    53b8:	3901      	subs	r1, #1
    53ba:	1884      	adds	r4, r0, r2
    53bc:	f810 3b01 	ldrb.w	r3, [r0], #1
    53c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    53c4:	4293      	cmp	r3, r2
    53c6:	d103      	bne.n	53d0 <strncmp+0x1c>
    53c8:	42a0      	cmp	r0, r4
    53ca:	d001      	beq.n	53d0 <strncmp+0x1c>
    53cc:	2b00      	cmp	r3, #0
    53ce:	d1f5      	bne.n	53bc <strncmp+0x8>
    53d0:	1a98      	subs	r0, r3, r2
    53d2:	bd10      	pop	{r4, pc}
    53d4:	4610      	mov	r0, r2
    53d6:	bd10      	pop	{r4, pc}

000053d8 <__malloc_lock>:
    53d8:	4770      	bx	lr

000053da <__malloc_unlock>:
    53da:	4770      	bx	lr

000053dc <__ssputs_r>:
    53dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53e0:	688e      	ldr	r6, [r1, #8]
    53e2:	429e      	cmp	r6, r3
    53e4:	4682      	mov	sl, r0
    53e6:	460c      	mov	r4, r1
    53e8:	4691      	mov	r9, r2
    53ea:	4698      	mov	r8, r3
    53ec:	d835      	bhi.n	545a <__ssputs_r+0x7e>
    53ee:	898a      	ldrh	r2, [r1, #12]
    53f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
    53f4:	d031      	beq.n	545a <__ssputs_r+0x7e>
    53f6:	6825      	ldr	r5, [r4, #0]
    53f8:	6909      	ldr	r1, [r1, #16]
    53fa:	1a6f      	subs	r7, r5, r1
    53fc:	6965      	ldr	r5, [r4, #20]
    53fe:	2302      	movs	r3, #2
    5400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5404:	fb95 f5f3 	sdiv	r5, r5, r3
    5408:	f108 0301 	add.w	r3, r8, #1
    540c:	443b      	add	r3, r7
    540e:	429d      	cmp	r5, r3
    5410:	bf38      	it	cc
    5412:	461d      	movcc	r5, r3
    5414:	0553      	lsls	r3, r2, #21
    5416:	d531      	bpl.n	547c <__ssputs_r+0xa0>
    5418:	4629      	mov	r1, r5
    541a:	f7ff ff29 	bl	5270 <_malloc_r>
    541e:	4606      	mov	r6, r0
    5420:	b950      	cbnz	r0, 5438 <__ssputs_r+0x5c>
    5422:	230c      	movs	r3, #12
    5424:	f8ca 3000 	str.w	r3, [sl]
    5428:	89a3      	ldrh	r3, [r4, #12]
    542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    542e:	81a3      	strh	r3, [r4, #12]
    5430:	f04f 30ff 	mov.w	r0, #4294967295
    5434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5438:	463a      	mov	r2, r7
    543a:	6921      	ldr	r1, [r4, #16]
    543c:	f7ff fe9c 	bl	5178 <memcpy>
    5440:	89a3      	ldrh	r3, [r4, #12]
    5442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    5446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    544a:	81a3      	strh	r3, [r4, #12]
    544c:	6126      	str	r6, [r4, #16]
    544e:	6165      	str	r5, [r4, #20]
    5450:	443e      	add	r6, r7
    5452:	1bed      	subs	r5, r5, r7
    5454:	6026      	str	r6, [r4, #0]
    5456:	60a5      	str	r5, [r4, #8]
    5458:	4646      	mov	r6, r8
    545a:	4546      	cmp	r6, r8
    545c:	bf28      	it	cs
    545e:	4646      	movcs	r6, r8
    5460:	4632      	mov	r2, r6
    5462:	4649      	mov	r1, r9
    5464:	6820      	ldr	r0, [r4, #0]
    5466:	f7ff fe92 	bl	518e <memmove>
    546a:	68a3      	ldr	r3, [r4, #8]
    546c:	1b9b      	subs	r3, r3, r6
    546e:	60a3      	str	r3, [r4, #8]
    5470:	6823      	ldr	r3, [r4, #0]
    5472:	441e      	add	r6, r3
    5474:	6026      	str	r6, [r4, #0]
    5476:	2000      	movs	r0, #0
    5478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    547c:	462a      	mov	r2, r5
    547e:	f000 fae7 	bl	5a50 <_realloc_r>
    5482:	4606      	mov	r6, r0
    5484:	2800      	cmp	r0, #0
    5486:	d1e1      	bne.n	544c <__ssputs_r+0x70>
    5488:	6921      	ldr	r1, [r4, #16]
    548a:	4650      	mov	r0, sl
    548c:	f7ff fea2 	bl	51d4 <_free_r>
    5490:	e7c7      	b.n	5422 <__ssputs_r+0x46>
	...

00005494 <_svfiprintf_r>:
    5494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5498:	b09d      	sub	sp, #116	; 0x74
    549a:	4680      	mov	r8, r0
    549c:	9303      	str	r3, [sp, #12]
    549e:	898b      	ldrh	r3, [r1, #12]
    54a0:	061c      	lsls	r4, r3, #24
    54a2:	460d      	mov	r5, r1
    54a4:	4616      	mov	r6, r2
    54a6:	d50f      	bpl.n	54c8 <_svfiprintf_r+0x34>
    54a8:	690b      	ldr	r3, [r1, #16]
    54aa:	b96b      	cbnz	r3, 54c8 <_svfiprintf_r+0x34>
    54ac:	2140      	movs	r1, #64	; 0x40
    54ae:	f7ff fedf 	bl	5270 <_malloc_r>
    54b2:	6028      	str	r0, [r5, #0]
    54b4:	6128      	str	r0, [r5, #16]
    54b6:	b928      	cbnz	r0, 54c4 <_svfiprintf_r+0x30>
    54b8:	230c      	movs	r3, #12
    54ba:	f8c8 3000 	str.w	r3, [r8]
    54be:	f04f 30ff 	mov.w	r0, #4294967295
    54c2:	e0c5      	b.n	5650 <_svfiprintf_r+0x1bc>
    54c4:	2340      	movs	r3, #64	; 0x40
    54c6:	616b      	str	r3, [r5, #20]
    54c8:	2300      	movs	r3, #0
    54ca:	9309      	str	r3, [sp, #36]	; 0x24
    54cc:	2320      	movs	r3, #32
    54ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    54d2:	2330      	movs	r3, #48	; 0x30
    54d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    54d8:	f04f 0b01 	mov.w	fp, #1
    54dc:	4637      	mov	r7, r6
    54de:	463c      	mov	r4, r7
    54e0:	f814 3b01 	ldrb.w	r3, [r4], #1
    54e4:	2b00      	cmp	r3, #0
    54e6:	d13c      	bne.n	5562 <_svfiprintf_r+0xce>
    54e8:	ebb7 0a06 	subs.w	sl, r7, r6
    54ec:	d00b      	beq.n	5506 <_svfiprintf_r+0x72>
    54ee:	4653      	mov	r3, sl
    54f0:	4632      	mov	r2, r6
    54f2:	4629      	mov	r1, r5
    54f4:	4640      	mov	r0, r8
    54f6:	f7ff ff71 	bl	53dc <__ssputs_r>
    54fa:	3001      	adds	r0, #1
    54fc:	f000 80a3 	beq.w	5646 <_svfiprintf_r+0x1b2>
    5500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5502:	4453      	add	r3, sl
    5504:	9309      	str	r3, [sp, #36]	; 0x24
    5506:	783b      	ldrb	r3, [r7, #0]
    5508:	2b00      	cmp	r3, #0
    550a:	f000 809c 	beq.w	5646 <_svfiprintf_r+0x1b2>
    550e:	2300      	movs	r3, #0
    5510:	f04f 32ff 	mov.w	r2, #4294967295
    5514:	9304      	str	r3, [sp, #16]
    5516:	9307      	str	r3, [sp, #28]
    5518:	9205      	str	r2, [sp, #20]
    551a:	9306      	str	r3, [sp, #24]
    551c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5520:	931a      	str	r3, [sp, #104]	; 0x68
    5522:	2205      	movs	r2, #5
    5524:	7821      	ldrb	r1, [r4, #0]
    5526:	4850      	ldr	r0, [pc, #320]	; (5668 <_svfiprintf_r+0x1d4>)
    5528:	f000 fa42 	bl	59b0 <memchr>
    552c:	1c67      	adds	r7, r4, #1
    552e:	9b04      	ldr	r3, [sp, #16]
    5530:	b9d8      	cbnz	r0, 556a <_svfiprintf_r+0xd6>
    5532:	06d9      	lsls	r1, r3, #27
    5534:	bf44      	itt	mi
    5536:	2220      	movmi	r2, #32
    5538:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    553c:	071a      	lsls	r2, r3, #28
    553e:	bf44      	itt	mi
    5540:	222b      	movmi	r2, #43	; 0x2b
    5542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5546:	7822      	ldrb	r2, [r4, #0]
    5548:	2a2a      	cmp	r2, #42	; 0x2a
    554a:	d016      	beq.n	557a <_svfiprintf_r+0xe6>
    554c:	9a07      	ldr	r2, [sp, #28]
    554e:	2100      	movs	r1, #0
    5550:	200a      	movs	r0, #10
    5552:	4627      	mov	r7, r4
    5554:	3401      	adds	r4, #1
    5556:	783b      	ldrb	r3, [r7, #0]
    5558:	3b30      	subs	r3, #48	; 0x30
    555a:	2b09      	cmp	r3, #9
    555c:	d951      	bls.n	5602 <_svfiprintf_r+0x16e>
    555e:	b1c9      	cbz	r1, 5594 <_svfiprintf_r+0x100>
    5560:	e011      	b.n	5586 <_svfiprintf_r+0xf2>
    5562:	2b25      	cmp	r3, #37	; 0x25
    5564:	d0c0      	beq.n	54e8 <_svfiprintf_r+0x54>
    5566:	4627      	mov	r7, r4
    5568:	e7b9      	b.n	54de <_svfiprintf_r+0x4a>
    556a:	4a3f      	ldr	r2, [pc, #252]	; (5668 <_svfiprintf_r+0x1d4>)
    556c:	1a80      	subs	r0, r0, r2
    556e:	fa0b f000 	lsl.w	r0, fp, r0
    5572:	4318      	orrs	r0, r3
    5574:	9004      	str	r0, [sp, #16]
    5576:	463c      	mov	r4, r7
    5578:	e7d3      	b.n	5522 <_svfiprintf_r+0x8e>
    557a:	9a03      	ldr	r2, [sp, #12]
    557c:	1d11      	adds	r1, r2, #4
    557e:	6812      	ldr	r2, [r2, #0]
    5580:	9103      	str	r1, [sp, #12]
    5582:	2a00      	cmp	r2, #0
    5584:	db01      	blt.n	558a <_svfiprintf_r+0xf6>
    5586:	9207      	str	r2, [sp, #28]
    5588:	e004      	b.n	5594 <_svfiprintf_r+0x100>
    558a:	4252      	negs	r2, r2
    558c:	f043 0302 	orr.w	r3, r3, #2
    5590:	9207      	str	r2, [sp, #28]
    5592:	9304      	str	r3, [sp, #16]
    5594:	783b      	ldrb	r3, [r7, #0]
    5596:	2b2e      	cmp	r3, #46	; 0x2e
    5598:	d10e      	bne.n	55b8 <_svfiprintf_r+0x124>
    559a:	787b      	ldrb	r3, [r7, #1]
    559c:	2b2a      	cmp	r3, #42	; 0x2a
    559e:	f107 0101 	add.w	r1, r7, #1
    55a2:	d132      	bne.n	560a <_svfiprintf_r+0x176>
    55a4:	9b03      	ldr	r3, [sp, #12]
    55a6:	1d1a      	adds	r2, r3, #4
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	9203      	str	r2, [sp, #12]
    55ac:	2b00      	cmp	r3, #0
    55ae:	bfb8      	it	lt
    55b0:	f04f 33ff 	movlt.w	r3, #4294967295
    55b4:	3702      	adds	r7, #2
    55b6:	9305      	str	r3, [sp, #20]
    55b8:	4c2c      	ldr	r4, [pc, #176]	; (566c <_svfiprintf_r+0x1d8>)
    55ba:	7839      	ldrb	r1, [r7, #0]
    55bc:	2203      	movs	r2, #3
    55be:	4620      	mov	r0, r4
    55c0:	f000 f9f6 	bl	59b0 <memchr>
    55c4:	b138      	cbz	r0, 55d6 <_svfiprintf_r+0x142>
    55c6:	2340      	movs	r3, #64	; 0x40
    55c8:	1b00      	subs	r0, r0, r4
    55ca:	fa03 f000 	lsl.w	r0, r3, r0
    55ce:	9b04      	ldr	r3, [sp, #16]
    55d0:	4303      	orrs	r3, r0
    55d2:	9304      	str	r3, [sp, #16]
    55d4:	3701      	adds	r7, #1
    55d6:	7839      	ldrb	r1, [r7, #0]
    55d8:	4825      	ldr	r0, [pc, #148]	; (5670 <_svfiprintf_r+0x1dc>)
    55da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    55de:	2206      	movs	r2, #6
    55e0:	1c7e      	adds	r6, r7, #1
    55e2:	f000 f9e5 	bl	59b0 <memchr>
    55e6:	2800      	cmp	r0, #0
    55e8:	d035      	beq.n	5656 <_svfiprintf_r+0x1c2>
    55ea:	4b22      	ldr	r3, [pc, #136]	; (5674 <_svfiprintf_r+0x1e0>)
    55ec:	b9fb      	cbnz	r3, 562e <_svfiprintf_r+0x19a>
    55ee:	9b03      	ldr	r3, [sp, #12]
    55f0:	3307      	adds	r3, #7
    55f2:	f023 0307 	bic.w	r3, r3, #7
    55f6:	3308      	adds	r3, #8
    55f8:	9303      	str	r3, [sp, #12]
    55fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55fc:	444b      	add	r3, r9
    55fe:	9309      	str	r3, [sp, #36]	; 0x24
    5600:	e76c      	b.n	54dc <_svfiprintf_r+0x48>
    5602:	fb00 3202 	mla	r2, r0, r2, r3
    5606:	2101      	movs	r1, #1
    5608:	e7a3      	b.n	5552 <_svfiprintf_r+0xbe>
    560a:	2300      	movs	r3, #0
    560c:	9305      	str	r3, [sp, #20]
    560e:	4618      	mov	r0, r3
    5610:	240a      	movs	r4, #10
    5612:	460f      	mov	r7, r1
    5614:	3101      	adds	r1, #1
    5616:	783a      	ldrb	r2, [r7, #0]
    5618:	3a30      	subs	r2, #48	; 0x30
    561a:	2a09      	cmp	r2, #9
    561c:	d903      	bls.n	5626 <_svfiprintf_r+0x192>
    561e:	2b00      	cmp	r3, #0
    5620:	d0ca      	beq.n	55b8 <_svfiprintf_r+0x124>
    5622:	9005      	str	r0, [sp, #20]
    5624:	e7c8      	b.n	55b8 <_svfiprintf_r+0x124>
    5626:	fb04 2000 	mla	r0, r4, r0, r2
    562a:	2301      	movs	r3, #1
    562c:	e7f1      	b.n	5612 <_svfiprintf_r+0x17e>
    562e:	ab03      	add	r3, sp, #12
    5630:	9300      	str	r3, [sp, #0]
    5632:	462a      	mov	r2, r5
    5634:	4b10      	ldr	r3, [pc, #64]	; (5678 <_svfiprintf_r+0x1e4>)
    5636:	a904      	add	r1, sp, #16
    5638:	4640      	mov	r0, r8
    563a:	f3af 8000 	nop.w
    563e:	f1b0 3fff 	cmp.w	r0, #4294967295
    5642:	4681      	mov	r9, r0
    5644:	d1d9      	bne.n	55fa <_svfiprintf_r+0x166>
    5646:	89ab      	ldrh	r3, [r5, #12]
    5648:	065b      	lsls	r3, r3, #25
    564a:	f53f af38 	bmi.w	54be <_svfiprintf_r+0x2a>
    564e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5650:	b01d      	add	sp, #116	; 0x74
    5652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5656:	ab03      	add	r3, sp, #12
    5658:	9300      	str	r3, [sp, #0]
    565a:	462a      	mov	r2, r5
    565c:	4b06      	ldr	r3, [pc, #24]	; (5678 <_svfiprintf_r+0x1e4>)
    565e:	a904      	add	r1, sp, #16
    5660:	4640      	mov	r0, r8
    5662:	f000 f881 	bl	5768 <_printf_i>
    5666:	e7ea      	b.n	563e <_svfiprintf_r+0x1aa>
    5668:	00006ff0 	.word	0x00006ff0
    566c:	00006ff6 	.word	0x00006ff6
    5670:	00006ffa 	.word	0x00006ffa
    5674:	00000000 	.word	0x00000000
    5678:	000053dd 	.word	0x000053dd

0000567c <_printf_common>:
    567c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5680:	4691      	mov	r9, r2
    5682:	461f      	mov	r7, r3
    5684:	688a      	ldr	r2, [r1, #8]
    5686:	690b      	ldr	r3, [r1, #16]
    5688:	f8dd 8020 	ldr.w	r8, [sp, #32]
    568c:	4293      	cmp	r3, r2
    568e:	bfb8      	it	lt
    5690:	4613      	movlt	r3, r2
    5692:	f8c9 3000 	str.w	r3, [r9]
    5696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    569a:	4606      	mov	r6, r0
    569c:	460c      	mov	r4, r1
    569e:	b112      	cbz	r2, 56a6 <_printf_common+0x2a>
    56a0:	3301      	adds	r3, #1
    56a2:	f8c9 3000 	str.w	r3, [r9]
    56a6:	6823      	ldr	r3, [r4, #0]
    56a8:	0699      	lsls	r1, r3, #26
    56aa:	bf42      	ittt	mi
    56ac:	f8d9 3000 	ldrmi.w	r3, [r9]
    56b0:	3302      	addmi	r3, #2
    56b2:	f8c9 3000 	strmi.w	r3, [r9]
    56b6:	6825      	ldr	r5, [r4, #0]
    56b8:	f015 0506 	ands.w	r5, r5, #6
    56bc:	d107      	bne.n	56ce <_printf_common+0x52>
    56be:	f104 0a19 	add.w	sl, r4, #25
    56c2:	68e3      	ldr	r3, [r4, #12]
    56c4:	f8d9 2000 	ldr.w	r2, [r9]
    56c8:	1a9b      	subs	r3, r3, r2
    56ca:	429d      	cmp	r5, r3
    56cc:	db29      	blt.n	5722 <_printf_common+0xa6>
    56ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    56d2:	6822      	ldr	r2, [r4, #0]
    56d4:	3300      	adds	r3, #0
    56d6:	bf18      	it	ne
    56d8:	2301      	movne	r3, #1
    56da:	0692      	lsls	r2, r2, #26
    56dc:	d42e      	bmi.n	573c <_printf_common+0xc0>
    56de:	f104 0243 	add.w	r2, r4, #67	; 0x43
    56e2:	4639      	mov	r1, r7
    56e4:	4630      	mov	r0, r6
    56e6:	47c0      	blx	r8
    56e8:	3001      	adds	r0, #1
    56ea:	d021      	beq.n	5730 <_printf_common+0xb4>
    56ec:	6823      	ldr	r3, [r4, #0]
    56ee:	68e5      	ldr	r5, [r4, #12]
    56f0:	f8d9 2000 	ldr.w	r2, [r9]
    56f4:	f003 0306 	and.w	r3, r3, #6
    56f8:	2b04      	cmp	r3, #4
    56fa:	bf08      	it	eq
    56fc:	1aad      	subeq	r5, r5, r2
    56fe:	68a3      	ldr	r3, [r4, #8]
    5700:	6922      	ldr	r2, [r4, #16]
    5702:	bf0c      	ite	eq
    5704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5708:	2500      	movne	r5, #0
    570a:	4293      	cmp	r3, r2
    570c:	bfc4      	itt	gt
    570e:	1a9b      	subgt	r3, r3, r2
    5710:	18ed      	addgt	r5, r5, r3
    5712:	f04f 0900 	mov.w	r9, #0
    5716:	341a      	adds	r4, #26
    5718:	454d      	cmp	r5, r9
    571a:	d11b      	bne.n	5754 <_printf_common+0xd8>
    571c:	2000      	movs	r0, #0
    571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5722:	2301      	movs	r3, #1
    5724:	4652      	mov	r2, sl
    5726:	4639      	mov	r1, r7
    5728:	4630      	mov	r0, r6
    572a:	47c0      	blx	r8
    572c:	3001      	adds	r0, #1
    572e:	d103      	bne.n	5738 <_printf_common+0xbc>
    5730:	f04f 30ff 	mov.w	r0, #4294967295
    5734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5738:	3501      	adds	r5, #1
    573a:	e7c2      	b.n	56c2 <_printf_common+0x46>
    573c:	18e1      	adds	r1, r4, r3
    573e:	1c5a      	adds	r2, r3, #1
    5740:	2030      	movs	r0, #48	; 0x30
    5742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5746:	4422      	add	r2, r4
    5748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    574c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5750:	3302      	adds	r3, #2
    5752:	e7c4      	b.n	56de <_printf_common+0x62>
    5754:	2301      	movs	r3, #1
    5756:	4622      	mov	r2, r4
    5758:	4639      	mov	r1, r7
    575a:	4630      	mov	r0, r6
    575c:	47c0      	blx	r8
    575e:	3001      	adds	r0, #1
    5760:	d0e6      	beq.n	5730 <_printf_common+0xb4>
    5762:	f109 0901 	add.w	r9, r9, #1
    5766:	e7d7      	b.n	5718 <_printf_common+0x9c>

00005768 <_printf_i>:
    5768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    576c:	4617      	mov	r7, r2
    576e:	7e0a      	ldrb	r2, [r1, #24]
    5770:	b085      	sub	sp, #20
    5772:	2a6e      	cmp	r2, #110	; 0x6e
    5774:	4698      	mov	r8, r3
    5776:	4606      	mov	r6, r0
    5778:	460c      	mov	r4, r1
    577a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    577c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5780:	f000 80bc 	beq.w	58fc <_printf_i+0x194>
    5784:	d81a      	bhi.n	57bc <_printf_i+0x54>
    5786:	2a63      	cmp	r2, #99	; 0x63
    5788:	d02e      	beq.n	57e8 <_printf_i+0x80>
    578a:	d80a      	bhi.n	57a2 <_printf_i+0x3a>
    578c:	2a00      	cmp	r2, #0
    578e:	f000 80c8 	beq.w	5922 <_printf_i+0x1ba>
    5792:	2a58      	cmp	r2, #88	; 0x58
    5794:	f000 808a 	beq.w	58ac <_printf_i+0x144>
    5798:	f104 0542 	add.w	r5, r4, #66	; 0x42
    579c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    57a0:	e02a      	b.n	57f8 <_printf_i+0x90>
    57a2:	2a64      	cmp	r2, #100	; 0x64
    57a4:	d001      	beq.n	57aa <_printf_i+0x42>
    57a6:	2a69      	cmp	r2, #105	; 0x69
    57a8:	d1f6      	bne.n	5798 <_printf_i+0x30>
    57aa:	6821      	ldr	r1, [r4, #0]
    57ac:	681a      	ldr	r2, [r3, #0]
    57ae:	f011 0f80 	tst.w	r1, #128	; 0x80
    57b2:	d023      	beq.n	57fc <_printf_i+0x94>
    57b4:	1d11      	adds	r1, r2, #4
    57b6:	6019      	str	r1, [r3, #0]
    57b8:	6813      	ldr	r3, [r2, #0]
    57ba:	e027      	b.n	580c <_printf_i+0xa4>
    57bc:	2a73      	cmp	r2, #115	; 0x73
    57be:	f000 80b4 	beq.w	592a <_printf_i+0x1c2>
    57c2:	d808      	bhi.n	57d6 <_printf_i+0x6e>
    57c4:	2a6f      	cmp	r2, #111	; 0x6f
    57c6:	d02a      	beq.n	581e <_printf_i+0xb6>
    57c8:	2a70      	cmp	r2, #112	; 0x70
    57ca:	d1e5      	bne.n	5798 <_printf_i+0x30>
    57cc:	680a      	ldr	r2, [r1, #0]
    57ce:	f042 0220 	orr.w	r2, r2, #32
    57d2:	600a      	str	r2, [r1, #0]
    57d4:	e003      	b.n	57de <_printf_i+0x76>
    57d6:	2a75      	cmp	r2, #117	; 0x75
    57d8:	d021      	beq.n	581e <_printf_i+0xb6>
    57da:	2a78      	cmp	r2, #120	; 0x78
    57dc:	d1dc      	bne.n	5798 <_printf_i+0x30>
    57de:	2278      	movs	r2, #120	; 0x78
    57e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    57e4:	496e      	ldr	r1, [pc, #440]	; (59a0 <_printf_i+0x238>)
    57e6:	e064      	b.n	58b2 <_printf_i+0x14a>
    57e8:	681a      	ldr	r2, [r3, #0]
    57ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
    57ee:	1d11      	adds	r1, r2, #4
    57f0:	6019      	str	r1, [r3, #0]
    57f2:	6813      	ldr	r3, [r2, #0]
    57f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    57f8:	2301      	movs	r3, #1
    57fa:	e0a3      	b.n	5944 <_printf_i+0x1dc>
    57fc:	f011 0f40 	tst.w	r1, #64	; 0x40
    5800:	f102 0104 	add.w	r1, r2, #4
    5804:	6019      	str	r1, [r3, #0]
    5806:	d0d7      	beq.n	57b8 <_printf_i+0x50>
    5808:	f9b2 3000 	ldrsh.w	r3, [r2]
    580c:	2b00      	cmp	r3, #0
    580e:	da03      	bge.n	5818 <_printf_i+0xb0>
    5810:	222d      	movs	r2, #45	; 0x2d
    5812:	425b      	negs	r3, r3
    5814:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5818:	4962      	ldr	r1, [pc, #392]	; (59a4 <_printf_i+0x23c>)
    581a:	220a      	movs	r2, #10
    581c:	e017      	b.n	584e <_printf_i+0xe6>
    581e:	6820      	ldr	r0, [r4, #0]
    5820:	6819      	ldr	r1, [r3, #0]
    5822:	f010 0f80 	tst.w	r0, #128	; 0x80
    5826:	d003      	beq.n	5830 <_printf_i+0xc8>
    5828:	1d08      	adds	r0, r1, #4
    582a:	6018      	str	r0, [r3, #0]
    582c:	680b      	ldr	r3, [r1, #0]
    582e:	e006      	b.n	583e <_printf_i+0xd6>
    5830:	f010 0f40 	tst.w	r0, #64	; 0x40
    5834:	f101 0004 	add.w	r0, r1, #4
    5838:	6018      	str	r0, [r3, #0]
    583a:	d0f7      	beq.n	582c <_printf_i+0xc4>
    583c:	880b      	ldrh	r3, [r1, #0]
    583e:	4959      	ldr	r1, [pc, #356]	; (59a4 <_printf_i+0x23c>)
    5840:	2a6f      	cmp	r2, #111	; 0x6f
    5842:	bf14      	ite	ne
    5844:	220a      	movne	r2, #10
    5846:	2208      	moveq	r2, #8
    5848:	2000      	movs	r0, #0
    584a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    584e:	6865      	ldr	r5, [r4, #4]
    5850:	60a5      	str	r5, [r4, #8]
    5852:	2d00      	cmp	r5, #0
    5854:	f2c0 809c 	blt.w	5990 <_printf_i+0x228>
    5858:	6820      	ldr	r0, [r4, #0]
    585a:	f020 0004 	bic.w	r0, r0, #4
    585e:	6020      	str	r0, [r4, #0]
    5860:	2b00      	cmp	r3, #0
    5862:	d13f      	bne.n	58e4 <_printf_i+0x17c>
    5864:	2d00      	cmp	r5, #0
    5866:	f040 8095 	bne.w	5994 <_printf_i+0x22c>
    586a:	4675      	mov	r5, lr
    586c:	2a08      	cmp	r2, #8
    586e:	d10b      	bne.n	5888 <_printf_i+0x120>
    5870:	6823      	ldr	r3, [r4, #0]
    5872:	07da      	lsls	r2, r3, #31
    5874:	d508      	bpl.n	5888 <_printf_i+0x120>
    5876:	6923      	ldr	r3, [r4, #16]
    5878:	6862      	ldr	r2, [r4, #4]
    587a:	429a      	cmp	r2, r3
    587c:	bfde      	ittt	le
    587e:	2330      	movle	r3, #48	; 0x30
    5880:	f805 3c01 	strble.w	r3, [r5, #-1]
    5884:	f105 35ff 	addle.w	r5, r5, #4294967295
    5888:	ebae 0305 	sub.w	r3, lr, r5
    588c:	6123      	str	r3, [r4, #16]
    588e:	f8cd 8000 	str.w	r8, [sp]
    5892:	463b      	mov	r3, r7
    5894:	aa03      	add	r2, sp, #12
    5896:	4621      	mov	r1, r4
    5898:	4630      	mov	r0, r6
    589a:	f7ff feef 	bl	567c <_printf_common>
    589e:	3001      	adds	r0, #1
    58a0:	d155      	bne.n	594e <_printf_i+0x1e6>
    58a2:	f04f 30ff 	mov.w	r0, #4294967295
    58a6:	b005      	add	sp, #20
    58a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    58b0:	493c      	ldr	r1, [pc, #240]	; (59a4 <_printf_i+0x23c>)
    58b2:	6822      	ldr	r2, [r4, #0]
    58b4:	6818      	ldr	r0, [r3, #0]
    58b6:	f012 0f80 	tst.w	r2, #128	; 0x80
    58ba:	f100 0504 	add.w	r5, r0, #4
    58be:	601d      	str	r5, [r3, #0]
    58c0:	d001      	beq.n	58c6 <_printf_i+0x15e>
    58c2:	6803      	ldr	r3, [r0, #0]
    58c4:	e002      	b.n	58cc <_printf_i+0x164>
    58c6:	0655      	lsls	r5, r2, #25
    58c8:	d5fb      	bpl.n	58c2 <_printf_i+0x15a>
    58ca:	8803      	ldrh	r3, [r0, #0]
    58cc:	07d0      	lsls	r0, r2, #31
    58ce:	bf44      	itt	mi
    58d0:	f042 0220 	orrmi.w	r2, r2, #32
    58d4:	6022      	strmi	r2, [r4, #0]
    58d6:	b91b      	cbnz	r3, 58e0 <_printf_i+0x178>
    58d8:	6822      	ldr	r2, [r4, #0]
    58da:	f022 0220 	bic.w	r2, r2, #32
    58de:	6022      	str	r2, [r4, #0]
    58e0:	2210      	movs	r2, #16
    58e2:	e7b1      	b.n	5848 <_printf_i+0xe0>
    58e4:	4675      	mov	r5, lr
    58e6:	fbb3 f0f2 	udiv	r0, r3, r2
    58ea:	fb02 3310 	mls	r3, r2, r0, r3
    58ee:	5ccb      	ldrb	r3, [r1, r3]
    58f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    58f4:	4603      	mov	r3, r0
    58f6:	2800      	cmp	r0, #0
    58f8:	d1f5      	bne.n	58e6 <_printf_i+0x17e>
    58fa:	e7b7      	b.n	586c <_printf_i+0x104>
    58fc:	6808      	ldr	r0, [r1, #0]
    58fe:	681a      	ldr	r2, [r3, #0]
    5900:	6949      	ldr	r1, [r1, #20]
    5902:	f010 0f80 	tst.w	r0, #128	; 0x80
    5906:	d004      	beq.n	5912 <_printf_i+0x1aa>
    5908:	1d10      	adds	r0, r2, #4
    590a:	6018      	str	r0, [r3, #0]
    590c:	6813      	ldr	r3, [r2, #0]
    590e:	6019      	str	r1, [r3, #0]
    5910:	e007      	b.n	5922 <_printf_i+0x1ba>
    5912:	f010 0f40 	tst.w	r0, #64	; 0x40
    5916:	f102 0004 	add.w	r0, r2, #4
    591a:	6018      	str	r0, [r3, #0]
    591c:	6813      	ldr	r3, [r2, #0]
    591e:	d0f6      	beq.n	590e <_printf_i+0x1a6>
    5920:	8019      	strh	r1, [r3, #0]
    5922:	2300      	movs	r3, #0
    5924:	6123      	str	r3, [r4, #16]
    5926:	4675      	mov	r5, lr
    5928:	e7b1      	b.n	588e <_printf_i+0x126>
    592a:	681a      	ldr	r2, [r3, #0]
    592c:	1d11      	adds	r1, r2, #4
    592e:	6019      	str	r1, [r3, #0]
    5930:	6815      	ldr	r5, [r2, #0]
    5932:	6862      	ldr	r2, [r4, #4]
    5934:	2100      	movs	r1, #0
    5936:	4628      	mov	r0, r5
    5938:	f000 f83a 	bl	59b0 <memchr>
    593c:	b108      	cbz	r0, 5942 <_printf_i+0x1da>
    593e:	1b40      	subs	r0, r0, r5
    5940:	6060      	str	r0, [r4, #4]
    5942:	6863      	ldr	r3, [r4, #4]
    5944:	6123      	str	r3, [r4, #16]
    5946:	2300      	movs	r3, #0
    5948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    594c:	e79f      	b.n	588e <_printf_i+0x126>
    594e:	6923      	ldr	r3, [r4, #16]
    5950:	462a      	mov	r2, r5
    5952:	4639      	mov	r1, r7
    5954:	4630      	mov	r0, r6
    5956:	47c0      	blx	r8
    5958:	3001      	adds	r0, #1
    595a:	d0a2      	beq.n	58a2 <_printf_i+0x13a>
    595c:	6823      	ldr	r3, [r4, #0]
    595e:	079b      	lsls	r3, r3, #30
    5960:	d507      	bpl.n	5972 <_printf_i+0x20a>
    5962:	2500      	movs	r5, #0
    5964:	f104 0919 	add.w	r9, r4, #25
    5968:	68e3      	ldr	r3, [r4, #12]
    596a:	9a03      	ldr	r2, [sp, #12]
    596c:	1a9b      	subs	r3, r3, r2
    596e:	429d      	cmp	r5, r3
    5970:	db05      	blt.n	597e <_printf_i+0x216>
    5972:	68e0      	ldr	r0, [r4, #12]
    5974:	9b03      	ldr	r3, [sp, #12]
    5976:	4298      	cmp	r0, r3
    5978:	bfb8      	it	lt
    597a:	4618      	movlt	r0, r3
    597c:	e793      	b.n	58a6 <_printf_i+0x13e>
    597e:	2301      	movs	r3, #1
    5980:	464a      	mov	r2, r9
    5982:	4639      	mov	r1, r7
    5984:	4630      	mov	r0, r6
    5986:	47c0      	blx	r8
    5988:	3001      	adds	r0, #1
    598a:	d08a      	beq.n	58a2 <_printf_i+0x13a>
    598c:	3501      	adds	r5, #1
    598e:	e7eb      	b.n	5968 <_printf_i+0x200>
    5990:	2b00      	cmp	r3, #0
    5992:	d1a7      	bne.n	58e4 <_printf_i+0x17c>
    5994:	780b      	ldrb	r3, [r1, #0]
    5996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    599a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    599e:	e765      	b.n	586c <_printf_i+0x104>
    59a0:	00007012 	.word	0x00007012
    59a4:	00007001 	.word	0x00007001
	...

000059b0 <memchr>:
    59b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    59b4:	2a10      	cmp	r2, #16
    59b6:	db2b      	blt.n	5a10 <memchr+0x60>
    59b8:	f010 0f07 	tst.w	r0, #7
    59bc:	d008      	beq.n	59d0 <memchr+0x20>
    59be:	f810 3b01 	ldrb.w	r3, [r0], #1
    59c2:	3a01      	subs	r2, #1
    59c4:	428b      	cmp	r3, r1
    59c6:	d02d      	beq.n	5a24 <memchr+0x74>
    59c8:	f010 0f07 	tst.w	r0, #7
    59cc:	b342      	cbz	r2, 5a20 <memchr+0x70>
    59ce:	d1f6      	bne.n	59be <memchr+0xe>
    59d0:	b4f0      	push	{r4, r5, r6, r7}
    59d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    59d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    59da:	f022 0407 	bic.w	r4, r2, #7
    59de:	f07f 0700 	mvns.w	r7, #0
    59e2:	2300      	movs	r3, #0
    59e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    59e8:	3c08      	subs	r4, #8
    59ea:	ea85 0501 	eor.w	r5, r5, r1
    59ee:	ea86 0601 	eor.w	r6, r6, r1
    59f2:	fa85 f547 	uadd8	r5, r5, r7
    59f6:	faa3 f587 	sel	r5, r3, r7
    59fa:	fa86 f647 	uadd8	r6, r6, r7
    59fe:	faa5 f687 	sel	r6, r5, r7
    5a02:	b98e      	cbnz	r6, 5a28 <memchr+0x78>
    5a04:	d1ee      	bne.n	59e4 <memchr+0x34>
    5a06:	bcf0      	pop	{r4, r5, r6, r7}
    5a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5a0c:	f002 0207 	and.w	r2, r2, #7
    5a10:	b132      	cbz	r2, 5a20 <memchr+0x70>
    5a12:	f810 3b01 	ldrb.w	r3, [r0], #1
    5a16:	3a01      	subs	r2, #1
    5a18:	ea83 0301 	eor.w	r3, r3, r1
    5a1c:	b113      	cbz	r3, 5a24 <memchr+0x74>
    5a1e:	d1f8      	bne.n	5a12 <memchr+0x62>
    5a20:	2000      	movs	r0, #0
    5a22:	4770      	bx	lr
    5a24:	3801      	subs	r0, #1
    5a26:	4770      	bx	lr
    5a28:	2d00      	cmp	r5, #0
    5a2a:	bf06      	itte	eq
    5a2c:	4635      	moveq	r5, r6
    5a2e:	3803      	subeq	r0, #3
    5a30:	3807      	subne	r0, #7
    5a32:	f015 0f01 	tst.w	r5, #1
    5a36:	d107      	bne.n	5a48 <memchr+0x98>
    5a38:	3001      	adds	r0, #1
    5a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5a3e:	bf02      	ittt	eq
    5a40:	3001      	addeq	r0, #1
    5a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5a46:	3001      	addeq	r0, #1
    5a48:	bcf0      	pop	{r4, r5, r6, r7}
    5a4a:	3801      	subs	r0, #1
    5a4c:	4770      	bx	lr
    5a4e:	bf00      	nop

00005a50 <_realloc_r>:
    5a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a52:	4607      	mov	r7, r0
    5a54:	4614      	mov	r4, r2
    5a56:	460e      	mov	r6, r1
    5a58:	b921      	cbnz	r1, 5a64 <_realloc_r+0x14>
    5a5a:	4611      	mov	r1, r2
    5a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5a60:	f7ff bc06 	b.w	5270 <_malloc_r>
    5a64:	b922      	cbnz	r2, 5a70 <_realloc_r+0x20>
    5a66:	f7ff fbb5 	bl	51d4 <_free_r>
    5a6a:	4625      	mov	r5, r4
    5a6c:	4628      	mov	r0, r5
    5a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a70:	f000 f814 	bl	5a9c <_malloc_usable_size_r>
    5a74:	4284      	cmp	r4, r0
    5a76:	d90f      	bls.n	5a98 <_realloc_r+0x48>
    5a78:	4621      	mov	r1, r4
    5a7a:	4638      	mov	r0, r7
    5a7c:	f7ff fbf8 	bl	5270 <_malloc_r>
    5a80:	4605      	mov	r5, r0
    5a82:	2800      	cmp	r0, #0
    5a84:	d0f2      	beq.n	5a6c <_realloc_r+0x1c>
    5a86:	4631      	mov	r1, r6
    5a88:	4622      	mov	r2, r4
    5a8a:	f7ff fb75 	bl	5178 <memcpy>
    5a8e:	4631      	mov	r1, r6
    5a90:	4638      	mov	r0, r7
    5a92:	f7ff fb9f 	bl	51d4 <_free_r>
    5a96:	e7e9      	b.n	5a6c <_realloc_r+0x1c>
    5a98:	4635      	mov	r5, r6
    5a9a:	e7e7      	b.n	5a6c <_realloc_r+0x1c>

00005a9c <_malloc_usable_size_r>:
    5a9c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5aa0:	2800      	cmp	r0, #0
    5aa2:	f1a0 0004 	sub.w	r0, r0, #4
    5aa6:	bfbc      	itt	lt
    5aa8:	580b      	ldrlt	r3, [r1, r0]
    5aaa:	18c0      	addlt	r0, r0, r3
    5aac:	4770      	bx	lr
    5aae:	0000      	movs	r0, r0
    5ab0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ab4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ab8:	2a2a2a2a 	.word	0x2a2a2a2a
    5abc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ac0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ac4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ac8:	2a2a2a2a 	.word	0x2a2a2a2a
    5acc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ad0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ad4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ad8:	2a2a2a2a 	.word	0x2a2a2a2a
    5adc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ae0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ae4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ae8:	00002a2a 	.word	0x00002a2a
    5aec:	2a2a2a2a 	.word	0x2a2a2a2a
    5af0:	2a2a2a2a 	.word	0x2a2a2a2a
    5af4:	2a2a2a2a 	.word	0x2a2a2a2a
    5af8:	532a2a2a 	.word	0x532a2a2a
    5afc:	4b434154 	.word	0x4b434154
    5b00:	45564f20 	.word	0x45564f20
    5b04:	4f4c4652 	.word	0x4f4c4652
    5b08:	45442057 	.word	0x45442057
    5b0c:	54434554 	.word	0x54434554
    5b10:	2a2a4445 	.word	0x2a2a4445
    5b14:	2a2a2a2a 	.word	0x2a2a2a2a
    5b18:	2a2a2a2a 	.word	0x2a2a2a2a
    5b1c:	2a2a2a2a 	.word	0x2a2a2a2a
    5b20:	2a2a2a2a 	.word	0x2a2a2a2a
    5b24:	00002a2a 	.word	0x00002a2a
    5b28:	73615420 	.word	0x73615420
    5b2c:	6148206b 	.word	0x6148206b
    5b30:	656c646e 	.word	0x656c646e
    5b34:	25202d20 	.word	0x25202d20
    5b38:	23232064 	.word	0x23232064
    5b3c:	61542023 	.word	0x61542023
    5b40:	4e206b73 	.word	0x4e206b73
    5b44:	20656d61 	.word	0x20656d61
    5b48:	7325202d 	.word	0x7325202d
    5b4c:	00000000 	.word	0x00000000
    5b50:	6e6e7552 	.word	0x6e6e7552
    5b54:	20676e69 	.word	0x20676e69
    5b58:	70736944 	.word	0x70736944
    5b5c:	68637461 	.word	0x68637461
    5b60:	73615420 	.word	0x73615420
    5b64:	7573206b 	.word	0x7573206b
    5b68:	73656363 	.word	0x73656363
    5b6c:	6c756673 	.word	0x6c756673
    5b70:	0000796c 	.word	0x0000796c

00005b74 <ModemCmdData>:
    5b74:	00000200 00006110 00000000 00000a01     .....a..........
    5b84:	00000000 00000001 00006114 00020003     .........a......
    5b94:	00000a01 00000009 00000002 00006118     .............a..
    5ba4:	000f0008 00000a01 0000001b 00000003     ................
    5bb4:	00006124 000e000c 00000a01 0000001e     $a..............
    5bc4:	00000004 00006134 000c0008 00000a01     ....4a..........
    5bd4:	00000018 00000005 00006140 00080005     ........@a......
    5be4:	00000a01 00000011 00000006 0000614c     ............La..
    5bf4:	000b000a 00000a01 00000019 00000007     ................
    5c04:	00006158 0015000a 00000a01 00000023     Xa..........#...
    5c14:	00000008 00006164 00020005 00000a01     ....da..........
    5c24:	0000000b 00000109 0000616c 000c0027     ........la..'...
    5c34:	00000a01 00000037 0000010a 00006194     ....7........a..
    5c44:	00020012 00000a01 00000018 0000010b     ................
    5c54:	000061a8 00020012 00000a01 00000018     .a..............
    5c64:	0000010c 000061bc 00020012 00000a01     .....a..........
    5c74:	00000018 0000010d 000061d0 00020012     .........a......
    5c84:	00000a01 00000018 0000010e 000061e4     .............a..
    5c94:	00020012 00000a01 00000018 0000010f     ................
    5ca4:	000061f8 00020012 00000a01 00000018     .a..............
    5cb4:	00000110 0000620c 00020012 00000a01     .....b..........
    5cc4:	00000018 00000111 00006220 00020012     ........ b......
    5cd4:	00000a01 00000018 00000112 00006234     ............4b..
    5ce4:	00020012 00000a01 00000018 00000113     ................
    5cf4:	00006248 00020013 00000a01 00000019     Hb..............
    5d04:	00000114 0000625c 0002001f 00000a01     ....\b..........
    5d14:	00000025 00000115 0000627c 00020023     %.......|b..#...
    5d24:	00000a01 00000029 00000116 000062a0     ....)........b..
    5d34:	0002001a 00000a01 00000020 00000117     ........ .......
    5d44:	20000000 00070011 00000a01 0000001c     ... ............
    5d54:	00000118 200001ac 00bf003a 00000a01     ....... :.......
    5d64:	000000fd 00000119 000062bc 00020010     .........b......
    5d74:	00000a01 00000016 0000011a 000062d0     .............b..
    5d84:	00020010 00000a01 00000016 0000011b     ................
    5d94:	000062e4 0002000b 00000a01 00000011     .b..............
	...
    6024:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    6034:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    6044:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    6054:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    6064:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    6074:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    6084:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    6094:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    60a4:	73736553 206e6f69 76204449 65756c61     Session ID value
    60b4:	63786520 73646565 65687420 78616d20      exceeds the max
    60c4:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    60d4:	52454441 72745320 20676e69 00207369     ADER String is .
    60e4:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    60f4:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    6104:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    6114:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    6124:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    6134:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    6144:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    6154:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    6164:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    6174:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    6184:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    6194:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    61a4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    61b4:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    61c4:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    61d4:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    61e4:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    61f4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6204:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    6214:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    6224:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    6234:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    6244:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6254:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    6264:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    6274:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    6284:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    6294:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    62a4:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    62b4:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    62c4:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    62d4:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    62e4:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    62f4:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    6304:	66206e6f 7020726f 65737261 74616420     on for parse dat
    6314:	75622061 72656666 69616620 0064656c     a buffer failed.
    6324:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    6334:	76206f74 66697265 68742079 6f632065     to verify the co
    6344:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    6354:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    6364:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    6374:	20646165 61746164 6f726620 6572206d     ead data from re
    6384:	76696563 69722065 6220676e 65666675     ceive ring buffe
    6394:	75642072 676e6972 72617020 00726573     r during parser.
    63a4:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    63b4:	69746163 66206e6f 7220726f 6f707365     cation for respo
    63c4:	2065736e 61746164 66756220 20726566     nse data buffer 
    63d4:	6c696166 00006465 65707845 64657463     failed..Expected
    63e4:	646f6d20 72206d65 6f707365 2065736e      modem response 
    63f4:	6e207369 7220746f 69656365 00646576     is not received.
    6404:	52206f4e 6f707365 2065736e 6d6f7266     No Response from
    6414:	62655720 76655320 2e2e7265 6f502e2e      Web Sever....Po
    6424:	6e697473 61642067 74206174 6573206f     sting data to se
    6434:	20726576 66207369 656c6961 00000064     ver is failed...
    6444:	66726550 696d726f 7420676e 45206568     Performing the E
    6454:	726f7272 63655220 7265766f 72502079     rror Recovery Pr
    6464:	6465636f 73657275 00002e2e 736f6c43     ocedures....Clos
    6474:	61206465 5220646e 65706f65 2064656e     ed and Reopened 
    6484:	20656874 73736573 2e6e6f69 2e2e2e2e     the session.....
    6494:	0000002e 6f747541 63657220 7265766f     ....Auto recover
    64a4:	6f632079 656c706d 2e646574 2e2e2e2e     y completed.....
    64b4:	0000002e 6f727245 203a2072 636f7250     ....Error : Proc
    64c4:	20737365 70736572 65736e6f 69616620     ess response fai
    64d4:	2064656c 614c202d 43207473 616d6d6f     led - Last Comma
    64e4:	4920646e 6c61766e 00006469 45444f4d     nd Invalid..MODE
    64f4:	4144204d 55204154 20545241 52455328     M DATA UART (SER
    6504:	334d4f43 6e692029 61697469 657a696c     COM3) initialize
    6514:	00000064 43524553 20334d4f 4f495250     d...SERCOM3 PRIO
    6524:	59544952 00000000 6c696146 74206465     RITY....Failed t
    6534:	6e69206f 61697469 657a696c 65687420     o initialize the
    6544:	444f4d20 44204d45 20415441 54524155      MODEM DATA UART
    6554:	00000000 746e6553 65687420 61694420     ....Sent the Dia
    6564:	61642067 74206174 7854206f 73615420     g data to Tx Tas
    6574:	0000006b 6c696146 74206465 6573206f     k...Failed to se
    6584:	7420746e 44206568 20676169 61746164     nt the Diag data
    6594:	206f7420 54207854 006b7361 6e6e7552      to Tx Task.Runn
    65a4:	20676e69 67616944 6f725020 73736563     ing Diag Process
    65b4:	73615420 7573206b 73656363 6c756673      Task successful
    65c4:	0000796c 55206e49 74616470 61642065     ly..In Update da
    65d4:	62206174 00657361 6e6e7552 20676e69     ta base.Running 
    65e4:	65646f4d 7250206d 7365636f 61542073     Modem Process Ta
    65f4:	73206b73 65636375 75667373 00796c6c     sk successfully.
    6604:	4f525245 50203a52 6c626f72 64206d65     ERROR: Problem d
    6614:	6e697275 61702067 6e696b63 68742067     uring packing th
    6624:	61642065 69206174 6572206e 6e6f7073     e data in respon
    6634:	68206573 6c646e61 00007265 4f525245     se handler..ERRO
    6644:	52203a52 69656365 20646576 65206e61     R: Received an e
    6654:	7974706d 73657220 736e6f70 74732065     mpty response st
    6664:	676e6972 206e6920 6d6d6f63 20646e61     ring in command 
    6674:	70736572 65736e6f 6e616820 72656c64     response handler
    6684:	00000000 41206e49 61682054 656c646e     ....In AT handle
    6694:	000a0d72 43206e49 204e5347 646e6168     r...In CGSN hand
    66a4:	0072656c 43206e49 69727261 68207265     ler.In Carrier h
    66b4:	6c646e61 00007265 4b206e49 204e5347     andler..In KGSN 
    66c4:	646e6168 0072656c 6c430a0d 6465736f     handler...Closed
    66d4:	206e6120 69746361 63206576 656e6e6f      an active conne
    66e4:	6f697463 0000006e 72656854 73692065     ction...There is
    66f4:	206f6e20 6e6e6f63 69746365 65206e6f      no connection e
    6704:	62617473 6873696c 77206465 20687469     stablished with 
    6714:	73696874 73657320 6e6f6973 2e444920     this session ID.
    6724:	00002e2e 63656843 676e696b 726f6620     ....Checking for
    6734:	206e6120 69746361 63206576 656e6e6f      an active conne
    6744:	6f697463 6977206e 6e206874 20747865     ction with next 
    6754:	73736573 206e6f69 2e2e4449 00000a2e     session ID......
    6764:	4b206e49 54544150 204e5245 646e6168     In KPATTERN hand
    6774:	0072656c 4b206e49 43584e43 68204746     ler.In KCNXCFG h
    6784:	6c646e61 00007265 4b206e49 54584e43     andler..In KCNXT
    6794:	52454d49 6e616820 72656c64 00000000     IMER handler....
    67a4:	4b206e49 50545448 20474643 646e6168     In KHTTPCFG hand
    67b4:	0072656c 4b206e49 50545448 41454820     ler.In KHTTP HEA
    67c4:	20524544 646e6168 0072656c 4e4e4f43     DER handler.CONN
    67d4:	00544345 64616548 52207265 6f707365     ECT.Header Respo
    67e4:	2065736e 00006b4f 64616548 52207265     nse Ok..Header R
    67f4:	6f707365 2065736e 20746f4e 00006b4f     esponse Not Ok..
    6804:	000a0a0d 54206e49 494d5245 4554414e     ....In TERMINATE
    6814:	41454820 20524544 646e6168 0072656c      HEADER handler.
    6824:	69746f4e 61636966 6e6f6974 63655220     Notification Rec
    6834:	65766965 6f742064 20785220 6b736154     eived to Rx Task
    6844:	6f726620 5349206d 00000052 63637553      from ISR...Succ
    6854:	66737365 796c6c75 72615020 20646573     essfully Parsed 
    6864:	20656874 7473616c 6d6f6320 646e616d     the last command
    6874:	00000000 4f525245 43203a52 616d6d6f     ....ERROR: Comma
    6884:	5020646e 69737261 4620676e 656c6961     nd Parsing Faile
    6894:	00000064 6b736154 00444920 6e617254     d...Task ID.Tran
    68a4:	74696d73 20646574 6f632061 6e616d6d     smitted a comman
    68b4:	6f742064 646f4d20 00006d65 73207854     d to Modem..Tx s
    68c4:	61697265 6544206c 20677562 656e6f44     erial Debug Done
    68d4:	00000a0d 44207852 0d656e6f 0000000a     ....Rx Done.....
    68e4:	25207325 00000073 2d207325 20642520     %s %s...%s - %d 
    68f4:	00000a0d 682f2e2e 692f6c61 756c636e     ....../hal/inclu
    6904:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
    6914:	20544457 74696e49 696c6169 00646573     WDT Initialised.
    6924:	20544457 6c696146 74206465 6e69206f     WDT Failed to in
    6934:	61697469 657a696c 00000000 682f2e2e     itialize....../h
    6944:	732f6c61 682f6372 615f6c61 79735f63     al/src/hal_ac_sy
    6954:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    6964:	682f6372 615f6c61 735f6364 2e636e79     rc/hal_adc_sync.
    6974:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    6984:	645f6c61 735f6361 2e636e79 00000063     al_dac_sync.c...
    6994:	682f2e2e 732f6c61 682f6372 665f6c61     ../hal/src/hal_f
    69a4:	6873616c 0000632e 682f2e2e 732f6c61     lash.c..../hal/s
    69b4:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
    69c4:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    69d4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    69e4:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    69f4:	2e747369 00000063 682f2e2e 752f6c61     ist.c...../hal/u
    6a04:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
    6a14:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
    6a24:	612f6c70 70682f63 63615f6c 0000632e     pl/ac/hpl_ac.c..

00006a34 <_adcs>:
    6a34:	00c00000 00830002 00001900 00000000     ................
    6a44:	00000000 00010001 00000000 00000000     ................
	...
    6a60:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    6a70:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    6a80:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00006a90 <_cfgs>:
	...

00006b90 <user_mux_confs>:
	...

00006bd4 <channel_confs>:
	...

00006c14 <interrupt_cfg>:
	...
    6c94:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    6ca4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    6cb4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    6cc4:	43000000 43000400                       ...C...C

00006ccc <_usarts>:
    6ccc:	00000003 40200004 00030000 00700002     ...... @......p.
    6cdc:	0000f62b 00000000 00000004 40300184     +.............0@
    6cec:	00030300 00700002 0000ff2e 00000000     ......p.........
    6cfc:	00000005 40300004 00030000 00700002     ......0@......p.
    6d0c:	0000f62b 00000000                       +.......

00006d14 <_i2cms>:
	...

00006d2c <sercomspi_regs>:
	...
    6d40:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    6d50:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    6d60:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00006d70 <_tccs>:
    6d70:	00000000 00000300 00000000 00000000     ................
    6d80:	00001770 00000000 00000000 00000000     p...............
    6d90:	00000000 00000001 00000300 00000000     ................
    6da0:	00000000 00001770 00000000 00000000     ....p...........
	...
    6db8:	00000002 00000300 00000000 00000000     ................
    6dc8:	00001770 00000000 00000000 00000000     p...............
    6dd8:	00000000 00000003 00000300 00000000     ................
    6de8:	00000000 00001770 00000000 00000000     ....p...........
	...
    6e00:	00000004 00000300 00000000 00000000     ................
    6e10:	00001770 00000000 00000000 00000000     p...............
    6e20:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    6e30:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    6e40:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    6e50:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    6e60:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    6e70:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    6e80:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    6e90:	63206572 74616572 00006465 616d6553     re created..Sema
    6ea0:	726f6870 61207365 63206572 74616572     phores are creat
    6eb0:	00006465 70736944 68637461 6b736154     ed..DispatchTask
    6ec0:	00000000 65646f4d 7361546d 0000006b     ....ModemTask...
    6ed0:	65646f4d 5478526d 006b7361 65646f4d     ModemRxTask.Mode
    6ee0:	6f72506d 73736563 6b736154 00000000     mProcessTask....
    6ef0:	65646f4d 6169446d 73615467 0000006b     ModemDiagTask...
    6f00:	63637553 66737365 796c6c75 65724320     Successfully Cre
    6f10:	64657461 65687420 73615420 0000736b     ated the Tasks..
    6f20:	65657246 4f545220 63532053 75646568     Free RTOS Schedu
    6f30:	2072656c 20746f6e 72617473 00646574     ler not started.
    6f40:	6c696146 74206465 7263206f 65746165     Failed to create
    6f50:	73617420 0000736b 6f727245 53203a72      tasks..Error: S
    6f60:	64656863 72656c75 69786520 00646574     cheduler exited.
    6f70:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
    6f80:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.

00006f90 <__sf_fake_stderr>:
	...

00006fb0 <__sf_fake_stdin>:
	...

00006fd0 <__sf_fake_stdout>:
	...
    6ff0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7000:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7010:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7020:	00006665                                ef..

00007024 <_init>:
    7024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7026:	bf00      	nop
    7028:	bcf8      	pop	{r3, r4, r5, r6, r7}
    702a:	bc08      	pop	{r3}
    702c:	469e      	mov	lr, r3
    702e:	4770      	bx	lr

00007030 <__init_array_start>:
    7030:	00000289 	.word	0x00000289

00007034 <_fini>:
    7034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7036:	bf00      	nop
    7038:	bcf8      	pop	{r3, r4, r5, r6, r7}
    703a:	bc08      	pop	{r3}
    703c:	469e      	mov	lr, r3
    703e:	4770      	bx	lr

00007040 <__fini_array_start>:
    7040:	00000265 	.word	0x00000265
