
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000339c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f0  20000000  0000339c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200f0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200f0  2**0
                  CONTENTS
  4 .bss          000010f8  200000f0  00003490  000200f0  2**4
                  ALLOC
  5 .stack        00010000  200011e8  00004588  000200f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004da3c  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007414  00000000  00000000  0006dbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000172ec  00000000  00000000  00074fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001740  00000000  00000000  0008c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c30  00000000  00000000  0008d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00015efb  00000000  00000000  0008f623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025987  00000000  00000000  000a551e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105399  00000000  00000000  000caea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a0c  00000000  00000000  001d0240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	e8 11 01 20 8d 07 00 00 89 07 00 00 89 07 00 00     ... ............
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	89 07 00 00 89 07 00 00 89 07 00 00 00 00 00 00     ................
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	f1 27 00 00 89 07 00 00 00 00 00 00 21 28 00 00     .'..........!(..
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	85 28 00 00 89 07 00 00 89 07 00 00 89 07 00 00     .(..............
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      5c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      6c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      7c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      8c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      9c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      ac:	89 07 00 00 89 07 00 00 d5 1a 00 00 e9 1a 00 00     ................
      bc:	65 18 00 00 71 18 00 00 7d 18 00 00 89 18 00 00     e...q...}.......
      cc:	95 18 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      dc:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
      ec:	89 07 00 00 00 00 00 00 dd 1b 00 00 89 07 00 00     ................
      fc:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     10c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     11c:	89 07 00 00 89 07 00 00 89 07 00 00 1d 04 00 00     ................
     12c:	61 04 00 00 ad 04 00 00 89 07 00 00 89 07 00 00     a...............
     13c:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     14c:	89 07 00 00 29 07 00 00 89 07 00 00 00 00 00 00     ....)...........
	...
     180:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     190:	00 00 00 00 6d 21 00 00 89 07 00 00 89 07 00 00     ....m!..........
     1a0:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     1b0:	81 21 00 00 89 07 00 00 89 07 00 00 89 07 00 00     .!..............
     1c0:	89 07 00 00 95 21 00 00 89 07 00 00 89 07 00 00     .....!..........
     1d0:	89 07 00 00 a9 21 00 00 89 07 00 00 89 07 00 00     .....!..........
     1e0:	bd 21 00 00 89 07 00 00 89 07 00 00 b1 26 00 00     .!...........&..
     1f0:	c5 26 00 00 d9 26 00 00 ed 26 00 00 01 27 00 00     .&...&...&...'..
     200:	15 27 00 00 00 00 00 00 00 00 00 00 89 07 00 00     .'..............
     210:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     220:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     230:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     240:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     250:	89 07 00 00 89 07 00 00 89 07 00 00 89 07 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000f0 	.word	0x200000f0
     280:	00000000 	.word	0x00000000
     284:	0000339c 	.word	0x0000339c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000339c 	.word	0x0000339c
     2c4:	200000f4 	.word	0x200000f4
     2c8:	0000339c 	.word	0x0000339c
     2cc:	00000000 	.word	0x00000000

000002d0 <mdmParser_ParseModemResponse>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
void mdmParser_ParseModemResponse(AT_CMD_TYPE cmd,uint8_t* resp)
{
     2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2d2:	b08f      	sub	sp, #60	; 0x3c
     2d4:	460d      	mov	r5, r1
	bool readStatus = false;
	
	uint8_t Buffer[50];
	uint8_t parseCnt = 0;
	MODEM_CMD_DATA cmdData = ModemCmdData[cmd];
     2d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     2da:	4b11      	ldr	r3, [pc, #68]	; (320 <mdmParser_ParseModemResponse+0x50>)
     2dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     2e0:	7844      	ldrb	r4, [r0, #1]
     2e2:	7886      	ldrb	r6, [r0, #2]
	uint8_t startIndex = cmdData.valid.startIndex;
	
	readStatus = mdmCtrlr_ReadResponseFromModem(Buffer,cmdData.ResponseLength);
     2e4:	7c01      	ldrb	r1, [r0, #16]
     2e6:	a801      	add	r0, sp, #4
     2e8:	4b0e      	ldr	r3, [pc, #56]	; (324 <mdmParser_ParseModemResponse+0x54>)
     2ea:	4798      	blx	r3
	
	if(readStatus != false)
     2ec:	b190      	cbz	r0, 314 <mdmParser_ParseModemResponse+0x44>
	{
		while(startIndex < (cmdData.valid.validDataCount + cmdData.valid.startIndex))
     2ee:	4627      	mov	r7, r4
     2f0:	1930      	adds	r0, r6, r4
     2f2:	4284      	cmp	r4, r0
     2f4:	da12      	bge.n	31c <mdmParser_ParseModemResponse+0x4c>
     2f6:	4623      	mov	r3, r4
		{
			resp[startIndex - cmdData.valid.startIndex] = Buffer[startIndex];
     2f8:	1bda      	subs	r2, r3, r7
     2fa:	a90e      	add	r1, sp, #56	; 0x38
     2fc:	440b      	add	r3, r1
     2fe:	f813 1c34 	ldrb.w	r1, [r3, #-52]
     302:	54a9      	strb	r1, [r5, r2]
			startIndex++;
     304:	3401      	adds	r4, #1
     306:	b2e4      	uxtb	r4, r4
		while(startIndex < (cmdData.valid.validDataCount + cmdData.valid.startIndex))
     308:	4623      	mov	r3, r4
     30a:	4284      	cmp	r4, r0
     30c:	dbf4      	blt.n	2f8 <mdmParser_ParseModemResponse+0x28>
		}
		
		/* Null terminate the string */
		resp[startIndex - cmdData.valid.startIndex] = '\0';		
     30e:	1bdb      	subs	r3, r3, r7
     310:	2200      	movs	r2, #0
     312:	54ea      	strb	r2, [r5, r3]
	else
	{
		/* Not able to read the data from Rx Buffer. Parsing Failed. */
	}
	
	mdmCtrlr_FlushRxBuffer();
     314:	4b04      	ldr	r3, [pc, #16]	; (328 <mdmParser_ParseModemResponse+0x58>)
     316:	4798      	blx	r3
}
     318:	b00f      	add	sp, #60	; 0x3c
     31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(startIndex < (cmdData.valid.validDataCount + cmdData.valid.startIndex))
     31c:	4623      	mov	r3, r4
     31e:	e7f6      	b.n	30e <mdmParser_ParseModemResponse+0x3e>
     320:	00002b0c 	.word	0x00002b0c
     324:	00000509 	.word	0x00000509
     328:	00000561 	.word	0x00000561

0000032c <SendATCommandToModem>:
{
     32c:	b508      	push	{r3, lr}
	mdmCtrlr_SendDataToModem(ModemCmdData[atCmd].AtString,ModemCmdData[atCmd].CmdLength);
     32e:	4b05      	ldr	r3, [pc, #20]	; (344 <SendATCommandToModem+0x18>)
     330:	0082      	lsls	r2, r0, #2
     332:	1811      	adds	r1, r2, r0
     334:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     338:	460b      	mov	r3, r1
     33a:	7a09      	ldrb	r1, [r1, #8]
     33c:	6858      	ldr	r0, [r3, #4]
     33e:	4b02      	ldr	r3, [pc, #8]	; (348 <SendATCommandToModem+0x1c>)
     340:	4798      	blx	r3
     342:	bd08      	pop	{r3, pc}
     344:	00002b0c 	.word	0x00002b0c
     348:	000004e1 	.word	0x000004e1

0000034c <mdmParser_GetModemResponse>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_GetModemResponse(AT_CMD_TYPE cmd,uint8_t* response,uint8_t* respLength)
{
     34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     34e:	4606      	mov	r6, r0
     350:	4617      	mov	r7, r2
	ModemCmdData[cmd].ParseResponse(cmd,response);
     352:	4c06      	ldr	r4, [pc, #24]	; (36c <mdmParser_GetModemResponse+0x20>)
     354:	0085      	lsls	r5, r0, #2
     356:	182b      	adds	r3, r5, r0
     358:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     35c:	68db      	ldr	r3, [r3, #12]
     35e:	4798      	blx	r3
	*respLength = ModemCmdData[cmd].valid.validDataCount;
     360:	4435      	add	r5, r6
     362:	eb04 0485 	add.w	r4, r4, r5, lsl #2
     366:	78a3      	ldrb	r3, [r4, #2]
     368:	703b      	strb	r3, [r7, #0]
     36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     36c:	00002b0c 	.word	0x00002b0c

00000370 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     372:	491e      	ldr	r1, [pc, #120]	; (3ec <mdmCtrlr_DataCommInit+0x7c>)
     374:	481e      	ldr	r0, [pc, #120]	; (3f0 <mdmCtrlr_DataCommInit+0x80>)
     376:	4b1f      	ldr	r3, [pc, #124]	; (3f4 <mdmCtrlr_DataCommInit+0x84>)
     378:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     37a:	b180      	cbz	r0, 39e <mdmCtrlr_DataCommInit+0x2e>
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 not initialized\r\n");
     37c:	4d1e      	ldr	r5, [pc, #120]	; (3f8 <mdmCtrlr_DataCommInit+0x88>)
     37e:	4c1f      	ldr	r4, [pc, #124]	; (3fc <mdmCtrlr_DataCommInit+0x8c>)
     380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     382:	6028      	str	r0, [r5, #0]
     384:	6069      	str	r1, [r5, #4]
     386:	60aa      	str	r2, [r5, #8]
     388:	60eb      	str	r3, [r5, #12]
     38a:	cc03      	ldmia	r4!, {r0, r1}
     38c:	6128      	str	r0, [r5, #16]
     38e:	6169      	str	r1, [r5, #20]
     390:	8823      	ldrh	r3, [r4, #0]
     392:	832b      	strh	r3, [r5, #24]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     394:	2128      	movs	r1, #40	; 0x28
     396:	4628      	mov	r0, r5
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <mdmCtrlr_DataCommInit+0x90>)
     39a:	4798      	blx	r3
     39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     39e:	f44f 6200 	mov.w	r2, #2048	; 0x800
     3a2:	4918      	ldr	r1, [pc, #96]	; (404 <mdmCtrlr_DataCommInit+0x94>)
     3a4:	4818      	ldr	r0, [pc, #96]	; (408 <mdmCtrlr_DataCommInit+0x98>)
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <mdmCtrlr_DataCommInit+0x9c>)
     3a8:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     3aa:	2800      	cmp	r0, #0
     3ac:	d1e6      	bne.n	37c <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     3ae:	4c10      	ldr	r4, [pc, #64]	; (3f0 <mdmCtrlr_DataCommInit+0x80>)
     3b0:	2201      	movs	r2, #1
     3b2:	4611      	mov	r1, r2
     3b4:	4620      	mov	r0, r4
     3b6:	4b16      	ldr	r3, [pc, #88]	; (410 <mdmCtrlr_DataCommInit+0xa0>)
     3b8:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     3ba:	4620      	mov	r0, r4
     3bc:	4b15      	ldr	r3, [pc, #84]	; (414 <mdmCtrlr_DataCommInit+0xa4>)
     3be:	4798      	blx	r3
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
     3c0:	4c15      	ldr	r4, [pc, #84]	; (418 <mdmCtrlr_DataCommInit+0xa8>)
     3c2:	4d0d      	ldr	r5, [pc, #52]	; (3f8 <mdmCtrlr_DataCommInit+0x88>)
     3c4:	f104 0720 	add.w	r7, r4, #32
     3c8:	4626      	mov	r6, r4
     3ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     3cc:	6028      	str	r0, [r5, #0]
     3ce:	6069      	str	r1, [r5, #4]
     3d0:	60aa      	str	r2, [r5, #8]
     3d2:	60eb      	str	r3, [r5, #12]
     3d4:	4634      	mov	r4, r6
     3d6:	3510      	adds	r5, #16
     3d8:	42be      	cmp	r6, r7
     3da:	d1f5      	bne.n	3c8 <mdmCtrlr_DataCommInit+0x58>
     3dc:	cc03      	ldmia	r4!, {r0, r1}
     3de:	6028      	str	r0, [r5, #0]
     3e0:	6069      	str	r1, [r5, #4]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     3e2:	2128      	movs	r1, #40	; 0x28
     3e4:	4804      	ldr	r0, [pc, #16]	; (3f8 <mdmCtrlr_DataCommInit+0x88>)
     3e6:	4b06      	ldr	r3, [pc, #24]	; (400 <mdmCtrlr_DataCommInit+0x90>)
     3e8:	4798      	blx	r3
     3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ec:	41014000 	.word	0x41014000
     3f0:	20000000 	.word	0x20000000
     3f4:	00001d59 	.word	0x00001d59
     3f8:	20000fe0 	.word	0x20000fe0
     3fc:	00002cec 	.word	0x00002cec
     400:	000006e5 	.word	0x000006e5
     404:	200007d0 	.word	0x200007d0
     408:	20000fd0 	.word	0x20000fd0
     40c:	0000136d 	.word	0x0000136d
     410:	00001df5 	.word	0x00001df5
     414:	00001dbd 	.word	0x00001dbd
     418:	00002d08 	.word	0x00002d08

0000041c <SERCOM3_0_Handler>:
**
** Description:        DRE: TX Data Register Empty Interrupt
**
**===========================================================================*/
void SERCOM3_0_Handler( void )
{
     41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* DRE: TX Data Register Empty */
	sprintf(printBuff,"Modem Data Tx Data Reg Empty CallBack\r\n");
     41e:	4c0c      	ldr	r4, [pc, #48]	; (450 <SERCOM3_0_Handler+0x34>)
     420:	4d0c      	ldr	r5, [pc, #48]	; (454 <SERCOM3_0_Handler+0x38>)
     422:	f104 0720 	add.w	r7, r4, #32
     426:	4626      	mov	r6, r4
     428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     42a:	6028      	str	r0, [r5, #0]
     42c:	6069      	str	r1, [r5, #4]
     42e:	60aa      	str	r2, [r5, #8]
     430:	60eb      	str	r3, [r5, #12]
     432:	4634      	mov	r4, r6
     434:	3510      	adds	r5, #16
     436:	42be      	cmp	r6, r7
     438:	d1f5      	bne.n	426 <SERCOM3_0_Handler+0xa>
     43a:	cc03      	ldmia	r4!, {r0, r1}
     43c:	6028      	str	r0, [r5, #0]
     43e:	6069      	str	r1, [r5, #4]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     440:	2128      	movs	r1, #40	; 0x28
     442:	4804      	ldr	r0, [pc, #16]	; (454 <SERCOM3_0_Handler+0x38>)
     444:	4b04      	ldr	r3, [pc, #16]	; (458 <SERCOM3_0_Handler+0x3c>)
     446:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     448:	2201      	movs	r2, #1
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <SERCOM3_0_Handler+0x40>)
     44c:	761a      	strb	r2, [r3, #24]
     44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     450:	00002d30 	.word	0x00002d30
     454:	20000fe0 	.word	0x20000fe0
     458:	000006e5 	.word	0x000006e5
     45c:	41014000 	.word	0x41014000

00000460 <SERCOM3_1_Handler>:
**
** Description:        TXC : Transmit Complete Interrupt
**
**===========================================================================*/
void SERCOM3_1_Handler(void )
{
     460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* TXC : Transmit Complete */
	sprintf(printBuff,"Modem Data Tx byte Complete Callback\r\n");
     462:	4e0e      	ldr	r6, [pc, #56]	; (49c <SERCOM3_1_Handler+0x3c>)
     464:	4c0e      	ldr	r4, [pc, #56]	; (4a0 <SERCOM3_1_Handler+0x40>)
     466:	f106 0720 	add.w	r7, r6, #32
     46a:	4635      	mov	r5, r6
     46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     46e:	6020      	str	r0, [r4, #0]
     470:	6061      	str	r1, [r4, #4]
     472:	60a2      	str	r2, [r4, #8]
     474:	60e3      	str	r3, [r4, #12]
     476:	462e      	mov	r6, r5
     478:	3410      	adds	r4, #16
     47a:	42bd      	cmp	r5, r7
     47c:	d1f5      	bne.n	46a <SERCOM3_1_Handler+0xa>
     47e:	6828      	ldr	r0, [r5, #0]
     480:	6020      	str	r0, [r4, #0]
     482:	88aa      	ldrh	r2, [r5, #4]
     484:	79ab      	ldrb	r3, [r5, #6]
     486:	80a2      	strh	r2, [r4, #4]
     488:	71a3      	strb	r3, [r4, #6]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     48a:	2128      	movs	r1, #40	; 0x28
     48c:	4804      	ldr	r0, [pc, #16]	; (4a0 <SERCOM3_1_Handler+0x40>)
     48e:	4b05      	ldr	r3, [pc, #20]	; (4a4 <SERCOM3_1_Handler+0x44>)
     490:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     492:	2202      	movs	r2, #2
     494:	4b04      	ldr	r3, [pc, #16]	; (4a8 <SERCOM3_1_Handler+0x48>)
     496:	761a      	strb	r2, [r3, #24]
     498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     49a:	bf00      	nop
     49c:	00002d58 	.word	0x00002d58
     4a0:	20000fe0 	.word	0x20000fe0
     4a4:	000006e5 	.word	0x000006e5
     4a8:	41014000 	.word	0x41014000

000004ac <SERCOM3_2_Handler>:
**
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/
void SERCOM3_2_Handler( void )
{
     4ac:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar = 0;
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     4ae:	4d07      	ldr	r5, [pc, #28]	; (4cc <SERCOM3_2_Handler+0x20>)
     4b0:	4c07      	ldr	r4, [pc, #28]	; (4d0 <SERCOM3_2_Handler+0x24>)
     4b2:	4628      	mov	r0, r5
     4b4:	47a0      	blx	r4
     4b6:	2800      	cmp	r0, #0
     4b8:	d0fb      	beq.n	4b2 <SERCOM3_2_Handler+0x6>
	rcvdChar = _usart_async_read_byte(&MODEM_DATA);
     4ba:	4804      	ldr	r0, [pc, #16]	; (4cc <SERCOM3_2_Handler+0x20>)
     4bc:	4b05      	ldr	r3, [pc, #20]	; (4d4 <SERCOM3_2_Handler+0x28>)
     4be:	4798      	blx	r3
	ringbuffer_put(&RxRingBuffer, rcvdChar);
     4c0:	4601      	mov	r1, r0
     4c2:	4805      	ldr	r0, [pc, #20]	; (4d8 <SERCOM3_2_Handler+0x2c>)
     4c4:	4b05      	ldr	r3, [pc, #20]	; (4dc <SERCOM3_2_Handler+0x30>)
     4c6:	4798      	blx	r3
     4c8:	bd38      	pop	{r3, r4, r5, pc}
     4ca:	bf00      	nop
     4cc:	20000000 	.word	0x20000000
     4d0:	00001de9 	.word	0x00001de9
     4d4:	00001dd7 	.word	0x00001dd7
     4d8:	20000fd0 	.word	0x20000fd0
     4dc:	00001401 	.word	0x00001401

000004e0 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	4605      	mov	r5, r0
     4e4:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     4e6:	4c05      	ldr	r4, [pc, #20]	; (4fc <mdmCtrlr_SendDataToModem+0x1c>)
     4e8:	4620      	mov	r0, r4
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <mdmCtrlr_SendDataToModem+0x20>)
     4ec:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     4ee:	4632      	mov	r2, r6
     4f0:	4629      	mov	r1, r5
     4f2:	4620      	mov	r0, r4
     4f4:	4b03      	ldr	r3, [pc, #12]	; (504 <mdmCtrlr_SendDataToModem+0x24>)
     4f6:	4798      	blx	r3
}
     4f8:	bd70      	pop	{r4, r5, r6, pc}
     4fa:	bf00      	nop
     4fc:	20000000 	.word	0x20000000
     500:	00001dbd 	.word	0x00001dbd
     504:	00000661 	.word	0x00000661

00000508 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     50c:	b082      	sub	sp, #8
     50e:	4606      	mov	r6, r0
     510:	460d      	mov	r5, r1
	bool status = false;
	
	uint8_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     512:	480e      	ldr	r0, [pc, #56]	; (54c <mdmCtrlr_ReadResponseFromModem+0x44>)
     514:	4b0e      	ldr	r3, [pc, #56]	; (550 <mdmCtrlr_ReadResponseFromModem+0x48>)
     516:	4798      	blx	r3
     518:	42a8      	cmp	r0, r5
     51a:	d202      	bcs.n	522 <mdmCtrlr_ReadResponseFromModem+0x1a>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     51c:	b002      	add	sp, #8
     51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CRITICAL_SECTION_ENTER()
     522:	a801      	add	r0, sp, #4
     524:	4b0b      	ldr	r3, [pc, #44]	; (554 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     526:	4798      	blx	r3
		while (readCnt < length)
     528:	b165      	cbz	r5, 544 <mdmCtrlr_ReadResponseFromModem+0x3c>
     52a:	2100      	movs	r1, #0
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     52c:	f8df 801c 	ldr.w	r8, [pc, #28]	; 54c <mdmCtrlr_ReadResponseFromModem+0x44>
     530:	4f09      	ldr	r7, [pc, #36]	; (558 <mdmCtrlr_ReadResponseFromModem+0x50>)
     532:	1c4c      	adds	r4, r1, #1
     534:	b2e4      	uxtb	r4, r4
     536:	4431      	add	r1, r6
     538:	4640      	mov	r0, r8
     53a:	47b8      	blx	r7
     53c:	4621      	mov	r1, r4
		while (readCnt < length)
     53e:	b2a4      	uxth	r4, r4
     540:	42a5      	cmp	r5, r4
     542:	d8f6      	bhi.n	532 <mdmCtrlr_ReadResponseFromModem+0x2a>
		CRITICAL_SECTION_LEAVE()
     544:	a801      	add	r0, sp, #4
     546:	4b05      	ldr	r3, [pc, #20]	; (55c <mdmCtrlr_ReadResponseFromModem+0x54>)
     548:	4798      	blx	r3
     54a:	e7e7      	b.n	51c <mdmCtrlr_ReadResponseFromModem+0x14>
     54c:	20000fd0 	.word	0x20000fd0
     550:	00001441 	.word	0x00001441
     554:	0000103d 	.word	0x0000103d
     558:	000013bd 	.word	0x000013bd
     55c:	0000104b 	.word	0x0000104b

00000560 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     560:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     562:	4802      	ldr	r0, [pc, #8]	; (56c <mdmCtrlr_FlushRxBuffer+0xc>)
     564:	4b02      	ldr	r3, [pc, #8]	; (570 <mdmCtrlr_FlushRxBuffer+0x10>)
     566:	4798      	blx	r3
     568:	bd08      	pop	{r3, pc}
     56a:	bf00      	nop
     56c:	20000fd0 	.word	0x20000fd0
     570:	00001465 	.word	0x00001465

00000574 <MdmParam_TestModemBaseParameters>:
**
** Description:        Performs the basic power on self test for the modem.
**
**===========================================================================*/
bool MdmParam_TestModemBaseParameters(void)
{
     574:	b530      	push	{r4, r5, lr}
     576:	b08d      	sub	sp, #52	; 0x34
	
	switch(testMdmBasicParam)
	{
		case TEST_UART_COMM:
		{
			SendATCommandToModem(CMD_AT);
     578:	2000      	movs	r0, #0
     57a:	4b0f      	ldr	r3, [pc, #60]	; (5b8 <MdmParam_TestModemBaseParameters+0x44>)
     57c:	4798      	blx	r3
			delay_ms(500);
     57e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     582:	4c0e      	ldr	r4, [pc, #56]	; (5bc <MdmParam_TestModemBaseParameters+0x48>)
     584:	47a0      	blx	r4
			
			memset(responseBuffer,0,RESPONSE_BUFFER_SIZE);
     586:	2228      	movs	r2, #40	; 0x28
     588:	2100      	movs	r1, #0
     58a:	a802      	add	r0, sp, #8
     58c:	4b0c      	ldr	r3, [pc, #48]	; (5c0 <MdmParam_TestModemBaseParameters+0x4c>)
     58e:	4798      	blx	r3
			mdmParser_GetModemResponse(CMD_AT,&responseBuffer,&respLength);
     590:	f10d 0207 	add.w	r2, sp, #7
     594:	a902      	add	r1, sp, #8
     596:	2000      	movs	r0, #0
     598:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <MdmParam_TestModemBaseParameters+0x50>)
     59a:	4798      	blx	r3
			
			SerialDebugPrint(responseBuffer,respLength);
     59c:	f89d 1007 	ldrb.w	r1, [sp, #7]
     5a0:	a802      	add	r0, sp, #8
     5a2:	4d09      	ldr	r5, [pc, #36]	; (5c8 <MdmParam_TestModemBaseParameters+0x54>)
     5a4:	47a8      	blx	r5
			SerialDebugPrint("\r\n",2);		
     5a6:	2102      	movs	r1, #2
     5a8:	4808      	ldr	r0, [pc, #32]	; (5cc <MdmParam_TestModemBaseParameters+0x58>)
     5aa:	47a8      	blx	r5
			delay_ms(3000);
     5ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
     5b0:	47a0      	blx	r4
		}
		break;
	
	} 
	
     5b2:	b00d      	add	sp, #52	; 0x34
     5b4:	bd30      	pop	{r4, r5, pc}
     5b6:	bf00      	nop
     5b8:	0000032d 	.word	0x0000032d
     5bc:	000010ad 	.word	0x000010ad
     5c0:	00002aed 	.word	0x00002aed
     5c4:	0000034d 	.word	0x0000034d
     5c8:	000006e5 	.word	0x000006e5
     5cc:	00002df8 	.word	0x00002df8

000005d0 <modemPowerInit>:

/* Perform the HL7618RD modem power on sequence */
/* I FEEL LIKE SOMETHING WRONG HERE */

void modemPowerInit(void)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	4c1d      	ldr	r4, [pc, #116]	; (648 <modemPowerInit+0x78>)
     5d4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     5d8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     5e0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     5e4:	4919      	ldr	r1, [pc, #100]	; (64c <modemPowerInit+0x7c>)
     5e6:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ea:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f2:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     5fe:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     600:	62a3      	str	r3, [r4, #40]	; 0x28
     602:	4a13      	ldr	r2, [pc, #76]	; (650 <modemPowerInit+0x80>)
     604:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     606:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     60a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     612:	6160      	str	r0, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     614:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     616:	62a3      	str	r3, [r4, #40]	; 0x28
     618:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     61e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     626:	6165      	str	r5, [r4, #20]

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	//gpio_set_pin_pull_mode(MODEM_DTR, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(500);
     628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     62c:	4e09      	ldr	r6, [pc, #36]	; (654 <modemPowerInit+0x84>)
     62e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     630:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Give a short 50 ms positive pulse on MODEM ON Pin */
	gpio_set_pin_level(MODEM_ON,true);
	delay_ms(50);
     634:	2032      	movs	r0, #50	; 0x32
     636:	47b0      	blx	r6
	
	/* make MODEM ON to default level */
	//gpio_set_pin_level(MODEM_ON,false);
	delay_ms(3000);
     638:	f640 30b8 	movw	r0, #3000	; 0xbb8
     63c:	47b0      	blx	r6
	
	SerialDebugPrint((uint8_t*)"Modem Power On initialization Completed\r\n",41);
     63e:	2129      	movs	r1, #41	; 0x29
     640:	4805      	ldr	r0, [pc, #20]	; (658 <modemPowerInit+0x88>)
     642:	4b06      	ldr	r3, [pc, #24]	; (65c <modemPowerInit+0x8c>)
     644:	4798      	blx	r3
     646:	bd70      	pop	{r4, r5, r6, pc}
     648:	41008000 	.word	0x41008000
     64c:	c0000001 	.word	0xc0000001
     650:	c0000008 	.word	0xc0000008
     654:	000010ad 	.word	0x000010ad
     658:	00002da0 	.word	0x00002da0
     65c:	000006e5 	.word	0x000006e5

00000660 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     664:	4604      	mov	r4, r0
     666:	460e      	mov	r6, r1
     668:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     66a:	4d0e      	ldr	r5, [pc, #56]	; (6a4 <usart_async_write+0x44>)
     66c:	4620      	mov	r0, r4
     66e:	47a8      	blx	r5
     670:	2800      	cmp	r0, #0
     672:	d0fb      	beq.n	66c <usart_async_write+0xc>
     674:	3e01      	subs	r6, #1
     676:	f8df 8030 	ldr.w	r8, [pc, #48]	; 6a8 <usart_async_write+0x48>
     67a:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     67c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 6ac <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     680:	4d08      	ldr	r5, [pc, #32]	; (6a4 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     682:	7873      	ldrb	r3, [r6, #1]
     684:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     68c:	4620      	mov	r0, r4
     68e:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     690:	4620      	mov	r0, r4
     692:	47a8      	blx	r5
     694:	2800      	cmp	r0, #0
     696:	d0fb      	beq.n	690 <usart_async_write+0x30>
		;
	} while (++offset < length);
     698:	3701      	adds	r7, #1
     69a:	454f      	cmp	r7, r9
     69c:	d3f1      	bcc.n	682 <usart_async_write+0x22>

	return (int32_t)offset;
}
     69e:	4638      	mov	r0, r7
     6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6a4:	00001ddf 	.word	0x00001ddf
     6a8:	2000010c 	.word	0x2000010c
     6ac:	00001dd1 	.word	0x00001dd1

000006b0 <SerialDebugTxByteSentCallBack>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     6b0:	2302      	movs	r3, #2
     6b2:	7603      	strb	r3, [r0, #24]
     6b4:	4770      	bx	lr

000006b6 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     6b6:	2380      	movs	r3, #128	; 0x80
     6b8:	7603      	strb	r3, [r0, #24]
     6ba:	4770      	bx	lr

000006bc <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     6bc:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&DEBUG_PRINT,SERCOM5);
     6be:	4c05      	ldr	r4, [pc, #20]	; (6d4 <SerialDebugPrintInit+0x18>)
     6c0:	4905      	ldr	r1, [pc, #20]	; (6d8 <SerialDebugPrintInit+0x1c>)
     6c2:	4620      	mov	r0, r4
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <SerialDebugPrintInit+0x20>)
     6c6:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     6c8:	2201      	movs	r2, #1
     6ca:	4611      	mov	r1, r2
     6cc:	4620      	mov	r0, r4
     6ce:	4b04      	ldr	r3, [pc, #16]	; (6e0 <SerialDebugPrintInit+0x24>)
     6d0:	4798      	blx	r3
     6d2:	bd10      	pop	{r4, pc}
     6d4:	2000001c 	.word	0x2000001c
     6d8:	43000400 	.word	0x43000400
     6dc:	00001d59 	.word	0x00001d59
     6e0:	00001df5 	.word	0x00001df5

000006e4 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     6e4:	b570      	push	{r4, r5, r6, lr}
     6e6:	4605      	mov	r5, r0
     6e8:	460e      	mov	r6, r1
	_usart_async_enable(&DEBUG_PRINT);
     6ea:	4c05      	ldr	r4, [pc, #20]	; (700 <SerialDebugPrint+0x1c>)
     6ec:	4620      	mov	r0, r4
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <SerialDebugPrint+0x20>)
     6f0:	4798      	blx	r3
	
	usart_async_write(&DEBUG_PRINT, dataToPrint, length);
     6f2:	4632      	mov	r2, r6
     6f4:	4629      	mov	r1, r5
     6f6:	4620      	mov	r0, r4
     6f8:	4b03      	ldr	r3, [pc, #12]	; (708 <SerialDebugPrint+0x24>)
     6fa:	4798      	blx	r3
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	bf00      	nop
     700:	2000001c 	.word	0x2000001c
     704:	00001dbd 	.word	0x00001dbd
     708:	00000661 	.word	0x00000661

0000070c <SerialDebugTxDoneCallBack>:
{
     70c:	b510      	push	{r4, lr}
     70e:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     710:	2116      	movs	r1, #22
     712:	4803      	ldr	r0, [pc, #12]	; (720 <SerialDebugTxDoneCallBack+0x14>)
     714:	4b03      	ldr	r3, [pc, #12]	; (724 <SerialDebugTxDoneCallBack+0x18>)
     716:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     718:	2301      	movs	r3, #1
     71a:	7623      	strb	r3, [r4, #24]
     71c:	bd10      	pop	{r4, pc}
     71e:	bf00      	nop
     720:	00002dfc 	.word	0x00002dfc
     724:	000006e5 	.word	0x000006e5

00000728 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     728:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     72a:	2204      	movs	r2, #4
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <SERCOM5_2_Handler+0x34>)
     72e:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&DEBUG_PRINT));
     730:	4d0b      	ldr	r5, [pc, #44]	; (760 <SERCOM5_2_Handler+0x38>)
     732:	4c0c      	ldr	r4, [pc, #48]	; (764 <SERCOM5_2_Handler+0x3c>)
     734:	4628      	mov	r0, r5
     736:	47a0      	blx	r4
     738:	2800      	cmp	r0, #0
     73a:	d0fb      	beq.n	734 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&DEBUG_PRINT);
     73c:	4808      	ldr	r0, [pc, #32]	; (760 <SERCOM5_2_Handler+0x38>)
     73e:	4b0a      	ldr	r3, [pc, #40]	; (768 <SERCOM5_2_Handler+0x40>)
     740:	4798      	blx	r3
     742:	490a      	ldr	r1, [pc, #40]	; (76c <SERCOM5_2_Handler+0x44>)
     744:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     746:	2300      	movs	r3, #0
     748:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     74a:	4c09      	ldr	r4, [pc, #36]	; (770 <SERCOM5_2_Handler+0x48>)
     74c:	4620      	mov	r0, r4
     74e:	4b09      	ldr	r3, [pc, #36]	; (774 <SERCOM5_2_Handler+0x4c>)
     750:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     752:	2105      	movs	r1, #5
     754:	4620      	mov	r0, r4
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <SERCOM5_2_Handler+0x50>)
     758:	4798      	blx	r3
     75a:	bd38      	pop	{r3, r4, r5, pc}
     75c:	43000400 	.word	0x43000400
     760:	2000001c 	.word	0x2000001c
     764:	00001de9 	.word	0x00001de9
     768:	00001dd7 	.word	0x00001dd7
     76c:	20001020 	.word	0x20001020
     770:	20001024 	.word	0x20001024
     774:	00002afd 	.word	0x00002afd
     778:	000006e5 	.word	0x000006e5

0000077c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     77c:	b508      	push	{r3, lr}
	system_init();
     77e:	4b01      	ldr	r3, [pc, #4]	; (784 <atmel_start_init+0x8>)
     780:	4798      	blx	r3
     782:	bd08      	pop	{r3, pc}
     784:	00000ebd 	.word	0x00000ebd

00000788 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     788:	e7fe      	b.n	788 <Dummy_Handler>
	...

0000078c <Reset_Handler>:
{
     78c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     78e:	4b1c      	ldr	r3, [pc, #112]	; (800 <Reset_Handler+0x74>)
     790:	4a1c      	ldr	r2, [pc, #112]	; (804 <Reset_Handler+0x78>)
     792:	429a      	cmp	r2, r3
     794:	d010      	beq.n	7b8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     796:	4b1c      	ldr	r3, [pc, #112]	; (808 <Reset_Handler+0x7c>)
     798:	4a19      	ldr	r2, [pc, #100]	; (800 <Reset_Handler+0x74>)
     79a:	429a      	cmp	r2, r3
     79c:	d20c      	bcs.n	7b8 <Reset_Handler+0x2c>
     79e:	3b01      	subs	r3, #1
     7a0:	1a9b      	subs	r3, r3, r2
     7a2:	f023 0303 	bic.w	r3, r3, #3
     7a6:	3304      	adds	r3, #4
     7a8:	4413      	add	r3, r2
     7aa:	4916      	ldr	r1, [pc, #88]	; (804 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     7ac:	f851 0b04 	ldr.w	r0, [r1], #4
     7b0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     7b4:	429a      	cmp	r2, r3
     7b6:	d1f9      	bne.n	7ac <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     7b8:	4b14      	ldr	r3, [pc, #80]	; (80c <Reset_Handler+0x80>)
     7ba:	4a15      	ldr	r2, [pc, #84]	; (810 <Reset_Handler+0x84>)
     7bc:	429a      	cmp	r2, r3
     7be:	d20a      	bcs.n	7d6 <Reset_Handler+0x4a>
     7c0:	3b01      	subs	r3, #1
     7c2:	1a9b      	subs	r3, r3, r2
     7c4:	f023 0303 	bic.w	r3, r3, #3
     7c8:	3304      	adds	r3, #4
     7ca:	4413      	add	r3, r2
                *pDest++ = 0;
     7cc:	2100      	movs	r1, #0
     7ce:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     7d2:	4293      	cmp	r3, r2
     7d4:	d1fb      	bne.n	7ce <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7d6:	4b0f      	ldr	r3, [pc, #60]	; (814 <Reset_Handler+0x88>)
     7d8:	4a0f      	ldr	r2, [pc, #60]	; (818 <Reset_Handler+0x8c>)
     7da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     7de:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     7e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     7e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     7e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     7ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     7f0:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     7f4:	4b09      	ldr	r3, [pc, #36]	; (81c <Reset_Handler+0x90>)
     7f6:	4798      	blx	r3
        main();
     7f8:	4b09      	ldr	r3, [pc, #36]	; (820 <Reset_Handler+0x94>)
     7fa:	4798      	blx	r3
     7fc:	e7fe      	b.n	7fc <Reset_Handler+0x70>
     7fe:	bf00      	nop
     800:	20000000 	.word	0x20000000
     804:	0000339c 	.word	0x0000339c
     808:	200000f0 	.word	0x200000f0
     80c:	200011e8 	.word	0x200011e8
     810:	200000f0 	.word	0x200000f0
     814:	e000ed00 	.word	0xe000ed00
     818:	00000000 	.word	0x00000000
     81c:	00002aa5 	.word	0x00002aa5
     820:	00002795 	.word	0x00002795

00000824 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     824:	4a04      	ldr	r2, [pc, #16]	; (838 <AC_0_CLOCK_init+0x14>)
     826:	69d3      	ldr	r3, [r2, #28]
     828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     82c:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     82e:	2240      	movs	r2, #64	; 0x40
     830:	4b02      	ldr	r3, [pc, #8]	; (83c <AC_0_CLOCK_init+0x18>)
     832:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     836:	4770      	bx	lr
     838:	40000800 	.word	0x40000800
     83c:	40001c00 	.word	0x40001c00

00000840 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     840:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     842:	4b03      	ldr	r3, [pc, #12]	; (850 <AC_0_init+0x10>)
     844:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     846:	4903      	ldr	r1, [pc, #12]	; (854 <AC_0_init+0x14>)
     848:	4803      	ldr	r0, [pc, #12]	; (858 <AC_0_init+0x18>)
     84a:	4b04      	ldr	r3, [pc, #16]	; (85c <AC_0_init+0x1c>)
     84c:	4798      	blx	r3
     84e:	bd08      	pop	{r3, pc}
     850:	00000825 	.word	0x00000825
     854:	42002000 	.word	0x42002000
     858:	200010cc 	.word	0x200010cc
     85c:	00000fdd 	.word	0x00000fdd

00000860 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     860:	4b5d      	ldr	r3, [pc, #372]	; (9d8 <ADC_0_PORT_init+0x178>)
     862:	2204      	movs	r2, #4
     864:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     866:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     86a:	629a      	str	r2, [r3, #40]	; 0x28
     86c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     870:	629a      	str	r2, [r3, #40]	; 0x28
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     872:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     876:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     87a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     87e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     882:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     886:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     88a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     88e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     892:	2108      	movs	r1, #8
     894:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     896:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     89a:	6299      	str	r1, [r3, #40]	; 0x28
     89c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8be:	f44f 7180 	mov.w	r1, #256	; 0x100
     8c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     8ca:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     8ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8d2:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     8d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8da:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8de:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8e2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8e6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8ea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ee:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8f2:	f44f 7100 	mov.w	r1, #512	; 0x200
     8f6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     8fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     902:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     906:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     90a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     90e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     912:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     916:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     91a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     91e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     922:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     926:	2110      	movs	r1, #16
     928:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     92e:	6299      	str	r1, [r3, #40]	; 0x28
     930:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     932:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     936:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     93a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     93e:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     942:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     946:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     94a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     94e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     952:	2120      	movs	r1, #32
     954:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     956:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     95a:	6299      	str	r1, [r3, #40]	; 0x28
     95c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     95e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     962:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     966:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     96a:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     96e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     972:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     976:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     97a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     97e:	2140      	movs	r1, #64	; 0x40
     980:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     982:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     986:	6299      	str	r1, [r3, #40]	; 0x28
     988:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     98e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     992:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     996:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99a:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     99e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a6:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9aa:	2180      	movs	r1, #128	; 0x80
     9ac:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9b2:	6299      	str	r1, [r3, #40]	; 0x28
     9b4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9b6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9ce:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     9d6:	4770      	bx	lr
     9d8:	41008000 	.word	0x41008000

000009dc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     9dc:	4a04      	ldr	r2, [pc, #16]	; (9f0 <ADC_0_CLOCK_init+0x14>)
     9de:	6a13      	ldr	r3, [r2, #32]
     9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     9e4:	6213      	str	r3, [r2, #32]
     9e6:	2241      	movs	r2, #65	; 0x41
     9e8:	4b02      	ldr	r3, [pc, #8]	; (9f4 <ADC_0_CLOCK_init+0x18>)
     9ea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     9ee:	4770      	bx	lr
     9f0:	40000800 	.word	0x40000800
     9f4:	40001c00 	.word	0x40001c00

000009f8 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     9f8:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     9fa:	4b05      	ldr	r3, [pc, #20]	; (a10 <ADC_0_init+0x18>)
     9fc:	4798      	blx	r3
	ADC_0_PORT_init();
     9fe:	4b05      	ldr	r3, [pc, #20]	; (a14 <ADC_0_init+0x1c>)
     a00:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     a02:	2200      	movs	r2, #0
     a04:	4904      	ldr	r1, [pc, #16]	; (a18 <ADC_0_init+0x20>)
     a06:	4805      	ldr	r0, [pc, #20]	; (a1c <ADC_0_init+0x24>)
     a08:	4b05      	ldr	r3, [pc, #20]	; (a20 <ADC_0_init+0x28>)
     a0a:	4798      	blx	r3
     a0c:	bd08      	pop	{r3, pc}
     a0e:	bf00      	nop
     a10:	000009dd 	.word	0x000009dd
     a14:	00000861 	.word	0x00000861
     a18:	43001c00 	.word	0x43001c00
     a1c:	200010dc 	.word	0x200010dc
     a20:	0000100d 	.word	0x0000100d

00000a24 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     a24:	4a04      	ldr	r2, [pc, #16]	; (a38 <ADC_1_CLOCK_init+0x14>)
     a26:	6a13      	ldr	r3, [r2, #32]
     a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     a2c:	6213      	str	r3, [r2, #32]
     a2e:	2240      	movs	r2, #64	; 0x40
     a30:	4b02      	ldr	r3, [pc, #8]	; (a3c <ADC_1_CLOCK_init+0x18>)
     a32:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     a36:	4770      	bx	lr
     a38:	40000800 	.word	0x40000800
     a3c:	40001c00 	.word	0x40001c00

00000a40 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     a40:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <ADC_1_init+0x14>)
     a44:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     a46:	2200      	movs	r2, #0
     a48:	4903      	ldr	r1, [pc, #12]	; (a58 <ADC_1_init+0x18>)
     a4a:	4804      	ldr	r0, [pc, #16]	; (a5c <ADC_1_init+0x1c>)
     a4c:	4b04      	ldr	r3, [pc, #16]	; (a60 <ADC_1_init+0x20>)
     a4e:	4798      	blx	r3
     a50:	bd08      	pop	{r3, pc}
     a52:	bf00      	nop
     a54:	00000a25 	.word	0x00000a25
     a58:	43002000 	.word	0x43002000
     a5c:	20001194 	.word	0x20001194
     a60:	0000100d 	.word	0x0000100d

00000a64 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     a64:	4a04      	ldr	r2, [pc, #16]	; (a78 <DAC_0_CLOCK_init+0x14>)
     a66:	6a13      	ldr	r3, [r2, #32]
     a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     a6c:	6213      	str	r3, [r2, #32]
     a6e:	2240      	movs	r2, #64	; 0x40
     a70:	4b02      	ldr	r3, [pc, #8]	; (a7c <DAC_0_CLOCK_init+0x18>)
     a72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a76:	4770      	bx	lr
     a78:	40000800 	.word	0x40000800
     a7c:	40001c00 	.word	0x40001c00

00000a80 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     a80:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     a82:	4b03      	ldr	r3, [pc, #12]	; (a90 <DAC_0_init+0x10>)
     a84:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     a86:	4903      	ldr	r1, [pc, #12]	; (a94 <DAC_0_init+0x14>)
     a88:	4803      	ldr	r0, [pc, #12]	; (a98 <DAC_0_init+0x18>)
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <DAC_0_init+0x1c>)
     a8c:	4798      	blx	r3
     a8e:	bd08      	pop	{r3, pc}
     a90:	00000a65 	.word	0x00000a65
     a94:	43002400 	.word	0x43002400
     a98:	20001104 	.word	0x20001104
     a9c:	00001059 	.word	0x00001059

00000aa0 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     aa0:	b508      	push	{r3, lr}
     aa2:	2240      	movs	r2, #64	; 0x40
     aa4:	4b05      	ldr	r3, [pc, #20]	; (abc <EXTERNAL_IRQ_0_init+0x1c>)
     aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     aaa:	4a05      	ldr	r2, [pc, #20]	; (ac0 <EXTERNAL_IRQ_0_init+0x20>)
     aac:	6953      	ldr	r3, [r2, #20]
     aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     ab2:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     ab4:	4b03      	ldr	r3, [pc, #12]	; (ac4 <EXTERNAL_IRQ_0_init+0x24>)
     ab6:	4798      	blx	r3
     ab8:	bd08      	pop	{r3, pc}
     aba:	bf00      	nop
     abc:	40001c00 	.word	0x40001c00
     ac0:	40000800 	.word	0x40000800
     ac4:	00001111 	.word	0x00001111

00000ac8 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     ac8:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     aca:	4a04      	ldr	r2, [pc, #16]	; (adc <EVENT_SYSTEM_0_init+0x14>)
     acc:	6993      	ldr	r3, [r2, #24]
     ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ad2:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     ad4:	4b02      	ldr	r3, [pc, #8]	; (ae0 <EVENT_SYSTEM_0_init+0x18>)
     ad6:	4798      	blx	r3
     ad8:	bd08      	pop	{r3, pc}
     ada:	bf00      	nop
     adc:	40000800 	.word	0x40000800
     ae0:	000010cd 	.word	0x000010cd

00000ae4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     ae4:	4a02      	ldr	r2, [pc, #8]	; (af0 <FLASH_0_CLOCK_init+0xc>)
     ae6:	6913      	ldr	r3, [r2, #16]
     ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     aec:	6113      	str	r3, [r2, #16]
     aee:	4770      	bx	lr
     af0:	40000800 	.word	0x40000800

00000af4 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     af4:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     af6:	4b03      	ldr	r3, [pc, #12]	; (b04 <FLASH_0_init+0x10>)
     af8:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     afa:	4903      	ldr	r1, [pc, #12]	; (b08 <FLASH_0_init+0x14>)
     afc:	4803      	ldr	r0, [pc, #12]	; (b0c <FLASH_0_init+0x18>)
     afe:	4b04      	ldr	r3, [pc, #16]	; (b10 <FLASH_0_init+0x1c>)
     b00:	4798      	blx	r3
     b02:	bd08      	pop	{r3, pc}
     b04:	00000ae5 	.word	0x00000ae5
     b08:	41004000 	.word	0x41004000
     b0c:	20001090 	.word	0x20001090
     b10:	00001149 	.word	0x00001149

00000b14 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b14:	4b10      	ldr	r3, [pc, #64]	; (b58 <ModemData_PORT_init+0x44>)
     b16:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     b1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b26:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b2a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b2e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b36:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b3e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b42:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b46:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b4a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b4e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     b56:	4770      	bx	lr
     b58:	41008000 	.word	0x41008000

00000b5c <ModemData_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <ModemData_CLOCK_init+0x1c>)
     b5e:	2240      	movs	r2, #64	; 0x40
     b60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     b64:	224a      	movs	r2, #74	; 0x4a
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <ModemData_CLOCK_init+0x20>)
     b6c:	6993      	ldr	r3, [r2, #24]
     b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     b72:	6193      	str	r3, [r2, #24]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     b80:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     b82:	4b03      	ldr	r3, [pc, #12]	; (b90 <ModemData_init+0x10>)
     b84:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
     b86:	4b03      	ldr	r3, [pc, #12]	; (b94 <ModemData_init+0x14>)
     b88:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     b8a:	4b03      	ldr	r3, [pc, #12]	; (b98 <ModemData_init+0x18>)
     b8c:	4798      	blx	r3
     b8e:	bd08      	pop	{r3, pc}
     b90:	00000b5d 	.word	0x00000b5d
     b94:	00000371 	.word	0x00000371
     b98:	00000b15 	.word	0x00000b15

00000b9c <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9c:	4b10      	ldr	r3, [pc, #64]	; (be0 <SerialDebug_PORT_init+0x44>)
     b9e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     baa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bae:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bb2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bb6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bbe:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     bc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bc6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bca:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bce:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bd2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bd6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bda:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     bde:	4770      	bx	lr
     be0:	41008000 	.word	0x41008000

00000be4 <SerialDebug_CLOCK_init>:
     be4:	4b06      	ldr	r3, [pc, #24]	; (c00 <SerialDebug_CLOCK_init+0x1c>)
     be6:	2240      	movs	r2, #64	; 0x40
     be8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     bec:	224a      	movs	r2, #74	; 0x4a
     bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     bf2:	4a04      	ldr	r2, [pc, #16]	; (c04 <SerialDebug_CLOCK_init+0x20>)
     bf4:	6a13      	ldr	r3, [r2, #32]
     bf6:	f043 0302 	orr.w	r3, r3, #2
     bfa:	6213      	str	r3, [r2, #32]
     bfc:	4770      	bx	lr
     bfe:	bf00      	nop
     c00:	40001c00 	.word	0x40001c00
     c04:	40000800 	.word	0x40000800

00000c08 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     c08:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     c0a:	4b03      	ldr	r3, [pc, #12]	; (c18 <SerialDebug_init+0x10>)
     c0c:	4798      	blx	r3
	SerialDebugPrintInit();
     c0e:	4b03      	ldr	r3, [pc, #12]	; (c1c <SerialDebug_init+0x14>)
     c10:	4798      	blx	r3
	SerialDebug_PORT_init();
     c12:	4b03      	ldr	r3, [pc, #12]	; (c20 <SerialDebug_init+0x18>)
     c14:	4798      	blx	r3
     c16:	bd08      	pop	{r3, pc}
     c18:	00000be5 	.word	0x00000be5
     c1c:	000006bd 	.word	0x000006bd
     c20:	00000b9d 	.word	0x00000b9d

00000c24 <delay_driver_init>:
}

void delay_driver_init(void)
{
     c24:	b508      	push	{r3, lr}
	delay_init(SysTick);
     c26:	4802      	ldr	r0, [pc, #8]	; (c30 <delay_driver_init+0xc>)
     c28:	4b02      	ldr	r3, [pc, #8]	; (c34 <delay_driver_init+0x10>)
     c2a:	4798      	blx	r3
     c2c:	bd08      	pop	{r3, pc}
     c2e:	bf00      	nop
     c30:	e000e010 	.word	0xe000e010
     c34:	00001099 	.word	0x00001099

00000c38 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     c38:	4a04      	ldr	r2, [pc, #16]	; (c4c <PWM_0_CLOCK_init+0x14>)
     c3a:	6953      	ldr	r3, [r2, #20]
     c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     c40:	6153      	str	r3, [r2, #20]
     c42:	2240      	movs	r2, #64	; 0x40
     c44:	4b02      	ldr	r3, [pc, #8]	; (c50 <PWM_0_CLOCK_init+0x18>)
     c46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     c4a:	4770      	bx	lr
     c4c:	40000800 	.word	0x40000800
     c50:	40001c00 	.word	0x40001c00

00000c54 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     c54:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <PWM_0_init+0x18>)
     c58:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <PWM_0_init+0x1c>)
     c5c:	4798      	blx	r3
     c5e:	4602      	mov	r2, r0
     c60:	4904      	ldr	r1, [pc, #16]	; (c74 <PWM_0_init+0x20>)
     c62:	4805      	ldr	r0, [pc, #20]	; (c78 <PWM_0_init+0x24>)
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <PWM_0_init+0x28>)
     c66:	4798      	blx	r3
     c68:	bd08      	pop	{r3, pc}
     c6a:	bf00      	nop
     c6c:	00000c39 	.word	0x00000c39
     c70:	000026ad 	.word	0x000026ad
     c74:	40003800 	.word	0x40003800
     c78:	20001058 	.word	0x20001058
     c7c:	000011a5 	.word	0x000011a5

00000c80 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     c80:	4a04      	ldr	r2, [pc, #16]	; (c94 <PWM_1_CLOCK_init+0x14>)
     c82:	6953      	ldr	r3, [r2, #20]
     c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     c88:	6153      	str	r3, [r2, #20]
     c8a:	2240      	movs	r2, #64	; 0x40
     c8c:	4b02      	ldr	r3, [pc, #8]	; (c98 <PWM_1_CLOCK_init+0x18>)
     c8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     c92:	4770      	bx	lr
     c94:	40000800 	.word	0x40000800
     c98:	40001c00 	.word	0x40001c00

00000c9c <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     c9c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <PWM_1_init+0x18>)
     ca0:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     ca2:	4b05      	ldr	r3, [pc, #20]	; (cb8 <PWM_1_init+0x1c>)
     ca4:	4798      	blx	r3
     ca6:	4602      	mov	r2, r0
     ca8:	4904      	ldr	r1, [pc, #16]	; (cbc <PWM_1_init+0x20>)
     caa:	4805      	ldr	r0, [pc, #20]	; (cc0 <PWM_1_init+0x24>)
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <PWM_1_init+0x28>)
     cae:	4798      	blx	r3
     cb0:	bd08      	pop	{r3, pc}
     cb2:	bf00      	nop
     cb4:	00000c81 	.word	0x00000c81
     cb8:	000026ad 	.word	0x000026ad
     cbc:	40003c00 	.word	0x40003c00
     cc0:	20001178 	.word	0x20001178
     cc4:	000011a5 	.word	0x000011a5

00000cc8 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     cc8:	4a04      	ldr	r2, [pc, #16]	; (cdc <PWM_2_CLOCK_init+0x14>)
     cca:	6993      	ldr	r3, [r2, #24]
     ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     cd0:	6193      	str	r3, [r2, #24]
     cd2:	2240      	movs	r2, #64	; 0x40
     cd4:	4b02      	ldr	r3, [pc, #8]	; (ce0 <PWM_2_CLOCK_init+0x18>)
     cd6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     cda:	4770      	bx	lr
     cdc:	40000800 	.word	0x40000800
     ce0:	40001c00 	.word	0x40001c00

00000ce4 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     ce4:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <PWM_2_init+0x18>)
     ce8:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <PWM_2_init+0x1c>)
     cec:	4798      	blx	r3
     cee:	4602      	mov	r2, r0
     cf0:	4904      	ldr	r1, [pc, #16]	; (d04 <PWM_2_init+0x20>)
     cf2:	4805      	ldr	r0, [pc, #20]	; (d08 <PWM_2_init+0x24>)
     cf4:	4b05      	ldr	r3, [pc, #20]	; (d0c <PWM_2_init+0x28>)
     cf6:	4798      	blx	r3
     cf8:	bd08      	pop	{r3, pc}
     cfa:	bf00      	nop
     cfc:	00000cc9 	.word	0x00000cc9
     d00:	000026ad 	.word	0x000026ad
     d04:	4101a000 	.word	0x4101a000
     d08:	20001074 	.word	0x20001074
     d0c:	000011a5 	.word	0x000011a5

00000d10 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     d10:	4a04      	ldr	r2, [pc, #16]	; (d24 <TIMER_3_CLOCK_init+0x14>)
     d12:	6993      	ldr	r3, [r2, #24]
     d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     d18:	6193      	str	r3, [r2, #24]
     d1a:	2240      	movs	r2, #64	; 0x40
     d1c:	4b02      	ldr	r3, [pc, #8]	; (d28 <TIMER_3_CLOCK_init+0x18>)
     d1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     d22:	4770      	bx	lr
     d24:	40000800 	.word	0x40000800
     d28:	40001c00 	.word	0x40001c00

00000d2c <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     d2c:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <TIMER_3_init+0x18>)
     d30:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <TIMER_3_init+0x1c>)
     d34:	4798      	blx	r3
     d36:	4602      	mov	r2, r0
     d38:	4904      	ldr	r1, [pc, #16]	; (d4c <TIMER_3_init+0x20>)
     d3a:	4805      	ldr	r0, [pc, #20]	; (d50 <TIMER_3_init+0x24>)
     d3c:	4b05      	ldr	r3, [pc, #20]	; (d54 <TIMER_3_init+0x28>)
     d3e:	4798      	blx	r3
     d40:	bd08      	pop	{r3, pc}
     d42:	bf00      	nop
     d44:	00000d11 	.word	0x00000d11
     d48:	00002165 	.word	0x00002165
     d4c:	41016000 	.word	0x41016000
     d50:	20001198 	.word	0x20001198
     d54:	000012c1 	.word	0x000012c1

00000d58 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     d58:	4a04      	ldr	r2, [pc, #16]	; (d6c <TIMER_4_CLOCK_init+0x14>)
     d5a:	6993      	ldr	r3, [r2, #24]
     d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d60:	6193      	str	r3, [r2, #24]
     d62:	2240      	movs	r2, #64	; 0x40
     d64:	4b02      	ldr	r3, [pc, #8]	; (d70 <TIMER_4_CLOCK_init+0x18>)
     d66:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     d6a:	4770      	bx	lr
     d6c:	40000800 	.word	0x40000800
     d70:	40001c00 	.word	0x40001c00

00000d74 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     d74:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <TIMER_4_init+0x18>)
     d78:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     d7a:	4b05      	ldr	r3, [pc, #20]	; (d90 <TIMER_4_init+0x1c>)
     d7c:	4798      	blx	r3
     d7e:	4602      	mov	r2, r0
     d80:	4904      	ldr	r1, [pc, #16]	; (d94 <TIMER_4_init+0x20>)
     d82:	4805      	ldr	r0, [pc, #20]	; (d98 <TIMER_4_init+0x24>)
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <TIMER_4_init+0x28>)
     d86:	4798      	blx	r3
     d88:	bd08      	pop	{r3, pc}
     d8a:	bf00      	nop
     d8c:	00000d59 	.word	0x00000d59
     d90:	00002165 	.word	0x00002165
     d94:	41018000 	.word	0x41018000
     d98:	200010e0 	.word	0x200010e0
     d9c:	000012c1 	.word	0x000012c1

00000da0 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     da0:	4a04      	ldr	r2, [pc, #16]	; (db4 <TIMER_5_CLOCK_init+0x14>)
     da2:	69d3      	ldr	r3, [r2, #28]
     da4:	f043 0308 	orr.w	r3, r3, #8
     da8:	61d3      	str	r3, [r2, #28]
     daa:	2240      	movs	r2, #64	; 0x40
     dac:	4b02      	ldr	r3, [pc, #8]	; (db8 <TIMER_5_CLOCK_init+0x18>)
     dae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     db2:	4770      	bx	lr
     db4:	40000800 	.word	0x40000800
     db8:	40001c00 	.word	0x40001c00

00000dbc <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     dbc:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     dbe:	4b05      	ldr	r3, [pc, #20]	; (dd4 <TIMER_5_init+0x18>)
     dc0:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     dc2:	4b05      	ldr	r3, [pc, #20]	; (dd8 <TIMER_5_init+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	4602      	mov	r2, r0
     dc8:	4904      	ldr	r1, [pc, #16]	; (ddc <TIMER_5_init+0x20>)
     dca:	4805      	ldr	r0, [pc, #20]	; (de0 <TIMER_5_init+0x24>)
     dcc:	4b05      	ldr	r3, [pc, #20]	; (de4 <TIMER_5_init+0x28>)
     dce:	4798      	blx	r3
     dd0:	bd08      	pop	{r3, pc}
     dd2:	bf00      	nop
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00002165 	.word	0x00002165
     ddc:	42000c00 	.word	0x42000c00
     de0:	20001138 	.word	0x20001138
     de4:	000012c1 	.word	0x000012c1

00000de8 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     de8:	4a04      	ldr	r2, [pc, #16]	; (dfc <TIMER_6_CLOCK_init+0x14>)
     dea:	69d3      	ldr	r3, [r2, #28]
     dec:	f043 0310 	orr.w	r3, r3, #16
     df0:	61d3      	str	r3, [r2, #28]
     df2:	2240      	movs	r2, #64	; 0x40
     df4:	4b02      	ldr	r3, [pc, #8]	; (e00 <TIMER_6_CLOCK_init+0x18>)
     df6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     dfa:	4770      	bx	lr
     dfc:	40000800 	.word	0x40000800
     e00:	40001c00 	.word	0x40001c00

00000e04 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     e04:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     e06:	4b05      	ldr	r3, [pc, #20]	; (e1c <TIMER_6_init+0x18>)
     e08:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     e0a:	4b05      	ldr	r3, [pc, #20]	; (e20 <TIMER_6_init+0x1c>)
     e0c:	4798      	blx	r3
     e0e:	4602      	mov	r2, r0
     e10:	4904      	ldr	r1, [pc, #16]	; (e24 <TIMER_6_init+0x20>)
     e12:	4805      	ldr	r0, [pc, #20]	; (e28 <TIMER_6_init+0x24>)
     e14:	4b05      	ldr	r3, [pc, #20]	; (e2c <TIMER_6_init+0x28>)
     e16:	4798      	blx	r3
     e18:	bd08      	pop	{r3, pc}
     e1a:	bf00      	nop
     e1c:	00000de9 	.word	0x00000de9
     e20:	00002165 	.word	0x00002165
     e24:	42001000 	.word	0x42001000
     e28:	20001158 	.word	0x20001158
     e2c:	000012c1 	.word	0x000012c1

00000e30 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     e30:	4a04      	ldr	r2, [pc, #16]	; (e44 <TIMER_7_CLOCK_init+0x14>)
     e32:	6a13      	ldr	r3, [r2, #32]
     e34:	f043 0310 	orr.w	r3, r3, #16
     e38:	6213      	str	r3, [r2, #32]
     e3a:	2240      	movs	r2, #64	; 0x40
     e3c:	4b02      	ldr	r3, [pc, #8]	; (e48 <TIMER_7_CLOCK_init+0x18>)
     e3e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     e42:	4770      	bx	lr
     e44:	40000800 	.word	0x40000800
     e48:	40001c00 	.word	0x40001c00

00000e4c <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     e4c:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     e4e:	4b05      	ldr	r3, [pc, #20]	; (e64 <TIMER_7_init+0x18>)
     e50:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     e52:	4b05      	ldr	r3, [pc, #20]	; (e68 <TIMER_7_init+0x1c>)
     e54:	4798      	blx	r3
     e56:	4602      	mov	r2, r0
     e58:	4904      	ldr	r1, [pc, #16]	; (e6c <TIMER_7_init+0x20>)
     e5a:	4805      	ldr	r0, [pc, #20]	; (e70 <TIMER_7_init+0x24>)
     e5c:	4b05      	ldr	r3, [pc, #20]	; (e74 <TIMER_7_init+0x28>)
     e5e:	4798      	blx	r3
     e60:	bd08      	pop	{r3, pc}
     e62:	bf00      	nop
     e64:	00000e31 	.word	0x00000e31
     e68:	00002165 	.word	0x00002165
     e6c:	43001000 	.word	0x43001000
     e70:	200010ac 	.word	0x200010ac
     e74:	000012c1 	.word	0x000012c1

00000e78 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e78:	4a02      	ldr	r2, [pc, #8]	; (e84 <WDT_0_CLOCK_init+0xc>)
     e7a:	6953      	ldr	r3, [r2, #20]
     e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e80:	6153      	str	r3, [r2, #20]
     e82:	4770      	bx	lr
     e84:	40000800 	.word	0x40000800

00000e88 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     e88:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     e8a:	4b06      	ldr	r3, [pc, #24]	; (ea4 <WDT_0_init+0x1c>)
     e8c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     e8e:	2252      	movs	r2, #82	; 0x52
     e90:	4905      	ldr	r1, [pc, #20]	; (ea8 <WDT_0_init+0x20>)
     e92:	2001      	movs	r0, #1
     e94:	4b05      	ldr	r3, [pc, #20]	; (eac <WDT_0_init+0x24>)
     e96:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e98:	4805      	ldr	r0, [pc, #20]	; (eb0 <WDT_0_init+0x28>)
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <WDT_0_init+0x2c>)
     e9c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e9e:	4b06      	ldr	r3, [pc, #24]	; (eb8 <WDT_0_init+0x30>)
     ea0:	4798      	blx	r3
     ea2:	bd08      	pop	{r3, pc}
     ea4:	00000e79 	.word	0x00000e79
     ea8:	00002e20 	.word	0x00002e20
     eac:	00001305 	.word	0x00001305
     eb0:	20001100 	.word	0x20001100
     eb4:	40002000 	.word	0x40002000
     eb8:	00002729 	.word	0x00002729

00000ebc <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     ec0:	4b28      	ldr	r3, [pc, #160]	; (f64 <system_init+0xa8>)
     ec2:	4798      	blx	r3
	init_mcu();

	AC_0_init();
     ec4:	4b28      	ldr	r3, [pc, #160]	; (f68 <system_init+0xac>)
     ec6:	4798      	blx	r3

	ADC_0_init();
     ec8:	4b28      	ldr	r3, [pc, #160]	; (f6c <system_init+0xb0>)
     eca:	4798      	blx	r3

	ADC_1_init();
     ecc:	4b28      	ldr	r3, [pc, #160]	; (f70 <system_init+0xb4>)
     ece:	4798      	blx	r3

	DAC_0_init();
     ed0:	4b28      	ldr	r3, [pc, #160]	; (f74 <system_init+0xb8>)
     ed2:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     ed4:	4b28      	ldr	r3, [pc, #160]	; (f78 <system_init+0xbc>)
     ed6:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     ed8:	4b28      	ldr	r3, [pc, #160]	; (f7c <system_init+0xc0>)
     eda:	4798      	blx	r3

	FLASH_0_init();
     edc:	4b28      	ldr	r3, [pc, #160]	; (f80 <system_init+0xc4>)
     ede:	4798      	blx	r3

	SerialDebug_init();
     ee0:	4b28      	ldr	r3, [pc, #160]	; (f84 <system_init+0xc8>)
     ee2:	4798      	blx	r3
	
	ModemData_init();
     ee4:	4b28      	ldr	r3, [pc, #160]	; (f88 <system_init+0xcc>)
     ee6:	4798      	blx	r3

	delay_driver_init();
     ee8:	4b28      	ldr	r3, [pc, #160]	; (f8c <system_init+0xd0>)
     eea:	4798      	blx	r3

	PWM_0_init();
     eec:	4b28      	ldr	r3, [pc, #160]	; (f90 <system_init+0xd4>)
     eee:	4798      	blx	r3

	PWM_1_init();
     ef0:	4b28      	ldr	r3, [pc, #160]	; (f94 <system_init+0xd8>)
     ef2:	4798      	blx	r3

	PWM_2_init();
     ef4:	4b28      	ldr	r3, [pc, #160]	; (f98 <system_init+0xdc>)
     ef6:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     ef8:	4c28      	ldr	r4, [pc, #160]	; (f9c <system_init+0xe0>)
     efa:	69a3      	ldr	r3, [r4, #24]
     efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f00:	61a3      	str	r3, [r4, #24]
     f02:	4f27      	ldr	r7, [pc, #156]	; (fa0 <system_init+0xe4>)
     f04:	f04f 0840 	mov.w	r8, #64	; 0x40
     f08:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     f0c:	4e25      	ldr	r6, [pc, #148]	; (fa4 <system_init+0xe8>)
     f0e:	47b0      	blx	r6
     f10:	4602      	mov	r2, r0
     f12:	4925      	ldr	r1, [pc, #148]	; (fa8 <system_init+0xec>)
     f14:	4825      	ldr	r0, [pc, #148]	; (fac <system_init+0xf0>)
     f16:	4d26      	ldr	r5, [pc, #152]	; (fb0 <system_init+0xf4>)
     f18:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     f1a:	69e3      	ldr	r3, [r4, #28]
     f1c:	f043 0320 	orr.w	r3, r3, #32
     f20:	61e3      	str	r3, [r4, #28]
     f22:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     f26:	47b0      	blx	r6
     f28:	4602      	mov	r2, r0
     f2a:	4922      	ldr	r1, [pc, #136]	; (fb4 <system_init+0xf8>)
     f2c:	4822      	ldr	r0, [pc, #136]	; (fb8 <system_init+0xfc>)
     f2e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     f30:	69e3      	ldr	r3, [r4, #28]
     f32:	ea43 0308 	orr.w	r3, r3, r8
     f36:	61e3      	str	r3, [r4, #28]
     f38:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     f3c:	47b0      	blx	r6
     f3e:	4602      	mov	r2, r0
     f40:	491e      	ldr	r1, [pc, #120]	; (fbc <system_init+0x100>)
     f42:	481f      	ldr	r0, [pc, #124]	; (fc0 <system_init+0x104>)
     f44:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
     f46:	4b1f      	ldr	r3, [pc, #124]	; (fc4 <system_init+0x108>)
     f48:	4798      	blx	r3

	TIMER_4_init();
     f4a:	4b1f      	ldr	r3, [pc, #124]	; (fc8 <system_init+0x10c>)
     f4c:	4798      	blx	r3

	TIMER_5_init();
     f4e:	4b1f      	ldr	r3, [pc, #124]	; (fcc <system_init+0x110>)
     f50:	4798      	blx	r3

	TIMER_6_init();
     f52:	4b1f      	ldr	r3, [pc, #124]	; (fd0 <system_init+0x114>)
     f54:	4798      	blx	r3

	TIMER_7_init();
     f56:	4b1f      	ldr	r3, [pc, #124]	; (fd4 <system_init+0x118>)
     f58:	4798      	blx	r3

	WDT_0_init();
     f5a:	4b1f      	ldr	r3, [pc, #124]	; (fd8 <system_init+0x11c>)
     f5c:	4798      	blx	r3
     f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f62:	bf00      	nop
     f64:	0000162d 	.word	0x0000162d
     f68:	00000841 	.word	0x00000841
     f6c:	000009f9 	.word	0x000009f9
     f70:	00000a41 	.word	0x00000a41
     f74:	00000a81 	.word	0x00000a81
     f78:	00000aa1 	.word	0x00000aa1
     f7c:	00000ac9 	.word	0x00000ac9
     f80:	00000af5 	.word	0x00000af5
     f84:	00000c09 	.word	0x00000c09
     f88:	00000b81 	.word	0x00000b81
     f8c:	00000c25 	.word	0x00000c25
     f90:	00000c55 	.word	0x00000c55
     f94:	00000c9d 	.word	0x00000c9d
     f98:	00000ce5 	.word	0x00000ce5
     f9c:	40000800 	.word	0x40000800
     fa0:	40001c00 	.word	0x40001c00
     fa4:	000026a5 	.word	0x000026a5
     fa8:	4101c000 	.word	0x4101c000
     fac:	200011b8 	.word	0x200011b8
     fb0:	000012c1 	.word	0x000012c1
     fb4:	42001400 	.word	0x42001400
     fb8:	20001118 	.word	0x20001118
     fbc:	42001800 	.word	0x42001800
     fc0:	20001038 	.word	0x20001038
     fc4:	00000d2d 	.word	0x00000d2d
     fc8:	00000d75 	.word	0x00000d75
     fcc:	00000dbd 	.word	0x00000dbd
     fd0:	00000e05 	.word	0x00000e05
     fd4:	00000e4d 	.word	0x00000e4d
     fd8:	00000e89 	.word	0x00000e89

00000fdc <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     fdc:	b538      	push	{r3, r4, r5, lr}
     fde:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     fe0:	4605      	mov	r5, r0
     fe2:	b158      	cbz	r0, ffc <ac_sync_init+0x20>
     fe4:	1c08      	adds	r0, r1, #0
     fe6:	bf18      	it	ne
     fe8:	2001      	movne	r0, #1
     fea:	223b      	movs	r2, #59	; 0x3b
     fec:	4904      	ldr	r1, [pc, #16]	; (1000 <ac_sync_init+0x24>)
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <ac_sync_init+0x28>)
     ff0:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     ff2:	4621      	mov	r1, r4
     ff4:	4628      	mov	r0, r5
     ff6:	4b04      	ldr	r3, [pc, #16]	; (1008 <ac_sync_init+0x2c>)
     ff8:	4798      	blx	r3
}
     ffa:	bd38      	pop	{r3, r4, r5, pc}
     ffc:	2000      	movs	r0, #0
     ffe:	e7f4      	b.n	fea <ac_sync_init+0xe>
    1000:	00002e3c 	.word	0x00002e3c
    1004:	00001305 	.word	0x00001305
    1008:	000014f5 	.word	0x000014f5

0000100c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    100c:	b538      	push	{r3, r4, r5, lr}
    100e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1010:	4605      	mov	r5, r0
    1012:	b158      	cbz	r0, 102c <adc_sync_init+0x20>
    1014:	1c08      	adds	r0, r1, #0
    1016:	bf18      	it	ne
    1018:	2001      	movne	r0, #1
    101a:	2243      	movs	r2, #67	; 0x43
    101c:	4904      	ldr	r1, [pc, #16]	; (1030 <adc_sync_init+0x24>)
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <adc_sync_init+0x28>)
    1020:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1022:	4621      	mov	r1, r4
    1024:	4628      	mov	r0, r5
    1026:	4b04      	ldr	r3, [pc, #16]	; (1038 <adc_sync_init+0x2c>)
    1028:	4798      	blx	r3
}
    102a:	bd38      	pop	{r3, r4, r5, pc}
    102c:	2000      	movs	r0, #0
    102e:	e7f4      	b.n	101a <adc_sync_init+0xe>
    1030:	00002e58 	.word	0x00002e58
    1034:	00001305 	.word	0x00001305
    1038:	000015cd 	.word	0x000015cd

0000103c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    103c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1040:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1042:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1044:	f3bf 8f5f 	dmb	sy
    1048:	4770      	bx	lr

0000104a <atomic_leave_critical>:
    104a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    104e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1050:	f383 8810 	msr	PRIMASK, r3
    1054:	4770      	bx	lr
	...

00001058 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1058:	b538      	push	{r3, r4, r5, lr}
    105a:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    105c:	4604      	mov	r4, r0
    105e:	b198      	cbz	r0, 1088 <dac_sync_init+0x30>
    1060:	1c08      	adds	r0, r1, #0
    1062:	bf18      	it	ne
    1064:	2001      	movne	r0, #1
    1066:	223c      	movs	r2, #60	; 0x3c
    1068:	4908      	ldr	r1, [pc, #32]	; (108c <dac_sync_init+0x34>)
    106a:	4b09      	ldr	r3, [pc, #36]	; (1090 <dac_sync_init+0x38>)
    106c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    106e:	4629      	mov	r1, r5
    1070:	4620      	mov	r0, r4
    1072:	4b08      	ldr	r3, [pc, #32]	; (1094 <dac_sync_init+0x3c>)
    1074:	4798      	blx	r3
	if (rc) {
    1076:	4602      	mov	r2, r0
    1078:	b920      	cbnz	r0, 1084 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    107a:	2300      	movs	r3, #0
    107c:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    107e:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1080:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1082:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1084:	4610      	mov	r0, r2
    1086:	bd38      	pop	{r3, r4, r5, pc}
    1088:	2000      	movs	r0, #0
    108a:	e7ec      	b.n	1066 <dac_sync_init+0xe>
    108c:	00002e74 	.word	0x00002e74
    1090:	00001305 	.word	0x00001305
    1094:	000016e5 	.word	0x000016e5

00001098 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1098:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    109a:	4b02      	ldr	r3, [pc, #8]	; (10a4 <delay_init+0xc>)
    109c:	6018      	str	r0, [r3, #0]
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <delay_init+0x10>)
    10a0:	4798      	blx	r3
    10a2:	bd08      	pop	{r3, pc}
    10a4:	20000118 	.word	0x20000118
    10a8:	00001e61 	.word	0x00001e61

000010ac <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    10ac:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    10ae:	4b04      	ldr	r3, [pc, #16]	; (10c0 <delay_ms+0x14>)
    10b0:	681c      	ldr	r4, [r3, #0]
    10b2:	4b04      	ldr	r3, [pc, #16]	; (10c4 <delay_ms+0x18>)
    10b4:	4798      	blx	r3
    10b6:	4601      	mov	r1, r0
    10b8:	4620      	mov	r0, r4
    10ba:	4b03      	ldr	r3, [pc, #12]	; (10c8 <delay_ms+0x1c>)
    10bc:	4798      	blx	r3
    10be:	bd10      	pop	{r4, pc}
    10c0:	20000118 	.word	0x20000118
    10c4:	00001621 	.word	0x00001621
    10c8:	00001e75 	.word	0x00001e75

000010cc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    10cc:	b508      	push	{r3, lr}
	return _event_system_init();
    10ce:	4b01      	ldr	r3, [pc, #4]	; (10d4 <event_system_init+0x8>)
    10d0:	4798      	blx	r3
}
    10d2:	bd08      	pop	{r3, pc}
    10d4:	00001921 	.word	0x00001921

000010d8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    10da:	4b0c      	ldr	r3, [pc, #48]	; (110c <process_ext_irq+0x34>)
    10dc:	685c      	ldr	r4, [r3, #4]
    10de:	42a0      	cmp	r0, r4
    10e0:	d00e      	beq.n	1100 <process_ext_irq+0x28>
    10e2:	2301      	movs	r3, #1
    10e4:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    10e6:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    10e8:	25ff      	movs	r5, #255	; 0xff
    10ea:	e003      	b.n	10f4 <process_ext_irq+0x1c>
    10ec:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    10ee:	185a      	adds	r2, r3, r1
    10f0:	0852      	lsrs	r2, r2, #1
    10f2:	d104      	bne.n	10fe <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    10f4:	42a0      	cmp	r0, r4
    10f6:	d9f9      	bls.n	10ec <process_ext_irq+0x14>
	while (upper >= lower) {
    10f8:	b13b      	cbz	r3, 110a <process_ext_irq+0x32>
			lower = middle + 1;
    10fa:	4631      	mov	r1, r6
    10fc:	e7f7      	b.n	10ee <process_ext_irq+0x16>
    10fe:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1100:	4b02      	ldr	r3, [pc, #8]	; (110c <process_ext_irq+0x34>)
    1102:	681b      	ldr	r3, [r3, #0]
    1104:	b10b      	cbz	r3, 110a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1106:	4798      	blx	r3
    1108:	bd70      	pop	{r4, r5, r6, pc}
    110a:	bd70      	pop	{r4, r5, r6, pc}
    110c:	2000011c 	.word	0x2000011c

00001110 <ext_irq_init>:
{
    1110:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1112:	4b05      	ldr	r3, [pc, #20]	; (1128 <ext_irq_init+0x18>)
    1114:	f04f 32ff 	mov.w	r2, #4294967295
    1118:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    111a:	2200      	movs	r2, #0
    111c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    111e:	4803      	ldr	r0, [pc, #12]	; (112c <ext_irq_init+0x1c>)
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <ext_irq_init+0x20>)
    1122:	4798      	blx	r3
}
    1124:	bd08      	pop	{r3, pc}
    1126:	bf00      	nop
    1128:	2000011c 	.word	0x2000011c
    112c:	000010d9 	.word	0x000010d9
    1130:	000018a1 	.word	0x000018a1

00001134 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1134:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1136:	6943      	ldr	r3, [r0, #20]
    1138:	b103      	cbz	r3, 113c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    113a:	4798      	blx	r3
    113c:	bd08      	pop	{r3, pc}

0000113e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    113e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1140:	6983      	ldr	r3, [r0, #24]
    1142:	b103      	cbz	r3, 1146 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1144:	4798      	blx	r3
    1146:	bd08      	pop	{r3, pc}

00001148 <flash_init>:
{
    1148:	b538      	push	{r3, r4, r5, lr}
    114a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    114c:	4604      	mov	r4, r0
    114e:	b190      	cbz	r0, 1176 <flash_init+0x2e>
    1150:	1c08      	adds	r0, r1, #0
    1152:	bf18      	it	ne
    1154:	2001      	movne	r0, #1
    1156:	2242      	movs	r2, #66	; 0x42
    1158:	4908      	ldr	r1, [pc, #32]	; (117c <flash_init+0x34>)
    115a:	4b09      	ldr	r3, [pc, #36]	; (1180 <flash_init+0x38>)
    115c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    115e:	4629      	mov	r1, r5
    1160:	4620      	mov	r0, r4
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <flash_init+0x3c>)
    1164:	4798      	blx	r3
	if (rc) {
    1166:	4603      	mov	r3, r0
    1168:	b918      	cbnz	r0, 1172 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    116a:	4a07      	ldr	r2, [pc, #28]	; (1188 <flash_init+0x40>)
    116c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    116e:	4a07      	ldr	r2, [pc, #28]	; (118c <flash_init+0x44>)
    1170:	6062      	str	r2, [r4, #4]
}
    1172:	4618      	mov	r0, r3
    1174:	bd38      	pop	{r3, r4, r5, pc}
    1176:	2000      	movs	r0, #0
    1178:	e7ed      	b.n	1156 <flash_init+0xe>
    117a:	bf00      	nop
    117c:	00002e90 	.word	0x00002e90
    1180:	00001305 	.word	0x00001305
    1184:	00001a5d 	.word	0x00001a5d
    1188:	00001135 	.word	0x00001135
    118c:	0000113f 	.word	0x0000113f

00001190 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1190:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1192:	6943      	ldr	r3, [r0, #20]
    1194:	b103      	cbz	r3, 1198 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1196:	4798      	blx	r3
    1198:	bd08      	pop	{r3, pc}

0000119a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    119a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    119c:	6983      	ldr	r3, [r0, #24]
    119e:	b103      	cbz	r3, 11a2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    11a0:	4798      	blx	r3
    11a2:	bd08      	pop	{r3, pc}

000011a4 <pwm_init>:
{
    11a4:	b538      	push	{r3, r4, r5, lr}
    11a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11a8:	4604      	mov	r4, r0
    11aa:	b180      	cbz	r0, 11ce <pwm_init+0x2a>
    11ac:	1c08      	adds	r0, r1, #0
    11ae:	bf18      	it	ne
    11b0:	2001      	movne	r0, #1
    11b2:	223d      	movs	r2, #61	; 0x3d
    11b4:	4907      	ldr	r1, [pc, #28]	; (11d4 <pwm_init+0x30>)
    11b6:	4b08      	ldr	r3, [pc, #32]	; (11d8 <pwm_init+0x34>)
    11b8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    11ba:	4629      	mov	r1, r5
    11bc:	4620      	mov	r0, r4
    11be:	4b07      	ldr	r3, [pc, #28]	; (11dc <pwm_init+0x38>)
    11c0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    11c2:	4b07      	ldr	r3, [pc, #28]	; (11e0 <pwm_init+0x3c>)
    11c4:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    11c6:	4b07      	ldr	r3, [pc, #28]	; (11e4 <pwm_init+0x40>)
    11c8:	6063      	str	r3, [r4, #4]
}
    11ca:	2000      	movs	r0, #0
    11cc:	bd38      	pop	{r3, r4, r5, pc}
    11ce:	2000      	movs	r0, #0
    11d0:	e7ef      	b.n	11b2 <pwm_init+0xe>
    11d2:	bf00      	nop
    11d4:	00002ea8 	.word	0x00002ea8
    11d8:	00001305 	.word	0x00001305
    11dc:	0000258d 	.word	0x0000258d
    11e0:	00001191 	.word	0x00001191
    11e4:	0000119b 	.word	0x0000119b

000011e8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    11ec:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    11ee:	b12f      	cbz	r7, 11fc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    11f0:	688d      	ldr	r5, [r1, #8]
    11f2:	463c      	mov	r4, r7
    11f4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    11f6:	f1c2 0e01 	rsb	lr, r2, #1
    11fa:	e00b      	b.n	1214 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    11fc:	4b0e      	ldr	r3, [pc, #56]	; (1238 <timer_add_timer_task+0x50>)
    11fe:	4798      	blx	r3
		return;
    1200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1202:	4473      	add	r3, lr
    1204:	68a0      	ldr	r0, [r4, #8]
    1206:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1208:	42ab      	cmp	r3, r5
    120a:	d20a      	bcs.n	1222 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    120c:	6823      	ldr	r3, [r4, #0]
    120e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1210:	b153      	cbz	r3, 1228 <timer_add_timer_task+0x40>
    1212:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1214:	6863      	ldr	r3, [r4, #4]
    1216:	4293      	cmp	r3, r2
    1218:	d8f3      	bhi.n	1202 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    121a:	68a0      	ldr	r0, [r4, #8]
    121c:	4403      	add	r3, r0
    121e:	1a9b      	subs	r3, r3, r2
    1220:	e7f2      	b.n	1208 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1222:	42a7      	cmp	r7, r4
    1224:	d004      	beq.n	1230 <timer_add_timer_task+0x48>
    1226:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1228:	4620      	mov	r0, r4
    122a:	4b04      	ldr	r3, [pc, #16]	; (123c <timer_add_timer_task+0x54>)
    122c:	4798      	blx	r3
    122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1230:	4660      	mov	r0, ip
    1232:	4b01      	ldr	r3, [pc, #4]	; (1238 <timer_add_timer_task+0x50>)
    1234:	4798      	blx	r3
    1236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1238:	0000132d 	.word	0x0000132d
    123c:	00001359 	.word	0x00001359

00001240 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1244:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1246:	6907      	ldr	r7, [r0, #16]
    1248:	3701      	adds	r7, #1
    124a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    124c:	7e03      	ldrb	r3, [r0, #24]
    124e:	f013 0f01 	tst.w	r3, #1
    1252:	d113      	bne.n	127c <timer_process_counted+0x3c>
    1254:	7e03      	ldrb	r3, [r0, #24]
    1256:	f013 0f02 	tst.w	r3, #2
    125a:	d10f      	bne.n	127c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    125c:	b354      	cbz	r4, 12b4 <timer_process_counted+0x74>
    125e:	6863      	ldr	r3, [r4, #4]
    1260:	1afb      	subs	r3, r7, r3
    1262:	68a2      	ldr	r2, [r4, #8]
    1264:	4293      	cmp	r3, r2
    1266:	d307      	bcc.n	1278 <timer_process_counted+0x38>
    1268:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    126a:	f100 0814 	add.w	r8, r0, #20
    126e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 12b8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1272:	f8df a048 	ldr.w	sl, [pc, #72]	; 12bc <timer_process_counted+0x7c>
    1276:	e012      	b.n	129e <timer_process_counted+0x5e>
    1278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    127c:	7e03      	ldrb	r3, [r0, #24]
    127e:	f043 0302 	orr.w	r3, r3, #2
    1282:	7603      	strb	r3, [r0, #24]
		return;
    1284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1288:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    128a:	68e3      	ldr	r3, [r4, #12]
    128c:	4620      	mov	r0, r4
    128e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1290:	b185      	cbz	r5, 12b4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1292:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1294:	686b      	ldr	r3, [r5, #4]
    1296:	1afb      	subs	r3, r7, r3
    1298:	68aa      	ldr	r2, [r5, #8]
    129a:	4293      	cmp	r3, r2
    129c:	d30a      	bcc.n	12b4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    129e:	4640      	mov	r0, r8
    12a0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12a2:	7c23      	ldrb	r3, [r4, #16]
    12a4:	2b01      	cmp	r3, #1
    12a6:	d1ef      	bne.n	1288 <timer_process_counted+0x48>
			tmp->time_label = time;
    12a8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12aa:	463a      	mov	r2, r7
    12ac:	4621      	mov	r1, r4
    12ae:	4640      	mov	r0, r8
    12b0:	47d0      	blx	sl
    12b2:	e7e9      	b.n	1288 <timer_process_counted+0x48>
    12b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12b8:	00001361 	.word	0x00001361
    12bc:	000011e9 	.word	0x000011e9

000012c0 <timer_init>:
{
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	460e      	mov	r6, r1
    12c4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    12c6:	4604      	mov	r4, r0
    12c8:	b190      	cbz	r0, 12f0 <timer_init+0x30>
    12ca:	b199      	cbz	r1, 12f4 <timer_init+0x34>
    12cc:	1c10      	adds	r0, r2, #0
    12ce:	bf18      	it	ne
    12d0:	2001      	movne	r0, #1
    12d2:	2245      	movs	r2, #69	; 0x45
    12d4:	4908      	ldr	r1, [pc, #32]	; (12f8 <timer_init+0x38>)
    12d6:	4b09      	ldr	r3, [pc, #36]	; (12fc <timer_init+0x3c>)
    12d8:	4798      	blx	r3
	descr->func = func;
    12da:	4620      	mov	r0, r4
    12dc:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    12e0:	682b      	ldr	r3, [r5, #0]
    12e2:	4631      	mov	r1, r6
    12e4:	4798      	blx	r3
	descr->time                           = 0;
    12e6:	2000      	movs	r0, #0
    12e8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <timer_init+0x40>)
    12ec:	6063      	str	r3, [r4, #4]
}
    12ee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    12f0:	2000      	movs	r0, #0
    12f2:	e7ee      	b.n	12d2 <timer_init+0x12>
    12f4:	2000      	movs	r0, #0
    12f6:	e7ec      	b.n	12d2 <timer_init+0x12>
    12f8:	00002ec0 	.word	0x00002ec0
    12fc:	00001305 	.word	0x00001305
    1300:	00001241 	.word	0x00001241

00001304 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1304:	b900      	cbnz	r0, 1308 <assert+0x4>
		__asm("BKPT #0");
    1306:	be00      	bkpt	0x0000
    1308:	4770      	bx	lr

0000130a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    130a:	6803      	ldr	r3, [r0, #0]
    130c:	b14b      	cbz	r3, 1322 <is_list_element+0x18>
		if (it == element) {
    130e:	428b      	cmp	r3, r1
    1310:	d009      	beq.n	1326 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	b11b      	cbz	r3, 131e <is_list_element+0x14>
		if (it == element) {
    1316:	4299      	cmp	r1, r3
    1318:	d1fb      	bne.n	1312 <is_list_element+0x8>
			return true;
    131a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    131c:	4770      	bx	lr
	return false;
    131e:	2000      	movs	r0, #0
    1320:	4770      	bx	lr
    1322:	2000      	movs	r0, #0
    1324:	4770      	bx	lr
			return true;
    1326:	2001      	movs	r0, #1
    1328:	4770      	bx	lr
	...

0000132c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    132c:	b538      	push	{r3, r4, r5, lr}
    132e:	4604      	mov	r4, r0
    1330:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1332:	4b06      	ldr	r3, [pc, #24]	; (134c <list_insert_as_head+0x20>)
    1334:	4798      	blx	r3
    1336:	f080 0001 	eor.w	r0, r0, #1
    133a:	2243      	movs	r2, #67	; 0x43
    133c:	4904      	ldr	r1, [pc, #16]	; (1350 <list_insert_as_head+0x24>)
    133e:	b2c0      	uxtb	r0, r0
    1340:	4b04      	ldr	r3, [pc, #16]	; (1354 <list_insert_as_head+0x28>)
    1342:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1344:	6823      	ldr	r3, [r4, #0]
    1346:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1348:	6025      	str	r5, [r4, #0]
    134a:	bd38      	pop	{r3, r4, r5, pc}
    134c:	0000130b 	.word	0x0000130b
    1350:	00002ed8 	.word	0x00002ed8
    1354:	00001305 	.word	0x00001305

00001358 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1358:	6803      	ldr	r3, [r0, #0]
    135a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    135c:	6001      	str	r1, [r0, #0]
    135e:	4770      	bx	lr

00001360 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1360:	6803      	ldr	r3, [r0, #0]
    1362:	b10b      	cbz	r3, 1368 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1364:	681a      	ldr	r2, [r3, #0]
    1366:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1368:	4618      	mov	r0, r3
    136a:	4770      	bx	lr

0000136c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    136c:	b570      	push	{r4, r5, r6, lr}
    136e:	460e      	mov	r6, r1
    1370:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1372:	4604      	mov	r4, r0
    1374:	b178      	cbz	r0, 1396 <ringbuffer_init+0x2a>
    1376:	b181      	cbz	r1, 139a <ringbuffer_init+0x2e>
    1378:	b1a2      	cbz	r2, 13a4 <ringbuffer_init+0x38>
    137a:	2001      	movs	r0, #1
    137c:	2232      	movs	r2, #50	; 0x32
    137e:	490d      	ldr	r1, [pc, #52]	; (13b4 <ringbuffer_init+0x48>)
    1380:	4b0d      	ldr	r3, [pc, #52]	; (13b8 <ringbuffer_init+0x4c>)
    1382:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1384:	1e6b      	subs	r3, r5, #1
    1386:	421d      	tst	r5, r3
    1388:	d109      	bne.n	139e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    138a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    138c:	2000      	movs	r0, #0
    138e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1390:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1392:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1394:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1396:	2000      	movs	r0, #0
    1398:	e7f0      	b.n	137c <ringbuffer_init+0x10>
    139a:	2000      	movs	r0, #0
    139c:	e7ee      	b.n	137c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    139e:	f06f 000c 	mvn.w	r0, #12
    13a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    13a4:	2232      	movs	r2, #50	; 0x32
    13a6:	4903      	ldr	r1, [pc, #12]	; (13b4 <ringbuffer_init+0x48>)
    13a8:	2000      	movs	r0, #0
    13aa:	4b03      	ldr	r3, [pc, #12]	; (13b8 <ringbuffer_init+0x4c>)
    13ac:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    13ae:	1e6b      	subs	r3, r5, #1
    13b0:	e7eb      	b.n	138a <ringbuffer_init+0x1e>
    13b2:	bf00      	nop
    13b4:	00002ef8 	.word	0x00002ef8
    13b8:	00001305 	.word	0x00001305

000013bc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    13bc:	b538      	push	{r3, r4, r5, lr}
    13be:	460d      	mov	r5, r1
	ASSERT(rb && data);
    13c0:	4604      	mov	r4, r0
    13c2:	b1a0      	cbz	r0, 13ee <ringbuffer_get+0x32>
    13c4:	1c08      	adds	r0, r1, #0
    13c6:	bf18      	it	ne
    13c8:	2001      	movne	r0, #1
    13ca:	224a      	movs	r2, #74	; 0x4a
    13cc:	490a      	ldr	r1, [pc, #40]	; (13f8 <ringbuffer_get+0x3c>)
    13ce:	4b0b      	ldr	r3, [pc, #44]	; (13fc <ringbuffer_get+0x40>)
    13d0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    13d2:	68a3      	ldr	r3, [r4, #8]
    13d4:	68e2      	ldr	r2, [r4, #12]
    13d6:	429a      	cmp	r2, r3
    13d8:	d00b      	beq.n	13f2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    13da:	6862      	ldr	r2, [r4, #4]
    13dc:	4013      	ands	r3, r2
    13de:	6822      	ldr	r2, [r4, #0]
    13e0:	5cd3      	ldrb	r3, [r2, r3]
    13e2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    13e4:	68a3      	ldr	r3, [r4, #8]
    13e6:	3301      	adds	r3, #1
    13e8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    13ea:	2000      	movs	r0, #0
    13ec:	bd38      	pop	{r3, r4, r5, pc}
    13ee:	2000      	movs	r0, #0
    13f0:	e7eb      	b.n	13ca <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    13f2:	f06f 0009 	mvn.w	r0, #9
}
    13f6:	bd38      	pop	{r3, r4, r5, pc}
    13f8:	00002ef8 	.word	0x00002ef8
    13fc:	00001305 	.word	0x00001305

00001400 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1400:	b538      	push	{r3, r4, r5, lr}
    1402:	460d      	mov	r5, r1
	ASSERT(rb);
    1404:	4604      	mov	r4, r0
    1406:	225b      	movs	r2, #91	; 0x5b
    1408:	490b      	ldr	r1, [pc, #44]	; (1438 <ringbuffer_put+0x38>)
    140a:	3000      	adds	r0, #0
    140c:	bf18      	it	ne
    140e:	2001      	movne	r0, #1
    1410:	4b0a      	ldr	r3, [pc, #40]	; (143c <ringbuffer_put+0x3c>)
    1412:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1414:	68e3      	ldr	r3, [r4, #12]
    1416:	6862      	ldr	r2, [r4, #4]
    1418:	4013      	ands	r3, r2
    141a:	6822      	ldr	r2, [r4, #0]
    141c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    141e:	68e3      	ldr	r3, [r4, #12]
    1420:	6861      	ldr	r1, [r4, #4]
    1422:	68a2      	ldr	r2, [r4, #8]
    1424:	1a9a      	subs	r2, r3, r2
    1426:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1428:	bf84      	itt	hi
    142a:	1a59      	subhi	r1, r3, r1
    142c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    142e:	3301      	adds	r3, #1
    1430:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1432:	2000      	movs	r0, #0
    1434:	bd38      	pop	{r3, r4, r5, pc}
    1436:	bf00      	nop
    1438:	00002ef8 	.word	0x00002ef8
    143c:	00001305 	.word	0x00001305

00001440 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1440:	b510      	push	{r4, lr}
	ASSERT(rb);
    1442:	4604      	mov	r4, r0
    1444:	2271      	movs	r2, #113	; 0x71
    1446:	4905      	ldr	r1, [pc, #20]	; (145c <ringbuffer_num+0x1c>)
    1448:	3000      	adds	r0, #0
    144a:	bf18      	it	ne
    144c:	2001      	movne	r0, #1
    144e:	4b04      	ldr	r3, [pc, #16]	; (1460 <ringbuffer_num+0x20>)
    1450:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1452:	68e0      	ldr	r0, [r4, #12]
    1454:	68a3      	ldr	r3, [r4, #8]
}
    1456:	1ac0      	subs	r0, r0, r3
    1458:	bd10      	pop	{r4, pc}
    145a:	bf00      	nop
    145c:	00002ef8 	.word	0x00002ef8
    1460:	00001305 	.word	0x00001305

00001464 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1464:	b510      	push	{r4, lr}
	ASSERT(rb);
    1466:	4604      	mov	r4, r0
    1468:	227b      	movs	r2, #123	; 0x7b
    146a:	4905      	ldr	r1, [pc, #20]	; (1480 <ringbuffer_flush+0x1c>)
    146c:	3000      	adds	r0, #0
    146e:	bf18      	it	ne
    1470:	2001      	movne	r0, #1
    1472:	4b04      	ldr	r3, [pc, #16]	; (1484 <ringbuffer_flush+0x20>)
    1474:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1476:	68e3      	ldr	r3, [r4, #12]
    1478:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    147a:	2000      	movs	r0, #0
    147c:	bd10      	pop	{r4, pc}
    147e:	bf00      	nop
    1480:	00002ef8 	.word	0x00002ef8
    1484:	00001305 	.word	0x00001305

00001488 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1488:	b510      	push	{r4, lr}
    148a:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    148c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1490:	4915      	ldr	r1, [pc, #84]	; (14e8 <_ac_init+0x60>)
    1492:	4816      	ldr	r0, [pc, #88]	; (14ec <_ac_init+0x64>)
    1494:	4284      	cmp	r4, r0
    1496:	bf14      	ite	ne
    1498:	2000      	movne	r0, #0
    149a:	2001      	moveq	r0, #1
    149c:	4b14      	ldr	r3, [pc, #80]	; (14f0 <_ac_init+0x68>)
    149e:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    14a0:	6a23      	ldr	r3, [r4, #32]
    14a2:	f013 0f01 	tst.w	r3, #1
    14a6:	d1fb      	bne.n	14a0 <_ac_init+0x18>
    14a8:	6a23      	ldr	r3, [r4, #32]
    14aa:	f013 0f03 	tst.w	r3, #3
    14ae:	d1fb      	bne.n	14a8 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    14b0:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    14b2:	f013 0f02 	tst.w	r3, #2
    14b6:	d114      	bne.n	14e2 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    14b8:	6a23      	ldr	r3, [r4, #32]
    14ba:	f013 0f01 	tst.w	r3, #1
    14be:	d1fb      	bne.n	14b8 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    14c0:	7823      	ldrb	r3, [r4, #0]
    14c2:	f043 0301 	orr.w	r3, r3, #1
    14c6:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    14c8:	6a23      	ldr	r3, [r4, #32]
    14ca:	f013 0f01 	tst.w	r3, #1
    14ce:	d1fb      	bne.n	14c8 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    14d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    14d4:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    14d6:	2000      	movs	r0, #0
    14d8:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    14da:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    14dc:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    14de:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    14e0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    14e2:	f06f 0010 	mvn.w	r0, #16
}
    14e6:	bd10      	pop	{r4, pc}
    14e8:	00002f1c 	.word	0x00002f1c
    14ec:	42002000 	.word	0x42002000
    14f0:	00001305 	.word	0x00001305

000014f4 <_ac_sync_init>:
{
    14f4:	b538      	push	{r3, r4, r5, lr}
    14f6:	460c      	mov	r4, r1
	ASSERT(device);
    14f8:	4605      	mov	r5, r0
    14fa:	226c      	movs	r2, #108	; 0x6c
    14fc:	4905      	ldr	r1, [pc, #20]	; (1514 <_ac_sync_init+0x20>)
    14fe:	3000      	adds	r0, #0
    1500:	bf18      	it	ne
    1502:	2001      	movne	r0, #1
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <_ac_sync_init+0x24>)
    1506:	4798      	blx	r3
	device->hw = hw;
    1508:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    150a:	4620      	mov	r0, r4
    150c:	4b03      	ldr	r3, [pc, #12]	; (151c <_ac_sync_init+0x28>)
    150e:	4798      	blx	r3
}
    1510:	bd38      	pop	{r3, r4, r5, pc}
    1512:	bf00      	nop
    1514:	00002f1c 	.word	0x00002f1c
    1518:	00001305 	.word	0x00001305
    151c:	00001489 	.word	0x00001489

00001520 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1520:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1522:	f013 0f01 	tst.w	r3, #1
    1526:	d1fb      	bne.n	1520 <_adc_init>
    1528:	6b03      	ldr	r3, [r0, #48]	; 0x30
    152a:	f013 0f03 	tst.w	r3, #3
    152e:	d1fb      	bne.n	1528 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1530:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1532:	f013 0f02 	tst.w	r3, #2
    1536:	d12a      	bne.n	158e <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1538:	6b03      	ldr	r3, [r0, #48]	; 0x30
    153a:	f013 0f01 	tst.w	r3, #1
    153e:	d1fb      	bne.n	1538 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1540:	8803      	ldrh	r3, [r0, #0]
    1542:	b29b      	uxth	r3, r3
    1544:	f043 0301 	orr.w	r3, r3, #1
    1548:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    154a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    154c:	f013 0f01 	tst.w	r3, #1
    1550:	d1fb      	bne.n	154a <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1552:	2216      	movs	r2, #22
    1554:	4b0f      	ldr	r3, [pc, #60]	; (1594 <_adc_init+0x74>)
    1556:	fb02 3101 	mla	r1, r2, r1, r3
    155a:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    155c:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    155e:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1560:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1562:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1564:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1566:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1568:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    156a:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    156c:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    156e:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1570:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1572:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1574:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1576:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1578:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    157a:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    157c:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    157e:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1580:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1582:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1584:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1586:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1588:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    158a:	2000      	movs	r0, #0
    158c:	4770      	bx	lr
		return ERR_DENIED;
    158e:	f06f 0010 	mvn.w	r0, #16
}
    1592:	4770      	bx	lr
    1594:	00002f30 	.word	0x00002f30

00001598 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1598:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    159c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    15a0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    15a4:	b148      	cbz	r0, 15ba <_adc_get_regs+0x22>
    15a6:	2801      	cmp	r0, #1
    15a8:	d009      	beq.n	15be <_adc_get_regs+0x26>
{
    15aa:	b508      	push	{r3, lr}
	ASSERT(false);
    15ac:	2291      	movs	r2, #145	; 0x91
    15ae:	4905      	ldr	r1, [pc, #20]	; (15c4 <_adc_get_regs+0x2c>)
    15b0:	2000      	movs	r0, #0
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <_adc_get_regs+0x30>)
    15b4:	4798      	blx	r3
	return 0;
    15b6:	2000      	movs	r0, #0
    15b8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    15ba:	2000      	movs	r0, #0
    15bc:	4770      	bx	lr
    15be:	2001      	movs	r0, #1
    15c0:	4770      	bx	lr
    15c2:	bf00      	nop
    15c4:	00002f5c 	.word	0x00002f5c
    15c8:	00001305 	.word	0x00001305

000015cc <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    15cc:	b538      	push	{r3, r4, r5, lr}
    15ce:	460c      	mov	r4, r1
	ASSERT(device);
    15d0:	4605      	mov	r5, r0
    15d2:	22d5      	movs	r2, #213	; 0xd5
    15d4:	4907      	ldr	r1, [pc, #28]	; (15f4 <_adc_sync_init+0x28>)
    15d6:	3000      	adds	r0, #0
    15d8:	bf18      	it	ne
    15da:	2001      	movne	r0, #1
    15dc:	4b06      	ldr	r3, [pc, #24]	; (15f8 <_adc_sync_init+0x2c>)
    15de:	4798      	blx	r3

	device->hw = hw;
    15e0:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    15e2:	4620      	mov	r0, r4
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <_adc_sync_init+0x30>)
    15e6:	4798      	blx	r3
    15e8:	4601      	mov	r1, r0
    15ea:	4620      	mov	r0, r4
    15ec:	4b04      	ldr	r3, [pc, #16]	; (1600 <_adc_sync_init+0x34>)
    15ee:	4798      	blx	r3
}
    15f0:	bd38      	pop	{r3, r4, r5, pc}
    15f2:	bf00      	nop
    15f4:	00002f5c 	.word	0x00002f5c
    15f8:	00001305 	.word	0x00001305
    15fc:	00001599 	.word	0x00001599
    1600:	00001521 	.word	0x00001521

00001604 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1604:	0943      	lsrs	r3, r0, #5
    1606:	f000 001f 	and.w	r0, r0, #31
    160a:	2201      	movs	r2, #1
    160c:	fa02 f000 	lsl.w	r0, r2, r0
    1610:	3340      	adds	r3, #64	; 0x40
    1612:	4a02      	ldr	r2, [pc, #8]	; (161c <_irq_set+0x18>)
    1614:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1618:	4770      	bx	lr
    161a:	bf00      	nop
    161c:	e000e100 	.word	0xe000e100

00001620 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1620:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1624:	fb03 f000 	mul.w	r0, r3, r0
    1628:	4770      	bx	lr
	...

0000162c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    162c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    162e:	4a0c      	ldr	r2, [pc, #48]	; (1660 <_init_chip+0x34>)
    1630:	8813      	ldrh	r3, [r2, #0]
    1632:	b29b      	uxth	r3, r3
    1634:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1636:	4b0b      	ldr	r3, [pc, #44]	; (1664 <_init_chip+0x38>)
    1638:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <_init_chip+0x3c>)
    163c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    163e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1642:	4c0a      	ldr	r4, [pc, #40]	; (166c <_init_chip+0x40>)
    1644:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1646:	4b0a      	ldr	r3, [pc, #40]	; (1670 <_init_chip+0x44>)
    1648:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    164a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    164e:	47a0      	blx	r4
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1650:	4a08      	ldr	r2, [pc, #32]	; (1674 <_init_chip+0x48>)
    1652:	6913      	ldr	r3, [r2, #16]
    1654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1658:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    165a:	4b07      	ldr	r3, [pc, #28]	; (1678 <_init_chip+0x4c>)
    165c:	4798      	blx	r3
    165e:	bd10      	pop	{r4, pc}
    1660:	41004000 	.word	0x41004000
    1664:	00001afd 	.word	0x00001afd
    1668:	00001a25 	.word	0x00001a25
    166c:	0000197d 	.word	0x0000197d
    1670:	00001b21 	.word	0x00001b21
    1674:	40000800 	.word	0x40000800
    1678:	00001785 	.word	0x00001785

0000167c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    167c:	b510      	push	{r4, lr}
    167e:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    1680:	22f3      	movs	r2, #243	; 0xf3
    1682:	4915      	ldr	r1, [pc, #84]	; (16d8 <_dac_init+0x5c>)
    1684:	4815      	ldr	r0, [pc, #84]	; (16dc <_dac_init+0x60>)
    1686:	4284      	cmp	r4, r0
    1688:	bf14      	ite	ne
    168a:	2000      	movne	r0, #0
    168c:	2001      	moveq	r0, #1
    168e:	4b14      	ldr	r3, [pc, #80]	; (16e0 <_dac_init+0x64>)
    1690:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1692:	68a3      	ldr	r3, [r4, #8]
    1694:	f013 0f01 	tst.w	r3, #1
    1698:	d1fb      	bne.n	1692 <_dac_init+0x16>
    169a:	68a3      	ldr	r3, [r4, #8]
    169c:	f013 0f03 	tst.w	r3, #3
    16a0:	d1fb      	bne.n	169a <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    16a2:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    16a4:	f013 0f02 	tst.w	r3, #2
    16a8:	d113      	bne.n	16d2 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16aa:	68a3      	ldr	r3, [r4, #8]
    16ac:	f013 0f01 	tst.w	r3, #1
    16b0:	d1fb      	bne.n	16aa <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    16b2:	7823      	ldrb	r3, [r4, #0]
    16b4:	f043 0301 	orr.w	r3, r3, #1
    16b8:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16ba:	68a3      	ldr	r3, [r4, #8]
    16bc:	f013 0f01 	tst.w	r3, #1
    16c0:	d1fb      	bne.n	16ba <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    16c2:	2000      	movs	r0, #0
    16c4:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    16c6:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    16c8:	81a0      	strh	r0, [r4, #12]
    16ca:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    16cc:	2301      	movs	r3, #1
    16ce:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    16d0:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    16d2:	f06f 0003 	mvn.w	r0, #3
}
    16d6:	bd10      	pop	{r4, pc}
    16d8:	00002f74 	.word	0x00002f74
    16dc:	43002400 	.word	0x43002400
    16e0:	00001305 	.word	0x00001305

000016e4 <_dac_sync_init>:
{
    16e4:	b538      	push	{r3, r4, r5, lr}
    16e6:	460c      	mov	r4, r1
	ASSERT(device);
    16e8:	4605      	mov	r5, r0
    16ea:	2261      	movs	r2, #97	; 0x61
    16ec:	4905      	ldr	r1, [pc, #20]	; (1704 <_dac_sync_init+0x20>)
    16ee:	3000      	adds	r0, #0
    16f0:	bf18      	it	ne
    16f2:	2001      	movne	r0, #1
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <_dac_sync_init+0x24>)
    16f6:	4798      	blx	r3
	device->hw = hw;
    16f8:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    16fa:	4620      	mov	r0, r4
    16fc:	4b03      	ldr	r3, [pc, #12]	; (170c <_dac_sync_init+0x28>)
    16fe:	4798      	blx	r3
}
    1700:	bd38      	pop	{r3, r4, r5, pc}
    1702:	bf00      	nop
    1704:	00002f74 	.word	0x00002f74
    1708:	00001305 	.word	0x00001305
    170c:	0000167d 	.word	0x0000167d

00001710 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1710:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1712:	4a1a      	ldr	r2, [pc, #104]	; (177c <_dmac_handler+0x6c>)
    1714:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1716:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    171a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    171e:	4818      	ldr	r0, [pc, #96]	; (1780 <_dmac_handler+0x70>)
    1720:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1724:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1728:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    172c:	f012 0f01 	tst.w	r2, #1
    1730:	d10a      	bne.n	1748 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1732:	011a      	lsls	r2, r3, #4
    1734:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1738:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    173c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1740:	f012 0f02 	tst.w	r2, #2
    1744:	d10b      	bne.n	175e <_dmac_handler+0x4e>
    1746:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1748:	011a      	lsls	r2, r3, #4
    174a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    174e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1752:	2101      	movs	r1, #1
    1754:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1758:	6843      	ldr	r3, [r0, #4]
    175a:	4798      	blx	r3
    175c:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    175e:	011a      	lsls	r2, r3, #4
    1760:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1764:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1768:	2102      	movs	r1, #2
    176a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    176e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1772:	4a03      	ldr	r2, [pc, #12]	; (1780 <_dmac_handler+0x70>)
    1774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1778:	4798      	blx	r3
	}
}
    177a:	e7e4      	b.n	1746 <_dmac_handler+0x36>
    177c:	4100a000 	.word	0x4100a000
    1780:	20000130 	.word	0x20000130

00001784 <_dma_init>:
{
    1784:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1786:	4a33      	ldr	r2, [pc, #204]	; (1854 <_dma_init+0xd0>)
    1788:	8813      	ldrh	r3, [r2, #0]
    178a:	f023 0302 	bic.w	r3, r3, #2
    178e:	041b      	lsls	r3, r3, #16
    1790:	0c1b      	lsrs	r3, r3, #16
    1792:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1794:	8853      	ldrh	r3, [r2, #2]
    1796:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    179a:	041b      	lsls	r3, r3, #16
    179c:	0c1b      	lsrs	r3, r3, #16
    179e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    17a0:	8813      	ldrh	r3, [r2, #0]
    17a2:	b29b      	uxth	r3, r3
    17a4:	f043 0301 	orr.w	r3, r3, #1
    17a8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    17aa:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    17ac:	f013 0f01 	tst.w	r3, #1
    17b0:	d1fb      	bne.n	17aa <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    17b2:	4b28      	ldr	r3, [pc, #160]	; (1854 <_dma_init+0xd0>)
    17b4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    17b8:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    17ba:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    17bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    17c0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    17c2:	2000      	movs	r0, #0
    17c4:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    17c6:	4a24      	ldr	r2, [pc, #144]	; (1858 <_dma_init+0xd4>)
    17c8:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    17cc:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    17ce:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    17d2:	639a      	str	r2, [r3, #56]	; 0x38
    17d4:	4b21      	ldr	r3, [pc, #132]	; (185c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    17d6:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    17da:	681c      	ldr	r4, [r3, #0]
    17dc:	0101      	lsls	r1, r0, #4
    17de:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    17e2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    17e6:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    17e8:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    17ea:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    17ee:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    17f0:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    17f4:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    17f6:	4429      	add	r1, r5
    17f8:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    17fc:	3001      	adds	r0, #1
    17fe:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1800:	2820      	cmp	r0, #32
    1802:	d1ea      	bne.n	17da <_dma_init+0x56>
    1804:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1806:	2001      	movs	r0, #1
    1808:	4915      	ldr	r1, [pc, #84]	; (1860 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    180a:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    180c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1810:	d00b      	beq.n	182a <_dma_init+0xa6>
    1812:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1814:	2b24      	cmp	r3, #36	; 0x24
    1816:	d1f8      	bne.n	180a <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1818:	4a0e      	ldr	r2, [pc, #56]	; (1854 <_dma_init+0xd0>)
    181a:	8813      	ldrh	r3, [r2, #0]
    181c:	b29b      	uxth	r3, r3
    181e:	f043 0302 	orr.w	r3, r3, #2
    1822:	8013      	strh	r3, [r2, #0]
}
    1824:	2000      	movs	r0, #0
    1826:	bc30      	pop	{r4, r5}
    1828:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    182a:	095c      	lsrs	r4, r3, #5
    182c:	f002 021f 	and.w	r2, r2, #31
    1830:	fa00 f202 	lsl.w	r2, r0, r2
    1834:	f104 0520 	add.w	r5, r4, #32
    1838:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    183c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1840:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1844:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1848:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    184c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1850:	e7df      	b.n	1812 <_dma_init+0x8e>
    1852:	bf00      	nop
    1854:	4100a000 	.word	0x4100a000
    1858:	20000130 	.word	0x20000130
    185c:	00002f8c 	.word	0x00002f8c
    1860:	e000e100 	.word	0xe000e100

00001864 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1864:	b508      	push	{r3, lr}
	_dmac_handler();
    1866:	4b01      	ldr	r3, [pc, #4]	; (186c <DMAC_0_Handler+0x8>)
    1868:	4798      	blx	r3
    186a:	bd08      	pop	{r3, pc}
    186c:	00001711 	.word	0x00001711

00001870 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1870:	b508      	push	{r3, lr}
	_dmac_handler();
    1872:	4b01      	ldr	r3, [pc, #4]	; (1878 <DMAC_1_Handler+0x8>)
    1874:	4798      	blx	r3
    1876:	bd08      	pop	{r3, pc}
    1878:	00001711 	.word	0x00001711

0000187c <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    187c:	b508      	push	{r3, lr}
	_dmac_handler();
    187e:	4b01      	ldr	r3, [pc, #4]	; (1884 <DMAC_2_Handler+0x8>)
    1880:	4798      	blx	r3
    1882:	bd08      	pop	{r3, pc}
    1884:	00001711 	.word	0x00001711

00001888 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    1888:	b508      	push	{r3, lr}
	_dmac_handler();
    188a:	4b01      	ldr	r3, [pc, #4]	; (1890 <DMAC_3_Handler+0x8>)
    188c:	4798      	blx	r3
    188e:	bd08      	pop	{r3, pc}
    1890:	00001711 	.word	0x00001711

00001894 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1894:	b508      	push	{r3, lr}
	_dmac_handler();
    1896:	4b01      	ldr	r3, [pc, #4]	; (189c <DMAC_4_Handler+0x8>)
    1898:	4798      	blx	r3
    189a:	bd08      	pop	{r3, pc}
    189c:	00001711 	.word	0x00001711

000018a0 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18a0:	4a1e      	ldr	r2, [pc, #120]	; (191c <_ext_irq_init+0x7c>)
    18a2:	6853      	ldr	r3, [r2, #4]
    18a4:	f013 0f01 	tst.w	r3, #1
    18a8:	d1fb      	bne.n	18a2 <_ext_irq_init+0x2>
    18aa:	4a1c      	ldr	r2, [pc, #112]	; (191c <_ext_irq_init+0x7c>)
    18ac:	6853      	ldr	r3, [r2, #4]
    18ae:	f013 0f03 	tst.w	r3, #3
    18b2:	d1fb      	bne.n	18ac <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    18b4:	4b19      	ldr	r3, [pc, #100]	; (191c <_ext_irq_init+0x7c>)
    18b6:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    18b8:	f013 0f02 	tst.w	r3, #2
    18bc:	d12b      	bne.n	1916 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18be:	4a17      	ldr	r2, [pc, #92]	; (191c <_ext_irq_init+0x7c>)
    18c0:	6853      	ldr	r3, [r2, #4]
    18c2:	f013 0f01 	tst.w	r3, #1
    18c6:	d1fb      	bne.n	18c0 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    18c8:	4a14      	ldr	r2, [pc, #80]	; (191c <_ext_irq_init+0x7c>)
    18ca:	7813      	ldrb	r3, [r2, #0]
    18cc:	f043 0301 	orr.w	r3, r3, #1
    18d0:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18d2:	6853      	ldr	r3, [r2, #4]
    18d4:	f013 0f01 	tst.w	r3, #1
    18d8:	d1fb      	bne.n	18d2 <_ext_irq_init+0x32>
    18da:	4a10      	ldr	r2, [pc, #64]	; (191c <_ext_irq_init+0x7c>)
    18dc:	6853      	ldr	r3, [r2, #4]
    18de:	f013 0f03 	tst.w	r3, #3
    18e2:	d1fb      	bne.n	18dc <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    18e4:	4b0d      	ldr	r3, [pc, #52]	; (191c <_ext_irq_init+0x7c>)
    18e6:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    18e8:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    18ec:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    18ee:	2200      	movs	r2, #0
    18f0:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    18f2:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    18f4:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    18f6:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    18f8:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    18fa:	61da      	str	r2, [r3, #28]
    18fc:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18fe:	461a      	mov	r2, r3
    1900:	6853      	ldr	r3, [r2, #4]
    1902:	f013 0f03 	tst.w	r3, #3
    1906:	d1fb      	bne.n	1900 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1908:	4a04      	ldr	r2, [pc, #16]	; (191c <_ext_irq_init+0x7c>)
    190a:	7813      	ldrb	r3, [r2, #0]
    190c:	f043 0302 	orr.w	r3, r3, #2
    1910:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    1912:	2000      	movs	r0, #0
    1914:	4770      	bx	lr
		return ERR_DENIED;
    1916:	f06f 0010 	mvn.w	r0, #16
}
    191a:	4770      	bx	lr
    191c:	40002800 	.word	0x40002800

00001920 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1920:	b430      	push	{r4, r5}
    1922:	4814      	ldr	r0, [pc, #80]	; (1974 <_event_system_init+0x54>)
    1924:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1928:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    192a:	4c13      	ldr	r4, [pc, #76]	; (1978 <_event_system_init+0x58>)
    192c:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    192e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1932:	3248      	adds	r2, #72	; 0x48
    1934:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1938:	42ab      	cmp	r3, r5
    193a:	d1f7      	bne.n	192c <_event_system_init+0xc>
    193c:	480d      	ldr	r0, [pc, #52]	; (1974 <_event_system_init+0x54>)
    193e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1942:	3080      	adds	r0, #128	; 0x80
    1944:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1946:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    194a:	00ca      	lsls	r2, r1, #3
    194c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1950:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1954:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1956:	f850 3f04 	ldr.w	r3, [r0, #4]!
    195a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    195c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1960:	43db      	mvns	r3, r3
    1962:	b2db      	uxtb	r3, r3
    1964:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1968:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    196a:	2920      	cmp	r1, #32
    196c:	d1eb      	bne.n	1946 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    196e:	2000      	movs	r0, #0
    1970:	bc30      	pop	{r4, r5}
    1972:	4770      	bx	lr
    1974:	0000308c 	.word	0x0000308c
    1978:	4100e000 	.word	0x4100e000

0000197c <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    197c:	f010 0f01 	tst.w	r0, #1
    1980:	d002      	beq.n	1988 <_gclk_init_generators_by_fref+0xc>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1982:	4a23      	ldr	r2, [pc, #140]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    1984:	4b23      	ldr	r3, [pc, #140]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    1986:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    1988:	f010 0f02 	tst.w	r0, #2
    198c:	d002      	beq.n	1994 <_gclk_init_generators_by_fref+0x18>
    198e:	4a22      	ldr	r2, [pc, #136]	; (1a18 <_gclk_init_generators_by_fref+0x9c>)
    1990:	4b20      	ldr	r3, [pc, #128]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    1992:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    1994:	f010 0f04 	tst.w	r0, #4
    1998:	d002      	beq.n	19a0 <_gclk_init_generators_by_fref+0x24>
    199a:	4a1d      	ldr	r2, [pc, #116]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    199c:	4b1d      	ldr	r3, [pc, #116]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    199e:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    19a0:	f010 0f08 	tst.w	r0, #8
    19a4:	d002      	beq.n	19ac <_gclk_init_generators_by_fref+0x30>
    19a6:	4a1a      	ldr	r2, [pc, #104]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19a8:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19aa:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    19ac:	f010 0f10 	tst.w	r0, #16
    19b0:	d002      	beq.n	19b8 <_gclk_init_generators_by_fref+0x3c>
    19b2:	4a17      	ldr	r2, [pc, #92]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19b4:	4b17      	ldr	r3, [pc, #92]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19b6:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    19b8:	f010 0f20 	tst.w	r0, #32
    19bc:	d002      	beq.n	19c4 <_gclk_init_generators_by_fref+0x48>
    19be:	4a14      	ldr	r2, [pc, #80]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19c0:	4b14      	ldr	r3, [pc, #80]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19c2:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    19c4:	f010 0f40 	tst.w	r0, #64	; 0x40
    19c8:	d002      	beq.n	19d0 <_gclk_init_generators_by_fref+0x54>
    19ca:	4a11      	ldr	r2, [pc, #68]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19cc:	4b11      	ldr	r3, [pc, #68]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19ce:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    19d0:	f010 0f80 	tst.w	r0, #128	; 0x80
    19d4:	d002      	beq.n	19dc <_gclk_init_generators_by_fref+0x60>
    19d6:	4a0e      	ldr	r2, [pc, #56]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19d8:	4b0e      	ldr	r3, [pc, #56]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19da:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    19dc:	f410 7f80 	tst.w	r0, #256	; 0x100
    19e0:	d002      	beq.n	19e8 <_gclk_init_generators_by_fref+0x6c>
    19e2:	4a0b      	ldr	r2, [pc, #44]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19e4:	4b0b      	ldr	r3, [pc, #44]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19e6:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    19e8:	f410 7f00 	tst.w	r0, #512	; 0x200
    19ec:	d002      	beq.n	19f4 <_gclk_init_generators_by_fref+0x78>
    19ee:	4a08      	ldr	r2, [pc, #32]	; (1a10 <_gclk_init_generators_by_fref+0x94>)
    19f0:	4b08      	ldr	r3, [pc, #32]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19f2:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    19f4:	f410 6f80 	tst.w	r0, #1024	; 0x400
    19f8:	d002      	beq.n	1a00 <_gclk_init_generators_by_fref+0x84>
    19fa:	4a08      	ldr	r2, [pc, #32]	; (1a1c <_gclk_init_generators_by_fref+0xa0>)
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    19fe:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1a00:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1a04:	d002      	beq.n	1a0c <_gclk_init_generators_by_fref+0x90>
    1a06:	4a06      	ldr	r2, [pc, #24]	; (1a20 <_gclk_init_generators_by_fref+0xa4>)
    1a08:	4b02      	ldr	r3, [pc, #8]	; (1a14 <_gclk_init_generators_by_fref+0x98>)
    1a0a:	64da      	str	r2, [r3, #76]	; 0x4c
    1a0c:	4770      	bx	lr
    1a0e:	bf00      	nop
    1a10:	00012b06 	.word	0x00012b06
    1a14:	40001c00 	.word	0x40001c00
    1a18:	00012306 	.word	0x00012306
    1a1c:	00012b05 	.word	0x00012b05
    1a20:	00013b05 	.word	0x00013b05

00001a24 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1a24:	2201      	movs	r2, #1
    1a26:	4b01      	ldr	r3, [pc, #4]	; (1a2c <_mclk_init+0x8>)
    1a28:	715a      	strb	r2, [r3, #5]
    1a2a:	4770      	bx	lr
    1a2c:	40000800 	.word	0x40000800

00001a30 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1a30:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1a32:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1a34:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1a36:	f012 0f01 	tst.w	r2, #1
    1a3a:	d005      	beq.n	1a48 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1a3c:	2201      	movs	r2, #1
    1a3e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1a40:	6803      	ldr	r3, [r0, #0]
    1a42:	b153      	cbz	r3, 1a5a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1a48:	8a1a      	ldrh	r2, [r3, #16]
    1a4a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1a4c:	b12a      	cbz	r2, 1a5a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1a4e:	f240 225e 	movw	r2, #606	; 0x25e
    1a52:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1a54:	6843      	ldr	r3, [r0, #4]
    1a56:	b103      	cbz	r3, 1a5a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1a58:	4798      	blx	r3
    1a5a:	bd08      	pop	{r3, pc}

00001a5c <_flash_init>:
{
    1a5c:	b538      	push	{r3, r4, r5, lr}
    1a5e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1a60:	4605      	mov	r5, r0
    1a62:	b350      	cbz	r0, 1aba <_flash_init+0x5e>
    1a64:	4816      	ldr	r0, [pc, #88]	; (1ac0 <_flash_init+0x64>)
    1a66:	4281      	cmp	r1, r0
    1a68:	bf14      	ite	ne
    1a6a:	2000      	movne	r0, #0
    1a6c:	2001      	moveq	r0, #1
    1a6e:	2256      	movs	r2, #86	; 0x56
    1a70:	4914      	ldr	r1, [pc, #80]	; (1ac4 <_flash_init+0x68>)
    1a72:	4b15      	ldr	r3, [pc, #84]	; (1ac8 <_flash_init+0x6c>)
    1a74:	4798      	blx	r3
	device->hw = hw;
    1a76:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1a78:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1a7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1a7e:	049b      	lsls	r3, r3, #18
    1a80:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1a82:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1a84:	4b11      	ldr	r3, [pc, #68]	; (1acc <_flash_init+0x70>)
    1a86:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a88:	4b11      	ldr	r3, [pc, #68]	; (1ad0 <_flash_init+0x74>)
    1a8a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1a8e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a96:	f3bf 8f6f 	isb	sy
    1a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aa6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1aaa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1aae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ab2:	6019      	str	r1, [r3, #0]
    1ab4:	601a      	str	r2, [r3, #0]
}
    1ab6:	2000      	movs	r0, #0
    1ab8:	bd38      	pop	{r3, r4, r5, pc}
    1aba:	2000      	movs	r0, #0
    1abc:	e7d7      	b.n	1a6e <_flash_init+0x12>
    1abe:	bf00      	nop
    1ac0:	41004000 	.word	0x41004000
    1ac4:	00003190 	.word	0x00003190
    1ac8:	00001305 	.word	0x00001305
    1acc:	200006b0 	.word	0x200006b0
    1ad0:	e000e100 	.word	0xe000e100

00001ad4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1ad4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1ad6:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <NVMCTRL_0_Handler+0xc>)
    1ad8:	6818      	ldr	r0, [r3, #0]
    1ada:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <NVMCTRL_0_Handler+0x10>)
    1adc:	4798      	blx	r3
    1ade:	bd08      	pop	{r3, pc}
    1ae0:	200006b0 	.word	0x200006b0
    1ae4:	00001a31 	.word	0x00001a31

00001ae8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1ae8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1aea:	4b02      	ldr	r3, [pc, #8]	; (1af4 <NVMCTRL_1_Handler+0xc>)
    1aec:	6818      	ldr	r0, [r3, #0]
    1aee:	4b02      	ldr	r3, [pc, #8]	; (1af8 <NVMCTRL_1_Handler+0x10>)
    1af0:	4798      	blx	r3
    1af2:	bd08      	pop	{r3, pc}
    1af4:	200006b0 	.word	0x200006b0
    1af8:	00001a31 	.word	0x00001a31

00001afc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1afc:	4b07      	ldr	r3, [pc, #28]	; (1b1c <_osc32kctrl_init_sources+0x20>)
    1afe:	f242 024e 	movw	r2, #8270	; 0x204e
    1b02:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1b04:	2201      	movs	r2, #1
    1b06:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1b08:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1b0a:	461a      	mov	r2, r3
    1b0c:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1b0e:	f013 0f01 	tst.w	r3, #1
    1b12:	d0fb      	beq.n	1b0c <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1b14:	2205      	movs	r2, #5
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <_osc32kctrl_init_sources+0x20>)
    1b18:	741a      	strb	r2, [r3, #16]
    1b1a:	4770      	bx	lr
    1b1c:	40001400 	.word	0x40001400

00001b20 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1b20:	4a2b      	ldr	r2, [pc, #172]	; (1bd0 <_oscctrl_init_referenced_generators+0xb0>)
    1b22:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1b24:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1b28:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1b2c:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b2e:	4b29      	ldr	r3, [pc, #164]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b30:	2200      	movs	r2, #0
    1b32:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1b34:	4a28      	ldr	r2, [pc, #160]	; (1bd8 <_oscctrl_init_referenced_generators+0xb8>)
    1b36:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b38:	461a      	mov	r2, r3
    1b3a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1b3e:	f013 0f10 	tst.w	r3, #16
    1b42:	d1fa      	bne.n	1b3a <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b44:	2200      	movs	r2, #0
    1b46:	4b23      	ldr	r3, [pc, #140]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b48:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b4c:	461a      	mov	r2, r3
    1b4e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b52:	f013 0f04 	tst.w	r3, #4
    1b56:	d1fa      	bne.n	1b4e <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b58:	2242      	movs	r2, #66	; 0x42
    1b5a:	4b1e      	ldr	r3, [pc, #120]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b5c:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b5e:	461a      	mov	r2, r3
    1b60:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1b64:	f013 0f02 	tst.w	r3, #2
    1b68:	d1fa      	bne.n	1b60 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1b6a:	4b1a      	ldr	r3, [pc, #104]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1b6e:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b70:	461a      	mov	r2, r3
    1b72:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1b76:	f013 0f08 	tst.w	r3, #8
    1b7a:	d1fa      	bne.n	1b72 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b7c:	2282      	movs	r2, #130	; 0x82
    1b7e:	4b15      	ldr	r3, [pc, #84]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b80:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b84:	461a      	mov	r2, r3
    1b86:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b8a:	f013 0f04 	tst.w	r3, #4
    1b8e:	d1fa      	bne.n	1b86 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1b90:	4b10      	ldr	r3, [pc, #64]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b92:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1b96:	f013 0f01 	tst.w	r3, #1
    1b9a:	d012      	beq.n	1bc2 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b9c:	4a0d      	ldr	r2, [pc, #52]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1b9e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1ba0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1ba4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1ba8:	d1f9      	bne.n	1b9e <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1baa:	4a09      	ldr	r2, [pc, #36]	; (1bd0 <_oscctrl_init_referenced_generators+0xb0>)
    1bac:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d1fc      	bne.n	1bac <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bb2:	4a07      	ldr	r2, [pc, #28]	; (1bd0 <_oscctrl_init_referenced_generators+0xb0>)
    1bb4:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bb6:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bba:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bbe:	6213      	str	r3, [r2, #32]
    1bc0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1bc2:	4a04      	ldr	r2, [pc, #16]	; (1bd4 <_oscctrl_init_referenced_generators+0xb4>)
    1bc4:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1bc6:	f413 7f80 	tst.w	r3, #256	; 0x100
    1bca:	d0fb      	beq.n	1bc4 <_oscctrl_init_referenced_generators+0xa4>
    1bcc:	e7ed      	b.n	1baa <_oscctrl_init_referenced_generators+0x8a>
    1bce:	bf00      	nop
    1bd0:	40001c00 	.word	0x40001c00
    1bd4:	40001000 	.word	0x40001000
    1bd8:	04010000 	.word	0x04010000

00001bdc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1bdc:	b500      	push	{lr}
    1bde:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1be0:	4b0d      	ldr	r3, [pc, #52]	; (1c18 <RAMECC_Handler+0x3c>)
    1be2:	789b      	ldrb	r3, [r3, #2]
    1be4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1be6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	f013 0f02 	tst.w	r3, #2
    1bee:	d006      	beq.n	1bfe <RAMECC_Handler+0x22>
    1bf0:	4b0a      	ldr	r3, [pc, #40]	; (1c1c <RAMECC_Handler+0x40>)
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	b11b      	cbz	r3, 1bfe <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1bf6:	4a08      	ldr	r2, [pc, #32]	; (1c18 <RAMECC_Handler+0x3c>)
    1bf8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1bfa:	4798      	blx	r3
    1bfc:	e009      	b.n	1c12 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1bfe:	9b01      	ldr	r3, [sp, #4]
    1c00:	f013 0f01 	tst.w	r3, #1
    1c04:	d005      	beq.n	1c12 <RAMECC_Handler+0x36>
    1c06:	4b05      	ldr	r3, [pc, #20]	; (1c1c <RAMECC_Handler+0x40>)
    1c08:	685b      	ldr	r3, [r3, #4]
    1c0a:	b113      	cbz	r3, 1c12 <RAMECC_Handler+0x36>
    1c0c:	4a02      	ldr	r2, [pc, #8]	; (1c18 <RAMECC_Handler+0x3c>)
    1c0e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c10:	4798      	blx	r3
	} else {
		return;
	}
}
    1c12:	b003      	add	sp, #12
    1c14:	f85d fb04 	ldr.w	pc, [sp], #4
    1c18:	41020000 	.word	0x41020000
    1c1c:	200011d8 	.word	0x200011d8

00001c20 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c20:	b470      	push	{r4, r5, r6}
    1c22:	b087      	sub	sp, #28
    1c24:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c26:	466c      	mov	r4, sp
    1c28:	4d0c      	ldr	r5, [pc, #48]	; (1c5c <_sercom_get_hardware_index+0x3c>)
    1c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c2e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1c32:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c36:	9b00      	ldr	r3, [sp, #0]
    1c38:	42b3      	cmp	r3, r6
    1c3a:	d00c      	beq.n	1c56 <_sercom_get_hardware_index+0x36>
    1c3c:	4632      	mov	r2, r6
    1c3e:	2001      	movs	r0, #1
    1c40:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1c44:	4293      	cmp	r3, r2
    1c46:	d007      	beq.n	1c58 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c48:	3001      	adds	r0, #1
    1c4a:	2806      	cmp	r0, #6
    1c4c:	d1f8      	bne.n	1c40 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1c4e:	2000      	movs	r0, #0
}
    1c50:	b007      	add	sp, #28
    1c52:	bc70      	pop	{r4, r5, r6}
    1c54:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c56:	2000      	movs	r0, #0
			return i;
    1c58:	b2c0      	uxtb	r0, r0
    1c5a:	e7f9      	b.n	1c50 <_sercom_get_hardware_index+0x30>
    1c5c:	000031b0 	.word	0x000031b0

00001c60 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1c60:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1c62:	4b03      	ldr	r3, [pc, #12]	; (1c70 <_sercom_get_irq_num+0x10>)
    1c64:	4798      	blx	r3
    1c66:	0080      	lsls	r0, r0, #2
    1c68:	302e      	adds	r0, #46	; 0x2e
}
    1c6a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1c6e:	bd08      	pop	{r3, pc}
    1c70:	00001c21 	.word	0x00001c21

00001c74 <_usart_init>:
{
    1c74:	b538      	push	{r3, r4, r5, lr}
    1c76:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1c78:	4b33      	ldr	r3, [pc, #204]	; (1d48 <_usart_init+0xd4>)
    1c7a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1c7c:	2803      	cmp	r0, #3
    1c7e:	d056      	beq.n	1d2e <_usart_init+0xba>
    1c80:	2804      	cmp	r0, #4
    1c82:	d052      	beq.n	1d2a <_usart_init+0xb6>
    1c84:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1c86:	bf08      	it	eq
    1c88:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1c8a:	d006      	beq.n	1c9a <_usart_init+0x26>
	ASSERT(false);
    1c8c:	f240 2262 	movw	r2, #610	; 0x262
    1c90:	492e      	ldr	r1, [pc, #184]	; (1d4c <_usart_init+0xd8>)
    1c92:	2000      	movs	r0, #0
    1c94:	4b2e      	ldr	r3, [pc, #184]	; (1d50 <_usart_init+0xdc>)
    1c96:	4798      	blx	r3
	return 0;
    1c98:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1c9a:	69e3      	ldr	r3, [r4, #28]
    1c9c:	f013 0f01 	tst.w	r3, #1
    1ca0:	d1fb      	bne.n	1c9a <_usart_init+0x26>
    1ca2:	69e3      	ldr	r3, [r4, #28]
    1ca4:	f013 0f03 	tst.w	r3, #3
    1ca8:	d1fb      	bne.n	1ca2 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1caa:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1cac:	f013 0f02 	tst.w	r3, #2
    1cb0:	d147      	bne.n	1d42 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cb2:	69e3      	ldr	r3, [r4, #28]
    1cb4:	f013 0f01 	tst.w	r3, #1
    1cb8:	d1fb      	bne.n	1cb2 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1cba:	6823      	ldr	r3, [r4, #0]
    1cbc:	f043 0301 	orr.w	r3, r3, #1
    1cc0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cc2:	69e3      	ldr	r3, [r4, #28]
    1cc4:	f013 0f01 	tst.w	r3, #1
    1cc8:	d1fb      	bne.n	1cc2 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1cca:	4610      	mov	r0, r2
    1ccc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1cd0:	4920      	ldr	r1, [pc, #128]	; (1d54 <_usart_init+0xe0>)
    1cd2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1cd6:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1cd8:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1cda:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1cdc:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1ce0:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1ce2:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1ce6:	d024      	beq.n	1d32 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1ce8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1cec:	4b19      	ldr	r3, [pc, #100]	; (1d54 <_usart_init+0xe0>)
    1cee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1cf2:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1cf4:	89a3      	ldrh	r3, [r4, #12]
    1cf6:	f361 030c 	bfi	r3, r1, #0, #13
    1cfa:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1cfc:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1d00:	89a3      	ldrh	r3, [r4, #12]
    1d02:	f362 334f 	bfi	r3, r2, #13, #3
    1d06:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d08:	4b12      	ldr	r3, [pc, #72]	; (1d54 <_usart_init+0xe0>)
    1d0a:	0042      	lsls	r2, r0, #1
    1d0c:	1811      	adds	r1, r2, r0
    1d0e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1d12:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1d16:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1d18:	4402      	add	r2, r0
    1d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1d22:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1d26:	2000      	movs	r0, #0
    1d28:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d2a:	2201      	movs	r2, #1
    1d2c:	e7b5      	b.n	1c9a <_usart_init+0x26>
    1d2e:	2200      	movs	r2, #0
    1d30:	e7b3      	b.n	1c9a <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <_usart_init+0xe0>)
    1d38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1d3c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1d3e:	81a3      	strh	r3, [r4, #12]
    1d40:	e7e2      	b.n	1d08 <_usart_init+0x94>
		return ERR_DENIED;
    1d42:	f06f 0010 	mvn.w	r0, #16
}
    1d46:	bd38      	pop	{r3, r4, r5, pc}
    1d48:	00001c21 	.word	0x00001c21
    1d4c:	0000323c 	.word	0x0000323c
    1d50:	00001305 	.word	0x00001305
    1d54:	000031b0 	.word	0x000031b0

00001d58 <_usart_async_init>:
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	460d      	mov	r5, r1
	ASSERT(device);
    1d5c:	4606      	mov	r6, r0
    1d5e:	22da      	movs	r2, #218	; 0xda
    1d60:	4912      	ldr	r1, [pc, #72]	; (1dac <_usart_async_init+0x54>)
    1d62:	3000      	adds	r0, #0
    1d64:	bf18      	it	ne
    1d66:	2001      	movne	r0, #1
    1d68:	4b11      	ldr	r3, [pc, #68]	; (1db0 <_usart_async_init+0x58>)
    1d6a:	4798      	blx	r3
	init_status = _usart_init(hw);
    1d6c:	4628      	mov	r0, r5
    1d6e:	4b11      	ldr	r3, [pc, #68]	; (1db4 <_usart_async_init+0x5c>)
    1d70:	4798      	blx	r3
	if (init_status) {
    1d72:	4604      	mov	r4, r0
    1d74:	b9c0      	cbnz	r0, 1da8 <_usart_async_init+0x50>
	device->hw = hw;
    1d76:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1d78:	4628      	mov	r0, r5
    1d7a:	4b0f      	ldr	r3, [pc, #60]	; (1db8 <_usart_async_init+0x60>)
    1d7c:	4798      	blx	r3
		irq = irq +2;
    1d7e:	3002      	adds	r0, #2
    1d80:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1d82:	f000 031f 	and.w	r3, r0, #31
    1d86:	2201      	movs	r2, #1
    1d88:	409a      	lsls	r2, r3
    1d8a:	0943      	lsrs	r3, r0, #5
    1d8c:	009b      	lsls	r3, r3, #2
    1d8e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d92:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d9e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1da2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1da6:	601a      	str	r2, [r3, #0]
}
    1da8:	4620      	mov	r0, r4
    1daa:	bd70      	pop	{r4, r5, r6, pc}
    1dac:	0000323c 	.word	0x0000323c
    1db0:	00001305 	.word	0x00001305
    1db4:	00001c75 	.word	0x00001c75
    1db8:	00001c61 	.word	0x00001c61

00001dbc <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1dbc:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dbe:	69d3      	ldr	r3, [r2, #28]
    1dc0:	f013 0f03 	tst.w	r3, #3
    1dc4:	d1fb      	bne.n	1dbe <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1dc6:	6813      	ldr	r3, [r2, #0]
    1dc8:	f043 0302 	orr.w	r3, r3, #2
    1dcc:	6013      	str	r3, [r2, #0]
    1dce:	4770      	bx	lr

00001dd0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1dd0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1dd2:	6299      	str	r1, [r3, #40]	; 0x28
    1dd4:	4770      	bx	lr

00001dd6 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1dd6:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1dd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1dda:	b2c0      	uxtb	r0, r0
    1ddc:	4770      	bx	lr

00001dde <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1dde:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1de0:	7e18      	ldrb	r0, [r3, #24]
}
    1de2:	f000 0001 	and.w	r0, r0, #1
    1de6:	4770      	bx	lr

00001de8 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1de8:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1dea:	7e18      	ldrb	r0, [r3, #24]
}
    1dec:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1df0:	4770      	bx	lr
	...

00001df4 <_usart_async_set_irq_state>:
{
    1df4:	b570      	push	{r4, r5, r6, lr}
    1df6:	460c      	mov	r4, r1
    1df8:	4616      	mov	r6, r2
	ASSERT(device);
    1dfa:	4605      	mov	r5, r0
    1dfc:	f44f 7211 	mov.w	r2, #580	; 0x244
    1e00:	4915      	ldr	r1, [pc, #84]	; (1e58 <_usart_async_set_irq_state+0x64>)
    1e02:	3000      	adds	r0, #0
    1e04:	bf18      	it	ne
    1e06:	2001      	movne	r0, #1
    1e08:	4b14      	ldr	r3, [pc, #80]	; (1e5c <_usart_async_set_irq_state+0x68>)
    1e0a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1e0c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1e10:	d10d      	bne.n	1e2e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1e12:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e14:	b92e      	cbnz	r6, 1e22 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1e16:	2201      	movs	r2, #1
    1e18:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1e1a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e1c:	2202      	movs	r2, #2
    1e1e:	751a      	strb	r2, [r3, #20]
    1e20:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1e22:	2201      	movs	r2, #1
    1e24:	759a      	strb	r2, [r3, #22]
    1e26:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1e28:	2202      	movs	r2, #2
    1e2a:	759a      	strb	r2, [r3, #22]
    1e2c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    1e2e:	2c01      	cmp	r4, #1
    1e30:	d002      	beq.n	1e38 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1e32:	2c03      	cmp	r4, #3
    1e34:	d008      	beq.n	1e48 <_usart_async_set_irq_state+0x54>
    1e36:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1e38:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e3a:	b916      	cbnz	r6, 1e42 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1e3c:	2204      	movs	r2, #4
    1e3e:	751a      	strb	r2, [r3, #20]
    1e40:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1e42:	2204      	movs	r2, #4
    1e44:	759a      	strb	r2, [r3, #22]
    1e46:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1e48:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e4a:	b116      	cbz	r6, 1e52 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1e4c:	2280      	movs	r2, #128	; 0x80
    1e4e:	759a      	strb	r2, [r3, #22]
}
    1e50:	e7f1      	b.n	1e36 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1e52:	2280      	movs	r2, #128	; 0x80
    1e54:	751a      	strb	r2, [r3, #20]
    1e56:	bd70      	pop	{r4, r5, r6, pc}
    1e58:	0000323c 	.word	0x0000323c
    1e5c:	00001305 	.word	0x00001305

00001e60 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <_delay_init+0x10>)
    1e62:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1e66:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1e68:	2205      	movs	r2, #5
    1e6a:	601a      	str	r2, [r3, #0]
    1e6c:	4770      	bx	lr
    1e6e:	bf00      	nop
    1e70:	e000e010 	.word	0xe000e010

00001e74 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1e74:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1e76:	b303      	cbz	r3, 1eba <_delay_cycles+0x46>
{
    1e78:	b430      	push	{r4, r5}
    1e7a:	1e5d      	subs	r5, r3, #1
    1e7c:	b2ed      	uxtb	r5, r5
	while (n--) {
    1e7e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1e80:	4a12      	ldr	r2, [pc, #72]	; (1ecc <_delay_cycles+0x58>)
    1e82:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1e86:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1e88:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1e8a:	6813      	ldr	r3, [r2, #0]
    1e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1e90:	d0fb      	beq.n	1e8a <_delay_cycles+0x16>
	while (n--) {
    1e92:	3801      	subs	r0, #1
    1e94:	b2c0      	uxtb	r0, r0
    1e96:	28ff      	cmp	r0, #255	; 0xff
    1e98:	d1f5      	bne.n	1e86 <_delay_cycles+0x12>
    1e9a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1e9e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1ea2:	3101      	adds	r1, #1
    1ea4:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1ea6:	4b09      	ldr	r3, [pc, #36]	; (1ecc <_delay_cycles+0x58>)
    1ea8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1eaa:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1eac:	461a      	mov	r2, r3
    1eae:	6813      	ldr	r3, [r2, #0]
    1eb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1eb4:	d0fb      	beq.n	1eae <_delay_cycles+0x3a>
		;
}
    1eb6:	bc30      	pop	{r4, r5}
    1eb8:	4770      	bx	lr
	SysTick->LOAD = buf;
    1eba:	4b04      	ldr	r3, [pc, #16]	; (1ecc <_delay_cycles+0x58>)
    1ebc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1ebe:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ec0:	461a      	mov	r2, r3
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ec8:	d0fb      	beq.n	1ec2 <_delay_cycles+0x4e>
    1eca:	4770      	bx	lr
    1ecc:	e000e010 	.word	0xe000e010

00001ed0 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    1ed0:	b470      	push	{r4, r5, r6}
    1ed2:	b087      	sub	sp, #28
    1ed4:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1ed6:	ac01      	add	r4, sp, #4
    1ed8:	4d14      	ldr	r5, [pc, #80]	; (1f2c <_get_irq_num+0x5c>)
    1eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ede:	682b      	ldr	r3, [r5, #0]
    1ee0:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1ee2:	42b0      	cmp	r0, r6
    1ee4:	d017      	beq.n	1f16 <_get_irq_num+0x46>
    1ee6:	4631      	mov	r1, r6
    1ee8:	2301      	movs	r3, #1
    1eea:	a801      	add	r0, sp, #4
    1eec:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1ef0:	428a      	cmp	r2, r1
    1ef2:	d006      	beq.n	1f02 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1ef4:	3301      	adds	r3, #1
    1ef6:	2b05      	cmp	r3, #5
    1ef8:	d1f8      	bne.n	1eec <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    1efa:	2055      	movs	r0, #85	; 0x55
}
    1efc:	b007      	add	sp, #28
    1efe:	bc70      	pop	{r4, r5, r6}
    1f00:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    1f02:	b2db      	uxtb	r3, r3
    1f04:	2b04      	cmp	r3, #4
    1f06:	d80c      	bhi.n	1f22 <_get_irq_num+0x52>
    1f08:	e8df f003 	tbb	[pc, r3]
    1f0c:	070d0305 	.word	0x070d0305
    1f10:	09          	.byte	0x09
    1f11:	00          	.byte	0x00
		return TCC1_0_IRQn;
    1f12:	205c      	movs	r0, #92	; 0x5c
    1f14:	e7f2      	b.n	1efc <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    1f16:	2055      	movs	r0, #85	; 0x55
    1f18:	e7f0      	b.n	1efc <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    1f1a:	2065      	movs	r0, #101	; 0x65
    1f1c:	e7ee      	b.n	1efc <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    1f1e:	2068      	movs	r0, #104	; 0x68
    1f20:	e7ec      	b.n	1efc <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    1f22:	2089      	movs	r0, #137	; 0x89
    1f24:	e7ea      	b.n	1efc <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    1f26:	2061      	movs	r0, #97	; 0x61
    1f28:	e7e8      	b.n	1efc <_get_irq_num+0x2c>
    1f2a:	bf00      	nop
    1f2c:	00003258 	.word	0x00003258

00001f30 <_tcc_timer_deinit>:
{
    1f30:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1f32:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1f34:	4620      	mov	r0, r4
    1f36:	4b10      	ldr	r3, [pc, #64]	; (1f78 <_tcc_timer_deinit+0x48>)
    1f38:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f3a:	0943      	lsrs	r3, r0, #5
    1f3c:	f000 001f 	and.w	r0, r0, #31
    1f40:	2201      	movs	r2, #1
    1f42:	fa02 f000 	lsl.w	r0, r2, r0
    1f46:	3320      	adds	r3, #32
    1f48:	4a0c      	ldr	r2, [pc, #48]	; (1f7c <_tcc_timer_deinit+0x4c>)
    1f4a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f52:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1f56:	68a3      	ldr	r3, [r4, #8]
    1f58:	f013 0f03 	tst.w	r3, #3
    1f5c:	d1fb      	bne.n	1f56 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1f5e:	6823      	ldr	r3, [r4, #0]
    1f60:	f023 0302 	bic.w	r3, r3, #2
    1f64:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1f66:	68a3      	ldr	r3, [r4, #8]
    1f68:	f013 0f01 	tst.w	r3, #1
    1f6c:	d1fb      	bne.n	1f66 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1f6e:	6823      	ldr	r3, [r4, #0]
    1f70:	f043 0301 	orr.w	r3, r3, #1
    1f74:	6023      	str	r3, [r4, #0]
    1f76:	bd10      	pop	{r4, pc}
    1f78:	00001ed1 	.word	0x00001ed1
    1f7c:	e000e100 	.word	0xe000e100

00001f80 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1f80:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1f82:	6893      	ldr	r3, [r2, #8]
    1f84:	f013 0f03 	tst.w	r3, #3
    1f88:	d1fb      	bne.n	1f82 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1f8a:	6813      	ldr	r3, [r2, #0]
    1f8c:	f043 0302 	orr.w	r3, r3, #2
    1f90:	6013      	str	r3, [r2, #0]
    1f92:	4770      	bx	lr

00001f94 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1f94:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1f96:	6893      	ldr	r3, [r2, #8]
    1f98:	f013 0f03 	tst.w	r3, #3
    1f9c:	d1fb      	bne.n	1f96 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1f9e:	6813      	ldr	r3, [r2, #0]
    1fa0:	f023 0302 	bic.w	r3, r3, #2
    1fa4:	6013      	str	r3, [r2, #0]
    1fa6:	4770      	bx	lr

00001fa8 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    1fa8:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    1faa:	6419      	str	r1, [r3, #64]	; 0x40
    1fac:	4770      	bx	lr

00001fae <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    1fae:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    1fb0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    1fb2:	4770      	bx	lr

00001fb4 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    1fb4:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fb6:	6893      	ldr	r3, [r2, #8]
    1fb8:	f013 0f03 	tst.w	r3, #3
    1fbc:	d1fb      	bne.n	1fb6 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1fbe:	6810      	ldr	r0, [r2, #0]
}
    1fc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1fc4:	4770      	bx	lr

00001fc6 <tcc_interrupt_handler>:
{
    1fc6:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1fc8:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    1fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    1fcc:	f012 0f01 	tst.w	r2, #1
    1fd0:	d100      	bne.n	1fd4 <tcc_interrupt_handler+0xe>
    1fd2:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    1fd4:	2201      	movs	r2, #1
    1fd6:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    1fd8:	6803      	ldr	r3, [r0, #0]
    1fda:	4798      	blx	r3
}
    1fdc:	e7f9      	b.n	1fd2 <tcc_interrupt_handler+0xc>
	...

00001fe0 <_tcc_timer_init>:
{
    1fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fe2:	b087      	sub	sp, #28
    1fe4:	4605      	mov	r5, r0
    1fe6:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1fe8:	ae01      	add	r6, sp, #4
    1fea:	4f4e      	ldr	r7, [pc, #312]	; (2124 <_tcc_timer_init+0x144>)
    1fec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1fee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1ff0:	683b      	ldr	r3, [r7, #0]
    1ff2:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1ff4:	42a0      	cmp	r0, r4
    1ff6:	d00c      	beq.n	2012 <_tcc_timer_init+0x32>
    1ff8:	4621      	mov	r1, r4
    1ffa:	2301      	movs	r3, #1
    1ffc:	a801      	add	r0, sp, #4
    1ffe:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2002:	428a      	cmp	r2, r1
    2004:	d006      	beq.n	2014 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2006:	3301      	adds	r3, #1
    2008:	2b05      	cmp	r3, #5
    200a:	d1f8      	bne.n	1ffe <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    200c:	2600      	movs	r6, #0
			return i;
    200e:	b276      	sxtb	r6, r6
    2010:	e015      	b.n	203e <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2012:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2014:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2018:	d073      	beq.n	2102 <_tcc_timer_init+0x122>
    201a:	2b01      	cmp	r3, #1
    201c:	d06b      	beq.n	20f6 <_tcc_timer_init+0x116>
    201e:	2b02      	cmp	r3, #2
    2020:	d06b      	beq.n	20fa <_tcc_timer_init+0x11a>
    2022:	2b03      	cmp	r3, #3
    2024:	d06b      	beq.n	20fe <_tcc_timer_init+0x11e>
    2026:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2028:	bf08      	it	eq
    202a:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    202c:	d0ef      	beq.n	200e <_tcc_timer_init+0x2e>
	ASSERT(false);
    202e:	f240 128b 	movw	r2, #395	; 0x18b
    2032:	493d      	ldr	r1, [pc, #244]	; (2128 <_tcc_timer_init+0x148>)
    2034:	2000      	movs	r0, #0
    2036:	4b3d      	ldr	r3, [pc, #244]	; (212c <_tcc_timer_init+0x14c>)
    2038:	4798      	blx	r3
	return -1;
    203a:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    203e:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2040:	22e4      	movs	r2, #228	; 0xe4
    2042:	4939      	ldr	r1, [pc, #228]	; (2128 <_tcc_timer_init+0x148>)
    2044:	2001      	movs	r0, #1
    2046:	4b39      	ldr	r3, [pc, #228]	; (212c <_tcc_timer_init+0x14c>)
    2048:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    204a:	68a3      	ldr	r3, [r4, #8]
    204c:	f013 0f01 	tst.w	r3, #1
    2050:	d1fb      	bne.n	204a <_tcc_timer_init+0x6a>
    2052:	68a3      	ldr	r3, [r4, #8]
    2054:	f013 0f03 	tst.w	r3, #3
    2058:	d1fb      	bne.n	2052 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    205a:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    205c:	f013 0f02 	tst.w	r3, #2
    2060:	d15d      	bne.n	211e <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2062:	68a3      	ldr	r3, [r4, #8]
    2064:	f013 0f01 	tst.w	r3, #1
    2068:	d1fb      	bne.n	2062 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    206a:	6823      	ldr	r3, [r4, #0]
    206c:	f043 0301 	orr.w	r3, r3, #1
    2070:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2072:	68a3      	ldr	r3, [r4, #8]
    2074:	f013 0f01 	tst.w	r3, #1
    2078:	d1fb      	bne.n	2072 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    207a:	4a2a      	ldr	r2, [pc, #168]	; (2124 <_tcc_timer_init+0x144>)
    207c:	00f1      	lsls	r1, r6, #3
    207e:	198b      	adds	r3, r1, r6
    2080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2084:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2086:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2088:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    208a:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    208c:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    208e:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2090:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2092:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2094:	440e      	add	r6, r1
    2096:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    209a:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    209c:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    209e:	2301      	movs	r3, #1
    20a0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    20a2:	4b23      	ldr	r3, [pc, #140]	; (2130 <_tcc_timer_init+0x150>)
    20a4:	429c      	cmp	r4, r3
    20a6:	d02e      	beq.n	2106 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    20a8:	4b22      	ldr	r3, [pc, #136]	; (2134 <_tcc_timer_init+0x154>)
    20aa:	429c      	cmp	r4, r3
    20ac:	d02e      	beq.n	210c <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    20ae:	4b22      	ldr	r3, [pc, #136]	; (2138 <_tcc_timer_init+0x158>)
    20b0:	429c      	cmp	r4, r3
    20b2:	d02e      	beq.n	2112 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    20b4:	4b21      	ldr	r3, [pc, #132]	; (213c <_tcc_timer_init+0x15c>)
    20b6:	429c      	cmp	r4, r3
    20b8:	d02e      	beq.n	2118 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    20ba:	4b21      	ldr	r3, [pc, #132]	; (2140 <_tcc_timer_init+0x160>)
    20bc:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    20be:	bf04      	itt	eq
    20c0:	4b20      	ldreq	r3, [pc, #128]	; (2144 <_tcc_timer_init+0x164>)
    20c2:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    20c4:	4620      	mov	r0, r4
    20c6:	4b20      	ldr	r3, [pc, #128]	; (2148 <_tcc_timer_init+0x168>)
    20c8:	4798      	blx	r3
    20ca:	f000 031f 	and.w	r3, r0, #31
    20ce:	2201      	movs	r2, #1
    20d0:	409a      	lsls	r2, r3
    20d2:	0943      	lsrs	r3, r0, #5
    20d4:	009b      	lsls	r3, r3, #2
    20d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    20da:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    20de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20e6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20ee:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    20f0:	2000      	movs	r0, #0
}
    20f2:	b007      	add	sp, #28
    20f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    20f6:	2601      	movs	r6, #1
    20f8:	e789      	b.n	200e <_tcc_timer_init+0x2e>
    20fa:	2602      	movs	r6, #2
    20fc:	e787      	b.n	200e <_tcc_timer_init+0x2e>
    20fe:	2603      	movs	r6, #3
    2100:	e785      	b.n	200e <_tcc_timer_init+0x2e>
    2102:	2600      	movs	r6, #0
    2104:	e783      	b.n	200e <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2106:	4b0f      	ldr	r3, [pc, #60]	; (2144 <_tcc_timer_init+0x164>)
    2108:	601d      	str	r5, [r3, #0]
    210a:	e7d3      	b.n	20b4 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    210c:	4b0d      	ldr	r3, [pc, #52]	; (2144 <_tcc_timer_init+0x164>)
    210e:	605d      	str	r5, [r3, #4]
    2110:	e7d3      	b.n	20ba <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2112:	4b0c      	ldr	r3, [pc, #48]	; (2144 <_tcc_timer_init+0x164>)
    2114:	609d      	str	r5, [r3, #8]
    2116:	e7d5      	b.n	20c4 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2118:	4b0a      	ldr	r3, [pc, #40]	; (2144 <_tcc_timer_init+0x164>)
    211a:	60dd      	str	r5, [r3, #12]
    211c:	e7d2      	b.n	20c4 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    211e:	f06f 0010 	mvn.w	r0, #16
    2122:	e7e6      	b.n	20f2 <_tcc_timer_init+0x112>
    2124:	00003258 	.word	0x00003258
    2128:	00003320 	.word	0x00003320
    212c:	00001305 	.word	0x00001305
    2130:	41016000 	.word	0x41016000
    2134:	41018000 	.word	0x41018000
    2138:	42000c00 	.word	0x42000c00
    213c:	42001000 	.word	0x42001000
    2140:	43001000 	.word	0x43001000
    2144:	200006b4 	.word	0x200006b4
    2148:	00001ed1 	.word	0x00001ed1

0000214c <_tcc_timer_set_irq>:
{
    214c:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    214e:	68c0      	ldr	r0, [r0, #12]
    2150:	4b02      	ldr	r3, [pc, #8]	; (215c <_tcc_timer_set_irq+0x10>)
    2152:	4798      	blx	r3
    2154:	4b02      	ldr	r3, [pc, #8]	; (2160 <_tcc_timer_set_irq+0x14>)
    2156:	4798      	blx	r3
    2158:	bd08      	pop	{r3, pc}
    215a:	bf00      	nop
    215c:	00001ed1 	.word	0x00001ed1
    2160:	00001605 	.word	0x00001605

00002164 <_tcc_get_timer>:
}
    2164:	4800      	ldr	r0, [pc, #0]	; (2168 <_tcc_get_timer+0x4>)
    2166:	4770      	bx	lr
    2168:	20000038 	.word	0x20000038

0000216c <TCC0_0_Handler>:
{
    216c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    216e:	4b02      	ldr	r3, [pc, #8]	; (2178 <TCC0_0_Handler+0xc>)
    2170:	6818      	ldr	r0, [r3, #0]
    2172:	4b02      	ldr	r3, [pc, #8]	; (217c <TCC0_0_Handler+0x10>)
    2174:	4798      	blx	r3
    2176:	bd08      	pop	{r3, pc}
    2178:	200006b4 	.word	0x200006b4
    217c:	00001fc7 	.word	0x00001fc7

00002180 <TCC1_0_Handler>:
{
    2180:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2182:	4b02      	ldr	r3, [pc, #8]	; (218c <TCC1_0_Handler+0xc>)
    2184:	6858      	ldr	r0, [r3, #4]
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <TCC1_0_Handler+0x10>)
    2188:	4798      	blx	r3
    218a:	bd08      	pop	{r3, pc}
    218c:	200006b4 	.word	0x200006b4
    2190:	00001fc7 	.word	0x00001fc7

00002194 <TCC2_0_Handler>:
{
    2194:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2196:	4b02      	ldr	r3, [pc, #8]	; (21a0 <TCC2_0_Handler+0xc>)
    2198:	6898      	ldr	r0, [r3, #8]
    219a:	4b02      	ldr	r3, [pc, #8]	; (21a4 <TCC2_0_Handler+0x10>)
    219c:	4798      	blx	r3
    219e:	bd08      	pop	{r3, pc}
    21a0:	200006b4 	.word	0x200006b4
    21a4:	00001fc7 	.word	0x00001fc7

000021a8 <TCC3_0_Handler>:
{
    21a8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    21aa:	4b02      	ldr	r3, [pc, #8]	; (21b4 <TCC3_0_Handler+0xc>)
    21ac:	68d8      	ldr	r0, [r3, #12]
    21ae:	4b02      	ldr	r3, [pc, #8]	; (21b8 <TCC3_0_Handler+0x10>)
    21b0:	4798      	blx	r3
    21b2:	bd08      	pop	{r3, pc}
    21b4:	200006b4 	.word	0x200006b4
    21b8:	00001fc7 	.word	0x00001fc7

000021bc <TCC4_0_Handler>:
{
    21bc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    21be:	4b02      	ldr	r3, [pc, #8]	; (21c8 <TCC4_0_Handler+0xc>)
    21c0:	6918      	ldr	r0, [r3, #16]
    21c2:	4b02      	ldr	r3, [pc, #8]	; (21cc <TCC4_0_Handler+0x10>)
    21c4:	4798      	blx	r3
    21c6:	bd08      	pop	{r3, pc}
    21c8:	200006b4 	.word	0x200006b4
    21cc:	00001fc7 	.word	0x00001fc7

000021d0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    21d0:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21d2:	6913      	ldr	r3, [r2, #16]
    21d4:	f013 0f03 	tst.w	r3, #3
    21d8:	d1fb      	bne.n	21d2 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    21da:	6813      	ldr	r3, [r2, #0]
    21dc:	f043 0302 	orr.w	r3, r3, #2
    21e0:	6013      	str	r3, [r2, #0]
    21e2:	4770      	bx	lr

000021e4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    21e4:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21e6:	6913      	ldr	r3, [r2, #16]
    21e8:	f013 0f03 	tst.w	r3, #3
    21ec:	d1fb      	bne.n	21e6 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    21ee:	6813      	ldr	r3, [r2, #0]
    21f0:	f023 0302 	bic.w	r3, r3, #2
    21f4:	6013      	str	r3, [r2, #0]
    21f6:	4770      	bx	lr

000021f8 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    21f8:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    21fa:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    21fc:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2200:	2b02      	cmp	r3, #2
    2202:	d00b      	beq.n	221c <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2204:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2206:	f013 0f0c 	tst.w	r3, #12
    220a:	d009      	beq.n	2220 <_tc_timer_set_period+0x28>
    220c:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    220e:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2212:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2214:	bf04      	itt	eq
    2216:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2218:	76d1      	strbeq	r1, [r2, #27]
    221a:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    221c:	61d1      	str	r1, [r2, #28]
    221e:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2220:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2222:	8391      	strh	r1, [r2, #28]
    2224:	4770      	bx	lr

00002226 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2226:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2228:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    222a:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    222e:	2b02      	cmp	r3, #2
    2230:	d00c      	beq.n	224c <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2232:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2234:	f013 0f0c 	tst.w	r3, #12
    2238:	d00a      	beq.n	2250 <_tc_timer_get_period+0x2a>
    223a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    223c:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2240:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2242:	bf06      	itte	eq
    2244:	7ed0      	ldrbeq	r0, [r2, #27]
    2246:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2248:	2000      	movne	r0, #0
}
    224a:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    224c:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    224e:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2250:	8b90      	ldrh	r0, [r2, #28]
    2252:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2254:	4770      	bx	lr

00002256 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2256:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2258:	6913      	ldr	r3, [r2, #16]
    225a:	f013 0f03 	tst.w	r3, #3
    225e:	d1fb      	bne.n	2258 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2260:	6810      	ldr	r0, [r2, #0]
}
    2262:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2266:	4770      	bx	lr

00002268 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2268:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    226a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    226c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    226e:	f012 0f01 	tst.w	r2, #1
    2272:	d100      	bne.n	2276 <tc_interrupt_handler+0xe>
    2274:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2276:	2201      	movs	r2, #1
    2278:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    227a:	6803      	ldr	r3, [r0, #0]
    227c:	4798      	blx	r3
	}
}
    227e:	e7f9      	b.n	2274 <tc_interrupt_handler+0xc>

00002280 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2280:	b538      	push	{r3, r4, r5, lr}
    2282:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2284:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2286:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2288:	f013 0f01 	tst.w	r3, #1
    228c:	d004      	beq.n	2298 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    228e:	2301      	movs	r3, #1
    2290:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2292:	6803      	ldr	r3, [r0, #0]
    2294:	b103      	cbz	r3, 2298 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2296:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2298:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    229a:	f013 0f02 	tst.w	r3, #2
    229e:	d005      	beq.n	22ac <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    22a0:	2302      	movs	r3, #2
    22a2:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    22a4:	686b      	ldr	r3, [r5, #4]
    22a6:	b10b      	cbz	r3, 22ac <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    22a8:	4628      	mov	r0, r5
    22aa:	4798      	blx	r3
    22ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000022b0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    22b0:	4b11      	ldr	r3, [pc, #68]	; (22f8 <_tc_init_irq_param+0x48>)
    22b2:	4298      	cmp	r0, r3
    22b4:	d011      	beq.n	22da <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    22b6:	4b11      	ldr	r3, [pc, #68]	; (22fc <_tc_init_irq_param+0x4c>)
    22b8:	4298      	cmp	r0, r3
    22ba:	d011      	beq.n	22e0 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    22bc:	4b10      	ldr	r3, [pc, #64]	; (2300 <_tc_init_irq_param+0x50>)
    22be:	4298      	cmp	r0, r3
    22c0:	d011      	beq.n	22e6 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    22c2:	4b10      	ldr	r3, [pc, #64]	; (2304 <_tc_init_irq_param+0x54>)
    22c4:	4298      	cmp	r0, r3
    22c6:	d011      	beq.n	22ec <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    22c8:	4b0f      	ldr	r3, [pc, #60]	; (2308 <_tc_init_irq_param+0x58>)
    22ca:	4298      	cmp	r0, r3
    22cc:	d011      	beq.n	22f2 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    22ce:	4b0f      	ldr	r3, [pc, #60]	; (230c <_tc_init_irq_param+0x5c>)
    22d0:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    22d2:	bf04      	itt	eq
    22d4:	4b0e      	ldreq	r3, [pc, #56]	; (2310 <_tc_init_irq_param+0x60>)
    22d6:	6159      	streq	r1, [r3, #20]
    22d8:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    22da:	4b0d      	ldr	r3, [pc, #52]	; (2310 <_tc_init_irq_param+0x60>)
    22dc:	6019      	str	r1, [r3, #0]
    22de:	e7f0      	b.n	22c2 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    22e0:	4b0b      	ldr	r3, [pc, #44]	; (2310 <_tc_init_irq_param+0x60>)
    22e2:	6059      	str	r1, [r3, #4]
    22e4:	e7f0      	b.n	22c8 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    22e6:	4b0a      	ldr	r3, [pc, #40]	; (2310 <_tc_init_irq_param+0x60>)
    22e8:	6099      	str	r1, [r3, #8]
    22ea:	e7f0      	b.n	22ce <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    22ec:	4b08      	ldr	r3, [pc, #32]	; (2310 <_tc_init_irq_param+0x60>)
    22ee:	60d9      	str	r1, [r3, #12]
    22f0:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    22f2:	4b07      	ldr	r3, [pc, #28]	; (2310 <_tc_init_irq_param+0x60>)
    22f4:	6119      	str	r1, [r3, #16]
    22f6:	4770      	bx	lr
    22f8:	40003800 	.word	0x40003800
    22fc:	40003c00 	.word	0x40003c00
    2300:	4101a000 	.word	0x4101a000
    2304:	4101c000 	.word	0x4101c000
    2308:	42001400 	.word	0x42001400
    230c:	42001800 	.word	0x42001800
    2310:	200006c8 	.word	0x200006c8

00002314 <get_tc_index>:
{
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	b086      	sub	sp, #24
    2318:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    231a:	466c      	mov	r4, sp
    231c:	4d18      	ldr	r5, [pc, #96]	; (2380 <get_tc_index+0x6c>)
    231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2322:	e895 0003 	ldmia.w	r5, {r0, r1}
    2326:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    232a:	9b00      	ldr	r3, [sp, #0]
    232c:	42b3      	cmp	r3, r6
    232e:	d021      	beq.n	2374 <get_tc_index+0x60>
    2330:	4631      	mov	r1, r6
    2332:	2301      	movs	r3, #1
    2334:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2338:	428a      	cmp	r2, r1
    233a:	d01c      	beq.n	2376 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    233c:	3301      	adds	r3, #1
    233e:	2b06      	cmp	r3, #6
    2340:	d1f8      	bne.n	2334 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2342:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2344:	4a0f      	ldr	r2, [pc, #60]	; (2384 <get_tc_index+0x70>)
    2346:	7812      	ldrb	r2, [r2, #0]
    2348:	429a      	cmp	r2, r3
    234a:	d016      	beq.n	237a <get_tc_index+0x66>
    234c:	4a0d      	ldr	r2, [pc, #52]	; (2384 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    234e:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2350:	7d11      	ldrb	r1, [r2, #20]
    2352:	4299      	cmp	r1, r3
    2354:	d012      	beq.n	237c <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2356:	3001      	adds	r0, #1
    2358:	b2c0      	uxtb	r0, r0
    235a:	3214      	adds	r2, #20
    235c:	2806      	cmp	r0, #6
    235e:	d1f7      	bne.n	2350 <get_tc_index+0x3c>
	ASSERT(false);
    2360:	f240 2227 	movw	r2, #551	; 0x227
    2364:	4908      	ldr	r1, [pc, #32]	; (2388 <get_tc_index+0x74>)
    2366:	2000      	movs	r0, #0
    2368:	4b08      	ldr	r3, [pc, #32]	; (238c <get_tc_index+0x78>)
    236a:	4798      	blx	r3
	return -1;
    236c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2370:	b006      	add	sp, #24
    2372:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2374:	2300      	movs	r3, #0
			return i;
    2376:	b2db      	uxtb	r3, r3
    2378:	e7e4      	b.n	2344 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    237a:	2000      	movs	r0, #0
			return i;
    237c:	b240      	sxtb	r0, r0
    237e:	e7f7      	b.n	2370 <get_tc_index+0x5c>
    2380:	00003338 	.word	0x00003338
    2384:	20000058 	.word	0x20000058
    2388:	00003350 	.word	0x00003350
    238c:	00001305 	.word	0x00001305

00002390 <_tc_timer_init>:
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	4606      	mov	r6, r0
    2394:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2396:	4608      	mov	r0, r1
    2398:	4b48      	ldr	r3, [pc, #288]	; (24bc <_tc_timer_init+0x12c>)
    239a:	4798      	blx	r3
    239c:	4605      	mov	r5, r0
	device->hw = hw;
    239e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    23a0:	22af      	movs	r2, #175	; 0xaf
    23a2:	4947      	ldr	r1, [pc, #284]	; (24c0 <_tc_timer_init+0x130>)
    23a4:	2001      	movs	r0, #1
    23a6:	4b47      	ldr	r3, [pc, #284]	; (24c4 <_tc_timer_init+0x134>)
    23a8:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23aa:	6923      	ldr	r3, [r4, #16]
    23ac:	f013 0f01 	tst.w	r3, #1
    23b0:	d1fb      	bne.n	23aa <_tc_timer_init+0x1a>
    23b2:	6923      	ldr	r3, [r4, #16]
    23b4:	f013 0f03 	tst.w	r3, #3
    23b8:	d1fb      	bne.n	23b2 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    23ba:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    23bc:	f013 0f02 	tst.w	r3, #2
    23c0:	d175      	bne.n	24ae <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23c2:	6923      	ldr	r3, [r4, #16]
    23c4:	f013 0f01 	tst.w	r3, #1
    23c8:	d1fb      	bne.n	23c2 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    23ca:	6823      	ldr	r3, [r4, #0]
    23cc:	f043 0301 	orr.w	r3, r3, #1
    23d0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23d2:	6923      	ldr	r3, [r4, #16]
    23d4:	f013 0f01 	tst.w	r3, #1
    23d8:	d1fb      	bne.n	23d2 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    23da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    23de:	4a3a      	ldr	r2, [pc, #232]	; (24c8 <_tc_timer_init+0x138>)
    23e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    23e4:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    23e6:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    23e8:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    23ea:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    23ec:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    23ee:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    23f0:	2201      	movs	r2, #1
    23f2:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    23f4:	685b      	ldr	r3, [r3, #4]
    23f6:	f003 030c 	and.w	r3, r3, #12
    23fa:	2b08      	cmp	r3, #8
    23fc:	d03f      	beq.n	247e <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    23fe:	2b00      	cmp	r3, #0
    2400:	d147      	bne.n	2492 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2402:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2406:	4a30      	ldr	r2, [pc, #192]	; (24c8 <_tc_timer_init+0x138>)
    2408:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    240c:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    240e:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2410:	8a1b      	ldrh	r3, [r3, #16]
    2412:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2414:	2301      	movs	r3, #1
    2416:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2418:	4631      	mov	r1, r6
    241a:	4620      	mov	r0, r4
    241c:	4b2b      	ldr	r3, [pc, #172]	; (24cc <_tc_timer_init+0x13c>)
    241e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2420:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2424:	4a28      	ldr	r2, [pc, #160]	; (24c8 <_tc_timer_init+0x138>)
    2426:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    242a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    242e:	2b00      	cmp	r3, #0
    2430:	db40      	blt.n	24b4 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2432:	095a      	lsrs	r2, r3, #5
    2434:	f003 031f 	and.w	r3, r3, #31
    2438:	2101      	movs	r1, #1
    243a:	fa01 f303 	lsl.w	r3, r1, r3
    243e:	3220      	adds	r2, #32
    2440:	4923      	ldr	r1, [pc, #140]	; (24d0 <_tc_timer_init+0x140>)
    2442:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    244a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    244e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2452:	4b1d      	ldr	r3, [pc, #116]	; (24c8 <_tc_timer_init+0x138>)
    2454:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2458:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    245c:	2b00      	cmp	r3, #0
    245e:	db2b      	blt.n	24b8 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2460:	0959      	lsrs	r1, r3, #5
    2462:	f003 031f 	and.w	r3, r3, #31
    2466:	2201      	movs	r2, #1
    2468:	fa02 f303 	lsl.w	r3, r2, r3
    246c:	4a18      	ldr	r2, [pc, #96]	; (24d0 <_tc_timer_init+0x140>)
    246e:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2472:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2476:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    247a:	2000      	movs	r0, #0
    247c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    247e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2482:	4a11      	ldr	r2, [pc, #68]	; (24c8 <_tc_timer_init+0x138>)
    2484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2488:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    248a:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    248c:	691b      	ldr	r3, [r3, #16]
    248e:	6223      	str	r3, [r4, #32]
    2490:	e7c0      	b.n	2414 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2492:	2b04      	cmp	r3, #4
    2494:	d1be      	bne.n	2414 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2496:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    249a:	4a0b      	ldr	r2, [pc, #44]	; (24c8 <_tc_timer_init+0x138>)
    249c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24a0:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    24a2:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    24a4:	7c1a      	ldrb	r2, [r3, #16]
    24a6:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    24a8:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    24aa:	76e3      	strb	r3, [r4, #27]
    24ac:	e7b2      	b.n	2414 <_tc_timer_init+0x84>
		return ERR_DENIED;
    24ae:	f06f 0010 	mvn.w	r0, #16
    24b2:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    24b4:	2000      	movs	r0, #0
    24b6:	bd70      	pop	{r4, r5, r6, pc}
    24b8:	2000      	movs	r0, #0
}
    24ba:	bd70      	pop	{r4, r5, r6, pc}
    24bc:	00002315 	.word	0x00002315
    24c0:	00003350 	.word	0x00003350
    24c4:	00001305 	.word	0x00001305
    24c8:	20000058 	.word	0x20000058
    24cc:	000022b1 	.word	0x000022b1
    24d0:	e000e100 	.word	0xe000e100

000024d4 <_tc_timer_deinit>:
{
    24d4:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    24d6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    24d8:	4620      	mov	r0, r4
    24da:	4b18      	ldr	r3, [pc, #96]	; (253c <_tc_timer_deinit+0x68>)
    24dc:	4798      	blx	r3
    24de:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    24e0:	f240 1201 	movw	r2, #257	; 0x101
    24e4:	4916      	ldr	r1, [pc, #88]	; (2540 <_tc_timer_deinit+0x6c>)
    24e6:	2001      	movs	r0, #1
    24e8:	4b16      	ldr	r3, [pc, #88]	; (2544 <_tc_timer_deinit+0x70>)
    24ea:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    24ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    24f0:	4b15      	ldr	r3, [pc, #84]	; (2548 <_tc_timer_deinit+0x74>)
    24f2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    24f6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    24fa:	2b00      	cmp	r3, #0
    24fc:	db0d      	blt.n	251a <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24fe:	095a      	lsrs	r2, r3, #5
    2500:	f003 031f 	and.w	r3, r3, #31
    2504:	2101      	movs	r1, #1
    2506:	fa01 f303 	lsl.w	r3, r1, r3
    250a:	3220      	adds	r2, #32
    250c:	490f      	ldr	r1, [pc, #60]	; (254c <_tc_timer_deinit+0x78>)
    250e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2516:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    251a:	6923      	ldr	r3, [r4, #16]
    251c:	f013 0f03 	tst.w	r3, #3
    2520:	d1fb      	bne.n	251a <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2522:	6823      	ldr	r3, [r4, #0]
    2524:	f023 0302 	bic.w	r3, r3, #2
    2528:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    252a:	6923      	ldr	r3, [r4, #16]
    252c:	f013 0f01 	tst.w	r3, #1
    2530:	d1fb      	bne.n	252a <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2532:	6823      	ldr	r3, [r4, #0]
    2534:	f043 0301 	orr.w	r3, r3, #1
    2538:	6023      	str	r3, [r4, #0]
    253a:	bd38      	pop	{r3, r4, r5, pc}
    253c:	00002315 	.word	0x00002315
    2540:	00003350 	.word	0x00003350
    2544:	00001305 	.word	0x00001305
    2548:	20000058 	.word	0x20000058
    254c:	e000e100 	.word	0xe000e100

00002550 <_tc_timer_set_irq>:
{
    2550:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2552:	68c0      	ldr	r0, [r0, #12]
    2554:	4b08      	ldr	r3, [pc, #32]	; (2578 <_tc_timer_set_irq+0x28>)
    2556:	4798      	blx	r3
    2558:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    255a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    255e:	4907      	ldr	r1, [pc, #28]	; (257c <_tc_timer_set_irq+0x2c>)
    2560:	2001      	movs	r0, #1
    2562:	4b07      	ldr	r3, [pc, #28]	; (2580 <_tc_timer_set_irq+0x30>)
    2564:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2566:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    256a:	4b06      	ldr	r3, [pc, #24]	; (2584 <_tc_timer_set_irq+0x34>)
    256c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2570:	78a0      	ldrb	r0, [r4, #2]
    2572:	4b05      	ldr	r3, [pc, #20]	; (2588 <_tc_timer_set_irq+0x38>)
    2574:	4798      	blx	r3
    2576:	bd10      	pop	{r4, pc}
    2578:	00002315 	.word	0x00002315
    257c:	00003350 	.word	0x00003350
    2580:	00001305 	.word	0x00001305
    2584:	20000058 	.word	0x20000058
    2588:	00001605 	.word	0x00001605

0000258c <_pwm_init>:
{
    258c:	b570      	push	{r4, r5, r6, lr}
    258e:	4606      	mov	r6, r0
    2590:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2592:	4608      	mov	r0, r1
    2594:	4b3f      	ldr	r3, [pc, #252]	; (2694 <_pwm_init+0x108>)
    2596:	4798      	blx	r3
    2598:	4605      	mov	r5, r0
	device->hw = hw;
    259a:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    259c:	6923      	ldr	r3, [r4, #16]
    259e:	f013 0f01 	tst.w	r3, #1
    25a2:	d1fb      	bne.n	259c <_pwm_init+0x10>
    25a4:	6923      	ldr	r3, [r4, #16]
    25a6:	f013 0f03 	tst.w	r3, #3
    25aa:	d1fb      	bne.n	25a4 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    25ac:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    25ae:	f013 0f02 	tst.w	r3, #2
    25b2:	d165      	bne.n	2680 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25b4:	6923      	ldr	r3, [r4, #16]
    25b6:	f013 0f01 	tst.w	r3, #1
    25ba:	d1fb      	bne.n	25b4 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    25bc:	6823      	ldr	r3, [r4, #0]
    25be:	f043 0301 	orr.w	r3, r3, #1
    25c2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25c4:	6923      	ldr	r3, [r4, #16]
    25c6:	f013 0f01 	tst.w	r3, #1
    25ca:	d1fb      	bne.n	25c4 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    25cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25d0:	4a31      	ldr	r2, [pc, #196]	; (2698 <_pwm_init+0x10c>)
    25d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25d6:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    25d8:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    25da:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    25dc:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    25de:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    25e0:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    25e2:	2203      	movs	r2, #3
    25e4:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    25e6:	685b      	ldr	r3, [r3, #4]
    25e8:	f003 030c 	and.w	r3, r3, #12
    25ec:	2b08      	cmp	r3, #8
    25ee:	d03d      	beq.n	266c <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    25f0:	2b00      	cmp	r3, #0
    25f2:	d148      	bne.n	2686 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    25f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25f8:	4a27      	ldr	r2, [pc, #156]	; (2698 <_pwm_init+0x10c>)
    25fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25fe:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2600:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2602:	8a1b      	ldrh	r3, [r3, #16]
    2604:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2606:	4631      	mov	r1, r6
    2608:	4620      	mov	r0, r4
    260a:	4b24      	ldr	r3, [pc, #144]	; (269c <_pwm_init+0x110>)
    260c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    260e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2612:	4a21      	ldr	r2, [pc, #132]	; (2698 <_pwm_init+0x10c>)
    2614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2618:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    261c:	2b00      	cmp	r3, #0
    261e:	db35      	blt.n	268c <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2620:	095a      	lsrs	r2, r3, #5
    2622:	f003 031f 	and.w	r3, r3, #31
    2626:	2101      	movs	r1, #1
    2628:	fa01 f303 	lsl.w	r3, r1, r3
    262c:	3220      	adds	r2, #32
    262e:	491c      	ldr	r1, [pc, #112]	; (26a0 <_pwm_init+0x114>)
    2630:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2638:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    263c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2640:	4b15      	ldr	r3, [pc, #84]	; (2698 <_pwm_init+0x10c>)
    2642:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2646:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    264a:	2b00      	cmp	r3, #0
    264c:	db20      	blt.n	2690 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    264e:	0959      	lsrs	r1, r3, #5
    2650:	f003 031f 	and.w	r3, r3, #31
    2654:	2201      	movs	r2, #1
    2656:	fa02 f303 	lsl.w	r3, r2, r3
    265a:	4a11      	ldr	r2, [pc, #68]	; (26a0 <_pwm_init+0x114>)
    265c:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2660:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2664:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2668:	2000      	movs	r0, #0
    266a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    266c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2670:	4a09      	ldr	r2, [pc, #36]	; (2698 <_pwm_init+0x10c>)
    2672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2676:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2678:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    267a:	691b      	ldr	r3, [r3, #16]
    267c:	6223      	str	r3, [r4, #32]
    267e:	e7c2      	b.n	2606 <_pwm_init+0x7a>
		return ERR_DENIED;
    2680:	f06f 0010 	mvn.w	r0, #16
    2684:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2686:	f04f 30ff 	mov.w	r0, #4294967295
    268a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    268c:	2000      	movs	r0, #0
    268e:	bd70      	pop	{r4, r5, r6, pc}
    2690:	2000      	movs	r0, #0
}
    2692:	bd70      	pop	{r4, r5, r6, pc}
    2694:	00002315 	.word	0x00002315
    2698:	20000058 	.word	0x20000058
    269c:	000022b1 	.word	0x000022b1
    26a0:	e000e100 	.word	0xe000e100

000026a4 <_tc_get_timer>:
}
    26a4:	4800      	ldr	r0, [pc, #0]	; (26a8 <_tc_get_timer+0x4>)
    26a6:	4770      	bx	lr
    26a8:	200000d0 	.word	0x200000d0

000026ac <_tc_get_pwm>:
}
    26ac:	2000      	movs	r0, #0
    26ae:	4770      	bx	lr

000026b0 <TC0_Handler>:
{
    26b0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    26b2:	4b02      	ldr	r3, [pc, #8]	; (26bc <TC0_Handler+0xc>)
    26b4:	6818      	ldr	r0, [r3, #0]
    26b6:	4b02      	ldr	r3, [pc, #8]	; (26c0 <TC0_Handler+0x10>)
    26b8:	4798      	blx	r3
    26ba:	bd08      	pop	{r3, pc}
    26bc:	200006c8 	.word	0x200006c8
    26c0:	00002281 	.word	0x00002281

000026c4 <TC1_Handler>:
{
    26c4:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    26c6:	4b02      	ldr	r3, [pc, #8]	; (26d0 <TC1_Handler+0xc>)
    26c8:	6858      	ldr	r0, [r3, #4]
    26ca:	4b02      	ldr	r3, [pc, #8]	; (26d4 <TC1_Handler+0x10>)
    26cc:	4798      	blx	r3
    26ce:	bd08      	pop	{r3, pc}
    26d0:	200006c8 	.word	0x200006c8
    26d4:	00002281 	.word	0x00002281

000026d8 <TC2_Handler>:
{
    26d8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    26da:	4b02      	ldr	r3, [pc, #8]	; (26e4 <TC2_Handler+0xc>)
    26dc:	6898      	ldr	r0, [r3, #8]
    26de:	4b02      	ldr	r3, [pc, #8]	; (26e8 <TC2_Handler+0x10>)
    26e0:	4798      	blx	r3
    26e2:	bd08      	pop	{r3, pc}
    26e4:	200006c8 	.word	0x200006c8
    26e8:	00002281 	.word	0x00002281

000026ec <TC3_Handler>:
{
    26ec:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    26ee:	4b02      	ldr	r3, [pc, #8]	; (26f8 <TC3_Handler+0xc>)
    26f0:	68d8      	ldr	r0, [r3, #12]
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <TC3_Handler+0x10>)
    26f4:	4798      	blx	r3
    26f6:	bd08      	pop	{r3, pc}
    26f8:	200006c8 	.word	0x200006c8
    26fc:	00002269 	.word	0x00002269

00002700 <TC4_Handler>:
{
    2700:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    2702:	4b02      	ldr	r3, [pc, #8]	; (270c <TC4_Handler+0xc>)
    2704:	6918      	ldr	r0, [r3, #16]
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <TC4_Handler+0x10>)
    2708:	4798      	blx	r3
    270a:	bd08      	pop	{r3, pc}
    270c:	200006c8 	.word	0x200006c8
    2710:	00002269 	.word	0x00002269

00002714 <TC5_Handler>:
{
    2714:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <TC5_Handler+0xc>)
    2718:	6958      	ldr	r0, [r3, #20]
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <TC5_Handler+0x10>)
    271c:	4798      	blx	r3
    271e:	bd08      	pop	{r3, pc}
    2720:	200006c8 	.word	0x200006c8
    2724:	00002269 	.word	0x00002269

00002728 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2728:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    272a:	4604      	mov	r4, r0
    272c:	b330      	cbz	r0, 277c <_wdt_init+0x54>
    272e:	6800      	ldr	r0, [r0, #0]
    2730:	3000      	adds	r0, #0
    2732:	bf18      	it	ne
    2734:	2001      	movne	r0, #1
    2736:	225a      	movs	r2, #90	; 0x5a
    2738:	4914      	ldr	r1, [pc, #80]	; (278c <_wdt_init+0x64>)
    273a:	4b15      	ldr	r3, [pc, #84]	; (2790 <_wdt_init+0x68>)
    273c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    273e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2740:	689a      	ldr	r2, [r3, #8]
    2742:	f012 0f0e 	tst.w	r2, #14
    2746:	d1fb      	bne.n	2740 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2748:	781a      	ldrb	r2, [r3, #0]
    274a:	09d2      	lsrs	r2, r2, #7
    274c:	d118      	bne.n	2780 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    274e:	689a      	ldr	r2, [r3, #8]
    2750:	f012 0f0e 	tst.w	r2, #14
    2754:	d1fb      	bne.n	274e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2756:	781a      	ldrb	r2, [r3, #0]
    2758:	f012 0f02 	tst.w	r2, #2
    275c:	d113      	bne.n	2786 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    275e:	689a      	ldr	r2, [r3, #8]
    2760:	f012 0f0e 	tst.w	r2, #14
    2764:	d1fb      	bne.n	275e <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    2766:	781a      	ldrb	r2, [r3, #0]
    2768:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    276c:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    276e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2770:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2776:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2778:	2000      	movs	r0, #0
    277a:	bd10      	pop	{r4, pc}
    277c:	2000      	movs	r0, #0
    277e:	e7da      	b.n	2736 <_wdt_init+0xe>
		return ERR_DENIED;
    2780:	f06f 0010 	mvn.w	r0, #16
    2784:	bd10      	pop	{r4, pc}
    2786:	f06f 0010 	mvn.w	r0, #16
}
    278a:	bd10      	pop	{r4, pc}
    278c:	00003364 	.word	0x00003364
    2790:	00001305 	.word	0x00001305

00002794 <main>:
BaseType_t ModemTaskStatus;
uint8_t printBuff[50];
char rxReadBuf[50];

int main(void)
{
    2794:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2796:	4b03      	ldr	r3, [pc, #12]	; (27a4 <main+0x10>)
    2798:	4798      	blx	r3
	
	/* Initialize the HL7618RD modem power signals */
	modemPowerInit();
    279a:	4b03      	ldr	r3, [pc, #12]	; (27a8 <main+0x14>)
    279c:	4798      	blx	r3
	
	while (1)
	{
		MdmParam_TestModemBaseParameters();
    279e:	4c03      	ldr	r4, [pc, #12]	; (27ac <main+0x18>)
    27a0:	47a0      	blx	r4
    27a2:	e7fd      	b.n	27a0 <main+0xc>
    27a4:	0000077d 	.word	0x0000077d
    27a8:	000005d1 	.word	0x000005d1
    27ac:	00000575 	.word	0x00000575

000027b0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    27b0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    27b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    27b4:	689a      	ldr	r2, [r3, #8]
    27b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    27b8:	689a      	ldr	r2, [r3, #8]
    27ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    27bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    27be:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    27c0:	6803      	ldr	r3, [r0, #0]
    27c2:	3301      	adds	r3, #1
    27c4:	6003      	str	r3, [r0, #0]
    27c6:	4770      	bx	lr

000027c8 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    27c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    27ca:	6842      	ldr	r2, [r0, #4]
    27cc:	6881      	ldr	r1, [r0, #8]
    27ce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    27d0:	6882      	ldr	r2, [r0, #8]
    27d2:	6841      	ldr	r1, [r0, #4]
    27d4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    27da:	bf04      	itt	eq
    27dc:	6882      	ldreq	r2, [r0, #8]
    27de:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    27e0:	2200      	movs	r2, #0
    27e2:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    27e4:	681a      	ldr	r2, [r3, #0]
    27e6:	3a01      	subs	r2, #1
    27e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    27ea:	6818      	ldr	r0, [r3, #0]
}
    27ec:	4770      	bx	lr
	...

000027f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    27f0:	4b07      	ldr	r3, [pc, #28]	; (2810 <pxCurrentTCBConst2>)
    27f2:	6819      	ldr	r1, [r3, #0]
    27f4:	6808      	ldr	r0, [r1, #0]
    27f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27fa:	f380 8809 	msr	PSP, r0
    27fe:	f3bf 8f6f 	isb	sy
    2802:	f04f 0000 	mov.w	r0, #0
    2806:	f380 8811 	msr	BASEPRI, r0
    280a:	4770      	bx	lr
    280c:	f3af 8000 	nop.w

00002810 <pxCurrentTCBConst2>:
    2810:	20000778 	.word	0x20000778
	...

00002820 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    2820:	f3ef 8009 	mrs	r0, PSP
    2824:	f3bf 8f6f 	isb	sy
    2828:	4b15      	ldr	r3, [pc, #84]	; (2880 <pxCurrentTCBConst>)
    282a:	681a      	ldr	r2, [r3, #0]
    282c:	f01e 0f10 	tst.w	lr, #16
    2830:	bf08      	it	eq
    2832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    2836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    283a:	6010      	str	r0, [r2, #0]
    283c:	e92d 0009 	stmdb	sp!, {r0, r3}
    2840:	f04f 0080 	mov.w	r0, #128	; 0x80
    2844:	f380 8811 	msr	BASEPRI, r0
    2848:	f3bf 8f4f 	dsb	sy
    284c:	f3bf 8f6f 	isb	sy
    2850:	f000 f8da 	bl	2a08 <vTaskSwitchContext>
    2854:	f04f 0000 	mov.w	r0, #0
    2858:	f380 8811 	msr	BASEPRI, r0
    285c:	bc09      	pop	{r0, r3}
    285e:	6819      	ldr	r1, [r3, #0]
    2860:	6808      	ldr	r0, [r1, #0]
    2862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2866:	f01e 0f10 	tst.w	lr, #16
    286a:	bf08      	it	eq
    286c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2870:	f380 8809 	msr	PSP, r0
    2874:	f3bf 8f6f 	isb	sy
    2878:	4770      	bx	lr
    287a:	bf00      	nop
    287c:	f3af 8000 	nop.w

00002880 <pxCurrentTCBConst>:
    2880:	20000778 	.word	0x20000778

00002884 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    2884:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2886:	f04f 0380 	mov.w	r3, #128	; 0x80
    288a:	f383 8811 	msr	BASEPRI, r3
    288e:	f3bf 8f6f 	isb	sy
    2892:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    2896:	4b05      	ldr	r3, [pc, #20]	; (28ac <SysTick_Handler+0x28>)
    2898:	4798      	blx	r3
    289a:	b118      	cbz	r0, 28a4 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    28a0:	4b03      	ldr	r3, [pc, #12]	; (28b0 <SysTick_Handler+0x2c>)
    28a2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    28a4:	2300      	movs	r3, #0
    28a6:	f383 8811 	msr	BASEPRI, r3
    28aa:	bd08      	pop	{r3, pc}
    28ac:	000028e1 	.word	0x000028e1
    28b0:	e000ed04 	.word	0xe000ed04

000028b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    28b4:	4b09      	ldr	r3, [pc, #36]	; (28dc <prvResetNextTaskUnblockTime+0x28>)
    28b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	b143      	cbz	r3, 28d0 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    28be:	4b07      	ldr	r3, [pc, #28]	; (28dc <prvResetNextTaskUnblockTime+0x28>)
    28c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    28c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    28c6:	68d2      	ldr	r2, [r2, #12]
    28c8:	6852      	ldr	r2, [r2, #4]
    28ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    28ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    28d0:	f04f 32ff 	mov.w	r2, #4294967295
    28d4:	4b01      	ldr	r3, [pc, #4]	; (28dc <prvResetNextTaskUnblockTime+0x28>)
    28d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    28da:	4770      	bx	lr
    28dc:	200006e0 	.word	0x200006e0

000028e0 <xTaskIncrementTick>:
{
    28e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    28e4:	4b44      	ldr	r3, [pc, #272]	; (29f8 <xTaskIncrementTick+0x118>)
    28e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    28ea:	2b00      	cmp	r3, #0
    28ec:	d173      	bne.n	29d6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    28ee:	4b42      	ldr	r3, [pc, #264]	; (29f8 <xTaskIncrementTick+0x118>)
    28f0:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    28f4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    28f6:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    28fa:	b9e6      	cbnz	r6, 2936 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    28fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	b143      	cbz	r3, 2916 <xTaskIncrementTick+0x36>
	__asm volatile("	mov %0, %1												\n"
    2904:	f04f 0380 	mov.w	r3, #128	; 0x80
    2908:	f383 8811 	msr	BASEPRI, r3
    290c:	f3bf 8f6f 	isb	sy
    2910:	f3bf 8f4f 	dsb	sy
    2914:	e7fe      	b.n	2914 <xTaskIncrementTick+0x34>
    2916:	4b38      	ldr	r3, [pc, #224]	; (29f8 <xTaskIncrementTick+0x118>)
    2918:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    291c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    2920:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    2924:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    2928:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    292c:	3201      	adds	r2, #1
    292e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2932:	4b32      	ldr	r3, [pc, #200]	; (29fc <xTaskIncrementTick+0x11c>)
    2934:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2936:	4b30      	ldr	r3, [pc, #192]	; (29f8 <xTaskIncrementTick+0x118>)
    2938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    293c:	429e      	cmp	r6, r3
    293e:	d20d      	bcs.n	295c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    2940:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2942:	4b2d      	ldr	r3, [pc, #180]	; (29f8 <xTaskIncrementTick+0x118>)
    2944:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2948:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    294a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    294e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    2954:	2b02      	cmp	r3, #2
    2956:	bf28      	it	cs
    2958:	2401      	movcs	r4, #1
    295a:	e043      	b.n	29e4 <xTaskIncrementTick+0x104>
    295c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    295e:	4d26      	ldr	r5, [pc, #152]	; (29f8 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2960:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2a04 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    2964:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    2968:	e021      	b.n	29ae <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    296a:	f04f 32ff 	mov.w	r2, #4294967295
    296e:	4b22      	ldr	r3, [pc, #136]	; (29f8 <xTaskIncrementTick+0x118>)
    2970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    2974:	e7e5      	b.n	2942 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    2976:	4a20      	ldr	r2, [pc, #128]	; (29f8 <xTaskIncrementTick+0x118>)
    2978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    297c:	e7e1      	b.n	2942 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    297e:	f107 0018 	add.w	r0, r7, #24
    2982:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    2984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2986:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    298a:	4298      	cmp	r0, r3
    298c:	bf88      	it	hi
    298e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    2992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2996:	4649      	mov	r1, r9
    2998:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    299c:	4b18      	ldr	r3, [pc, #96]	; (2a00 <xTaskIncrementTick+0x120>)
    299e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    29a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    29a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    29a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    29a8:	429a      	cmp	r2, r3
    29aa:	bf28      	it	cs
    29ac:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    29ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d0d8      	beq.n	296a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    29b8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    29bc:	68db      	ldr	r3, [r3, #12]
    29be:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    29c0:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    29c2:	429e      	cmp	r6, r3
    29c4:	d3d7      	bcc.n	2976 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    29c6:	f107 0904 	add.w	r9, r7, #4
    29ca:	4648      	mov	r0, r9
    29cc:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    29ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29d0:	2b00      	cmp	r3, #0
    29d2:	d1d4      	bne.n	297e <xTaskIncrementTick+0x9e>
    29d4:	e7d6      	b.n	2984 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    29d6:	4a08      	ldr	r2, [pc, #32]	; (29f8 <xTaskIncrementTick+0x118>)
    29d8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    29dc:	3301      	adds	r3, #1
    29de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    29e2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    29e4:	4b04      	ldr	r3, [pc, #16]	; (29f8 <xTaskIncrementTick+0x118>)
    29e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    29ea:	2b00      	cmp	r3, #0
}
    29ec:	bf0c      	ite	eq
    29ee:	4620      	moveq	r0, r4
    29f0:	2001      	movne	r0, #1
    29f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29f6:	bf00      	nop
    29f8:	200006e0 	.word	0x200006e0
    29fc:	000028b5 	.word	0x000028b5
    2a00:	000027b1 	.word	0x000027b1
    2a04:	000027c9 	.word	0x000027c9

00002a08 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2a08:	4b25      	ldr	r3, [pc, #148]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2a0e:	b9fb      	cbnz	r3, 2a50 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    2a10:	4a23      	ldr	r2, [pc, #140]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a12:	2300      	movs	r3, #0
    2a14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2a18:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    2a1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2a20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2a24:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2a26:	b9c2      	cbnz	r2, 2a5a <vTaskSwitchContext+0x52>
    2a28:	b14b      	cbz	r3, 2a3e <vTaskSwitchContext+0x36>
    2a2a:	491d      	ldr	r1, [pc, #116]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a2c:	3b01      	subs	r3, #1
    2a2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2a32:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2a36:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2a38:	b97a      	cbnz	r2, 2a5a <vTaskSwitchContext+0x52>
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d1f6      	bne.n	2a2c <vTaskSwitchContext+0x24>
    2a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a42:	f383 8811 	msr	BASEPRI, r3
    2a46:	f3bf 8f6f 	isb	sy
    2a4a:	f3bf 8f4f 	dsb	sy
    2a4e:	e7fe      	b.n	2a4e <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    2a50:	2201      	movs	r2, #1
    2a52:	4b13      	ldr	r3, [pc, #76]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a54:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2a58:	4770      	bx	lr
{
    2a5a:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2a5c:	4a10      	ldr	r2, [pc, #64]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a5e:	0099      	lsls	r1, r3, #2
    2a60:	18c8      	adds	r0, r1, r3
    2a62:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2a66:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2a68:	6864      	ldr	r4, [r4, #4]
    2a6a:	62c4      	str	r4, [r0, #44]	; 0x2c
    2a6c:	4419      	add	r1, r3
    2a6e:	4602      	mov	r2, r0
    2a70:	3230      	adds	r2, #48	; 0x30
    2a72:	4294      	cmp	r4, r2
    2a74:	d00d      	beq.n	2a92 <vTaskSwitchContext+0x8a>
    2a76:	4a0a      	ldr	r2, [pc, #40]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a78:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2a7c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2a80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2a82:	68c9      	ldr	r1, [r1, #12]
    2a84:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    2a88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    2a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a90:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2a92:	6860      	ldr	r0, [r4, #4]
    2a94:	4a02      	ldr	r2, [pc, #8]	; (2aa0 <vTaskSwitchContext+0x98>)
    2a96:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2a9a:	62d0      	str	r0, [r2, #44]	; 0x2c
    2a9c:	e7eb      	b.n	2a76 <vTaskSwitchContext+0x6e>
    2a9e:	bf00      	nop
    2aa0:	200006e0 	.word	0x200006e0

00002aa4 <__libc_init_array>:
    2aa4:	b570      	push	{r4, r5, r6, lr}
    2aa6:	4e0d      	ldr	r6, [pc, #52]	; (2adc <__libc_init_array+0x38>)
    2aa8:	4c0d      	ldr	r4, [pc, #52]	; (2ae0 <__libc_init_array+0x3c>)
    2aaa:	1ba4      	subs	r4, r4, r6
    2aac:	10a4      	asrs	r4, r4, #2
    2aae:	2500      	movs	r5, #0
    2ab0:	42a5      	cmp	r5, r4
    2ab2:	d109      	bne.n	2ac8 <__libc_init_array+0x24>
    2ab4:	4e0b      	ldr	r6, [pc, #44]	; (2ae4 <__libc_init_array+0x40>)
    2ab6:	4c0c      	ldr	r4, [pc, #48]	; (2ae8 <__libc_init_array+0x44>)
    2ab8:	f000 fc60 	bl	337c <_init>
    2abc:	1ba4      	subs	r4, r4, r6
    2abe:	10a4      	asrs	r4, r4, #2
    2ac0:	2500      	movs	r5, #0
    2ac2:	42a5      	cmp	r5, r4
    2ac4:	d105      	bne.n	2ad2 <__libc_init_array+0x2e>
    2ac6:	bd70      	pop	{r4, r5, r6, pc}
    2ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2acc:	4798      	blx	r3
    2ace:	3501      	adds	r5, #1
    2ad0:	e7ee      	b.n	2ab0 <__libc_init_array+0xc>
    2ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2ad6:	4798      	blx	r3
    2ad8:	3501      	adds	r5, #1
    2ada:	e7f2      	b.n	2ac2 <__libc_init_array+0x1e>
    2adc:	00003388 	.word	0x00003388
    2ae0:	00003388 	.word	0x00003388
    2ae4:	00003388 	.word	0x00003388
    2ae8:	0000338c 	.word	0x0000338c

00002aec <memset>:
    2aec:	4402      	add	r2, r0
    2aee:	4603      	mov	r3, r0
    2af0:	4293      	cmp	r3, r2
    2af2:	d100      	bne.n	2af6 <memset+0xa>
    2af4:	4770      	bx	lr
    2af6:	f803 1b01 	strb.w	r1, [r3], #1
    2afa:	e7f9      	b.n	2af0 <memset+0x4>

00002afc <strcpy>:
    2afc:	4603      	mov	r3, r0
    2afe:	f811 2b01 	ldrb.w	r2, [r1], #1
    2b02:	f803 2b01 	strb.w	r2, [r3], #1
    2b06:	2a00      	cmp	r2, #0
    2b08:	d1f9      	bne.n	2afe <strcpy+0x2>
    2b0a:	4770      	bx	lr

00002b0c <ModemCmdData>:
    2b0c:	0500 0002 2c9c 0000 0003 0000 02d1 0000     .....,..........
    2b1c:	0009 0000 0a01 000f 2ca0 0000 0008 0000     .........,......
    2b2c:	02d1 0000 001f 0000 0b02 0003 2cac 0000     .............,..
    2b3c:	000c 0000 02d1 0000 0014 0000 0603 0006     ................
    2b4c:	2cbc 0000 0008 0000 02d1 0000 001d 0000     .,..............
    2b5c:	0704 0005 2cc8 0000 0008 0000 02d1 0000     .....,..........
    2b6c:	001e 0000 0a05 0001 2cd4 0000 000a 0000     .........,......
    2b7c:	02d1 0000 001c 0000 0706 000e 2ce0 0000     .............,..
    2b8c:	000a 0000 02d1 0000 0026 0000 0000 0000     ........&.......
	...
    2c9c:	5441 000d 5441 432b 5347 0d4e 0000 0000     AT..AT+CGSN.....
    2cac:	5441 572b 4143 5252 4549 0d52 0000 0000     AT+WCARRIER.....
    2cbc:	5441 492b 5250 0d3f 0000 0000 5441 432b     AT+IPR?.....AT+C
    2ccc:	4950 3f4e 000d 0000 5441 432b 5247 4745     PIN?....AT+CGREG
    2cdc:	0d3f 0000 5441 4b2b 5347 3d4e 0d33 0000     ?...AT+KGSN=3...
    2cec:	4553 4352 4d4f 2033 6f6e 2074 6e69 7469     SERCOM3 not init
    2cfc:	6169 696c 657a 0d64 000a 0000 4f4d 4544     ialized.....MODE
    2d0c:	204d 4144 4154 5520 5241 2054 5328 5245     M DATA UART (SER
    2d1c:	4f43 334d 2029 6e69 7469 6169 696c 657a     COM3) initialize
    2d2c:	0d64 000a 6f4d 6564 206d 6144 6174 5420     d...Modem Data T
    2d3c:	2078 6144 6174 5220 6765 4520 706d 7974     x Data Reg Empty
    2d4c:	4320 6c61 426c 6361 0d6b 000a 6f4d 6564      CallBack...Mode
    2d5c:	206d 6144 6174 5420 2078 7962 6574 4320     m Data Tx byte C
    2d6c:	6d6f 6c70 7465 2065 6143 6c6c 6162 6b63     omplete Callback
    2d7c:	0a0d 0000 6f50 6577 2072 6e4f 5720 6961     ....Power On Wai
    2d8c:	2074 6954 656d 2072 7845 6970 6572 0d64     t Timer Expired.
    2d9c:	000a 0000 6f4d 6564 206d 6f50 6577 2072     ....Modem Power 
    2dac:	6e4f 6920 696e 6974 6c61 7a69 7461 6f69     On initializatio
    2dbc:	206e 6f43 706d 656c 6574 0d64 000a 0000     n Completed.....
    2dcc:	6f50 6577 4f72 576e 6961 5474 6d69 7265     PowerOnWaitTimer
    2ddc:	0000 0000 6f4d 6564 206d 7546 6c6c 2079     ....Modem Fully 
    2dec:	704f 7265 7461 6f69 616e 2e6c 0a0d 0000     Operational.....
    2dfc:	7854 7320 7265 6169 206c 6544 7562 2067     Tx serial Debug 
    2e0c:	6f44 656e 0a0d 0000 7852 4420 6e6f 0d65     Done....Rx Done.
    2e1c:	000a 0000 2e2e 682f 6c61 692f 636e 756c     ....../hal/inclu
    2e2c:	6564 682f 6c61 775f 7464 682e 0000 0000     de/hal_wdt.h....
    2e3c:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    2e4c:	5f63 7973 636e 632e 0000 0000 2e2e 682f     c_sync.c....../h
    2e5c:	6c61 732f 6372 682f 6c61 615f 6364 735f     al/src/hal_adc_s
    2e6c:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    2e7c:	6372 682f 6c61 645f 6361 735f 6e79 2e63     rc/hal_dac_sync.
    2e8c:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
    2e9c:	6c61 665f 616c 6873 632e 0000 2e2e 682f     al_flash.c..../h
    2eac:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    2ebc:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    2ecc:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
    2edc:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    2eec:	736c 6c5f 7369 2e74 0063 0000 2e2e 682f     ls_list.c...../h
    2efc:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    2f0c:	736c 725f 6e69 6267 6675 6566 2e72 0063     ls_ringbuffer.c.
    2f1c:	2e2e 682f 6c70 612f 2f63 7068 5f6c 6361     ../hpl/ac/hpl_ac
    2f2c:	632e 0000                                   .c..

00002f30 <_adcs>:
    2f30:	0000 00c0 0002 0083 1900 0000 0000 0000     ................
    2f40:	0000 0000 0001 0001 0000 0000 0000 0000     ................
	...
    2f5c:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    2f6c:	6364 632e 0000 0000 2e2e 682f 6c70 642f     dc.c....../hpl/d
    2f7c:	6361 682f 6c70 645f 6361 632e 0000 0000     ac/hpl_dac.c....

00002f8c <_cfgs>:
	...

0000308c <user_mux_confs>:
	...

000030d0 <channel_confs>:
	...

00003110 <interrupt_cfg>:
	...
    3190:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    31a0:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    31b0:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    31c0:	0000 4300 0400 4300                         ...C...C

000031c8 <_usarts>:
    31c8:	0003 0000 0004 4020 0000 0003 0002 0070     ...... @......p.
    31d8:	f62b 0000 0000 0000 0004 0000 0184 4030     +.............0@
    31e8:	0300 0003 0002 0070 ff2e 0000 0000 0000     ......p.........
    31f8:	0005 0000 0004 4030 0000 0003 0002 0070     ......0@......p.
    3208:	f62b 0000 0000 0000                         +.......

00003210 <_i2cms>:
	...

00003228 <sercomspi_regs>:
	...
    323c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    324c:	5f6c 6573 6372 6d6f 632e 0000 6000 4101     l_sercom.c...`.A
    325c:	8000 4101 0c00 4200 1000 4200 1000 4300     ...A...B...B...C

0000326c <_tccs>:
    326c:	0000 0000 0300 0000 0000 0000 0000 0000     ................
    327c:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    328c:	0000 0000 0001 0000 0300 0000 0000 0000     ................
    329c:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    32b4:	0002 0000 0300 0000 0000 0000 0000 0000     ................
    32c4:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    32d4:	0000 0000 0003 0000 0300 0000 0000 0000     ................
    32e4:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    32fc:	0004 0000 0300 0000 0000 0000 0000 0000     ................
    330c:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    331c:	0000 0000 2e2e 682f 6c70 742f 6363 682f     ....../hpl/tcc/h
    332c:	6c70 745f 6363 632e 0000 0000 3800 4000     pl_tcc.c.....8.@
    333c:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    334c:	1800 4200 2e2e 682f 6c70 742f 2f63 7068     ...B../hpl/tc/hp
    335c:	5f6c 6374 632e 0000 2e2e 682f 6c70 772f     l_tc.c..../hpl/w
    336c:	7464 682f 6c70 775f 7464 632e 0000 0000     dt/hpl_wdt.c....

0000337c <_init>:
    337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337e:	bf00      	nop
    3380:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3382:	bc08      	pop	{r3}
    3384:	469e      	mov	lr, r3
    3386:	4770      	bx	lr

00003388 <__init_array_start>:
    3388:	00000289 	.word	0x00000289

0000338c <_fini>:
    338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    338e:	bf00      	nop
    3390:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3392:	bc08      	pop	{r3}
    3394:	469e      	mov	lr, r3
    3396:	4770      	bx	lr

00003398 <__fini_array_start>:
    3398:	00000265 	.word	0x00000265
