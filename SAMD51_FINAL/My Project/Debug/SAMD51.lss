
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044c4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  000044c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200d8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200d8  2**0
                  CONTENTS
  4 .bss          00003c74  200000e0  000045b0  000200e0  2**4
                  ALLOC
  5 .stack        00010004  20003d54  00008224  000200e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020106  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004c493  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006b42  00000000  00000000  0006c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014d60  00000000  00000000  00073134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001540  00000000  00000000  00087e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001b30  00000000  00000000  000893d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034f73  00000000  00000000  0008af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021519  00000000  00000000  000bfe77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001036c3  00000000  00000000  000e1390  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ae4  00000000  00000000  001e4a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 3d 01 20 9d 09 00 00 35 0a 00 00 35 0a 00 00     X=. ....5...5...
      10:	35 0a 00 00 35 0a 00 00 35 0a 00 00 00 00 00 00     5...5...5.......
	...
      2c:	71 1d 00 00 35 0a 00 00 00 00 00 00 11 1e 00 00     q...5...........
      3c:	75 1e 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     u...5...5...5...
      4c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      5c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      6c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      7c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      8c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      9c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      ac:	35 0a 00 00 35 0a 00 00 65 15 00 00 79 15 00 00     5...5...e...y...
      bc:	49 14 00 00 55 14 00 00 61 14 00 00 6d 14 00 00     I...U...a...m...
      cc:	79 14 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     y...5...5...5...
      dc:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
      ec:	35 0a 00 00 00 00 00 00 75 16 00 00 35 0a 00 00     5.......u...5...
      fc:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     10c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     11c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 91 04 00 00     5...5...5.......
     12c:	9d 04 00 00 a9 04 00 00 35 0a 00 00 35 0a 00 00     ........5...5...
     13c:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     14c:	35 0a 00 00 2d 08 00 00 35 0a 00 00 00 00 00 00     5...-...5.......
	...
     180:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     190:	00 00 00 00 91 19 00 00 35 0a 00 00 35 0a 00 00     ........5...5...
     1a0:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     1b0:	a5 19 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     ....5...5...5...
     1c0:	35 0a 00 00 b9 19 00 00 35 0a 00 00 35 0a 00 00     5.......5...5...
     1d0:	35 0a 00 00 cd 19 00 00 35 0a 00 00 35 0a 00 00     5.......5...5...
     1e0:	e1 19 00 00 35 0a 00 00 35 0a 00 00 3d 1a 00 00     ....5...5...=...
     1f0:	51 1a 00 00 65 1a 00 00 79 1a 00 00 8d 1a 00 00     Q...e...y.......
     200:	a1 1a 00 00 00 00 00 00 00 00 00 00 35 0a 00 00     ............5...
     210:	35 0a 00 00 35 0a 00 00 d5 03 00 00 e9 03 00 00     5...5...........
     220:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     230:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     240:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     250:	35 0a 00 00 35 0a 00 00 35 0a 00 00 35 0a 00 00     5...5...5...5...
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000e0 	.word	0x200000e0
     280:	00000000 	.word	0x00000000
     284:	000044c4 	.word	0x000044c4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000044c4 	.word	0x000044c4
     2c4:	200000e4 	.word	0x200000e4
     2c8:	000044c4 	.word	0x000044c4
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b088      	sub	sp, #32
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490c      	ldr	r1, [pc, #48]	; (328 <vApplicationStackOverflowHook+0x58>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0c      	ldr	r3, [pc, #48]	; (32c <vApplicationStackOverflowHook+0x5c>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <vApplicationStackOverflowHook+0x60>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <vApplicationStackOverflowHook+0x64>)
     30a:	4798      	blx	r3

	requestWatchDogForcedReset();
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <vApplicationStackOverflowHook+0x68>)
     30e:	4798      	blx	r3
}
     310:	b008      	add	sp, #32
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	00002eef 	.word	0x00002eef
     318:	000037b0 	.word	0x000037b0
     31c:	000007a1 	.word	0x000007a1
     320:	000037ec 	.word	0x000037ec
     324:	0000410c 	.word	0x0000410c
     328:	00003828 	.word	0x00003828
     32c:	00003079 	.word	0x00003079
     330:	000030d1 	.word	0x000030d1
     334:	0000075d 	.word	0x0000075d
     338:	00000925 	.word	0x00000925

0000033c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
     33c:	b538      	push	{r3, r4, r5, lr}
	DEBUG_PRINT("**********************************************************");
     33e:	4d05      	ldr	r5, [pc, #20]	; (354 <vApplicationMallocFailedHook+0x18>)
     340:	4628      	mov	r0, r5
     342:	4c05      	ldr	r4, [pc, #20]	; (358 <vApplicationMallocFailedHook+0x1c>)
     344:	47a0      	blx	r4
	DEBUG_PRINT("***************MALLOC FAILURE DETECTED********************");
     346:	4805      	ldr	r0, [pc, #20]	; (35c <vApplicationMallocFailedHook+0x20>)
     348:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     34a:	4628      	mov	r0, r5
     34c:	47a0      	blx	r4
	requestWatchDogForcedReset();
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <vApplicationMallocFailedHook+0x24>)
     350:	4798      	blx	r3
     352:	bd38      	pop	{r3, r4, r5, pc}
     354:	000037b0 	.word	0x000037b0
     358:	000007a1 	.word	0x000007a1
     35c:	0000383c 	.word	0x0000383c
     360:	00000925 	.word	0x00000925

00000364 <sensorAdcReadChannel>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
int32_t sensorAdcReadChannel(const uint8_t channel, uint16_t* result,const uint16_t length)
{
     364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     368:	b083      	sub	sp, #12
     36a:	4604      	mov	r4, r0
     36c:	460f      	mov	r7, r1
     36e:	4690      	mov	r8, r2
	int32_t bytesRead = 0;
	uint32_t voltageInMv = 0;
	uint8_t buffer[2] = {0};
     370:	2300      	movs	r3, #0
     372:	ae02      	add	r6, sp, #8
     374:	f826 3d04 	strh.w	r3, [r6, #-4]!
	*result = 0;
     378:	800b      	strh	r3, [r1, #0]
	static uint8_t index = 0;
	double_t voltageBuffer[4] = {0.0,0.0,0.0,0.0};
		
	const TickType_t xAdcConvDelayMs = pdMS_TO_TICKS(10UL);

    adc_sync_enable_channel(&ADC_0, channel);
     37a:	4d11      	ldr	r5, [pc, #68]	; (3c0 <sensorAdcReadChannel+0x5c>)
     37c:	4601      	mov	r1, r0
     37e:	4628      	mov	r0, r5
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <sensorAdcReadChannel+0x60>)
     382:	4798      	blx	r3
	adc_sync_set_inputs(&ADC_0, channel, 0x19, channel);
     384:	4623      	mov	r3, r4
     386:	2219      	movs	r2, #25
     388:	4621      	mov	r1, r4
     38a:	4628      	mov	r0, r5
     38c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 3d0 <sensorAdcReadChannel+0x6c>
     390:	47c8      	blx	r9
	bytesRead = adc_sync_read_channel(&ADC_0, channel, &buffer[0], length);
     392:	4643      	mov	r3, r8
     394:	4632      	mov	r2, r6
     396:	4621      	mov	r1, r4
     398:	4628      	mov	r0, r5
     39a:	4e0b      	ldr	r6, [pc, #44]	; (3c8 <sensorAdcReadChannel+0x64>)
     39c:	47b0      	blx	r6
     39e:	4606      	mov	r6, r0
	adc_sync_disable_channel(&ADC_0, channel);
     3a0:	4621      	mov	r1, r4
     3a2:	4628      	mov	r0, r5
     3a4:	4b09      	ldr	r3, [pc, #36]	; (3cc <sensorAdcReadChannel+0x68>)
     3a6:	4798      	blx	r3

	*result = ((buffer[1] << 8) | (buffer[0] & 0x00FF));
     3a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
     3ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
     3b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     3b4:	803b      	strh	r3, [r7, #0]
	
	voltageCalculated = (*result) * (VOLT_SCALE_ADC0);

	return bytesRead;
}
     3b6:	4630      	mov	r0, r6
     3b8:	b003      	add	sp, #12
     3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     3be:	bf00      	nop
     3c0:	20003c2c 	.word	0x20003c2c
     3c4:	00000dd9 	.word	0x00000dd9
     3c8:	00000e31 	.word	0x00000e31
     3cc:	00000e05 	.word	0x00000e05
     3d0:	00000ed1 	.word	0x00000ed1

000003d4 <ADC0_0_Handler>:
/*
 * Not using ADC interrupts now.
 * These are dummy handlers for ADC interrupts.
 */
void ADC0_0_Handler(void)
{
     3d4:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_0 handler");
     3d6:	4802      	ldr	r0, [pc, #8]	; (3e0 <ADC0_0_Handler+0xc>)
     3d8:	4b02      	ldr	r3, [pc, #8]	; (3e4 <ADC0_0_Handler+0x10>)
     3da:	4798      	blx	r3
     3dc:	bd08      	pop	{r3, pc}
     3de:	bf00      	nop
     3e0:	00003878 	.word	0x00003878
     3e4:	000007a1 	.word	0x000007a1

000003e8 <ADC0_1_Handler>:
}

void ADC0_1_Handler(void)
{
     3e8:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_1 handler");
     3ea:	4802      	ldr	r0, [pc, #8]	; (3f4 <ADC0_1_Handler+0xc>)
     3ec:	4b02      	ldr	r3, [pc, #8]	; (3f8 <ADC0_1_Handler+0x10>)
     3ee:	4798      	blx	r3
     3f0:	bd08      	pop	{r3, pc}
     3f2:	bf00      	nop
     3f4:	0000388c 	.word	0x0000388c
     3f8:	000007a1 	.word	0x000007a1

000003fc <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     3fc:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     3fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     402:	460d      	mov	r5, r1
     404:	4c04      	ldr	r4, [pc, #16]	; (418 <getModemCommandData+0x1c>)
     406:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     40a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     40c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     40e:	6823      	ldr	r3, [r4, #0]
     410:	602b      	str	r3, [r5, #0]
}
     412:	bc30      	pop	{r4, r5}
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	000038a0 	.word	0x000038a0

0000041c <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     41c:	4b01      	ldr	r3, [pc, #4]	; (424 <mdmParser_SetLastSentAtCommand+0x8>)
     41e:	7018      	strb	r0, [r3, #0]
     420:	4770      	bx	lr
     422:	bf00      	nop
     424:	20000138 	.word	0x20000138

00000428 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     428:	4b01      	ldr	r3, [pc, #4]	; (430 <mdmParser_GetLastSentAtCommand+0x8>)
     42a:	7818      	ldrb	r0, [r3, #0]
     42c:	4770      	bx	lr
     42e:	bf00      	nop
     430:	20000138 	.word	0x20000138

00000434 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     434:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     436:	490d      	ldr	r1, [pc, #52]	; (46c <mdmCtrlr_DataCommInit+0x38>)
     438:	480d      	ldr	r0, [pc, #52]	; (470 <mdmCtrlr_DataCommInit+0x3c>)
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <mdmCtrlr_DataCommInit+0x40>)
     43c:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     43e:	b100      	cbz	r0, 442 <mdmCtrlr_DataCommInit+0xe>
     440:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     442:	f44f 6200 	mov.w	r2, #2048	; 0x800
     446:	490c      	ldr	r1, [pc, #48]	; (478 <mdmCtrlr_DataCommInit+0x44>)
     448:	480c      	ldr	r0, [pc, #48]	; (47c <mdmCtrlr_DataCommInit+0x48>)
     44a:	4b0d      	ldr	r3, [pc, #52]	; (480 <mdmCtrlr_DataCommInit+0x4c>)
     44c:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
     44e:	2800      	cmp	r0, #0
     450:	d1f6      	bne.n	440 <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     452:	4c07      	ldr	r4, [pc, #28]	; (470 <mdmCtrlr_DataCommInit+0x3c>)
     454:	2201      	movs	r2, #1
     456:	4611      	mov	r1, r2
     458:	4620      	mov	r0, r4
     45a:	4b0a      	ldr	r3, [pc, #40]	; (484 <mdmCtrlr_DataCommInit+0x50>)
     45c:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     45e:	4620      	mov	r0, r4
     460:	4b09      	ldr	r3, [pc, #36]	; (488 <mdmCtrlr_DataCommInit+0x54>)
     462:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     464:	4b09      	ldr	r3, [pc, #36]	; (48c <mdmCtrlr_DataCommInit+0x58>)
     466:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
     46a:	e7e9      	b.n	440 <mdmCtrlr_DataCommInit+0xc>
     46c:	41014000 	.word	0x41014000
     470:	20000024 	.word	0x20000024
     474:	000017f1 	.word	0x000017f1
     478:	20003360 	.word	0x20003360
     47c:	20003b60 	.word	0x20003b60
     480:	00000f41 	.word	0x00000f41
     484:	0000189d 	.word	0x0000189d
     488:	00001865 	.word	0x00001865
     48c:	e000e100 	.word	0xe000e100

00000490 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     490:	2201      	movs	r2, #1
     492:	4b01      	ldr	r3, [pc, #4]	; (498 <SERCOM3_0_Handler+0x8>)
     494:	761a      	strb	r2, [r3, #24]
     496:	4770      	bx	lr
     498:	41014000 	.word	0x41014000

0000049c <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     49c:	2202      	movs	r2, #2
     49e:	4b01      	ldr	r3, [pc, #4]	; (4a4 <SERCOM3_1_Handler+0x8>)
     4a0:	761a      	strb	r2, [r3, #24]
     4a2:	4770      	bx	lr
     4a4:	41014000 	.word	0x41014000

000004a8 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     4a8:	b530      	push	{r4, r5, lr}
     4aa:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     4ac:	4d1a      	ldr	r5, [pc, #104]	; (518 <SERCOM3_2_Handler+0x70>)
     4ae:	4c1b      	ldr	r4, [pc, #108]	; (51c <SERCOM3_2_Handler+0x74>)
     4b0:	4628      	mov	r0, r5
     4b2:	47a0      	blx	r4
     4b4:	2800      	cmp	r0, #0
     4b6:	d0fb      	beq.n	4b0 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     4b8:	4817      	ldr	r0, [pc, #92]	; (518 <SERCOM3_2_Handler+0x70>)
     4ba:	4b19      	ldr	r3, [pc, #100]	; (520 <SERCOM3_2_Handler+0x78>)
     4bc:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     4be:	4601      	mov	r1, r0
     4c0:	4818      	ldr	r0, [pc, #96]	; (524 <SERCOM3_2_Handler+0x7c>)
     4c2:	4b19      	ldr	r3, [pc, #100]	; (528 <SERCOM3_2_Handler+0x80>)
     4c4:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     4c6:	4b19      	ldr	r3, [pc, #100]	; (52c <SERCOM3_2_Handler+0x84>)
     4c8:	4798      	blx	r3
     4ca:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     4cc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     4d0:	d101      	bne.n	4d6 <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
     4d2:	b009      	add	sp, #36	; 0x24
     4d4:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     4d6:	a902      	add	r1, sp, #8
     4d8:	4b15      	ldr	r3, [pc, #84]	; (530 <SERCOM3_2_Handler+0x88>)
     4da:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     4dc:	4811      	ldr	r0, [pc, #68]	; (524 <SERCOM3_2_Handler+0x7c>)
     4de:	4b15      	ldr	r3, [pc, #84]	; (534 <SERCOM3_2_Handler+0x8c>)
     4e0:	4798      	blx	r3
     4e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     4e6:	4298      	cmp	r0, r3
     4e8:	d3f3      	bcc.n	4d2 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     4ea:	4b13      	ldr	r3, [pc, #76]	; (538 <SERCOM3_2_Handler+0x90>)
     4ec:	6818      	ldr	r0, [r3, #0]
     4ee:	ab07      	add	r3, sp, #28
     4f0:	9300      	str	r3, [sp, #0]
     4f2:	2300      	movs	r3, #0
     4f4:	2203      	movs	r2, #3
     4f6:	b2e1      	uxtb	r1, r4
     4f8:	4c10      	ldr	r4, [pc, #64]	; (53c <SERCOM3_2_Handler+0x94>)
     4fa:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     4fc:	9b07      	ldr	r3, [sp, #28]
     4fe:	b13b      	cbz	r3, 510 <SERCOM3_2_Handler+0x68>
     500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     504:	4b0e      	ldr	r3, [pc, #56]	; (540 <SERCOM3_2_Handler+0x98>)
     506:	601a      	str	r2, [r3, #0]
     508:	f3bf 8f4f 	dsb	sy
     50c:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     510:	2000      	movs	r0, #0
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <SERCOM3_2_Handler+0x9c>)
     514:	4798      	blx	r3
}
     516:	e7dc      	b.n	4d2 <SERCOM3_2_Handler+0x2a>
     518:	20000024 	.word	0x20000024
     51c:	00001891 	.word	0x00001891
     520:	0000187f 	.word	0x0000187f
     524:	20003b60 	.word	0x20003b60
     528:	00000f91 	.word	0x00000f91
     52c:	00000429 	.word	0x00000429
     530:	000003fd 	.word	0x000003fd
     534:	00000fd1 	.word	0x00000fd1
     538:	2000333c 	.word	0x2000333c
     53c:	00002d39 	.word	0x00002d39
     540:	e000ed04 	.word	0xe000ed04
     544:	0000041d 	.word	0x0000041d

00000548 <ModemDiagUpdateDataBase>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagUpdateDataBase(uint8_t* buffer,CmdResponseType* cmdResponse)
{
     548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     54a:	4604      	mov	r4, r0
    switch(cmd)
     54c:	780b      	ldrb	r3, [r1, #0]
     54e:	3b01      	subs	r3, #1
     550:	2b06      	cmp	r3, #6
     552:	d826      	bhi.n	5a2 <ModemDiagUpdateDataBase+0x5a>
     554:	e8df f003 	tbb	[pc, r3]
     558:	25243725 	.word	0x25243725
     55c:	2525      	.short	0x2525
     55e:	04          	.byte	0x04
     55f:	00          	.byte	0x00
        {
        	uint8_t startIndex = 7;
        	uint8_t parseCnt = 0;

			/* Extract the serial No */
			while(parseCnt <= (cmdResponse->length - startIndex))
     560:	884b      	ldrh	r3, [r1, #2]
     562:	2b07      	cmp	r3, #7
     564:	d40d      	bmi.n	582 <ModemDiagUpdateDataBase+0x3a>
     566:	2200      	movs	r2, #0
     568:	4613      	mov	r3, r2
			{
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
     56a:	4d20      	ldr	r5, [pc, #128]	; (5ec <ModemDiagUpdateDataBase+0xa4>)
     56c:	18a0      	adds	r0, r4, r2
     56e:	79c0      	ldrb	r0, [r0, #7]
     570:	442a      	add	r2, r5
     572:	7610      	strb	r0, [r2, #24]
				parseCnt++;
     574:	3301      	adds	r3, #1
     576:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
     578:	461a      	mov	r2, r3
     57a:	8848      	ldrh	r0, [r1, #2]
     57c:	3807      	subs	r0, #7
     57e:	4283      	cmp	r3, r0
     580:	ddf4      	ble.n	56c <ModemDiagUpdateDataBase+0x24>
			}
			bModemDiagDataBaseUpdated = true;
     582:	4d1a      	ldr	r5, [pc, #104]	; (5ec <ModemDiagUpdateDataBase+0xa4>)
     584:	2601      	movs	r6, #1
     586:	462c      	mov	r4, r5
     588:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
     58c:	4818      	ldr	r0, [pc, #96]	; (5f0 <ModemDiagUpdateDataBase+0xa8>)
     58e:	4f19      	ldr	r7, [pc, #100]	; (5f4 <ModemDiagUpdateDataBase+0xac>)
     590:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
     592:	210f      	movs	r1, #15
     594:	4620      	mov	r0, r4
     596:	4b18      	ldr	r3, [pc, #96]	; (5f8 <ModemDiagUpdateDataBase+0xb0>)
     598:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
     59a:	4818      	ldr	r0, [pc, #96]	; (5fc <ModemDiagUpdateDataBase+0xb4>)
     59c:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
     59e:	702e      	strb	r6, [r5, #0]
     5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
     5a2:	4b12      	ldr	r3, [pc, #72]	; (5ec <ModemDiagUpdateDataBase+0xa4>)
     5a4:	1d1d      	adds	r5, r3, #4
     5a6:	8801      	ldrh	r1, [r0, #0]
     5a8:	7882      	ldrb	r2, [r0, #2]
     5aa:	8099      	strh	r1, [r3, #4]
     5ac:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
     5ae:	4814      	ldr	r0, [pc, #80]	; (600 <ModemDiagUpdateDataBase+0xb8>)
     5b0:	4c10      	ldr	r4, [pc, #64]	; (5f4 <ModemDiagUpdateDataBase+0xac>)
     5b2:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
     5b4:	4813      	ldr	r0, [pc, #76]	; (604 <ModemDiagUpdateDataBase+0xbc>)
     5b6:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
     5b8:	2103      	movs	r1, #3
     5ba:	4628      	mov	r0, r5
     5bc:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <ModemDiagUpdateDataBase+0xb0>)
     5be:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
     5c0:	480e      	ldr	r0, [pc, #56]	; (5fc <ModemDiagUpdateDataBase+0xb4>)
     5c2:	47a0      	blx	r4
        break;
     5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
     5c6:	4e09      	ldr	r6, [pc, #36]	; (5ec <ModemDiagUpdateDataBase+0xa4>)
     5c8:	f106 0508 	add.w	r5, r6, #8
     5cc:	6800      	ldr	r0, [r0, #0]
     5ce:	6861      	ldr	r1, [r4, #4]
     5d0:	68a2      	ldr	r2, [r4, #8]
     5d2:	68e3      	ldr	r3, [r4, #12]
     5d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
     5d6:	480c      	ldr	r0, [pc, #48]	; (608 <ModemDiagUpdateDataBase+0xc0>)
     5d8:	4c06      	ldr	r4, [pc, #24]	; (5f4 <ModemDiagUpdateDataBase+0xac>)
     5da:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
     5dc:	2110      	movs	r1, #16
     5de:	f106 0008 	add.w	r0, r6, #8
     5e2:	4b05      	ldr	r3, [pc, #20]	; (5f8 <ModemDiagUpdateDataBase+0xb0>)
     5e4:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
     5e6:	4805      	ldr	r0, [pc, #20]	; (5fc <ModemDiagUpdateDataBase+0xb4>)
     5e8:	47a0      	blx	r4
        break;
     5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5ec:	2000013c 	.word	0x2000013c
     5f0:	00004018 	.word	0x00004018
     5f4:	000007a1 	.word	0x000007a1
     5f8:	0000075d 	.word	0x0000075d
     5fc:	0000410c 	.word	0x0000410c
     600:	00003f84 	.word	0x00003f84
     604:	00003fb0 	.word	0x00003fb0
     608:	00003ff8 	.word	0x00003ff8

0000060c <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
     60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     60e:	4607      	mov	r7, r0
     610:	460c      	mov	r4, r1
     612:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
     614:	4923      	ldr	r1, [pc, #140]	; (6a4 <modemResponseHandler+0x98>)
     616:	4b24      	ldr	r3, [pc, #144]	; (6a8 <modemResponseHandler+0x9c>)
     618:	4798      	blx	r3

    if(response != NULL)
     61a:	2c00      	cmp	r4, #0
     61c:	d03e      	beq.n	69c <modemResponseHandler+0x90>
    {
        switch (cmdData.cmdSet)
     61e:	4b21      	ldr	r3, [pc, #132]	; (6a4 <modemResponseHandler+0x98>)
     620:	785b      	ldrb	r3, [r3, #1]
     622:	b113      	cbz	r3, 62a <modemResponseHandler+0x1e>
     624:	2b01      	cmp	r3, #1
     626:	d016      	beq.n	656 <modemResponseHandler+0x4a>
     628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
     62a:	4e1e      	ldr	r6, [pc, #120]	; (6a4 <modemResponseHandler+0x98>)
     62c:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
     62e:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
     630:	f106 071c 	add.w	r7, r6, #28
     634:	f44f 722f 	mov.w	r2, #700	; 0x2bc
     638:	2100      	movs	r1, #0
     63a:	4638      	mov	r0, r7
     63c:	4b1b      	ldr	r3, [pc, #108]	; (6ac <modemResponseHandler+0xa0>)
     63e:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
     640:	462a      	mov	r2, r5
     642:	4621      	mov	r1, r4
     644:	4638      	mov	r0, r7
     646:	4b1a      	ldr	r3, [pc, #104]	; (6b0 <modemResponseHandler+0xa4>)
     648:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
     64a:	f106 0114 	add.w	r1, r6, #20
     64e:	4638      	mov	r0, r7
     650:	4b18      	ldr	r3, [pc, #96]	; (6b4 <modemResponseHandler+0xa8>)
     652:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
     654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
     656:	4b18      	ldr	r3, [pc, #96]	; (6b8 <modemResponseHandler+0xac>)
     658:	6818      	ldr	r0, [r3, #0]
     65a:	4b18      	ldr	r3, [pc, #96]	; (6bc <modemResponseHandler+0xb0>)
     65c:	4798      	blx	r3
     65e:	b9c8      	cbnz	r0, 694 <modemResponseHandler+0x88>
                {
                	cmdResponse.atCmd = cmd;
     660:	4e10      	ldr	r6, [pc, #64]	; (6a4 <modemResponseHandler+0x98>)
     662:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
     664:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
     666:	4628      	mov	r0, r5
     668:	4b15      	ldr	r3, [pc, #84]	; (6c0 <modemResponseHandler+0xb4>)
     66a:	4798      	blx	r3
     66c:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
     66e:	b1c0      	cbz	r0, 6a2 <modemResponseHandler+0x96>
                	{
                		memcpy(cmdResponse.response,response,length);
     670:	462a      	mov	r2, r5
     672:	4621      	mov	r1, r4
     674:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <modemResponseHandler+0xa4>)
     676:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
     678:	2300      	movs	r3, #0
     67a:	2264      	movs	r2, #100	; 0x64
     67c:	f106 0114 	add.w	r1, r6, #20
     680:	480d      	ldr	r0, [pc, #52]	; (6b8 <modemResponseHandler+0xac>)
     682:	6800      	ldr	r0, [r0, #0]
     684:	4c0f      	ldr	r4, [pc, #60]	; (6c4 <modemResponseHandler+0xb8>)
     686:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
     688:	2801      	cmp	r0, #1
     68a:	d00a      	beq.n	6a2 <modemResponseHandler+0x96>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
     68c:	480e      	ldr	r0, [pc, #56]	; (6c8 <modemResponseHandler+0xbc>)
     68e:	4b0f      	ldr	r3, [pc, #60]	; (6cc <modemResponseHandler+0xc0>)
     690:	4798      	blx	r3
     692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
     694:	480e      	ldr	r0, [pc, #56]	; (6d0 <modemResponseHandler+0xc4>)
     696:	4b0d      	ldr	r3, [pc, #52]	; (6cc <modemResponseHandler+0xc0>)
     698:	4798      	blx	r3
     69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
     69c:	480d      	ldr	r0, [pc, #52]	; (6d4 <modemResponseHandler+0xc8>)
     69e:	4b0b      	ldr	r3, [pc, #44]	; (6cc <modemResponseHandler+0xc0>)
     6a0:	4798      	blx	r3
     6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6a4:	20000168 	.word	0x20000168
     6a8:	000003fd 	.word	0x000003fd
     6ac:	00002eef 	.word	0x00002eef
     6b0:	00002ea5 	.word	0x00002ea5
     6b4:	00000549 	.word	0x00000549
     6b8:	20003324 	.word	0x20003324
     6bc:	000025b1 	.word	0x000025b1
     6c0:	00001efd 	.word	0x00001efd
     6c4:	000021f5 	.word	0x000021f5
     6c8:	0000403c 	.word	0x0000403c
     6cc:	000007a1 	.word	0x000007a1
     6d0:	0000406c 	.word	0x0000406c
     6d4:	00004098 	.word	0x00004098

000006d8 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6dc:	4604      	mov	r4, r0
     6de:	460e      	mov	r6, r1
     6e0:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     6e2:	4d0e      	ldr	r5, [pc, #56]	; (71c <usart_async_write+0x44>)
     6e4:	4620      	mov	r0, r4
     6e6:	47a8      	blx	r5
     6e8:	2800      	cmp	r0, #0
     6ea:	d0fb      	beq.n	6e4 <usart_async_write+0xc>
     6ec:	3e01      	subs	r6, #1
     6ee:	f8df 8030 	ldr.w	r8, [pc, #48]	; 720 <usart_async_write+0x48>
     6f2:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     6f4:	f8df a02c 	ldr.w	sl, [pc, #44]	; 724 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     6f8:	4d08      	ldr	r5, [pc, #32]	; (71c <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     6fa:	7873      	ldrb	r3, [r6, #1]
     6fc:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     704:	4620      	mov	r0, r4
     706:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     708:	4620      	mov	r0, r4
     70a:	47a8      	blx	r5
     70c:	2800      	cmp	r0, #0
     70e:	d0fb      	beq.n	708 <usart_async_write+0x30>
		;
	} while (++offset < length);
     710:	3701      	adds	r7, #1
     712:	454f      	cmp	r7, r9
     714:	d3f1      	bcc.n	6fa <usart_async_write+0x22>

	return (int32_t)offset;
}
     716:	4638      	mov	r0, r7
     718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     71c:	00001887 	.word	0x00001887
     720:	20000444 	.word	0x20000444
     724:	00001879 	.word	0x00001879

00000728 <SerialDebugTxByteSentCallBack>:
     728:	2302      	movs	r3, #2
     72a:	7603      	strb	r3, [r0, #24]
     72c:	4770      	bx	lr

0000072e <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     72e:	2380      	movs	r3, #128	; 0x80
     730:	7603      	strb	r3, [r0, #24]
     732:	4770      	bx	lr

00000734 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     734:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     736:	4c05      	ldr	r4, [pc, #20]	; (74c <SerialDebugPrintInit+0x18>)
     738:	4905      	ldr	r1, [pc, #20]	; (750 <SerialDebugPrintInit+0x1c>)
     73a:	4620      	mov	r0, r4
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <SerialDebugPrintInit+0x20>)
     73e:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     740:	2201      	movs	r2, #1
     742:	4611      	mov	r1, r2
     744:	4620      	mov	r0, r4
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <SerialDebugPrintInit+0x24>)
     748:	4798      	blx	r3
     74a:	bd10      	pop	{r4, pc}
     74c:	20000040 	.word	0x20000040
     750:	43000400 	.word	0x43000400
     754:	000017f1 	.word	0x000017f1
     758:	0000189d 	.word	0x0000189d

0000075c <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	4605      	mov	r5, r0
     760:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     762:	4c05      	ldr	r4, [pc, #20]	; (778 <SerialDebugPrint+0x1c>)
     764:	4620      	mov	r0, r4
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <SerialDebugPrint+0x20>)
     768:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     76a:	4632      	mov	r2, r6
     76c:	4629      	mov	r1, r5
     76e:	4620      	mov	r0, r4
     770:	4b03      	ldr	r3, [pc, #12]	; (780 <SerialDebugPrint+0x24>)
     772:	4798      	blx	r3
     774:	bd70      	pop	{r4, r5, r6, pc}
     776:	bf00      	nop
     778:	20000040 	.word	0x20000040
     77c:	00001865 	.word	0x00001865
     780:	000006d9 	.word	0x000006d9

00000784 <SerialDebugTxDoneCallBack>:
{
     784:	b510      	push	{r4, lr}
     786:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     788:	2116      	movs	r1, #22
     78a:	4803      	ldr	r0, [pc, #12]	; (798 <SerialDebugTxDoneCallBack+0x14>)
     78c:	4b03      	ldr	r3, [pc, #12]	; (79c <SerialDebugTxDoneCallBack+0x18>)
     78e:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     790:	2301      	movs	r3, #1
     792:	7623      	strb	r3, [r4, #24]
     794:	bd10      	pop	{r4, pc}
     796:	bf00      	nop
     798:	000040e0 	.word	0x000040e0
     79c:	0000075d 	.word	0x0000075d

000007a0 <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
     7a0:	b570      	push	{r4, r5, r6, lr}
     7a2:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
     7a4:	4b17      	ldr	r3, [pc, #92]	; (804 <SerialStringPrint+0x64>)
     7a6:	4798      	blx	r3
     7a8:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
     7aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     7ae:	4b16      	ldr	r3, [pc, #88]	; (808 <SerialStringPrint+0x68>)
     7b0:	6818      	ldr	r0, [r3, #0]
     7b2:	4b16      	ldr	r3, [pc, #88]	; (80c <SerialStringPrint+0x6c>)
     7b4:	4798      	blx	r3
     7b6:	2801      	cmp	r0, #1
     7b8:	d000      	beq.n	7bc <SerialStringPrint+0x1c>
     7ba:	bd70      	pop	{r4, r5, r6, pc}
     7bc:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
     7be:	4620      	mov	r0, r4
     7c0:	4b13      	ldr	r3, [pc, #76]	; (810 <SerialStringPrint+0x70>)
     7c2:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
     7c4:	4606      	mov	r6, r0
     7c6:	b1a0      	cbz	r0, 7f2 <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
     7c8:	4622      	mov	r2, r4
     7ca:	2100      	movs	r1, #0
     7cc:	4b11      	ldr	r3, [pc, #68]	; (814 <SerialStringPrint+0x74>)
     7ce:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
     7d0:	4629      	mov	r1, r5
     7d2:	4630      	mov	r0, r6
     7d4:	4b10      	ldr	r3, [pc, #64]	; (818 <SerialStringPrint+0x78>)
     7d6:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     7d8:	4630      	mov	r0, r6
     7da:	4b0a      	ldr	r3, [pc, #40]	; (804 <SerialStringPrint+0x64>)
     7dc:	4798      	blx	r3
     7de:	b281      	uxth	r1, r0
     7e0:	4630      	mov	r0, r6
     7e2:	4c0e      	ldr	r4, [pc, #56]	; (81c <SerialStringPrint+0x7c>)
     7e4:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
     7e6:	2102      	movs	r1, #2
     7e8:	480d      	ldr	r0, [pc, #52]	; (820 <SerialStringPrint+0x80>)
     7ea:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
     7ec:	4630      	mov	r0, r6
     7ee:	4b0d      	ldr	r3, [pc, #52]	; (824 <SerialStringPrint+0x84>)
     7f0:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
     7f2:	2300      	movs	r3, #0
     7f4:	461a      	mov	r2, r3
     7f6:	4619      	mov	r1, r3
     7f8:	4803      	ldr	r0, [pc, #12]	; (808 <SerialStringPrint+0x68>)
     7fa:	6800      	ldr	r0, [r0, #0]
     7fc:	4c0a      	ldr	r4, [pc, #40]	; (828 <SerialStringPrint+0x88>)
     7fe:	47a0      	blx	r4
    }
	
	#endif
}
     800:	e7db      	b.n	7ba <SerialStringPrint+0x1a>
     802:	bf00      	nop
     804:	000030d1 	.word	0x000030d1
     808:	2000334c 	.word	0x2000334c
     80c:	000023d1 	.word	0x000023d1
     810:	00001efd 	.word	0x00001efd
     814:	00002eef 	.word	0x00002eef
     818:	000030c1 	.word	0x000030c1
     81c:	0000075d 	.word	0x0000075d
     820:	0000410c 	.word	0x0000410c
     824:	00001fdd 	.word	0x00001fdd
     828:	000021f5 	.word	0x000021f5

0000082c <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     82c:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     82e:	2204      	movs	r2, #4
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <SERCOM5_2_Handler+0x34>)
     832:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
     834:	4d0b      	ldr	r5, [pc, #44]	; (864 <SERCOM5_2_Handler+0x38>)
     836:	4c0c      	ldr	r4, [pc, #48]	; (868 <SERCOM5_2_Handler+0x3c>)
     838:	4628      	mov	r0, r5
     83a:	47a0      	blx	r4
     83c:	2800      	cmp	r0, #0
     83e:	d0fb      	beq.n	838 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
     840:	4808      	ldr	r0, [pc, #32]	; (864 <SERCOM5_2_Handler+0x38>)
     842:	4b0a      	ldr	r3, [pc, #40]	; (86c <SERCOM5_2_Handler+0x40>)
     844:	4798      	blx	r3
     846:	490a      	ldr	r1, [pc, #40]	; (870 <SERCOM5_2_Handler+0x44>)
     848:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     84a:	2300      	movs	r3, #0
     84c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     84e:	4c09      	ldr	r4, [pc, #36]	; (874 <SERCOM5_2_Handler+0x48>)
     850:	4620      	mov	r0, r4
     852:	4b09      	ldr	r3, [pc, #36]	; (878 <SERCOM5_2_Handler+0x4c>)
     854:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     856:	2105      	movs	r1, #5
     858:	4620      	mov	r0, r4
     85a:	4b08      	ldr	r3, [pc, #32]	; (87c <SERCOM5_2_Handler+0x50>)
     85c:	4798      	blx	r3
     85e:	bd38      	pop	{r3, r4, r5, pc}
     860:	43000400 	.word	0x43000400
     864:	20000040 	.word	0x20000040
     868:	00001891 	.word	0x00001891
     86c:	0000187f 	.word	0x0000187f
     870:	20003b70 	.word	0x20003b70
     874:	20003b74 	.word	0x20003b74
     878:	000030c1 	.word	0x000030c1
     87c:	0000075d 	.word	0x0000075d

00000880 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
     880:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
     882:	4b0a      	ldr	r3, [pc, #40]	; (8ac <configureWatchDogTimeOut+0x2c>)
     884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     888:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
     88a:	4c09      	ldr	r4, [pc, #36]	; (8b0 <configureWatchDogTimeOut+0x30>)
     88c:	6820      	ldr	r0, [r4, #0]
     88e:	2279      	movs	r2, #121	; 0x79
     890:	4908      	ldr	r1, [pc, #32]	; (8b4 <configureWatchDogTimeOut+0x34>)
     892:	3000      	adds	r0, #0
     894:	bf18      	it	ne
     896:	2001      	movne	r0, #1
     898:	4b07      	ldr	r3, [pc, #28]	; (8b8 <configureWatchDogTimeOut+0x38>)
     89a:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     89c:	462a      	mov	r2, r5
     89e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     8a2:	4620      	mov	r0, r4
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <configureWatchDogTimeOut+0x3c>)
     8a6:	4798      	blx	r3
     8a8:	bd38      	pop	{r3, r4, r5, pc}
     8aa:	bf00      	nop
     8ac:	2000005c 	.word	0x2000005c
     8b0:	20003c50 	.word	0x20003c50
     8b4:	00004120 	.word	0x00004120
     8b8:	00000f39 	.word	0x00000f39
     8bc:	00001b21 	.word	0x00001b21

000008c0 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
     8c0:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
     8c2:	2002      	movs	r0, #2
     8c4:	4b07      	ldr	r3, [pc, #28]	; (8e4 <enableWatchDogTimer+0x24>)
     8c6:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     8c8:	4c07      	ldr	r4, [pc, #28]	; (8e8 <enableWatchDogTimer+0x28>)
     8ca:	6820      	ldr	r0, [r4, #0]
     8cc:	2296      	movs	r2, #150	; 0x96
     8ce:	4907      	ldr	r1, [pc, #28]	; (8ec <enableWatchDogTimer+0x2c>)
     8d0:	3000      	adds	r0, #0
     8d2:	bf18      	it	ne
     8d4:	2001      	movne	r0, #1
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <enableWatchDogTimer+0x30>)
     8d8:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     8da:	4620      	mov	r0, r4
     8dc:	4b05      	ldr	r3, [pc, #20]	; (8f4 <enableWatchDogTimer+0x34>)
     8de:	4798      	blx	r3
     8e0:	bd10      	pop	{r4, pc}
     8e2:	bf00      	nop
     8e4:	00000881 	.word	0x00000881
     8e8:	20003c50 	.word	0x20003c50
     8ec:	00004120 	.word	0x00004120
     8f0:	00000f39 	.word	0x00000f39
     8f4:	00001c3d 	.word	0x00001c3d

000008f8 <atmel_start_init>:
{
     8f8:	b508      	push	{r3, lr}
    system_init();
     8fa:	4b06      	ldr	r3, [pc, #24]	; (914 <atmel_start_init+0x1c>)
     8fc:	4798      	blx	r3
    delay_ms(1000);
     8fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <atmel_start_init+0x20>)
     904:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
     906:	2201      	movs	r2, #1
     908:	4b04      	ldr	r3, [pc, #16]	; (91c <atmel_start_init+0x24>)
     90a:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
     90c:	4b04      	ldr	r3, [pc, #16]	; (920 <atmel_start_init+0x28>)
     90e:	4798      	blx	r3
     910:	bd08      	pop	{r3, pc}
     912:	bf00      	nop
     914:	00000d75 	.word	0x00000d75
     918:	00000f19 	.word	0x00000f19
     91c:	2000005c 	.word	0x2000005c
     920:	000008c1 	.word	0x000008c1

00000924 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
     924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("\r\n");
     926:	4d13      	ldr	r5, [pc, #76]	; (974 <requestWatchDogForcedReset+0x50>)
     928:	4628      	mov	r0, r5
     92a:	4c13      	ldr	r4, [pc, #76]	; (978 <requestWatchDogForcedReset+0x54>)
     92c:	47a0      	blx	r4
	DEBUG_PRINT("#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*");
     92e:	4813      	ldr	r0, [pc, #76]	; (97c <requestWatchDogForcedReset+0x58>)
     930:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     932:	4628      	mov	r0, r5
     934:	47a0      	blx	r4
	ForcedResetRequested = WDT_FORCED_RESET_ON;
     936:	2700      	movs	r7, #0
     938:	4b11      	ldr	r3, [pc, #68]	; (980 <requestWatchDogForcedReset+0x5c>)
     93a:	731f      	strb	r7, [r3, #12]
 * \retval 0  Completed sucessfully.
 * \retval -1 Always on, can't disable.
 */
static inline int32_t wdt_disable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     93c:	4e11      	ldr	r6, [pc, #68]	; (984 <requestWatchDogForcedReset+0x60>)
     93e:	4c12      	ldr	r4, [pc, #72]	; (988 <requestWatchDogForcedReset+0x64>)
     940:	6820      	ldr	r0, [r4, #0]
     942:	22a5      	movs	r2, #165	; 0xa5
     944:	4631      	mov	r1, r6
     946:	1bc0      	subs	r0, r0, r7
     948:	bf18      	it	ne
     94a:	2001      	movne	r0, #1
     94c:	4d0f      	ldr	r5, [pc, #60]	; (98c <requestWatchDogForcedReset+0x68>)
     94e:	47a8      	blx	r5

	return _wdt_disable(&wdt->dev);
     950:	4620      	mov	r0, r4
     952:	4b0f      	ldr	r3, [pc, #60]	; (990 <requestWatchDogForcedReset+0x6c>)
     954:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
     956:	4638      	mov	r0, r7
     958:	4b0e      	ldr	r3, [pc, #56]	; (994 <requestWatchDogForcedReset+0x70>)
     95a:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
     95c:	6820      	ldr	r0, [r4, #0]
     95e:	2296      	movs	r2, #150	; 0x96
     960:	4631      	mov	r1, r6
     962:	1bc0      	subs	r0, r0, r7
     964:	bf18      	it	ne
     966:	2001      	movne	r0, #1
     968:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
     96a:	4620      	mov	r0, r4
     96c:	4b0a      	ldr	r3, [pc, #40]	; (998 <requestWatchDogForcedReset+0x74>)
     96e:	4798      	blx	r3
     970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     972:	bf00      	nop
     974:	0000410c 	.word	0x0000410c
     978:	000007a1 	.word	0x000007a1
     97c:	0000413c 	.word	0x0000413c
     980:	2000005c 	.word	0x2000005c
     984:	00004120 	.word	0x00004120
     988:	20003c50 	.word	0x20003c50
     98c:	00000f39 	.word	0x00000f39
     990:	00001c79 	.word	0x00001c79
     994:	00000881 	.word	0x00000881
     998:	00001c3d 	.word	0x00001c3d

0000099c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     99c:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     99e:	4b1c      	ldr	r3, [pc, #112]	; (a10 <Reset_Handler+0x74>)
     9a0:	4a1c      	ldr	r2, [pc, #112]	; (a14 <Reset_Handler+0x78>)
     9a2:	429a      	cmp	r2, r3
     9a4:	d010      	beq.n	9c8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     9a6:	4b1c      	ldr	r3, [pc, #112]	; (a18 <Reset_Handler+0x7c>)
     9a8:	4a19      	ldr	r2, [pc, #100]	; (a10 <Reset_Handler+0x74>)
     9aa:	429a      	cmp	r2, r3
     9ac:	d20c      	bcs.n	9c8 <Reset_Handler+0x2c>
     9ae:	3b01      	subs	r3, #1
     9b0:	1a9b      	subs	r3, r3, r2
     9b2:	f023 0303 	bic.w	r3, r3, #3
     9b6:	3304      	adds	r3, #4
     9b8:	4413      	add	r3, r2
     9ba:	4916      	ldr	r1, [pc, #88]	; (a14 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     9bc:	f851 0b04 	ldr.w	r0, [r1], #4
     9c0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     9c4:	429a      	cmp	r2, r3
     9c6:	d1f9      	bne.n	9bc <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     9c8:	4b14      	ldr	r3, [pc, #80]	; (a1c <Reset_Handler+0x80>)
     9ca:	4a15      	ldr	r2, [pc, #84]	; (a20 <Reset_Handler+0x84>)
     9cc:	429a      	cmp	r2, r3
     9ce:	d20a      	bcs.n	9e6 <Reset_Handler+0x4a>
     9d0:	3b01      	subs	r3, #1
     9d2:	1a9b      	subs	r3, r3, r2
     9d4:	f023 0303 	bic.w	r3, r3, #3
     9d8:	3304      	adds	r3, #4
     9da:	4413      	add	r3, r2
                *pDest++ = 0;
     9dc:	2100      	movs	r1, #0
     9de:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     9e2:	4293      	cmp	r3, r2
     9e4:	d1fb      	bne.n	9de <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9e6:	4b0f      	ldr	r3, [pc, #60]	; (a24 <Reset_Handler+0x88>)
     9e8:	4a0f      	ldr	r2, [pc, #60]	; (a28 <Reset_Handler+0x8c>)
     9ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     9ee:	609a      	str	r2, [r3, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     9f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     9f4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     9fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a00:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     a04:	4b09      	ldr	r3, [pc, #36]	; (a2c <Reset_Handler+0x90>)
     a06:	4798      	blx	r3

        /* Branch to main function */
        main();
     a08:	4b09      	ldr	r3, [pc, #36]	; (a30 <Reset_Handler+0x94>)
     a0a:	4798      	blx	r3
     a0c:	e7fe      	b.n	a0c <Reset_Handler+0x70>
     a0e:	bf00      	nop
     a10:	20000000 	.word	0x20000000
     a14:	000044c4 	.word	0x000044c4
     a18:	200000d8 	.word	0x200000d8
     a1c:	20003d54 	.word	0x20003d54
     a20:	200000e0 	.word	0x200000e0
     a24:	e000ed00 	.word	0xe000ed00
     a28:	00000000 	.word	0x00000000
     a2c:	00002e5d 	.word	0x00002e5d
     a30:	00001cc9 	.word	0x00001cc9

00000a34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a34:	b508      	push	{r3, lr}
    DEBUG_PRINT("Unexpected Interrupt Happened...Waiting for the watch dog timeout");
     a36:	4802      	ldr	r0, [pc, #8]	; (a40 <Dummy_Handler+0xc>)
     a38:	4b02      	ldr	r3, [pc, #8]	; (a44 <Dummy_Handler+0x10>)
     a3a:	4798      	blx	r3
     a3c:	e7fe      	b.n	a3c <Dummy_Handler+0x8>
     a3e:	bf00      	nop
     a40:	00004188 	.word	0x00004188
     a44:	000007a1 	.word	0x000007a1

00000a48 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a48:	4b5d      	ldr	r3, [pc, #372]	; (bc0 <ADC_0_PORT_init+0x178>)
     a4a:	2204      	movs	r2, #4
     a4c:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a52:	629a      	str	r2, [r3, #40]	; 0x28
     a54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     a58:	629a      	str	r2, [r3, #40]	; 0x28
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a5a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     a5e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a62:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a66:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a6a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a6e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a72:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a76:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a7a:	2108      	movs	r1, #8
     a7c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a82:	6299      	str	r1, [r3, #40]	; 0x28
     a84:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a86:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     a8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a8e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a92:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a96:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a9a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a9e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aa2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
     aaa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ab2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ab6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aba:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     abe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ac6:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aca:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ace:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ad2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ad6:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ada:	f44f 7100 	mov.w	r1, #512	; 0x200
     ade:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ae2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ae6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     aea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aee:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     af2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     afa:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afe:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b02:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b06:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b0a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b0e:	2110      	movs	r1, #16
     b10:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b12:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     b16:	6299      	str	r1, [r3, #40]	; 0x28
     b18:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b1a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     b1e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b22:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b26:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b2a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b2e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b32:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b36:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b3a:	2120      	movs	r1, #32
     b3c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b3e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     b42:	6299      	str	r1, [r3, #40]	; 0x28
     b44:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b46:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     b4a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b4e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b52:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b56:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b5a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b5e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b62:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b66:	2140      	movs	r1, #64	; 0x40
     b68:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     b6e:	6299      	str	r1, [r3, #40]	; 0x28
     b70:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b72:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     b76:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b7a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b7e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b82:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b86:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b8a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b8e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b92:	2180      	movs	r1, #128	; 0x80
     b94:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     b9a:	6299      	str	r1, [r3, #40]	; 0x28
     b9c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     baa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bae:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bb2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bb6:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     bbe:	4770      	bx	lr
     bc0:	41008000 	.word	0x41008000

00000bc4 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     bc4:	4a04      	ldr	r2, [pc, #16]	; (bd8 <ADC_0_CLOCK_init+0x14>)
     bc6:	6a13      	ldr	r3, [r2, #32]
     bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     bcc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     bce:	2241      	movs	r2, #65	; 0x41
     bd0:	4b02      	ldr	r3, [pc, #8]	; (bdc <ADC_0_CLOCK_init+0x18>)
     bd2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     bd6:	4770      	bx	lr
     bd8:	40000800 	.word	0x40000800
     bdc:	40001c00 	.word	0x40001c00

00000be0 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     be0:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <ADC_0_init+0x18>)
     be4:	4798      	blx	r3

	if(ERR_NONE == adc_sync_init(&ADC_0, ADC0, (void *)NULL))
     be6:	2200      	movs	r2, #0
     be8:	4904      	ldr	r1, [pc, #16]	; (bfc <ADC_0_init+0x1c>)
     bea:	4805      	ldr	r0, [pc, #20]	; (c00 <ADC_0_init+0x20>)
     bec:	4b05      	ldr	r3, [pc, #20]	; (c04 <ADC_0_init+0x24>)
     bee:	4798      	blx	r3
	else
	{
		//DEBUG_PRINT("Failed to initialize ADC");
	}

	ADC_0_PORT_init();
     bf0:	4b05      	ldr	r3, [pc, #20]	; (c08 <ADC_0_init+0x28>)
     bf2:	4798      	blx	r3
     bf4:	bd08      	pop	{r3, pc}
     bf6:	bf00      	nop
     bf8:	00000bc5 	.word	0x00000bc5
     bfc:	43001c00 	.word	0x43001c00
     c00:	20003c2c 	.word	0x20003c2c
     c04:	00000da9 	.word	0x00000da9
     c08:	00000a49 	.word	0x00000a49

00000c0c <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c0c:	4b10      	ldr	r3, [pc, #64]	; (c50 <ModemData_PORT_init+0x44>)
     c0e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     c12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c16:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c1e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c22:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c26:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c2e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     c32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c36:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c3e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c46:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     c4e:	4770      	bx	lr
     c50:	41008000 	.word	0x41008000

00000c54 <ModemData_CLOCK_init>:
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <ModemData_CLOCK_init+0x1c>)
     c56:	2240      	movs	r2, #64	; 0x40
     c58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     c5c:	224a      	movs	r2, #74	; 0x4a
     c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     c62:	4a04      	ldr	r2, [pc, #16]	; (c74 <ModemData_CLOCK_init+0x20>)
     c64:	6993      	ldr	r3, [r2, #24]
     c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     c6a:	6193      	str	r3, [r2, #24]
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop
     c70:	40001c00 	.word	0x40001c00
     c74:	40000800 	.word	0x40000800

00000c78 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     c78:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     c7a:	4b03      	ldr	r3, [pc, #12]	; (c88 <ModemData_init+0x10>)
     c7c:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
     c7e:	4b03      	ldr	r3, [pc, #12]	; (c8c <ModemData_init+0x14>)
     c80:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     c82:	4b03      	ldr	r3, [pc, #12]	; (c90 <ModemData_init+0x18>)
     c84:	4798      	blx	r3
     c86:	bd08      	pop	{r3, pc}
     c88:	00000c55 	.word	0x00000c55
     c8c:	00000435 	.word	0x00000435
     c90:	00000c0d 	.word	0x00000c0d

00000c94 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c94:	4b10      	ldr	r3, [pc, #64]	; (cd8 <SerialDebug_PORT_init+0x44>)
     c96:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     c9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c9e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ca2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ca6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     caa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cae:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cb2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cb6:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     cba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cbe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cc2:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cc6:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cce:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cd2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     cd6:	4770      	bx	lr
     cd8:	41008000 	.word	0x41008000

00000cdc <SerialDebug_CLOCK_init>:
     cdc:	4b06      	ldr	r3, [pc, #24]	; (cf8 <SerialDebug_CLOCK_init+0x1c>)
     cde:	2240      	movs	r2, #64	; 0x40
     ce0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     ce4:	224a      	movs	r2, #74	; 0x4a
     ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     cea:	4a04      	ldr	r2, [pc, #16]	; (cfc <SerialDebug_CLOCK_init+0x20>)
     cec:	6a13      	ldr	r3, [r2, #32]
     cee:	f043 0302 	orr.w	r3, r3, #2
     cf2:	6213      	str	r3, [r2, #32]
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop
     cf8:	40001c00 	.word	0x40001c00
     cfc:	40000800 	.word	0x40000800

00000d00 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     d00:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     d02:	4b03      	ldr	r3, [pc, #12]	; (d10 <SerialDebug_init+0x10>)
     d04:	4798      	blx	r3
	SerialDebugPrintInit();
     d06:	4b03      	ldr	r3, [pc, #12]	; (d14 <SerialDebug_init+0x14>)
     d08:	4798      	blx	r3
	SerialDebug_PORT_init();
     d0a:	4b03      	ldr	r3, [pc, #12]	; (d18 <SerialDebug_init+0x18>)
     d0c:	4798      	blx	r3
     d0e:	bd08      	pop	{r3, pc}
     d10:	00000cdd 	.word	0x00000cdd
     d14:	00000735 	.word	0x00000735
     d18:	00000c95 	.word	0x00000c95

00000d1c <delay_driver_init>:
}

void delay_driver_init(void)
{
     d1c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d1e:	4802      	ldr	r0, [pc, #8]	; (d28 <delay_driver_init+0xc>)
     d20:	4b02      	ldr	r3, [pc, #8]	; (d2c <delay_driver_init+0x10>)
     d22:	4798      	blx	r3
     d24:	bd08      	pop	{r3, pc}
     d26:	bf00      	nop
     d28:	e000e010 	.word	0xe000e010
     d2c:	00000f05 	.word	0x00000f05

00000d30 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     d30:	4a02      	ldr	r2, [pc, #8]	; (d3c <WDT_0_CLOCK_init+0xc>)
     d32:	6953      	ldr	r3, [r2, #20]
     d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     d38:	6153      	str	r3, [r2, #20]
     d3a:	4770      	bx	lr
     d3c:	40000800 	.word	0x40000800

00000d40 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     d40:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     d42:	4b06      	ldr	r3, [pc, #24]	; (d5c <WDT_0_init+0x1c>)
     d44:	4798      	blx	r3
	ASSERT(wdt && hw);
     d46:	2252      	movs	r2, #82	; 0x52
     d48:	4905      	ldr	r1, [pc, #20]	; (d60 <WDT_0_init+0x20>)
     d4a:	2001      	movs	r0, #1
     d4c:	4b05      	ldr	r3, [pc, #20]	; (d64 <WDT_0_init+0x24>)
     d4e:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     d50:	4805      	ldr	r0, [pc, #20]	; (d68 <WDT_0_init+0x28>)
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <WDT_0_init+0x2c>)
     d54:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
     d56:	4b06      	ldr	r3, [pc, #24]	; (d70 <WDT_0_init+0x30>)
     d58:	4798      	blx	r3
     d5a:	bd08      	pop	{r3, pc}
     d5c:	00000d31 	.word	0x00000d31
     d60:	00004120 	.word	0x00004120
     d64:	00000f39 	.word	0x00000f39
     d68:	20003c50 	.word	0x20003c50
     d6c:	40002000 	.word	0x40002000
     d70:	00001ab5 	.word	0x00001ab5

00000d74 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
     d74:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d76:	4b06      	ldr	r3, [pc, #24]	; (d90 <system_init+0x1c>)
     d78:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
     d7a:	4b06      	ldr	r3, [pc, #24]	; (d94 <system_init+0x20>)
     d7c:	4798      	blx	r3

	//AC_0_init();

	ADC_0_init();
     d7e:	4b06      	ldr	r3, [pc, #24]	; (d98 <system_init+0x24>)
     d80:	4798      	blx	r3

	//EVENT_SYSTEM_0_init();

	//FLASH_0_init();

	SerialDebug_init();
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <system_init+0x28>)
     d84:	4798      	blx	r3
	
	ModemData_init();
     d86:	4b06      	ldr	r3, [pc, #24]	; (da0 <system_init+0x2c>)
     d88:	4798      	blx	r3

	//TIMER_6_init();

	//TIMER_7_init();
	
	WDT_0_init();
     d8a:	4b06      	ldr	r3, [pc, #24]	; (da4 <system_init+0x30>)
     d8c:	4798      	blx	r3
     d8e:	bd08      	pop	{r3, pc}
     d90:	000012a5 	.word	0x000012a5
     d94:	00000d1d 	.word	0x00000d1d
     d98:	00000be1 	.word	0x00000be1
     d9c:	00000d01 	.word	0x00000d01
     da0:	00000c79 	.word	0x00000c79
     da4:	00000d41 	.word	0x00000d41

00000da8 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     da8:	b538      	push	{r3, r4, r5, lr}
     daa:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     dac:	4605      	mov	r5, r0
     dae:	b158      	cbz	r0, dc8 <adc_sync_init+0x20>
     db0:	1c08      	adds	r0, r1, #0
     db2:	bf18      	it	ne
     db4:	2001      	movne	r0, #1
     db6:	2243      	movs	r2, #67	; 0x43
     db8:	4904      	ldr	r1, [pc, #16]	; (dcc <adc_sync_init+0x24>)
     dba:	4b05      	ldr	r3, [pc, #20]	; (dd0 <adc_sync_init+0x28>)
     dbc:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     dbe:	4621      	mov	r1, r4
     dc0:	4628      	mov	r0, r5
     dc2:	4b04      	ldr	r3, [pc, #16]	; (dd4 <adc_sync_init+0x2c>)
     dc4:	4798      	blx	r3
}
     dc6:	bd38      	pop	{r3, r4, r5, pc}
     dc8:	2000      	movs	r0, #0
     dca:	e7f4      	b.n	db6 <adc_sync_init+0xe>
     dcc:	000041cc 	.word	0x000041cc
     dd0:	00000f39 	.word	0x00000f39
     dd4:	000010ed 	.word	0x000010ed

00000dd8 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     dd8:	b538      	push	{r3, r4, r5, lr}
     dda:	460d      	mov	r5, r1
	ASSERT(descr);
     ddc:	4604      	mov	r4, r0
     dde:	2258      	movs	r2, #88	; 0x58
     de0:	4905      	ldr	r1, [pc, #20]	; (df8 <adc_sync_enable_channel+0x20>)
     de2:	3000      	adds	r0, #0
     de4:	bf18      	it	ne
     de6:	2001      	movne	r0, #1
     de8:	4b04      	ldr	r3, [pc, #16]	; (dfc <adc_sync_enable_channel+0x24>)
     dea:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     dec:	4629      	mov	r1, r5
     dee:	4620      	mov	r0, r4
     df0:	4b03      	ldr	r3, [pc, #12]	; (e00 <adc_sync_enable_channel+0x28>)
     df2:	4798      	blx	r3

	return ERR_NONE;
}
     df4:	2000      	movs	r0, #0
     df6:	bd38      	pop	{r3, r4, r5, pc}
     df8:	000041cc 	.word	0x000041cc
     dfc:	00000f39 	.word	0x00000f39
     e00:	000011e5 	.word	0x000011e5

00000e04 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     e04:	b538      	push	{r3, r4, r5, lr}
     e06:	460d      	mov	r5, r1
	ASSERT(descr);
     e08:	4604      	mov	r4, r0
     e0a:	2263      	movs	r2, #99	; 0x63
     e0c:	4905      	ldr	r1, [pc, #20]	; (e24 <adc_sync_disable_channel+0x20>)
     e0e:	3000      	adds	r0, #0
     e10:	bf18      	it	ne
     e12:	2001      	movne	r0, #1
     e14:	4b04      	ldr	r3, [pc, #16]	; (e28 <adc_sync_disable_channel+0x24>)
     e16:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
     e18:	4629      	mov	r1, r5
     e1a:	4620      	mov	r0, r4
     e1c:	4b03      	ldr	r3, [pc, #12]	; (e2c <adc_sync_disable_channel+0x28>)
     e1e:	4798      	blx	r3
	return ERR_NONE;
}
     e20:	2000      	movs	r0, #0
     e22:	bd38      	pop	{r3, r4, r5, pc}
     e24:	000041cc 	.word	0x000041cc
     e28:	00000f39 	.word	0x00000f39
     e2c:	000011fb 	.word	0x000011fb

00000e30 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e34:	460d      	mov	r5, r1
     e36:	4691      	mov	r9, r2
     e38:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     e3a:	4680      	mov	r8, r0
     e3c:	b1e0      	cbz	r0, e78 <adc_sync_read_channel+0x48>
     e3e:	b1ea      	cbz	r2, e7c <adc_sync_read_channel+0x4c>
     e40:	1c18      	adds	r0, r3, #0
     e42:	bf18      	it	ne
     e44:	2001      	movne	r0, #1
     e46:	4f1c      	ldr	r7, [pc, #112]	; (eb8 <adc_sync_read_channel+0x88>)
     e48:	2271      	movs	r2, #113	; 0x71
     e4a:	4639      	mov	r1, r7
     e4c:	4e1b      	ldr	r6, [pc, #108]	; (ebc <adc_sync_read_channel+0x8c>)
     e4e:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     e50:	4644      	mov	r4, r8
     e52:	4640      	mov	r0, r8
     e54:	4b1a      	ldr	r3, [pc, #104]	; (ec0 <adc_sync_read_channel+0x90>)
     e56:	4798      	blx	r3
     e58:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     e5a:	fb9a f0f0 	sdiv	r0, sl, r0
     e5e:	fb08 a010 	mls	r0, r8, r0, sl
     e62:	2273      	movs	r2, #115	; 0x73
     e64:	4639      	mov	r1, r7
     e66:	fab0 f080 	clz	r0, r0
     e6a:	0940      	lsrs	r0, r0, #5
     e6c:	47b0      	blx	r6
	uint16_t offset = 0;
     e6e:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     e70:	f8df b058 	ldr.w	fp, [pc, #88]	; ecc <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     e74:	4e13      	ldr	r6, [pc, #76]	; (ec4 <adc_sync_read_channel+0x94>)
     e76:	e007      	b.n	e88 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
     e78:	2000      	movs	r0, #0
     e7a:	e7e4      	b.n	e46 <adc_sync_read_channel+0x16>
     e7c:	2000      	movs	r0, #0
     e7e:	e7e2      	b.n	e46 <adc_sync_read_channel+0x16>
     e80:	4447      	add	r7, r8
     e82:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     e84:	45ba      	cmp	sl, r7
     e86:	d914      	bls.n	eb2 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     e88:	4620      	mov	r0, r4
     e8a:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     e8c:	4629      	mov	r1, r5
     e8e:	4620      	mov	r0, r4
     e90:	47b0      	blx	r6
     e92:	2800      	cmp	r0, #0
     e94:	d0fa      	beq.n	e8c <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     e96:	4629      	mov	r1, r5
     e98:	4620      	mov	r0, r4
     e9a:	4b0b      	ldr	r3, [pc, #44]	; (ec8 <adc_sync_read_channel+0x98>)
     e9c:	4798      	blx	r3
		buffer[offset] = result;
     e9e:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
     ea2:	f1b8 0f01 	cmp.w	r8, #1
     ea6:	d9eb      	bls.n	e80 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
     ea8:	eb09 0307 	add.w	r3, r9, r7
     eac:	0a00      	lsrs	r0, r0, #8
     eae:	7058      	strb	r0, [r3, #1]
     eb0:	e7e6      	b.n	e80 <adc_sync_read_channel+0x50>

	return offset;
}
     eb2:	4638      	mov	r0, r7
     eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eb8:	000041cc 	.word	0x000041cc
     ebc:	00000f39 	.word	0x00000f39
     ec0:	00001213 	.word	0x00001213
     ec4:	00001225 	.word	0x00001225
     ec8:	00001247 	.word	0x00001247
     ecc:	00001231 	.word	0x00001231

00000ed0 <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
     ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ed2:	460d      	mov	r5, r1
     ed4:	4616      	mov	r6, r2
     ed6:	461f      	mov	r7, r3
	ASSERT(descr);
     ed8:	4604      	mov	r4, r0
     eda:	22a3      	movs	r2, #163	; 0xa3
     edc:	4906      	ldr	r1, [pc, #24]	; (ef8 <adc_sync_set_inputs+0x28>)
     ede:	3000      	adds	r0, #0
     ee0:	bf18      	it	ne
     ee2:	2001      	movne	r0, #1
     ee4:	4b05      	ldr	r3, [pc, #20]	; (efc <adc_sync_set_inputs+0x2c>)
     ee6:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
     ee8:	463b      	mov	r3, r7
     eea:	4632      	mov	r2, r6
     eec:	4629      	mov	r1, r5
     eee:	4620      	mov	r0, r4
     ef0:	4c03      	ldr	r4, [pc, #12]	; (f00 <adc_sync_set_inputs+0x30>)
     ef2:	47a0      	blx	r4

	return ERR_NONE;
}
     ef4:	2000      	movs	r0, #0
     ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ef8:	000041cc 	.word	0x000041cc
     efc:	00000f39 	.word	0x00000f39
     f00:	00001251 	.word	0x00001251

00000f04 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     f04:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <delay_init+0xc>)
     f08:	6018      	str	r0, [r3, #0]
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <delay_init+0x10>)
     f0c:	4798      	blx	r3
     f0e:	bd08      	pop	{r3, pc}
     f10:	20000450 	.word	0x20000450
     f14:	00001909 	.word	0x00001909

00000f18 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f18:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f1a:	4b04      	ldr	r3, [pc, #16]	; (f2c <delay_ms+0x14>)
     f1c:	681c      	ldr	r4, [r3, #0]
     f1e:	4b04      	ldr	r3, [pc, #16]	; (f30 <delay_ms+0x18>)
     f20:	4798      	blx	r3
     f22:	4601      	mov	r1, r0
     f24:	4620      	mov	r0, r4
     f26:	4b03      	ldr	r3, [pc, #12]	; (f34 <delay_ms+0x1c>)
     f28:	4798      	blx	r3
     f2a:	bd10      	pop	{r4, pc}
     f2c:	20000450 	.word	0x20000450
     f30:	00001299 	.word	0x00001299
     f34:	0000191d 	.word	0x0000191d

00000f38 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f38:	b900      	cbnz	r0, f3c <assert+0x4>
		__asm("BKPT #0");
     f3a:	be00      	bkpt	0x0000
     f3c:	4770      	bx	lr
	...

00000f40 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	460e      	mov	r6, r1
     f44:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     f46:	4604      	mov	r4, r0
     f48:	b178      	cbz	r0, f6a <ringbuffer_init+0x2a>
     f4a:	b181      	cbz	r1, f6e <ringbuffer_init+0x2e>
     f4c:	b1a2      	cbz	r2, f78 <ringbuffer_init+0x38>
     f4e:	2001      	movs	r0, #1
     f50:	2232      	movs	r2, #50	; 0x32
     f52:	490d      	ldr	r1, [pc, #52]	; (f88 <ringbuffer_init+0x48>)
     f54:	4b0d      	ldr	r3, [pc, #52]	; (f8c <ringbuffer_init+0x4c>)
     f56:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     f58:	1e6b      	subs	r3, r5, #1
     f5a:	421d      	tst	r5, r3
     f5c:	d109      	bne.n	f72 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     f5e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     f60:	2000      	movs	r0, #0
     f62:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     f64:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     f66:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     f68:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     f6a:	2000      	movs	r0, #0
     f6c:	e7f0      	b.n	f50 <ringbuffer_init+0x10>
     f6e:	2000      	movs	r0, #0
     f70:	e7ee      	b.n	f50 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     f72:	f06f 000c 	mvn.w	r0, #12
     f76:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     f78:	2232      	movs	r2, #50	; 0x32
     f7a:	4903      	ldr	r1, [pc, #12]	; (f88 <ringbuffer_init+0x48>)
     f7c:	2000      	movs	r0, #0
     f7e:	4b03      	ldr	r3, [pc, #12]	; (f8c <ringbuffer_init+0x4c>)
     f80:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     f82:	1e6b      	subs	r3, r5, #1
     f84:	e7eb      	b.n	f5e <ringbuffer_init+0x1e>
     f86:	bf00      	nop
     f88:	000041e8 	.word	0x000041e8
     f8c:	00000f39 	.word	0x00000f39

00000f90 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     f90:	b538      	push	{r3, r4, r5, lr}
     f92:	460d      	mov	r5, r1
	ASSERT(rb);
     f94:	4604      	mov	r4, r0
     f96:	225b      	movs	r2, #91	; 0x5b
     f98:	490b      	ldr	r1, [pc, #44]	; (fc8 <ringbuffer_put+0x38>)
     f9a:	3000      	adds	r0, #0
     f9c:	bf18      	it	ne
     f9e:	2001      	movne	r0, #1
     fa0:	4b0a      	ldr	r3, [pc, #40]	; (fcc <ringbuffer_put+0x3c>)
     fa2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     fa4:	68e3      	ldr	r3, [r4, #12]
     fa6:	6862      	ldr	r2, [r4, #4]
     fa8:	4013      	ands	r3, r2
     faa:	6822      	ldr	r2, [r4, #0]
     fac:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     fae:	68e3      	ldr	r3, [r4, #12]
     fb0:	6861      	ldr	r1, [r4, #4]
     fb2:	68a2      	ldr	r2, [r4, #8]
     fb4:	1a9a      	subs	r2, r3, r2
     fb6:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
     fb8:	bf84      	itt	hi
     fba:	1a59      	subhi	r1, r3, r1
     fbc:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
     fbe:	3301      	adds	r3, #1
     fc0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     fc2:	2000      	movs	r0, #0
     fc4:	bd38      	pop	{r3, r4, r5, pc}
     fc6:	bf00      	nop
     fc8:	000041e8 	.word	0x000041e8
     fcc:	00000f39 	.word	0x00000f39

00000fd0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     fd0:	b510      	push	{r4, lr}
	ASSERT(rb);
     fd2:	4604      	mov	r4, r0
     fd4:	2271      	movs	r2, #113	; 0x71
     fd6:	4905      	ldr	r1, [pc, #20]	; (fec <ringbuffer_num+0x1c>)
     fd8:	3000      	adds	r0, #0
     fda:	bf18      	it	ne
     fdc:	2001      	movne	r0, #1
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <ringbuffer_num+0x20>)
     fe0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     fe2:	68e0      	ldr	r0, [r4, #12]
     fe4:	68a3      	ldr	r3, [r4, #8]
}
     fe6:	1ac0      	subs	r0, r0, r3
     fe8:	bd10      	pop	{r4, pc}
     fea:	bf00      	nop
     fec:	000041e8 	.word	0x000041e8
     ff0:	00000f39 	.word	0x00000f39

00000ff4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     ff4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     ff6:	4a06      	ldr	r2, [pc, #24]	; (1010 <_sbrk+0x1c>)
     ff8:	6812      	ldr	r2, [r2, #0]
     ffa:	b122      	cbz	r2, 1006 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     ffc:	4a04      	ldr	r2, [pc, #16]	; (1010 <_sbrk+0x1c>)
     ffe:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1000:	4403      	add	r3, r0
    1002:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1004:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1006:	4903      	ldr	r1, [pc, #12]	; (1014 <_sbrk+0x20>)
    1008:	4a01      	ldr	r2, [pc, #4]	; (1010 <_sbrk+0x1c>)
    100a:	6011      	str	r1, [r2, #0]
    100c:	e7f6      	b.n	ffc <_sbrk+0x8>
    100e:	bf00      	nop
    1010:	20000454 	.word	0x20000454
    1014:	20013d58 	.word	0x20013d58

00001018 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1018:	6940      	ldr	r0, [r0, #20]
    101a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    101e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1022:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    1024:	0040      	lsls	r0, r0, #1
    1026:	3076      	adds	r0, #118	; 0x76
}
    1028:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    102c:	4770      	bx	lr
	...

00001030 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1030:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1032:	f013 0f01 	tst.w	r3, #1
    1036:	d1fb      	bne.n	1030 <_adc_init>
    1038:	6b03      	ldr	r3, [r0, #48]	; 0x30
    103a:	f013 0f03 	tst.w	r3, #3
    103e:	d1fb      	bne.n	1038 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1040:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1042:	f013 0f02 	tst.w	r3, #2
    1046:	d130      	bne.n	10aa <_adc_init+0x7a>
{
    1048:	b410      	push	{r4}
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    104a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    104c:	f013 0f01 	tst.w	r3, #1
    1050:	d1fb      	bne.n	104a <_adc_init+0x1a>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1052:	8803      	ldrh	r3, [r0, #0]
    1054:	b29b      	uxth	r3, r3
    1056:	f043 0301 	orr.w	r3, r3, #1
    105a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    105c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    105e:	f013 0f01 	tst.w	r3, #1
    1062:	d1fb      	bne.n	105c <_adc_init+0x2c>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	ADC0->CTRLB.reg = 0x0001; //12 bit, left adjusted, single conversion
    1064:	4b12      	ldr	r3, [pc, #72]	; (10b0 <_adc_init+0x80>)
    1066:	2201      	movs	r2, #1
    1068:	80da      	strh	r2, [r3, #6]
	//hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
	
	ADC0->REFCTRL.reg = 0x03; // REFCOMP disable, VDDANA
    106a:	2203      	movs	r2, #3
    106c:	721a      	strb	r2, [r3, #8]
	//hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
	
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    106e:	2416      	movs	r4, #22
    1070:	4a10      	ldr	r2, [pc, #64]	; (10b4 <_adc_init+0x84>)
    1072:	fb04 2101 	mla	r1, r4, r1, r2
    1076:	79ca      	ldrb	r2, [r1, #7]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    1078:	7082      	strb	r2, [r0, #2]
	
	ADC0->INPUTCTRL.reg = 0x1800; // internal ground, single ended mode
    107a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    107e:	809a      	strh	r2, [r3, #4]
	//hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
	
	//ADC0->AVGCTRL.reg = 0x22; //4 sample average
	ADC0->AVGCTRL.reg = 0x49; //512 sample average
    1080:	2249      	movs	r2, #73	; 0x49
    1082:	729a      	strb	r2, [r3, #10]
	//hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
	
	ADC0->SAMPCTRL.reg = 0x06;
    1084:	2206      	movs	r2, #6
    1086:	72da      	strb	r2, [r3, #11]
	//hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
	
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1088:	898a      	ldrh	r2, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    108a:	8182      	strh	r2, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    108c:	89ca      	ldrh	r2, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    108e:	81c2      	strh	r2, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1090:	8a0a      	ldrh	r2, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1092:	8202      	strh	r2, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1094:	8a4a      	ldrh	r2, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1096:	8242      	strh	r2, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1098:	7d0a      	ldrb	r2, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    109a:	70c2      	strb	r2, [r0, #3]
	//hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
	
	//R2R - 1
	//DIV64 - 5
	//ENABLE - 1	 
	ADC0->CTRLA.reg = 0x85C2;
    109c:	f248 52c2 	movw	r2, #34242	; 0x85c2
    10a0:	801a      	strh	r2, [r3, #0]

	return ERR_NONE;
    10a2:	2000      	movs	r0, #0
}
    10a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    10a8:	4770      	bx	lr
		return ERR_DENIED;
    10aa:	f06f 0010 	mvn.w	r0, #16
    10ae:	4770      	bx	lr
    10b0:	43001c00 	.word	0x43001c00
    10b4:	0000420c 	.word	0x0000420c

000010b8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    10b8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    10bc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    10c0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    10c4:	b148      	cbz	r0, 10da <_adc_get_regs+0x22>
    10c6:	2801      	cmp	r0, #1
    10c8:	d009      	beq.n	10de <_adc_get_regs+0x26>
{
    10ca:	b508      	push	{r3, lr}
	ASSERT(false);
    10cc:	2291      	movs	r2, #145	; 0x91
    10ce:	4905      	ldr	r1, [pc, #20]	; (10e4 <_adc_get_regs+0x2c>)
    10d0:	2000      	movs	r0, #0
    10d2:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_adc_get_regs+0x30>)
    10d4:	4798      	blx	r3
	return 0;
    10d6:	2000      	movs	r0, #0
    10d8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    10da:	2000      	movs	r0, #0
    10dc:	4770      	bx	lr
    10de:	2001      	movs	r0, #1
    10e0:	4770      	bx	lr
    10e2:	bf00      	nop
    10e4:	00004238 	.word	0x00004238
    10e8:	00000f39 	.word	0x00000f39

000010ec <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    10ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f0:	460d      	mov	r5, r1
	int32_t init_status;

	ASSERT(device);
    10f2:	4604      	mov	r4, r0
    10f4:	22e8      	movs	r2, #232	; 0xe8
    10f6:	4935      	ldr	r1, [pc, #212]	; (11cc <_adc_sync_init+0xe0>)
    10f8:	3000      	adds	r0, #0
    10fa:	bf18      	it	ne
    10fc:	2001      	movne	r0, #1
    10fe:	4b34      	ldr	r3, [pc, #208]	; (11d0 <_adc_sync_init+0xe4>)
    1100:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1102:	4628      	mov	r0, r5
    1104:	4b33      	ldr	r3, [pc, #204]	; (11d4 <_adc_sync_init+0xe8>)
    1106:	4798      	blx	r3
    1108:	4601      	mov	r1, r0
    110a:	4628      	mov	r0, r5
    110c:	4b32      	ldr	r3, [pc, #200]	; (11d8 <_adc_sync_init+0xec>)
    110e:	4798      	blx	r3
	if (init_status) {
    1110:	4607      	mov	r7, r0
    1112:	2800      	cmp	r0, #0
    1114:	d157      	bne.n	11c6 <_adc_sync_init+0xda>
		return init_status;
	}
	device->hw = hw;
    1116:	6025      	str	r5, [r4, #0]
	_adc_init_irq_param(hw, device);
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    1118:	4620      	mov	r0, r4
    111a:	4e30      	ldr	r6, [pc, #192]	; (11dc <_adc_sync_init+0xf0>)
    111c:	47b0      	blx	r6
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    111e:	0943      	lsrs	r3, r0, #5
    1120:	f000 001f 	and.w	r0, r0, #31
    1124:	2501      	movs	r5, #1
    1126:	fa05 f000 	lsl.w	r0, r5, r0
    112a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 11e0 <_adc_sync_init+0xf4>
    112e:	3320      	adds	r3, #32
    1130:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1138:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    113c:	4620      	mov	r0, r4
    113e:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1140:	0943      	lsrs	r3, r0, #5
    1142:	f000 001f 	and.w	r0, r0, #31
    1146:	fa05 f000 	lsl.w	r0, r5, r0
    114a:	3360      	adds	r3, #96	; 0x60
    114c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    1150:	4620      	mov	r0, r4
    1152:	47b0      	blx	r6
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1154:	0943      	lsrs	r3, r0, #5
    1156:	f000 001f 	and.w	r0, r0, #31
    115a:	4085      	lsls	r5, r0
    115c:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    1160:	4620      	mov	r0, r4
    1162:	47b0      	blx	r6
    1164:	3001      	adds	r0, #1
    1166:	b280      	uxth	r0, r0
    1168:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    116a:	2b00      	cmp	r3, #0
    116c:	db2b      	blt.n	11c6 <_adc_sync_init+0xda>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    116e:	095b      	lsrs	r3, r3, #5
    1170:	f000 001f 	and.w	r0, r0, #31
    1174:	2201      	movs	r2, #1
    1176:	fa02 f000 	lsl.w	r0, r2, r0
    117a:	3320      	adds	r3, #32
    117c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1184:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    1188:	4620      	mov	r0, r4
    118a:	47b0      	blx	r6
    118c:	3001      	adds	r0, #1
    118e:	b280      	uxth	r0, r0
    1190:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1192:	2b00      	cmp	r3, #0
    1194:	db17      	blt.n	11c6 <_adc_sync_init+0xda>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1196:	095b      	lsrs	r3, r3, #5
    1198:	f000 001f 	and.w	r0, r0, #31
    119c:	2201      	movs	r2, #1
    119e:	fa02 f000 	lsl.w	r0, r2, r0
    11a2:	3360      	adds	r3, #96	; 0x60
    11a4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    11a8:	4620      	mov	r0, r4
    11aa:	47b0      	blx	r6
    11ac:	3001      	adds	r0, #1
    11ae:	b280      	uxth	r0, r0
    11b0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    11b2:	2b00      	cmp	r3, #0
    11b4:	db07      	blt.n	11c6 <_adc_sync_init+0xda>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    11b6:	095b      	lsrs	r3, r3, #5
    11b8:	f000 001f 	and.w	r0, r0, #31
    11bc:	2201      	movs	r2, #1
    11be:	fa02 f000 	lsl.w	r0, r2, r0
    11c2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	return ERR_NONE;
}
    11c6:	4638      	mov	r0, r7
    11c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11cc:	00004238 	.word	0x00004238
    11d0:	00000f39 	.word	0x00000f39
    11d4:	000010b9 	.word	0x000010b9
    11d8:	00001031 	.word	0x00001031
    11dc:	00001019 	.word	0x00001019
    11e0:	e000e100 	.word	0xe000e100

000011e4 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    11e4:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    11e8:	f013 0f03 	tst.w	r3, #3
    11ec:	d1fb      	bne.n	11e6 <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    11ee:	8813      	ldrh	r3, [r2, #0]
    11f0:	b29b      	uxth	r3, r3
    11f2:	f043 0302 	orr.w	r3, r3, #2
    11f6:	8013      	strh	r3, [r2, #0]
    11f8:	4770      	bx	lr

000011fa <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    11fa:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    11fe:	f013 0f03 	tst.w	r3, #3
    1202:	d1fb      	bne.n	11fc <_adc_sync_disable_channel+0x2>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1204:	8813      	ldrh	r3, [r2, #0]
    1206:	f023 0302 	bic.w	r3, r3, #2
    120a:	041b      	lsls	r3, r3, #16
    120c:	0c1b      	lsrs	r3, r3, #16
    120e:	8013      	strh	r3, [r2, #0]
    1210:	4770      	bx	lr

00001212 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1212:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1214:	88db      	ldrh	r3, [r3, #6]
    1216:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    121a:	2b03      	cmp	r3, #3
}
    121c:	bf0c      	ite	eq
    121e:	2001      	moveq	r0, #1
    1220:	2002      	movne	r0, #2
    1222:	4770      	bx	lr

00001224 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1224:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1226:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    122a:	f000 0001 	and.w	r0, r0, #1
    122e:	4770      	bx	lr

00001230 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1230:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1232:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1234:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1238:	2b00      	cmp	r3, #0
    123a:	d1fa      	bne.n	1232 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    123c:	7d13      	ldrb	r3, [r2, #20]
    123e:	f043 0302 	orr.w	r3, r3, #2
    1242:	7513      	strb	r3, [r2, #20]
    1244:	4770      	bx	lr

00001246 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1246:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    1248:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    124c:	b280      	uxth	r0, r0
    124e:	4770      	bx	lr

00001250 <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    1250:	b410      	push	{r4}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    1252:	6804      	ldr	r4, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1254:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1256:	f3c3 030b 	ubfx	r3, r3, #0, #12
    125a:	2b00      	cmp	r3, #0
    125c:	d1fa      	bne.n	1254 <_adc_sync_set_inputs+0x4>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    125e:	88a3      	ldrh	r3, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    1260:	f023 031f 	bic.w	r3, r3, #31
    1264:	041b      	lsls	r3, r3, #16
    1266:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    1268:	f001 011f 	and.w	r1, r1, #31
    126c:	430b      	orrs	r3, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    126e:	80a3      	strh	r3, [r4, #4]
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    1270:	6801      	ldr	r1, [r0, #0]
    1272:	b292      	uxth	r2, r2
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1274:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1276:	f3c3 030b 	ubfx	r3, r3, #0, #12
    127a:	2b00      	cmp	r3, #0
    127c:	d1fa      	bne.n	1274 <_adc_sync_set_inputs+0x24>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    127e:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    1280:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    1284:	041b      	lsls	r3, r3, #16
    1286:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    1288:	0212      	lsls	r2, r2, #8
    128a:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    128e:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    1290:	808b      	strh	r3, [r1, #4]
}
    1292:	f85d 4b04 	ldr.w	r4, [sp], #4
    1296:	4770      	bx	lr

00001298 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1298:	f64b 3380 	movw	r3, #48000	; 0xbb80
    129c:	fb03 f000 	mul.w	r0, r3, r0
    12a0:	4770      	bx	lr
	...

000012a4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    12a4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    12a6:	4a0c      	ldr	r2, [pc, #48]	; (12d8 <_init_chip+0x34>)
    12a8:	8813      	ldrh	r3, [r2, #0]
    12aa:	b29b      	uxth	r3, r3
    12ac:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    12ae:	4b0b      	ldr	r3, [pc, #44]	; (12dc <_init_chip+0x38>)
    12b0:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    12b2:	4b0b      	ldr	r3, [pc, #44]	; (12e0 <_init_chip+0x3c>)
    12b4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    12b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    12ba:	4c0a      	ldr	r4, [pc, #40]	; (12e4 <_init_chip+0x40>)
    12bc:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <_init_chip+0x44>)
    12c0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    12c2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    12c6:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    12c8:	4a08      	ldr	r2, [pc, #32]	; (12ec <_init_chip+0x48>)
    12ca:	6913      	ldr	r3, [r2, #16]
    12cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    12d0:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <_init_chip+0x4c>)
    12d4:	4798      	blx	r3
    12d6:	bd10      	pop	{r4, pc}
    12d8:	41004000 	.word	0x41004000
    12dc:	0000158d 	.word	0x0000158d
    12e0:	0000152d 	.word	0x0000152d
    12e4:	00001485 	.word	0x00001485
    12e8:	000015b9 	.word	0x000015b9
    12ec:	40000800 	.word	0x40000800
    12f0:	00001369 	.word	0x00001369

000012f4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    12f4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    12f6:	4a1a      	ldr	r2, [pc, #104]	; (1360 <_dmac_handler+0x6c>)
    12f8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    12fa:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    12fe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1302:	4818      	ldr	r0, [pc, #96]	; (1364 <_dmac_handler+0x70>)
    1304:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1308:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    130c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1310:	f012 0f01 	tst.w	r2, #1
    1314:	d10a      	bne.n	132c <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1316:	011a      	lsls	r2, r3, #4
    1318:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    131c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1320:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1324:	f012 0f02 	tst.w	r2, #2
    1328:	d10b      	bne.n	1342 <_dmac_handler+0x4e>
    132a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    132c:	011a      	lsls	r2, r3, #4
    132e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1332:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1336:	2101      	movs	r1, #1
    1338:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    133c:	6843      	ldr	r3, [r0, #4]
    133e:	4798      	blx	r3
    1340:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1342:	011a      	lsls	r2, r3, #4
    1344:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1348:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    134c:	2102      	movs	r1, #2
    134e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1356:	4a03      	ldr	r2, [pc, #12]	; (1364 <_dmac_handler+0x70>)
    1358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    135c:	4798      	blx	r3
	}
}
    135e:	e7e4      	b.n	132a <_dmac_handler+0x36>
    1360:	4100a000 	.word	0x4100a000
    1364:	20000460 	.word	0x20000460

00001368 <_dma_init>:
{
    1368:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    136a:	4a33      	ldr	r2, [pc, #204]	; (1438 <_dma_init+0xd0>)
    136c:	8813      	ldrh	r3, [r2, #0]
    136e:	f023 0302 	bic.w	r3, r3, #2
    1372:	041b      	lsls	r3, r3, #16
    1374:	0c1b      	lsrs	r3, r3, #16
    1376:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1378:	8853      	ldrh	r3, [r2, #2]
    137a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    137e:	041b      	lsls	r3, r3, #16
    1380:	0c1b      	lsrs	r3, r3, #16
    1382:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1384:	8813      	ldrh	r3, [r2, #0]
    1386:	b29b      	uxth	r3, r3
    1388:	f043 0301 	orr.w	r3, r3, #1
    138c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    138e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1390:	f013 0f01 	tst.w	r3, #1
    1394:	d1fb      	bne.n	138e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1396:	4b28      	ldr	r3, [pc, #160]	; (1438 <_dma_init+0xd0>)
    1398:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    139c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    139e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    13a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    13a4:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    13a6:	2000      	movs	r0, #0
    13a8:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    13aa:	4a24      	ldr	r2, [pc, #144]	; (143c <_dma_init+0xd4>)
    13ac:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    13b0:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    13b2:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    13b6:	639a      	str	r2, [r3, #56]	; 0x38
    13b8:	4b21      	ldr	r3, [pc, #132]	; (1440 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    13ba:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    13be:	681c      	ldr	r4, [r3, #0]
    13c0:	0101      	lsls	r1, r0, #4
    13c2:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    13c6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    13ca:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    13cc:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    13ce:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    13d2:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    13d4:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    13d8:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    13da:	4429      	add	r1, r5
    13dc:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    13e0:	3001      	adds	r0, #1
    13e2:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    13e4:	2820      	cmp	r0, #32
    13e6:	d1ea      	bne.n	13be <_dma_init+0x56>
    13e8:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    13ea:	2001      	movs	r0, #1
    13ec:	4915      	ldr	r1, [pc, #84]	; (1444 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    13ee:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    13f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    13f4:	d00b      	beq.n	140e <_dma_init+0xa6>
    13f6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    13f8:	2b24      	cmp	r3, #36	; 0x24
    13fa:	d1f8      	bne.n	13ee <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    13fc:	4a0e      	ldr	r2, [pc, #56]	; (1438 <_dma_init+0xd0>)
    13fe:	8813      	ldrh	r3, [r2, #0]
    1400:	b29b      	uxth	r3, r3
    1402:	f043 0302 	orr.w	r3, r3, #2
    1406:	8013      	strh	r3, [r2, #0]
}
    1408:	2000      	movs	r0, #0
    140a:	bc30      	pop	{r4, r5}
    140c:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    140e:	095c      	lsrs	r4, r3, #5
    1410:	f002 021f 	and.w	r2, r2, #31
    1414:	fa00 f202 	lsl.w	r2, r0, r2
    1418:	f104 0520 	add.w	r5, r4, #32
    141c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1424:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1428:	f104 0560 	add.w	r5, r4, #96	; 0x60
    142c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1430:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1434:	e7df      	b.n	13f6 <_dma_init+0x8e>
    1436:	bf00      	nop
    1438:	4100a000 	.word	0x4100a000
    143c:	20000460 	.word	0x20000460
    1440:	00004250 	.word	0x00004250
    1444:	e000e100 	.word	0xe000e100

00001448 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1448:	b508      	push	{r3, lr}
	_dmac_handler();
    144a:	4b01      	ldr	r3, [pc, #4]	; (1450 <DMAC_0_Handler+0x8>)
    144c:	4798      	blx	r3
    144e:	bd08      	pop	{r3, pc}
    1450:	000012f5 	.word	0x000012f5

00001454 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1454:	b508      	push	{r3, lr}
	_dmac_handler();
    1456:	4b01      	ldr	r3, [pc, #4]	; (145c <DMAC_1_Handler+0x8>)
    1458:	4798      	blx	r3
    145a:	bd08      	pop	{r3, pc}
    145c:	000012f5 	.word	0x000012f5

00001460 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    1460:	b508      	push	{r3, lr}
	_dmac_handler();
    1462:	4b01      	ldr	r3, [pc, #4]	; (1468 <DMAC_2_Handler+0x8>)
    1464:	4798      	blx	r3
    1466:	bd08      	pop	{r3, pc}
    1468:	000012f5 	.word	0x000012f5

0000146c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    146c:	b508      	push	{r3, lr}
	_dmac_handler();
    146e:	4b01      	ldr	r3, [pc, #4]	; (1474 <DMAC_3_Handler+0x8>)
    1470:	4798      	blx	r3
    1472:	bd08      	pop	{r3, pc}
    1474:	000012f5 	.word	0x000012f5

00001478 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1478:	b508      	push	{r3, lr}
	_dmac_handler();
    147a:	4b01      	ldr	r3, [pc, #4]	; (1480 <DMAC_4_Handler+0x8>)
    147c:	4798      	blx	r3
    147e:	bd08      	pop	{r3, pc}
    1480:	000012f5 	.word	0x000012f5

00001484 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    1484:	f010 0f01 	tst.w	r0, #1
    1488:	d002      	beq.n	1490 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    148a:	4a23      	ldr	r2, [pc, #140]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    148c:	4b23      	ldr	r3, [pc, #140]	; (151c <_gclk_init_generators_by_fref+0x98>)
    148e:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    1490:	f010 0f02 	tst.w	r0, #2
    1494:	d002      	beq.n	149c <_gclk_init_generators_by_fref+0x18>
    1496:	4a22      	ldr	r2, [pc, #136]	; (1520 <_gclk_init_generators_by_fref+0x9c>)
    1498:	4b20      	ldr	r3, [pc, #128]	; (151c <_gclk_init_generators_by_fref+0x98>)
    149a:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    149c:	f010 0f04 	tst.w	r0, #4
    14a0:	d002      	beq.n	14a8 <_gclk_init_generators_by_fref+0x24>
    14a2:	4a1d      	ldr	r2, [pc, #116]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14a4:	4b1d      	ldr	r3, [pc, #116]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14a6:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    14a8:	f010 0f08 	tst.w	r0, #8
    14ac:	d002      	beq.n	14b4 <_gclk_init_generators_by_fref+0x30>
    14ae:	4a1a      	ldr	r2, [pc, #104]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14b0:	4b1a      	ldr	r3, [pc, #104]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14b2:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    14b4:	f010 0f10 	tst.w	r0, #16
    14b8:	d002      	beq.n	14c0 <_gclk_init_generators_by_fref+0x3c>
    14ba:	4a17      	ldr	r2, [pc, #92]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14bc:	4b17      	ldr	r3, [pc, #92]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14be:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    14c0:	f010 0f20 	tst.w	r0, #32
    14c4:	d002      	beq.n	14cc <_gclk_init_generators_by_fref+0x48>
    14c6:	4a14      	ldr	r2, [pc, #80]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14c8:	4b14      	ldr	r3, [pc, #80]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14ca:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    14cc:	f010 0f40 	tst.w	r0, #64	; 0x40
    14d0:	d002      	beq.n	14d8 <_gclk_init_generators_by_fref+0x54>
    14d2:	4a11      	ldr	r2, [pc, #68]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14d4:	4b11      	ldr	r3, [pc, #68]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14d6:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    14d8:	f010 0f80 	tst.w	r0, #128	; 0x80
    14dc:	d002      	beq.n	14e4 <_gclk_init_generators_by_fref+0x60>
    14de:	4a0e      	ldr	r2, [pc, #56]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14e0:	4b0e      	ldr	r3, [pc, #56]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14e2:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    14e4:	f410 7f80 	tst.w	r0, #256	; 0x100
    14e8:	d002      	beq.n	14f0 <_gclk_init_generators_by_fref+0x6c>
    14ea:	4a0b      	ldr	r2, [pc, #44]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14ec:	4b0b      	ldr	r3, [pc, #44]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14ee:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    14f0:	f410 7f00 	tst.w	r0, #512	; 0x200
    14f4:	d002      	beq.n	14fc <_gclk_init_generators_by_fref+0x78>
    14f6:	4a08      	ldr	r2, [pc, #32]	; (1518 <_gclk_init_generators_by_fref+0x94>)
    14f8:	4b08      	ldr	r3, [pc, #32]	; (151c <_gclk_init_generators_by_fref+0x98>)
    14fa:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    14fc:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1500:	d002      	beq.n	1508 <_gclk_init_generators_by_fref+0x84>
    1502:	4a08      	ldr	r2, [pc, #32]	; (1524 <_gclk_init_generators_by_fref+0xa0>)
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <_gclk_init_generators_by_fref+0x98>)
    1506:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1508:	f410 6f00 	tst.w	r0, #2048	; 0x800
    150c:	d002      	beq.n	1514 <_gclk_init_generators_by_fref+0x90>
    150e:	4a06      	ldr	r2, [pc, #24]	; (1528 <_gclk_init_generators_by_fref+0xa4>)
    1510:	4b02      	ldr	r3, [pc, #8]	; (151c <_gclk_init_generators_by_fref+0x98>)
    1512:	64da      	str	r2, [r3, #76]	; 0x4c
    1514:	4770      	bx	lr
    1516:	bf00      	nop
    1518:	00012b06 	.word	0x00012b06
    151c:	40001c00 	.word	0x40001c00
    1520:	00012306 	.word	0x00012306
    1524:	00012b05 	.word	0x00012b05
    1528:	00013b05 	.word	0x00013b05

0000152c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    152c:	2201      	movs	r2, #1
    152e:	4b01      	ldr	r3, [pc, #4]	; (1534 <_mclk_init+0x8>)
    1530:	715a      	strb	r2, [r3, #5]
    1532:	4770      	bx	lr
    1534:	40000800 	.word	0x40000800

00001538 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1538:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    153a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    153c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    153e:	f012 0f01 	tst.w	r2, #1
    1542:	d005      	beq.n	1550 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1544:	2201      	movs	r2, #1
    1546:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1548:	6803      	ldr	r3, [r0, #0]
    154a:	b153      	cbz	r3, 1562 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    154c:	4798      	blx	r3
    154e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1550:	8a1a      	ldrh	r2, [r3, #16]
    1552:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1554:	b12a      	cbz	r2, 1562 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1556:	f240 225e 	movw	r2, #606	; 0x25e
    155a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    155c:	6843      	ldr	r3, [r0, #4]
    155e:	b103      	cbz	r3, 1562 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1560:	4798      	blx	r3
    1562:	bd08      	pop	{r3, pc}

00001564 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1564:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1566:	4b02      	ldr	r3, [pc, #8]	; (1570 <NVMCTRL_0_Handler+0xc>)
    1568:	6818      	ldr	r0, [r3, #0]
    156a:	4b02      	ldr	r3, [pc, #8]	; (1574 <NVMCTRL_0_Handler+0x10>)
    156c:	4798      	blx	r3
    156e:	bd08      	pop	{r3, pc}
    1570:	200009e0 	.word	0x200009e0
    1574:	00001539 	.word	0x00001539

00001578 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1578:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    157a:	4b02      	ldr	r3, [pc, #8]	; (1584 <NVMCTRL_1_Handler+0xc>)
    157c:	6818      	ldr	r0, [r3, #0]
    157e:	4b02      	ldr	r3, [pc, #8]	; (1588 <NVMCTRL_1_Handler+0x10>)
    1580:	4798      	blx	r3
    1582:	bd08      	pop	{r3, pc}
    1584:	200009e0 	.word	0x200009e0
    1588:	00001539 	.word	0x00001539

0000158c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    158c:	4b09      	ldr	r3, [pc, #36]	; (15b4 <_osc32kctrl_init_sources+0x28>)
    158e:	f242 024e 	movw	r2, #8270	; 0x204e
    1592:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1594:	2201      	movs	r2, #1
    1596:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1598:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    159a:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    159c:	2200      	movs	r2, #0
    159e:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    15a0:	461a      	mov	r2, r3
    15a2:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    15a4:	f013 0f01 	tst.w	r3, #1
    15a8:	d0fb      	beq.n	15a2 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    15aa:	2204      	movs	r2, #4
    15ac:	4b01      	ldr	r3, [pc, #4]	; (15b4 <_osc32kctrl_init_sources+0x28>)
    15ae:	741a      	strb	r2, [r3, #16]
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	40001400 	.word	0x40001400

000015b8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    15b8:	4a2b      	ldr	r2, [pc, #172]	; (1668 <_oscctrl_init_referenced_generators+0xb0>)
    15ba:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    15bc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    15c0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    15c4:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    15c6:	4b29      	ldr	r3, [pc, #164]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    15c8:	2200      	movs	r2, #0
    15ca:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    15cc:	4a28      	ldr	r2, [pc, #160]	; (1670 <_oscctrl_init_referenced_generators+0xb8>)
    15ce:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15d0:	461a      	mov	r2, r3
    15d2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    15d6:	f013 0f10 	tst.w	r3, #16
    15da:	d1fa      	bne.n	15d2 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    15dc:	2200      	movs	r2, #0
    15de:	4b23      	ldr	r3, [pc, #140]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    15e0:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15e4:	461a      	mov	r2, r3
    15e6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    15ea:	f013 0f04 	tst.w	r3, #4
    15ee:	d1fa      	bne.n	15e6 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    15f0:	2242      	movs	r2, #66	; 0x42
    15f2:	4b1e      	ldr	r3, [pc, #120]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    15f4:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15f6:	461a      	mov	r2, r3
    15f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    15fc:	f013 0f02 	tst.w	r3, #2
    1600:	d1fa      	bne.n	15f8 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1602:	4b1a      	ldr	r3, [pc, #104]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    1604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1606:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1608:	461a      	mov	r2, r3
    160a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    160e:	f013 0f08 	tst.w	r3, #8
    1612:	d1fa      	bne.n	160a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1614:	2282      	movs	r2, #130	; 0x82
    1616:	4b15      	ldr	r3, [pc, #84]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    1618:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    161c:	461a      	mov	r2, r3
    161e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1622:	f013 0f04 	tst.w	r3, #4
    1626:	d1fa      	bne.n	161e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1628:	4b10      	ldr	r3, [pc, #64]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    162a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    162e:	f013 0f01 	tst.w	r3, #1
    1632:	d012      	beq.n	165a <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1634:	4a0d      	ldr	r2, [pc, #52]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    1636:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1638:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    163c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1640:	d1f9      	bne.n	1636 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1642:	4a09      	ldr	r2, [pc, #36]	; (1668 <_oscctrl_init_referenced_generators+0xb0>)
    1644:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1646:	2b00      	cmp	r3, #0
    1648:	d1fc      	bne.n	1644 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    164a:	4a07      	ldr	r2, [pc, #28]	; (1668 <_oscctrl_init_referenced_generators+0xb0>)
    164c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    164e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1652:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1656:	6213      	str	r3, [r2, #32]
    1658:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    165a:	4a04      	ldr	r2, [pc, #16]	; (166c <_oscctrl_init_referenced_generators+0xb4>)
    165c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    165e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1662:	d0fb      	beq.n	165c <_oscctrl_init_referenced_generators+0xa4>
    1664:	e7ed      	b.n	1642 <_oscctrl_init_referenced_generators+0x8a>
    1666:	bf00      	nop
    1668:	40001c00 	.word	0x40001c00
    166c:	40001000 	.word	0x40001000
    1670:	04010000 	.word	0x04010000

00001674 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1674:	b500      	push	{lr}
    1676:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1678:	4b0d      	ldr	r3, [pc, #52]	; (16b0 <RAMECC_Handler+0x3c>)
    167a:	789b      	ldrb	r3, [r3, #2]
    167c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    167e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1680:	9b01      	ldr	r3, [sp, #4]
    1682:	f013 0f02 	tst.w	r3, #2
    1686:	d006      	beq.n	1696 <RAMECC_Handler+0x22>
    1688:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <RAMECC_Handler+0x40>)
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	b11b      	cbz	r3, 1696 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    168e:	4a08      	ldr	r2, [pc, #32]	; (16b0 <RAMECC_Handler+0x3c>)
    1690:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1692:	4798      	blx	r3
    1694:	e009      	b.n	16aa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1696:	9b01      	ldr	r3, [sp, #4]
    1698:	f013 0f01 	tst.w	r3, #1
    169c:	d005      	beq.n	16aa <RAMECC_Handler+0x36>
    169e:	4b05      	ldr	r3, [pc, #20]	; (16b4 <RAMECC_Handler+0x40>)
    16a0:	685b      	ldr	r3, [r3, #4]
    16a2:	b113      	cbz	r3, 16aa <RAMECC_Handler+0x36>
    16a4:	4a02      	ldr	r2, [pc, #8]	; (16b0 <RAMECC_Handler+0x3c>)
    16a6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    16a8:	4798      	blx	r3
	} else {
		return;
	}
}
    16aa:	b003      	add	sp, #12
    16ac:	f85d fb04 	ldr.w	pc, [sp], #4
    16b0:	41020000 	.word	0x41020000
    16b4:	20003d40 	.word	0x20003d40

000016b8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    16b8:	b470      	push	{r4, r5, r6}
    16ba:	b087      	sub	sp, #28
    16bc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    16be:	466c      	mov	r4, sp
    16c0:	4d0c      	ldr	r5, [pc, #48]	; (16f4 <_sercom_get_hardware_index+0x3c>)
    16c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    16c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    16c6:	e895 0003 	ldmia.w	r5, {r0, r1}
    16ca:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    16ce:	9b00      	ldr	r3, [sp, #0]
    16d0:	42b3      	cmp	r3, r6
    16d2:	d00c      	beq.n	16ee <_sercom_get_hardware_index+0x36>
    16d4:	4632      	mov	r2, r6
    16d6:	2001      	movs	r0, #1
    16d8:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    16dc:	4293      	cmp	r3, r2
    16de:	d007      	beq.n	16f0 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16e0:	3001      	adds	r0, #1
    16e2:	2806      	cmp	r0, #6
    16e4:	d1f8      	bne.n	16d8 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    16e6:	2000      	movs	r0, #0
}
    16e8:	b007      	add	sp, #28
    16ea:	bc70      	pop	{r4, r5, r6}
    16ec:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16ee:	2000      	movs	r0, #0
			return i;
    16f0:	b2c0      	uxtb	r0, r0
    16f2:	e7f9      	b.n	16e8 <_sercom_get_hardware_index+0x30>
    16f4:	00004350 	.word	0x00004350

000016f8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    16f8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    16fa:	4b03      	ldr	r3, [pc, #12]	; (1708 <_sercom_get_irq_num+0x10>)
    16fc:	4798      	blx	r3
    16fe:	0080      	lsls	r0, r0, #2
    1700:	302e      	adds	r0, #46	; 0x2e
}
    1702:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1706:	bd08      	pop	{r3, pc}
    1708:	000016b9 	.word	0x000016b9

0000170c <_usart_init>:
{
    170c:	b538      	push	{r3, r4, r5, lr}
    170e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1710:	4b33      	ldr	r3, [pc, #204]	; (17e0 <_usart_init+0xd4>)
    1712:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1714:	2803      	cmp	r0, #3
    1716:	d056      	beq.n	17c6 <_usart_init+0xba>
    1718:	2804      	cmp	r0, #4
    171a:	d052      	beq.n	17c2 <_usart_init+0xb6>
    171c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    171e:	bf08      	it	eq
    1720:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1722:	d006      	beq.n	1732 <_usart_init+0x26>
	ASSERT(false);
    1724:	f240 2263 	movw	r2, #611	; 0x263
    1728:	492e      	ldr	r1, [pc, #184]	; (17e4 <_usart_init+0xd8>)
    172a:	2000      	movs	r0, #0
    172c:	4b2e      	ldr	r3, [pc, #184]	; (17e8 <_usart_init+0xdc>)
    172e:	4798      	blx	r3
	return 0;
    1730:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1732:	69e3      	ldr	r3, [r4, #28]
    1734:	f013 0f01 	tst.w	r3, #1
    1738:	d1fb      	bne.n	1732 <_usart_init+0x26>
    173a:	69e3      	ldr	r3, [r4, #28]
    173c:	f013 0f03 	tst.w	r3, #3
    1740:	d1fb      	bne.n	173a <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1742:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1744:	f013 0f02 	tst.w	r3, #2
    1748:	d147      	bne.n	17da <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    174a:	69e3      	ldr	r3, [r4, #28]
    174c:	f013 0f01 	tst.w	r3, #1
    1750:	d1fb      	bne.n	174a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1752:	6823      	ldr	r3, [r4, #0]
    1754:	f043 0301 	orr.w	r3, r3, #1
    1758:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    175a:	69e3      	ldr	r3, [r4, #28]
    175c:	f013 0f01 	tst.w	r3, #1
    1760:	d1fb      	bne.n	175a <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1762:	4610      	mov	r0, r2
    1764:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1768:	4920      	ldr	r1, [pc, #128]	; (17ec <_usart_init+0xe0>)
    176a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    176e:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1770:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1772:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1774:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1778:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    177a:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    177e:	d024      	beq.n	17ca <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1784:	4b19      	ldr	r3, [pc, #100]	; (17ec <_usart_init+0xe0>)
    1786:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    178a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    178c:	89a3      	ldrh	r3, [r4, #12]
    178e:	f361 030c 	bfi	r3, r1, #0, #13
    1792:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1794:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1798:	89a3      	ldrh	r3, [r4, #12]
    179a:	f362 334f 	bfi	r3, r2, #13, #3
    179e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    17a0:	4b12      	ldr	r3, [pc, #72]	; (17ec <_usart_init+0xe0>)
    17a2:	0042      	lsls	r2, r0, #1
    17a4:	1811      	adds	r1, r2, r0
    17a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    17aa:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    17ae:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    17b0:	4402      	add	r2, r0
    17b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    17b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    17ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    17be:	2000      	movs	r0, #0
    17c0:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    17c2:	2201      	movs	r2, #1
    17c4:	e7b5      	b.n	1732 <_usart_init+0x26>
    17c6:	2200      	movs	r2, #0
    17c8:	e7b3      	b.n	1732 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    17ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    17ce:	4b07      	ldr	r3, [pc, #28]	; (17ec <_usart_init+0xe0>)
    17d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    17d4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    17d6:	81a3      	strh	r3, [r4, #12]
    17d8:	e7e2      	b.n	17a0 <_usart_init+0x94>
		return ERR_DENIED;
    17da:	f06f 0010 	mvn.w	r0, #16
}
    17de:	bd38      	pop	{r3, r4, r5, pc}
    17e0:	000016b9 	.word	0x000016b9
    17e4:	000043dc 	.word	0x000043dc
    17e8:	00000f39 	.word	0x00000f39
    17ec:	00004350 	.word	0x00004350

000017f0 <_usart_async_init>:
{
    17f0:	b570      	push	{r4, r5, r6, lr}
    17f2:	460d      	mov	r5, r1
	ASSERT(device);
    17f4:	4606      	mov	r6, r0
    17f6:	22da      	movs	r2, #218	; 0xda
    17f8:	4916      	ldr	r1, [pc, #88]	; (1854 <_usart_async_init+0x64>)
    17fa:	3000      	adds	r0, #0
    17fc:	bf18      	it	ne
    17fe:	2001      	movne	r0, #1
    1800:	4b15      	ldr	r3, [pc, #84]	; (1858 <_usart_async_init+0x68>)
    1802:	4798      	blx	r3
	init_status = _usart_init(hw);
    1804:	4628      	mov	r0, r5
    1806:	4b15      	ldr	r3, [pc, #84]	; (185c <_usart_async_init+0x6c>)
    1808:	4798      	blx	r3
	if (init_status) {
    180a:	4604      	mov	r4, r0
    180c:	b9f8      	cbnz	r0, 184e <_usart_async_init+0x5e>
	device->hw = hw;
    180e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1810:	4628      	mov	r0, r5
    1812:	4b13      	ldr	r3, [pc, #76]	; (1860 <_usart_async_init+0x70>)
    1814:	4798      	blx	r3
		irq = irq +2;
    1816:	3002      	adds	r0, #2
    1818:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    181a:	f000 031f 	and.w	r3, r0, #31
    181e:	2201      	movs	r2, #1
    1820:	409a      	lsls	r2, r3
    1822:	0943      	lsrs	r3, r0, #5
    1824:	009b      	lsls	r3, r3, #2
    1826:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    182a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    182e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1836:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    183a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    183e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1842:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1846:	21e0      	movs	r1, #224	; 0xe0
    1848:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    184c:	601a      	str	r2, [r3, #0]
}
    184e:	4620      	mov	r0, r4
    1850:	bd70      	pop	{r4, r5, r6, pc}
    1852:	bf00      	nop
    1854:	000043dc 	.word	0x000043dc
    1858:	00000f39 	.word	0x00000f39
    185c:	0000170d 	.word	0x0000170d
    1860:	000016f9 	.word	0x000016f9

00001864 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1864:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1866:	69d3      	ldr	r3, [r2, #28]
    1868:	f013 0f03 	tst.w	r3, #3
    186c:	d1fb      	bne.n	1866 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    186e:	6813      	ldr	r3, [r2, #0]
    1870:	f043 0302 	orr.w	r3, r3, #2
    1874:	6013      	str	r3, [r2, #0]
    1876:	4770      	bx	lr

00001878 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1878:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    187a:	6299      	str	r1, [r3, #40]	; 0x28
    187c:	4770      	bx	lr

0000187e <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    187e:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1880:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1882:	b2c0      	uxtb	r0, r0
    1884:	4770      	bx	lr

00001886 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1886:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1888:	7e18      	ldrb	r0, [r3, #24]
}
    188a:	f000 0001 	and.w	r0, r0, #1
    188e:	4770      	bx	lr

00001890 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1890:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1892:	7e18      	ldrb	r0, [r3, #24]
}
    1894:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1898:	4770      	bx	lr
	...

0000189c <_usart_async_set_irq_state>:
{
    189c:	b570      	push	{r4, r5, r6, lr}
    189e:	460c      	mov	r4, r1
    18a0:	4616      	mov	r6, r2
	ASSERT(device);
    18a2:	4605      	mov	r5, r0
    18a4:	f240 2245 	movw	r2, #581	; 0x245
    18a8:	4915      	ldr	r1, [pc, #84]	; (1900 <_usart_async_set_irq_state+0x64>)
    18aa:	3000      	adds	r0, #0
    18ac:	bf18      	it	ne
    18ae:	2001      	movne	r0, #1
    18b0:	4b14      	ldr	r3, [pc, #80]	; (1904 <_usart_async_set_irq_state+0x68>)
    18b2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    18b4:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    18b8:	d10d      	bne.n	18d6 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    18ba:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    18bc:	b92e      	cbnz	r6, 18ca <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    18be:	2201      	movs	r2, #1
    18c0:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    18c2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    18c4:	2202      	movs	r2, #2
    18c6:	751a      	strb	r2, [r3, #20]
    18c8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    18ca:	2201      	movs	r2, #1
    18cc:	759a      	strb	r2, [r3, #22]
    18ce:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    18d0:	2202      	movs	r2, #2
    18d2:	759a      	strb	r2, [r3, #22]
    18d4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    18d6:	2c01      	cmp	r4, #1
    18d8:	d002      	beq.n	18e0 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    18da:	2c03      	cmp	r4, #3
    18dc:	d008      	beq.n	18f0 <_usart_async_set_irq_state+0x54>
    18de:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    18e0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    18e2:	b916      	cbnz	r6, 18ea <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    18e4:	2204      	movs	r2, #4
    18e6:	751a      	strb	r2, [r3, #20]
    18e8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    18ea:	2204      	movs	r2, #4
    18ec:	759a      	strb	r2, [r3, #22]
    18ee:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    18f0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    18f2:	b116      	cbz	r6, 18fa <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    18f4:	2280      	movs	r2, #128	; 0x80
    18f6:	759a      	strb	r2, [r3, #22]
}
    18f8:	e7f1      	b.n	18de <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    18fa:	2280      	movs	r2, #128	; 0x80
    18fc:	751a      	strb	r2, [r3, #20]
    18fe:	bd70      	pop	{r4, r5, r6, pc}
    1900:	000043dc 	.word	0x000043dc
    1904:	00000f39 	.word	0x00000f39

00001908 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <_delay_init+0x10>)
    190a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    190e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1910:	2205      	movs	r2, #5
    1912:	601a      	str	r2, [r3, #0]
    1914:	4770      	bx	lr
    1916:	bf00      	nop
    1918:	e000e010 	.word	0xe000e010

0000191c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    191c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    191e:	b303      	cbz	r3, 1962 <_delay_cycles+0x46>
{
    1920:	b430      	push	{r4, r5}
    1922:	1e5d      	subs	r5, r3, #1
    1924:	b2ed      	uxtb	r5, r5
	while (n--) {
    1926:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1928:	4a12      	ldr	r2, [pc, #72]	; (1974 <_delay_cycles+0x58>)
    192a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    192e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1930:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1932:	6813      	ldr	r3, [r2, #0]
    1934:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1938:	d0fb      	beq.n	1932 <_delay_cycles+0x16>
	while (n--) {
    193a:	3801      	subs	r0, #1
    193c:	b2c0      	uxtb	r0, r0
    193e:	28ff      	cmp	r0, #255	; 0xff
    1940:	d1f5      	bne.n	192e <_delay_cycles+0x12>
    1942:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1946:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    194a:	3101      	adds	r1, #1
    194c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <_delay_cycles+0x58>)
    1950:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1952:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1954:	461a      	mov	r2, r3
    1956:	6813      	ldr	r3, [r2, #0]
    1958:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    195c:	d0fb      	beq.n	1956 <_delay_cycles+0x3a>
		;
}
    195e:	bc30      	pop	{r4, r5}
    1960:	4770      	bx	lr
	SysTick->LOAD = buf;
    1962:	4b04      	ldr	r3, [pc, #16]	; (1974 <_delay_cycles+0x58>)
    1964:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1966:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1968:	461a      	mov	r2, r3
    196a:	6813      	ldr	r3, [r2, #0]
    196c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1970:	d0fb      	beq.n	196a <_delay_cycles+0x4e>
    1972:	4770      	bx	lr
    1974:	e000e010 	.word	0xe000e010

00001978 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    1978:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    197a:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    197e:	f012 0f01 	tst.w	r2, #1
    1982:	d100      	bne.n	1986 <tcc_interrupt_handler+0xe>
    1984:	bd08      	pop	{r3, pc}
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    1986:	2201      	movs	r2, #1
    1988:	62da      	str	r2, [r3, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    198a:	6803      	ldr	r3, [r0, #0]
    198c:	4798      	blx	r3
	}
}
    198e:	e7f9      	b.n	1984 <tcc_interrupt_handler+0xc>

00001990 <TCC0_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC0_0_Handler(void)
{
    1990:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    1992:	4b02      	ldr	r3, [pc, #8]	; (199c <TCC0_0_Handler+0xc>)
    1994:	6818      	ldr	r0, [r3, #0]
    1996:	4b02      	ldr	r3, [pc, #8]	; (19a0 <TCC0_0_Handler+0x10>)
    1998:	4798      	blx	r3
    199a:	bd08      	pop	{r3, pc}
    199c:	200009e4 	.word	0x200009e4
    19a0:	00001979 	.word	0x00001979

000019a4 <TCC1_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC1_0_Handler(void)
{
    19a4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    19a6:	4b02      	ldr	r3, [pc, #8]	; (19b0 <TCC1_0_Handler+0xc>)
    19a8:	6858      	ldr	r0, [r3, #4]
    19aa:	4b02      	ldr	r3, [pc, #8]	; (19b4 <TCC1_0_Handler+0x10>)
    19ac:	4798      	blx	r3
    19ae:	bd08      	pop	{r3, pc}
    19b0:	200009e4 	.word	0x200009e4
    19b4:	00001979 	.word	0x00001979

000019b8 <TCC2_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC2_0_Handler(void)
{
    19b8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    19ba:	4b02      	ldr	r3, [pc, #8]	; (19c4 <TCC2_0_Handler+0xc>)
    19bc:	6898      	ldr	r0, [r3, #8]
    19be:	4b02      	ldr	r3, [pc, #8]	; (19c8 <TCC2_0_Handler+0x10>)
    19c0:	4798      	blx	r3
    19c2:	bd08      	pop	{r3, pc}
    19c4:	200009e4 	.word	0x200009e4
    19c8:	00001979 	.word	0x00001979

000019cc <TCC3_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC3_0_Handler(void)
{
    19cc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    19ce:	4b02      	ldr	r3, [pc, #8]	; (19d8 <TCC3_0_Handler+0xc>)
    19d0:	68d8      	ldr	r0, [r3, #12]
    19d2:	4b02      	ldr	r3, [pc, #8]	; (19dc <TCC3_0_Handler+0x10>)
    19d4:	4798      	blx	r3
    19d6:	bd08      	pop	{r3, pc}
    19d8:	200009e4 	.word	0x200009e4
    19dc:	00001979 	.word	0x00001979

000019e0 <TCC4_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC4_0_Handler(void)
{
    19e0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    19e2:	4b02      	ldr	r3, [pc, #8]	; (19ec <TCC4_0_Handler+0xc>)
    19e4:	6918      	ldr	r0, [r3, #16]
    19e6:	4b02      	ldr	r3, [pc, #8]	; (19f0 <TCC4_0_Handler+0x10>)
    19e8:	4798      	blx	r3
    19ea:	bd08      	pop	{r3, pc}
    19ec:	200009e4 	.word	0x200009e4
    19f0:	00001979 	.word	0x00001979

000019f4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    19f4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    19f6:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    19f8:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    19fa:	f012 0f01 	tst.w	r2, #1
    19fe:	d100      	bne.n	1a02 <tc_interrupt_handler+0xe>
    1a00:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a02:	2201      	movs	r2, #1
    1a04:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    1a06:	6803      	ldr	r3, [r0, #0]
    1a08:	4798      	blx	r3
	}
}
    1a0a:	e7f9      	b.n	1a00 <tc_interrupt_handler+0xc>

00001a0c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1a0c:	b538      	push	{r3, r4, r5, lr}
    1a0e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1a10:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1a12:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1a14:	f013 0f01 	tst.w	r3, #1
    1a18:	d004      	beq.n	1a24 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a1a:	2301      	movs	r3, #1
    1a1c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1a1e:	6803      	ldr	r3, [r0, #0]
    1a20:	b103      	cbz	r3, 1a24 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1a22:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1a24:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1a26:	f013 0f02 	tst.w	r3, #2
    1a2a:	d005      	beq.n	1a38 <tc_pwm_interrupt_handler+0x2c>
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a2c:	2302      	movs	r3, #2
    1a2e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1a30:	686b      	ldr	r3, [r5, #4]
    1a32:	b10b      	cbz	r3, 1a38 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1a34:	4628      	mov	r0, r5
    1a36:	4798      	blx	r3
    1a38:	bd38      	pop	{r3, r4, r5, pc}
	...

00001a3c <TC0_Handler>:

/**
* \brief TC interrupt handler
*/
void TC0_Handler(void)
{
    1a3c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1a3e:	4b02      	ldr	r3, [pc, #8]	; (1a48 <TC0_Handler+0xc>)
    1a40:	6818      	ldr	r0, [r3, #0]
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <TC0_Handler+0x10>)
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
    1a48:	200009f8 	.word	0x200009f8
    1a4c:	00001a0d 	.word	0x00001a0d

00001a50 <TC1_Handler>:

/**
* \brief TC interrupt handler
*/
void TC1_Handler(void)
{
    1a50:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    1a52:	4b02      	ldr	r3, [pc, #8]	; (1a5c <TC1_Handler+0xc>)
    1a54:	6858      	ldr	r0, [r3, #4]
    1a56:	4b02      	ldr	r3, [pc, #8]	; (1a60 <TC1_Handler+0x10>)
    1a58:	4798      	blx	r3
    1a5a:	bd08      	pop	{r3, pc}
    1a5c:	200009f8 	.word	0x200009f8
    1a60:	00001a0d 	.word	0x00001a0d

00001a64 <TC2_Handler>:

/**
* \brief TC interrupt handler
*/
void TC2_Handler(void)
{
    1a64:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    1a66:	4b02      	ldr	r3, [pc, #8]	; (1a70 <TC2_Handler+0xc>)
    1a68:	6898      	ldr	r0, [r3, #8]
    1a6a:	4b02      	ldr	r3, [pc, #8]	; (1a74 <TC2_Handler+0x10>)
    1a6c:	4798      	blx	r3
    1a6e:	bd08      	pop	{r3, pc}
    1a70:	200009f8 	.word	0x200009f8
    1a74:	00001a0d 	.word	0x00001a0d

00001a78 <TC3_Handler>:

/**
* \brief TC interrupt handler
*/
void TC3_Handler(void)
{
    1a78:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    1a7a:	4b02      	ldr	r3, [pc, #8]	; (1a84 <TC3_Handler+0xc>)
    1a7c:	68d8      	ldr	r0, [r3, #12]
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <TC3_Handler+0x10>)
    1a80:	4798      	blx	r3
    1a82:	bd08      	pop	{r3, pc}
    1a84:	200009f8 	.word	0x200009f8
    1a88:	000019f5 	.word	0x000019f5

00001a8c <TC4_Handler>:

/**
* \brief TC interrupt handler
*/
void TC4_Handler(void)
{
    1a8c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    1a8e:	4b02      	ldr	r3, [pc, #8]	; (1a98 <TC4_Handler+0xc>)
    1a90:	6918      	ldr	r0, [r3, #16]
    1a92:	4b02      	ldr	r3, [pc, #8]	; (1a9c <TC4_Handler+0x10>)
    1a94:	4798      	blx	r3
    1a96:	bd08      	pop	{r3, pc}
    1a98:	200009f8 	.word	0x200009f8
    1a9c:	000019f5 	.word	0x000019f5

00001aa0 <TC5_Handler>:

/**
* \brief TC interrupt handler
*/
void TC5_Handler(void)
{
    1aa0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    1aa2:	4b02      	ldr	r3, [pc, #8]	; (1aac <TC5_Handler+0xc>)
    1aa4:	6958      	ldr	r0, [r3, #20]
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <TC5_Handler+0x10>)
    1aa8:	4798      	blx	r3
    1aaa:	bd08      	pop	{r3, pc}
    1aac:	200009f8 	.word	0x200009f8
    1ab0:	000019f5 	.word	0x000019f5

00001ab4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1ab4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1ab6:	4604      	mov	r4, r0
    1ab8:	b330      	cbz	r0, 1b08 <_wdt_init+0x54>
    1aba:	6800      	ldr	r0, [r0, #0]
    1abc:	3000      	adds	r0, #0
    1abe:	bf18      	it	ne
    1ac0:	2001      	movne	r0, #1
    1ac2:	225a      	movs	r2, #90	; 0x5a
    1ac4:	4914      	ldr	r1, [pc, #80]	; (1b18 <_wdt_init+0x64>)
    1ac6:	4b15      	ldr	r3, [pc, #84]	; (1b1c <_wdt_init+0x68>)
    1ac8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1aca:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1acc:	689a      	ldr	r2, [r3, #8]
    1ace:	f012 0f0e 	tst.w	r2, #14
    1ad2:	d1fb      	bne.n	1acc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1ad4:	781a      	ldrb	r2, [r3, #0]
    1ad6:	09d2      	lsrs	r2, r2, #7
    1ad8:	d118      	bne.n	1b0c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1ada:	689a      	ldr	r2, [r3, #8]
    1adc:	f012 0f0e 	tst.w	r2, #14
    1ae0:	d1fb      	bne.n	1ada <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1ae2:	781a      	ldrb	r2, [r3, #0]
    1ae4:	f012 0f02 	tst.w	r2, #2
    1ae8:	d113      	bne.n	1b12 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1aea:	689a      	ldr	r2, [r3, #8]
    1aec:	f012 0f0e 	tst.w	r2, #14
    1af0:	d1fb      	bne.n	1aea <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    1af2:	781a      	ldrb	r2, [r3, #0]
    1af4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1af8:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    1afa:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1afc:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    1b02:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    1b04:	2000      	movs	r0, #0
    1b06:	bd10      	pop	{r4, pc}
    1b08:	2000      	movs	r0, #0
    1b0a:	e7da      	b.n	1ac2 <_wdt_init+0xe>
		return ERR_DENIED;
    1b0c:	f06f 0010 	mvn.w	r0, #16
    1b10:	bd10      	pop	{r4, pc}
    1b12:	f06f 0010 	mvn.w	r0, #16
}
    1b16:	bd10      	pop	{r4, pc}
    1b18:	000043f8 	.word	0x000043f8
    1b1c:	00000f39 	.word	0x00000f39

00001b20 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
    1b22:	460d      	mov	r5, r1
    1b24:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1b26:	4606      	mov	r6, r0
    1b28:	2800      	cmp	r0, #0
    1b2a:	d044      	beq.n	1bb6 <_wdt_set_timeout_period+0x96>
    1b2c:	6800      	ldr	r0, [r0, #0]
    1b2e:	3000      	adds	r0, #0
    1b30:	bf18      	it	ne
    1b32:	2001      	movne	r0, #1
    1b34:	2284      	movs	r2, #132	; 0x84
    1b36:	493f      	ldr	r1, [pc, #252]	; (1c34 <_wdt_set_timeout_period+0x114>)
    1b38:	4b3f      	ldr	r3, [pc, #252]	; (1c38 <_wdt_set_timeout_period+0x118>)
    1b3a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    1b3c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b3e:	6893      	ldr	r3, [r2, #8]
    1b40:	f013 0f0e 	tst.w	r3, #14
    1b44:	d1fb      	bne.n	1b3e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    1b46:	7813      	ldrb	r3, [r2, #0]
    1b48:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1b4c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    1b4e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b50:	688b      	ldr	r3, [r1, #8]
    1b52:	f013 0f0e 	tst.w	r3, #14
    1b56:	d1fb      	bne.n	1b50 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    1b58:	780b      	ldrb	r3, [r1, #0]
    1b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1b5e:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1b60:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b62:	6899      	ldr	r1, [r3, #8]
    1b64:	f011 0f0e 	tst.w	r1, #14
    1b68:	d1fb      	bne.n	1b62 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1b6a:	781a      	ldrb	r2, [r3, #0]
    1b6c:	09d2      	lsrs	r2, r2, #7
    1b6e:	d158      	bne.n	1c22 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b70:	6899      	ldr	r1, [r3, #8]
    1b72:	f011 0f0e 	tst.w	r1, #14
    1b76:	d1fb      	bne.n	1b70 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1b78:	781a      	ldrb	r2, [r3, #0]
    1b7a:	f012 0f02 	tst.w	r2, #2
    1b7e:	d153      	bne.n	1c28 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    1b80:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    1b84:	4628      	mov	r0, r5
    1b86:	2100      	movs	r1, #0
    1b88:	ea50 0201 	orrs.w	r2, r0, r1
    1b8c:	d14f      	bne.n	1c2e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    1b8e:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    1b92:	d038      	beq.n	1c06 <_wdt_set_timeout_period+0xe6>
    1b94:	d911      	bls.n	1bba <_wdt_set_timeout_period+0x9a>
    1b96:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    1b9a:	d038      	beq.n	1c0e <_wdt_set_timeout_period+0xee>
    1b9c:	d927      	bls.n	1bee <_wdt_set_timeout_period+0xce>
    1b9e:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    1ba2:	d038      	beq.n	1c16 <_wdt_set_timeout_period+0xf6>
    1ba4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    1ba8:	d037      	beq.n	1c1a <_wdt_set_timeout_period+0xfa>
    1baa:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    1bae:	d030      	beq.n	1c12 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    1bb0:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
    1bb6:	2000      	movs	r0, #0
    1bb8:	e7bc      	b.n	1b34 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    1bba:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    1bbe:	d01e      	beq.n	1bfe <_wdt_set_timeout_period+0xde>
    1bc0:	d80d      	bhi.n	1bde <_wdt_set_timeout_period+0xbe>
    1bc2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    1bc6:	d02a      	beq.n	1c1e <_wdt_set_timeout_period+0xfe>
    1bc8:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    1bcc:	d1f0      	bne.n	1bb0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    1bce:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1bd0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1bd2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    1bd6:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    1bd8:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    1bda:	2000      	movs	r0, #0
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    1bde:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    1be2:	d00e      	beq.n	1c02 <_wdt_set_timeout_period+0xe2>
    1be4:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    1be8:	d1e2      	bne.n	1bb0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    1bea:	2104      	movs	r1, #4
			break;
    1bec:	e7f0      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    1bee:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    1bf2:	d00a      	beq.n	1c0a <_wdt_set_timeout_period+0xea>
    1bf4:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    1bf8:	d1da      	bne.n	1bb0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    1bfa:	2107      	movs	r1, #7
			break;
    1bfc:	e7e8      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    1bfe:	2102      	movs	r1, #2
			break;
    1c00:	e7e6      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    1c02:	2103      	movs	r1, #3
			break;
    1c04:	e7e4      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    1c06:	2105      	movs	r1, #5
			break;
    1c08:	e7e2      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    1c0a:	2106      	movs	r1, #6
			break;
    1c0c:	e7e0      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    1c0e:	2108      	movs	r1, #8
			break;
    1c10:	e7de      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    1c12:	2109      	movs	r1, #9
			break;
    1c14:	e7dc      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    1c16:	210a      	movs	r1, #10
			break;
    1c18:	e7da      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    1c1a:	210b      	movs	r1, #11
			break;
    1c1c:	e7d8      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    1c1e:	2100      	movs	r1, #0
    1c20:	e7d6      	b.n	1bd0 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    1c22:	f06f 0010 	mvn.w	r0, #16
    1c26:	bd70      	pop	{r4, r5, r6, pc}
    1c28:	f06f 0010 	mvn.w	r0, #16
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    1c2e:	f06f 000c 	mvn.w	r0, #12
    1c32:	bd70      	pop	{r4, r5, r6, pc}
    1c34:	000043f8 	.word	0x000043f8
    1c38:	00000f39 	.word	0x00000f39

00001c3c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    1c3c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1c3e:	4604      	mov	r4, r0
    1c40:	b198      	cbz	r0, 1c6a <_wdt_enable+0x2e>
    1c42:	6800      	ldr	r0, [r0, #0]
    1c44:	3000      	adds	r0, #0
    1c46:	bf18      	it	ne
    1c48:	2001      	movne	r0, #1
    1c4a:	f240 1207 	movw	r2, #263	; 0x107
    1c4e:	4908      	ldr	r1, [pc, #32]	; (1c70 <_wdt_enable+0x34>)
    1c50:	4b08      	ldr	r3, [pc, #32]	; (1c74 <_wdt_enable+0x38>)
    1c52:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    1c54:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1c56:	6893      	ldr	r3, [r2, #8]
    1c58:	f013 0f0e 	tst.w	r3, #14
    1c5c:	d1fb      	bne.n	1c56 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    1c5e:	7813      	ldrb	r3, [r2, #0]
    1c60:	f043 0302 	orr.w	r3, r3, #2
    1c64:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    1c66:	2000      	movs	r0, #0
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	2000      	movs	r0, #0
    1c6c:	e7ed      	b.n	1c4a <_wdt_enable+0xe>
    1c6e:	bf00      	nop
    1c70:	000043f8 	.word	0x000043f8
    1c74:	00000f39 	.word	0x00000f39

00001c78 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    1c78:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1c7a:	4604      	mov	r4, r0
    1c7c:	b1d0      	cbz	r0, 1cb4 <_wdt_disable+0x3c>
    1c7e:	6800      	ldr	r0, [r0, #0]
    1c80:	3000      	adds	r0, #0
    1c82:	bf18      	it	ne
    1c84:	2001      	movne	r0, #1
    1c86:	f44f 728a 	mov.w	r2, #276	; 0x114
    1c8a:	490d      	ldr	r1, [pc, #52]	; (1cc0 <_wdt_disable+0x48>)
    1c8c:	4b0d      	ldr	r3, [pc, #52]	; (1cc4 <_wdt_disable+0x4c>)
    1c8e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    1c90:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1c92:	689a      	ldr	r2, [r3, #8]
    1c94:	f012 0f0e 	tst.w	r2, #14
    1c98:	d1fb      	bne.n	1c92 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1c9a:	781a      	ldrb	r2, [r3, #0]
    1c9c:	09d2      	lsrs	r2, r2, #7
    1c9e:	d10b      	bne.n	1cb8 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1ca0:	689a      	ldr	r2, [r3, #8]
    1ca2:	f012 0f0e 	tst.w	r2, #14
    1ca6:	d1fb      	bne.n	1ca0 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    1ca8:	781a      	ldrb	r2, [r3, #0]
    1caa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    1cae:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    1cb0:	2000      	movs	r0, #0
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	2000      	movs	r0, #0
    1cb6:	e7e6      	b.n	1c86 <_wdt_disable+0xe>
		return ERR_DENIED;
    1cb8:	f06f 0010 	mvn.w	r0, #16
}
    1cbc:	bd10      	pop	{r4, pc}
    1cbe:	bf00      	nop
    1cc0:	000043f8 	.word	0x000043f8
    1cc4:	00000f39 	.word	0x00000f39

00001cc8 <main>:
*                - Implements the task creation.
*                - Starts the Free RTOS scheduler.
*
********************************************************************************/
int main(void)
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
    1cca:	b082      	sub	sp, #8
	uint16_t resultRead = 0;
    1ccc:	ac02      	add	r4, sp, #8
    1cce:	2300      	movs	r3, #0
    1cd0:	f824 3d02 	strh.w	r3, [r4, #-2]!
	uint8_t bytesRead = 0;
	uint8_t index=0;
	

    /* Initializes MCU, drivers and middleware */
    atmel_start_init();	
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <main+0x20>)
    1cd6:	4798      	blx	r3

    while(1)
	{
		bytesRead = sensorAdcReadChannel(0,&resultRead,2);
    1cd8:	2602      	movs	r6, #2
    1cda:	4d04      	ldr	r5, [pc, #16]	; (1cec <main+0x24>)
    1cdc:	4632      	mov	r2, r6
    1cde:	4621      	mov	r1, r4
    1ce0:	2000      	movs	r0, #0
    1ce2:	47a8      	blx	r5
    1ce4:	e7fa      	b.n	1cdc <main+0x14>
    1ce6:	bf00      	nop
    1ce8:	000008f9 	.word	0x000008f9
    1cec:	00000365 	.word	0x00000365

00001cf0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    1cf0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    1cf2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1cf4:	689a      	ldr	r2, [r3, #8]
    1cf6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1cf8:	689a      	ldr	r2, [r3, #8]
    1cfa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    1cfc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    1cfe:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1d00:	6803      	ldr	r3, [r0, #0]
    1d02:	3301      	adds	r3, #1
    1d04:	6003      	str	r3, [r0, #0]
    1d06:	4770      	bx	lr

00001d08 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    1d08:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1d0a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    1d0c:	f1b5 3fff 	cmp.w	r5, #4294967295
    1d10:	d002      	beq.n	1d18 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1d12:	f100 0208 	add.w	r2, r0, #8
    1d16:	e002      	b.n	1d1e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    1d18:	6902      	ldr	r2, [r0, #16]
    1d1a:	e004      	b.n	1d26 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    1d1c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    1d1e:	6853      	ldr	r3, [r2, #4]
    1d20:	681c      	ldr	r4, [r3, #0]
    1d22:	42a5      	cmp	r5, r4
    1d24:	d2fa      	bcs.n	1d1c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    1d26:	6853      	ldr	r3, [r2, #4]
    1d28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1d2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    1d2c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    1d2e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    1d30:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    1d32:	6803      	ldr	r3, [r0, #0]
    1d34:	3301      	adds	r3, #1
    1d36:	6003      	str	r3, [r0, #0]
}
    1d38:	bc30      	pop	{r4, r5}
    1d3a:	4770      	bx	lr

00001d3c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    1d3c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1d3e:	6842      	ldr	r2, [r0, #4]
    1d40:	6881      	ldr	r1, [r0, #8]
    1d42:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1d44:	6882      	ldr	r2, [r0, #8]
    1d46:	6841      	ldr	r1, [r0, #4]
    1d48:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    1d4a:	685a      	ldr	r2, [r3, #4]
    1d4c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1d4e:	bf04      	itt	eq
    1d50:	6882      	ldreq	r2, [r0, #8]
    1d52:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1d54:	2200      	movs	r2, #0
    1d56:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    1d58:	681a      	ldr	r2, [r3, #0]
    1d5a:	3a01      	subs	r2, #1
    1d5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1d5e:	6818      	ldr	r0, [r3, #0]
}
    1d60:	4770      	bx	lr
	...

00001d70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    1d70:	4b07      	ldr	r3, [pc, #28]	; (1d90 <pxCurrentTCBConst2>)
    1d72:	6819      	ldr	r1, [r3, #0]
    1d74:	6808      	ldr	r0, [r1, #0]
    1d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d7a:	f380 8809 	msr	PSP, r0
    1d7e:	f3bf 8f6f 	isb	sy
    1d82:	f04f 0000 	mov.w	r0, #0
    1d86:	f380 8811 	msr	BASEPRI, r0
    1d8a:	4770      	bx	lr
    1d8c:	f3af 8000 	nop.w

00001d90 <pxCurrentTCBConst2>:
    1d90:	200032c4 	.word	0x200032c4

00001d94 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    1d94:	f04f 0380 	mov.w	r3, #128	; 0x80
    1d98:	f383 8811 	msr	BASEPRI, r3
    1d9c:	f3bf 8f6f 	isb	sy
    1da0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical(void)
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    1da4:	4a0a      	ldr	r2, [pc, #40]	; (1dd0 <vPortEnterCritical+0x3c>)
    1da6:	6813      	ldr	r3, [r2, #0]
    1da8:	3301      	adds	r3, #1
    1daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
    1dac:	2b01      	cmp	r3, #1
    1dae:	d10d      	bne.n	1dcc <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    1db0:	4b08      	ldr	r3, [pc, #32]	; (1dd4 <vPortEnterCritical+0x40>)
    1db2:	681b      	ldr	r3, [r3, #0]
    1db4:	f013 0fff 	tst.w	r3, #255	; 0xff
    1db8:	d008      	beq.n	1dcc <vPortEnterCritical+0x38>
    1dba:	f04f 0380 	mov.w	r3, #128	; 0x80
    1dbe:	f383 8811 	msr	BASEPRI, r3
    1dc2:	f3bf 8f6f 	isb	sy
    1dc6:	f3bf 8f4f 	dsb	sy
    1dca:	e7fe      	b.n	1dca <vPortEnterCritical+0x36>
    1dcc:	4770      	bx	lr
    1dce:	bf00      	nop
    1dd0:	2000006c 	.word	0x2000006c
    1dd4:	e000ed04 	.word	0xe000ed04

00001dd8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical(void)
{
	configASSERT(uxCriticalNesting);
    1dd8:	4b09      	ldr	r3, [pc, #36]	; (1e00 <vPortExitCritical+0x28>)
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	b943      	cbnz	r3, 1df0 <vPortExitCritical+0x18>
    1dde:	f04f 0380 	mov.w	r3, #128	; 0x80
    1de2:	f383 8811 	msr	BASEPRI, r3
    1de6:	f3bf 8f6f 	isb	sy
    1dea:	f3bf 8f4f 	dsb	sy
    1dee:	e7fe      	b.n	1dee <vPortExitCritical+0x16>
	uxCriticalNesting--;
    1df0:	3b01      	subs	r3, #1
    1df2:	4a03      	ldr	r2, [pc, #12]	; (1e00 <vPortExitCritical+0x28>)
    1df4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    1df6:	b90b      	cbnz	r3, 1dfc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    1df8:	f383 8811 	msr	BASEPRI, r3
    1dfc:	4770      	bx	lr
    1dfe:	bf00      	nop
    1e00:	2000006c 	.word	0x2000006c
	...

00001e10 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    1e10:	f3ef 8009 	mrs	r0, PSP
    1e14:	f3bf 8f6f 	isb	sy
    1e18:	4b15      	ldr	r3, [pc, #84]	; (1e70 <pxCurrentTCBConst>)
    1e1a:	681a      	ldr	r2, [r3, #0]
    1e1c:	f01e 0f10 	tst.w	lr, #16
    1e20:	bf08      	it	eq
    1e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    1e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e2a:	6010      	str	r0, [r2, #0]
    1e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
    1e30:	f04f 0080 	mov.w	r0, #128	; 0x80
    1e34:	f380 8811 	msr	BASEPRI, r0
    1e38:	f3bf 8f4f 	dsb	sy
    1e3c:	f3bf 8f6f 	isb	sy
    1e40:	f000 fd48 	bl	28d4 <vTaskSwitchContext>
    1e44:	f04f 0000 	mov.w	r0, #0
    1e48:	f380 8811 	msr	BASEPRI, r0
    1e4c:	bc09      	pop	{r0, r3}
    1e4e:	6819      	ldr	r1, [r3, #0]
    1e50:	6808      	ldr	r0, [r1, #0]
    1e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e56:	f01e 0f10 	tst.w	lr, #16
    1e5a:	bf08      	it	eq
    1e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    1e60:	f380 8809 	msr	PSP, r0
    1e64:	f3bf 8f6f 	isb	sy
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop
    1e6c:	f3af 8000 	nop.w

00001e70 <pxCurrentTCBConst>:
    1e70:	200032c4 	.word	0x200032c4

00001e74 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    1e74:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    1e76:	f04f 0380 	mov.w	r3, #128	; 0x80
    1e7a:	f383 8811 	msr	BASEPRI, r3
    1e7e:	f3bf 8f6f 	isb	sy
    1e82:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    1e86:	4b05      	ldr	r3, [pc, #20]	; (1e9c <SysTick_Handler+0x28>)
    1e88:	4798      	blx	r3
    1e8a:	b118      	cbz	r0, 1e94 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    1e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1e90:	4b03      	ldr	r3, [pc, #12]	; (1ea0 <SysTick_Handler+0x2c>)
    1e92:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    1e94:	2300      	movs	r3, #0
    1e96:	f383 8811 	msr	BASEPRI, r3
    1e9a:	bd08      	pop	{r3, pc}
    1e9c:	000026a1 	.word	0x000026a1
    1ea0:	e000ed04 	.word	0xe000ed04

00001ea4 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    1ea4:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    1ea8:	2b0f      	cmp	r3, #15
    1eaa:	d90f      	bls.n	1ecc <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    1eac:	4a10      	ldr	r2, [pc, #64]	; (1ef0 <vPortValidateInterruptPriority+0x4c>)
    1eae:	5c9b      	ldrb	r3, [r3, r2]
    1eb0:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    1eb2:	4a10      	ldr	r2, [pc, #64]	; (1ef4 <vPortValidateInterruptPriority+0x50>)
    1eb4:	7812      	ldrb	r2, [r2, #0]
    1eb6:	429a      	cmp	r2, r3
    1eb8:	d908      	bls.n	1ecc <vPortValidateInterruptPriority+0x28>
	__asm volatile("	mov %0, %1												\n"
    1eba:	f04f 0380 	mov.w	r3, #128	; 0x80
    1ebe:	f383 8811 	msr	BASEPRI, r3
    1ec2:	f3bf 8f6f 	isb	sy
    1ec6:	f3bf 8f4f 	dsb	sy
    1eca:	e7fe      	b.n	1eca <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    1ecc:	4b0a      	ldr	r3, [pc, #40]	; (1ef8 <vPortValidateInterruptPriority+0x54>)
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1ed4:	4a07      	ldr	r2, [pc, #28]	; (1ef4 <vPortValidateInterruptPriority+0x50>)
    1ed6:	6852      	ldr	r2, [r2, #4]
    1ed8:	4293      	cmp	r3, r2
    1eda:	d908      	bls.n	1eee <vPortValidateInterruptPriority+0x4a>
    1edc:	f04f 0380 	mov.w	r3, #128	; 0x80
    1ee0:	f383 8811 	msr	BASEPRI, r3
    1ee4:	f3bf 8f6f 	isb	sy
    1ee8:	f3bf 8f4f 	dsb	sy
    1eec:	e7fe      	b.n	1eec <vPortValidateInterruptPriority+0x48>
    1eee:	4770      	bx	lr
    1ef0:	e000e3f0 	.word	0xe000e3f0
    1ef4:	20000a10 	.word	0x20000a10
    1ef8:	e000ed0c 	.word	0xe000ed0c

00001efc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    1f00:	4b2f      	ldr	r3, [pc, #188]	; (1fc0 <pvPortMalloc+0xc4>)
    1f02:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1f04:	4b2f      	ldr	r3, [pc, #188]	; (1fc4 <pvPortMalloc+0xc8>)
    1f06:	689b      	ldr	r3, [r3, #8]
    1f08:	b183      	cbz	r3, 1f2c <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1f0a:	2c00      	cmp	r4, #0
    1f0c:	d051      	beq.n	1fb2 <pvPortMalloc+0xb6>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1f0e:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    1f10:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1f14:	bf1c      	itt	ne
    1f16:	f024 0407 	bicne.w	r4, r4, #7
    1f1a:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1f1c:	1e62      	subs	r2, r4, #1
    1f1e:	f242 73f6 	movw	r3, #10230	; 0x27f6
    1f22:	429a      	cmp	r2, r3
    1f24:	d842      	bhi.n	1fac <pvPortMalloc+0xb0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    1f26:	4927      	ldr	r1, [pc, #156]	; (1fc4 <pvPortMalloc+0xc8>)
    1f28:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1f2a:	e017      	b.n	1f5c <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1f2c:	4925      	ldr	r1, [pc, #148]	; (1fc4 <pvPortMalloc+0xc8>)
    1f2e:	f101 0314 	add.w	r3, r1, #20
    1f32:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1f36:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    1f38:	2500      	movs	r5, #0
    1f3a:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1f3c:	4a22      	ldr	r2, [pc, #136]	; (1fc8 <pvPortMalloc+0xcc>)
    1f3e:	f242 70f8 	movw	r0, #10232	; 0x27f8
    1f42:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    1f46:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1f4a:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1f4c:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    1f50:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    1f52:	2301      	movs	r3, #1
    1f54:	608b      	str	r3, [r1, #8]
    1f56:	e7d8      	b.n	1f0a <pvPortMalloc+0xe>
    1f58:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    1f5a:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1f5c:	685a      	ldr	r2, [r3, #4]
    1f5e:	4294      	cmp	r4, r2
    1f60:	d902      	bls.n	1f68 <pvPortMalloc+0x6c>
    1f62:	681a      	ldr	r2, [r3, #0]
    1f64:	2a00      	cmp	r2, #0
    1f66:	d1f7      	bne.n	1f58 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    1f68:	4a18      	ldr	r2, [pc, #96]	; (1fcc <pvPortMalloc+0xd0>)
    1f6a:	4293      	cmp	r3, r2
    1f6c:	d01e      	beq.n	1fac <pvPortMalloc+0xb0>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1f6e:	680d      	ldr	r5, [r1, #0]
    1f70:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1f72:	681a      	ldr	r2, [r3, #0]
    1f74:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1f76:	685a      	ldr	r2, [r3, #4]
    1f78:	1b12      	subs	r2, r2, r4
    1f7a:	2a10      	cmp	r2, #16
    1f7c:	d90c      	bls.n	1f98 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1f7e:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1f80:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    1f82:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1f84:	6874      	ldr	r4, [r6, #4]
    1f86:	490f      	ldr	r1, [pc, #60]	; (1fc4 <pvPortMalloc+0xc8>)
    1f88:	e000      	b.n	1f8c <pvPortMalloc+0x90>
    1f8a:	4611      	mov	r1, r2
    1f8c:	680a      	ldr	r2, [r1, #0]
    1f8e:	6850      	ldr	r0, [r2, #4]
    1f90:	4284      	cmp	r4, r0
    1f92:	d8fa      	bhi.n	1f8a <pvPortMalloc+0x8e>
    1f94:	6032      	str	r2, [r6, #0]
    1f96:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1f98:	490d      	ldr	r1, [pc, #52]	; (1fd0 <pvPortMalloc+0xd4>)
    1f9a:	680a      	ldr	r2, [r1, #0]
    1f9c:	685b      	ldr	r3, [r3, #4]
    1f9e:	1ad2      	subs	r2, r2, r3
    1fa0:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <pvPortMalloc+0xd8>)
    1fa4:	4798      	blx	r3
		if( pvReturn == NULL )
    1fa6:	b135      	cbz	r5, 1fb6 <pvPortMalloc+0xba>
}
    1fa8:	4628      	mov	r0, r5
    1faa:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
    1fac:	4b09      	ldr	r3, [pc, #36]	; (1fd4 <pvPortMalloc+0xd8>)
    1fae:	4798      	blx	r3
    1fb0:	e001      	b.n	1fb6 <pvPortMalloc+0xba>
    1fb2:	4b08      	ldr	r3, [pc, #32]	; (1fd4 <pvPortMalloc+0xd8>)
    1fb4:	4798      	blx	r3
			vApplicationMallocFailedHook();
    1fb6:	4b08      	ldr	r3, [pc, #32]	; (1fd8 <pvPortMalloc+0xdc>)
    1fb8:	4798      	blx	r3
    1fba:	2500      	movs	r5, #0
	return pvReturn;
    1fbc:	e7f4      	b.n	1fa8 <pvPortMalloc+0xac>
    1fbe:	bf00      	nop
    1fc0:	0000268d 	.word	0x0000268d
    1fc4:	20000a18 	.word	0x20000a18
    1fc8:	20002c08 	.word	0x20002c08
    1fcc:	20003224 	.word	0x20003224
    1fd0:	20000070 	.word	0x20000070
    1fd4:	000027c9 	.word	0x000027c9
    1fd8:	0000033d 	.word	0x0000033d

00001fdc <vPortFree>:
	if( pv != NULL )
    1fdc:	b1d0      	cbz	r0, 2014 <vPortFree+0x38>
{
    1fde:	b570      	push	{r4, r5, r6, lr}
    1fe0:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    1fe2:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    1fe6:	4b0c      	ldr	r3, [pc, #48]	; (2018 <vPortFree+0x3c>)
    1fe8:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1fea:	f855 4c04 	ldr.w	r4, [r5, #-4]
    1fee:	4a0b      	ldr	r2, [pc, #44]	; (201c <vPortFree+0x40>)
    1ff0:	e000      	b.n	1ff4 <vPortFree+0x18>
    1ff2:	461a      	mov	r2, r3
    1ff4:	6813      	ldr	r3, [r2, #0]
    1ff6:	6859      	ldr	r1, [r3, #4]
    1ff8:	428c      	cmp	r4, r1
    1ffa:	d8fa      	bhi.n	1ff2 <vPortFree+0x16>
    1ffc:	f845 3c08 	str.w	r3, [r5, #-8]
    2000:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    2002:	4a07      	ldr	r2, [pc, #28]	; (2020 <vPortFree+0x44>)
    2004:	f855 3c04 	ldr.w	r3, [r5, #-4]
    2008:	6811      	ldr	r1, [r2, #0]
    200a:	440b      	add	r3, r1
    200c:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    200e:	4b05      	ldr	r3, [pc, #20]	; (2024 <vPortFree+0x48>)
    2010:	4798      	blx	r3
    2012:	bd70      	pop	{r4, r5, r6, pc}
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	0000268d 	.word	0x0000268d
    201c:	20000a18 	.word	0x20000a18
    2020:	20000070 	.word	0x20000070
    2024:	000027c9 	.word	0x000027c9

00002028 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    2028:	b510      	push	{r4, lr}
    202a:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    202c:	4b04      	ldr	r3, [pc, #16]	; (2040 <prvIsQueueEmpty+0x18>)
    202e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2030:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2032:	4b04      	ldr	r3, [pc, #16]	; (2044 <prvIsQueueEmpty+0x1c>)
    2034:	4798      	blx	r3

	return xReturn;
}
    2036:	fab4 f084 	clz	r0, r4
    203a:	0940      	lsrs	r0, r0, #5
    203c:	bd10      	pop	{r4, pc}
    203e:	bf00      	nop
    2040:	00001d95 	.word	0x00001d95
    2044:	00001dd9 	.word	0x00001dd9

00002048 <prvCopyDataToQueue>:
{
    2048:	b570      	push	{r4, r5, r6, lr}
    204a:	4604      	mov	r4, r0
    204c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    204e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    2050:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2052:	b952      	cbnz	r2, 206a <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2054:	6803      	ldr	r3, [r0, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d12a      	bne.n	20b0 <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    205a:	6840      	ldr	r0, [r0, #4]
    205c:	4b18      	ldr	r3, [pc, #96]	; (20c0 <prvCopyDataToQueue+0x78>)
    205e:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2060:	2300      	movs	r3, #0
    2062:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    2064:	3501      	adds	r5, #1
    2066:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2068:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    206a:	b96e      	cbnz	r6, 2088 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    206c:	6880      	ldr	r0, [r0, #8]
    206e:	4b15      	ldr	r3, [pc, #84]	; (20c4 <prvCopyDataToQueue+0x7c>)
    2070:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2072:	68a3      	ldr	r3, [r4, #8]
    2074:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2076:	4413      	add	r3, r2
    2078:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    207a:	6862      	ldr	r2, [r4, #4]
    207c:	4293      	cmp	r3, r2
    207e:	d319      	bcc.n	20b4 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2080:	6823      	ldr	r3, [r4, #0]
    2082:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    2084:	2000      	movs	r0, #0
    2086:	e7ed      	b.n	2064 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    2088:	68c0      	ldr	r0, [r0, #12]
    208a:	4b0e      	ldr	r3, [pc, #56]	; (20c4 <prvCopyDataToQueue+0x7c>)
    208c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    208e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2090:	425b      	negs	r3, r3
    2092:	68e2      	ldr	r2, [r4, #12]
    2094:	441a      	add	r2, r3
    2096:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    2098:	6821      	ldr	r1, [r4, #0]
    209a:	428a      	cmp	r2, r1
    209c:	d202      	bcs.n	20a4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    209e:	6862      	ldr	r2, [r4, #4]
    20a0:	4413      	add	r3, r2
    20a2:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    20a4:	2e02      	cmp	r6, #2
    20a6:	d107      	bne.n	20b8 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    20a8:	b145      	cbz	r5, 20bc <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    20aa:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    20ac:	2000      	movs	r0, #0
    20ae:	e7d9      	b.n	2064 <prvCopyDataToQueue+0x1c>
    20b0:	2000      	movs	r0, #0
    20b2:	e7d7      	b.n	2064 <prvCopyDataToQueue+0x1c>
    20b4:	2000      	movs	r0, #0
    20b6:	e7d5      	b.n	2064 <prvCopyDataToQueue+0x1c>
    20b8:	2000      	movs	r0, #0
    20ba:	e7d3      	b.n	2064 <prvCopyDataToQueue+0x1c>
    20bc:	2000      	movs	r0, #0
    20be:	e7d1      	b.n	2064 <prvCopyDataToQueue+0x1c>
    20c0:	00002bd1 	.word	0x00002bd1
    20c4:	00002ea5 	.word	0x00002ea5

000020c8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    20ce:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    20d0:	b164      	cbz	r4, 20ec <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    20d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    20d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    20d6:	429a      	cmp	r2, r3
    20d8:	d311      	bcc.n	20fe <prvNotifyQueueSetContainer+0x36>
    20da:	f04f 0380 	mov.w	r3, #128	; 0x80
    20de:	f383 8811 	msr	BASEPRI, r3
    20e2:	f3bf 8f6f 	isb	sy
    20e6:	f3bf 8f4f 	dsb	sy
    20ea:	e7fe      	b.n	20ea <prvNotifyQueueSetContainer+0x22>
    20ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    20f0:	f383 8811 	msr	BASEPRI, r3
    20f4:	f3bf 8f6f 	isb	sy
    20f8:	f3bf 8f4f 	dsb	sy
    20fc:	e7fe      	b.n	20fc <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    20fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2100:	4293      	cmp	r3, r2
    2102:	d803      	bhi.n	210c <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    2104:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2106:	4630      	mov	r0, r6
    2108:	b002      	add	sp, #8
    210a:	bd70      	pop	{r4, r5, r6, pc}
    210c:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    210e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    2112:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    2114:	a901      	add	r1, sp, #4
    2116:	4620      	mov	r0, r4
    2118:	4b0a      	ldr	r3, [pc, #40]	; (2144 <prvNotifyQueueSetContainer+0x7c>)
    211a:	4798      	blx	r3
    211c:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    211e:	f1b5 3fff 	cmp.w	r5, #4294967295
    2122:	d10a      	bne.n	213a <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    2124:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2126:	2b00      	cmp	r3, #0
    2128:	d0ed      	beq.n	2106 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    212a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    212e:	4b06      	ldr	r3, [pc, #24]	; (2148 <prvNotifyQueueSetContainer+0x80>)
    2130:	4798      	blx	r3
    2132:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    2134:	bf18      	it	ne
    2136:	2601      	movne	r6, #1
    2138:	e7e5      	b.n	2106 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    213a:	1c6b      	adds	r3, r5, #1
    213c:	b25b      	sxtb	r3, r3
    213e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    2142:	e7e0      	b.n	2106 <prvNotifyQueueSetContainer+0x3e>
    2144:	00002049 	.word	0x00002049
    2148:	000029cd 	.word	0x000029cd

0000214c <prvUnlockQueue>:
{
    214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2150:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    2152:	4b23      	ldr	r3, [pc, #140]	; (21e0 <prvUnlockQueue+0x94>)
    2154:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2156:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    215a:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    215c:	2c00      	cmp	r4, #0
    215e:	dd19      	ble.n	2194 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    2160:	4e20      	ldr	r6, [pc, #128]	; (21e4 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    2162:	f8df 808c 	ldr.w	r8, [pc, #140]	; 21f0 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2166:	4f20      	ldr	r7, [pc, #128]	; (21e8 <prvUnlockQueue+0x9c>)
    2168:	e008      	b.n	217c <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    216a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    216c:	b193      	cbz	r3, 2194 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    216e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2172:	47b8      	blx	r7
    2174:	b960      	cbnz	r0, 2190 <prvUnlockQueue+0x44>
    2176:	3c01      	subs	r4, #1
    2178:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    217a:	b15c      	cbz	r4, 2194 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    217c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    217e:	2b00      	cmp	r3, #0
    2180:	d0f3      	beq.n	216a <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    2182:	2100      	movs	r1, #0
    2184:	4628      	mov	r0, r5
    2186:	47b0      	blx	r6
    2188:	2800      	cmp	r0, #0
    218a:	d0f4      	beq.n	2176 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    218c:	47c0      	blx	r8
    218e:	e7f2      	b.n	2176 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    2190:	47c0      	blx	r8
    2192:	e7f0      	b.n	2176 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    2194:	23ff      	movs	r3, #255	; 0xff
    2196:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    219a:	4b14      	ldr	r3, [pc, #80]	; (21ec <prvUnlockQueue+0xa0>)
    219c:	4798      	blx	r3
	taskENTER_CRITICAL();
    219e:	4b10      	ldr	r3, [pc, #64]	; (21e0 <prvUnlockQueue+0x94>)
    21a0:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    21a2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    21a6:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    21a8:	2c00      	cmp	r4, #0
    21aa:	dd12      	ble.n	21d2 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    21ac:	692b      	ldr	r3, [r5, #16]
    21ae:	b183      	cbz	r3, 21d2 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    21b0:	f105 0710 	add.w	r7, r5, #16
    21b4:	4e0c      	ldr	r6, [pc, #48]	; (21e8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    21b6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 21f0 <prvUnlockQueue+0xa4>
    21ba:	e004      	b.n	21c6 <prvUnlockQueue+0x7a>
    21bc:	3c01      	subs	r4, #1
    21be:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    21c0:	b13c      	cbz	r4, 21d2 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    21c2:	692b      	ldr	r3, [r5, #16]
    21c4:	b12b      	cbz	r3, 21d2 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    21c6:	4638      	mov	r0, r7
    21c8:	47b0      	blx	r6
    21ca:	2800      	cmp	r0, #0
    21cc:	d0f6      	beq.n	21bc <prvUnlockQueue+0x70>
					vTaskMissedYield();
    21ce:	47c0      	blx	r8
    21d0:	e7f4      	b.n	21bc <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    21d2:	23ff      	movs	r3, #255	; 0xff
    21d4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <prvUnlockQueue+0xa0>)
    21da:	4798      	blx	r3
    21dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21e0:	00001d95 	.word	0x00001d95
    21e4:	000020c9 	.word	0x000020c9
    21e8:	000029cd 	.word	0x000029cd
    21ec:	00001dd9 	.word	0x00001dd9
    21f0:	00002afd 	.word	0x00002afd

000021f4 <xQueueGenericSend>:
{
    21f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21f8:	b085      	sub	sp, #20
    21fa:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    21fc:	b198      	cbz	r0, 2226 <xQueueGenericSend+0x32>
    21fe:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2200:	b1d1      	cbz	r1, 2238 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2202:	2b02      	cmp	r3, #2
    2204:	d024      	beq.n	2250 <xQueueGenericSend+0x5c>
    2206:	461e      	mov	r6, r3
    2208:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    220a:	4b64      	ldr	r3, [pc, #400]	; (239c <xQueueGenericSend+0x1a8>)
    220c:	4798      	blx	r3
    220e:	bb58      	cbnz	r0, 2268 <xQueueGenericSend+0x74>
    2210:	9b01      	ldr	r3, [sp, #4]
    2212:	b38b      	cbz	r3, 2278 <xQueueGenericSend+0x84>
    2214:	f04f 0380 	mov.w	r3, #128	; 0x80
    2218:	f383 8811 	msr	BASEPRI, r3
    221c:	f3bf 8f6f 	isb	sy
    2220:	f3bf 8f4f 	dsb	sy
    2224:	e7fe      	b.n	2224 <xQueueGenericSend+0x30>
    2226:	f04f 0380 	mov.w	r3, #128	; 0x80
    222a:	f383 8811 	msr	BASEPRI, r3
    222e:	f3bf 8f6f 	isb	sy
    2232:	f3bf 8f4f 	dsb	sy
    2236:	e7fe      	b.n	2236 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2238:	6c02      	ldr	r2, [r0, #64]	; 0x40
    223a:	2a00      	cmp	r2, #0
    223c:	d0e1      	beq.n	2202 <xQueueGenericSend+0xe>
    223e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2242:	f383 8811 	msr	BASEPRI, r3
    2246:	f3bf 8f6f 	isb	sy
    224a:	f3bf 8f4f 	dsb	sy
    224e:	e7fe      	b.n	224e <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2250:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2252:	2a01      	cmp	r2, #1
    2254:	d0d7      	beq.n	2206 <xQueueGenericSend+0x12>
    2256:	f04f 0380 	mov.w	r3, #128	; 0x80
    225a:	f383 8811 	msr	BASEPRI, r3
    225e:	f3bf 8f6f 	isb	sy
    2262:	f3bf 8f4f 	dsb	sy
    2266:	e7fe      	b.n	2266 <xQueueGenericSend+0x72>
    2268:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    226a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 23c8 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    226e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 23cc <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    2272:	f8df 9134 	ldr.w	r9, [pc, #308]	; 23a8 <xQueueGenericSend+0x1b4>
    2276:	e041      	b.n	22fc <xQueueGenericSend+0x108>
    2278:	2500      	movs	r5, #0
    227a:	e7f6      	b.n	226a <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    227c:	4632      	mov	r2, r6
    227e:	4639      	mov	r1, r7
    2280:	4620      	mov	r0, r4
    2282:	4b47      	ldr	r3, [pc, #284]	; (23a0 <xQueueGenericSend+0x1ac>)
    2284:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    2286:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2288:	b193      	cbz	r3, 22b0 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    228a:	4631      	mov	r1, r6
    228c:	4620      	mov	r0, r4
    228e:	4b45      	ldr	r3, [pc, #276]	; (23a4 <xQueueGenericSend+0x1b0>)
    2290:	4798      	blx	r3
    2292:	b138      	cbz	r0, 22a4 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    2294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2298:	4b43      	ldr	r3, [pc, #268]	; (23a8 <xQueueGenericSend+0x1b4>)
    229a:	601a      	str	r2, [r3, #0]
    229c:	f3bf 8f4f 	dsb	sy
    22a0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    22a4:	4b41      	ldr	r3, [pc, #260]	; (23ac <xQueueGenericSend+0x1b8>)
    22a6:	4798      	blx	r3
				return pdPASS;
    22a8:	2001      	movs	r0, #1
}
    22aa:	b005      	add	sp, #20
    22ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    22b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    22b2:	b173      	cbz	r3, 22d2 <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    22b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    22b8:	4b3d      	ldr	r3, [pc, #244]	; (23b0 <xQueueGenericSend+0x1bc>)
    22ba:	4798      	blx	r3
    22bc:	2800      	cmp	r0, #0
    22be:	d0f1      	beq.n	22a4 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    22c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    22c4:	4b38      	ldr	r3, [pc, #224]	; (23a8 <xQueueGenericSend+0x1b4>)
    22c6:	601a      	str	r2, [r3, #0]
    22c8:	f3bf 8f4f 	dsb	sy
    22cc:	f3bf 8f6f 	isb	sy
    22d0:	e7e8      	b.n	22a4 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    22d2:	2800      	cmp	r0, #0
    22d4:	d0e6      	beq.n	22a4 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    22d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    22da:	4b33      	ldr	r3, [pc, #204]	; (23a8 <xQueueGenericSend+0x1b4>)
    22dc:	601a      	str	r2, [r3, #0]
    22de:	f3bf 8f4f 	dsb	sy
    22e2:	f3bf 8f6f 	isb	sy
    22e6:	e7dd      	b.n	22a4 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    22e8:	4b30      	ldr	r3, [pc, #192]	; (23ac <xQueueGenericSend+0x1b8>)
    22ea:	4798      	blx	r3
					return errQUEUE_FULL;
    22ec:	2000      	movs	r0, #0
    22ee:	e7dc      	b.n	22aa <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    22f0:	4620      	mov	r0, r4
    22f2:	4b30      	ldr	r3, [pc, #192]	; (23b4 <xQueueGenericSend+0x1c0>)
    22f4:	4798      	blx	r3
				(void)xTaskResumeAll();
    22f6:	4b30      	ldr	r3, [pc, #192]	; (23b8 <xQueueGenericSend+0x1c4>)
    22f8:	4798      	blx	r3
    22fa:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    22fc:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    22fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2302:	429a      	cmp	r2, r3
    2304:	d3ba      	bcc.n	227c <xQueueGenericSend+0x88>
    2306:	2e02      	cmp	r6, #2
    2308:	d0b8      	beq.n	227c <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    230a:	9b01      	ldr	r3, [sp, #4]
    230c:	2b00      	cmp	r3, #0
    230e:	d0eb      	beq.n	22e8 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    2310:	b90d      	cbnz	r5, 2316 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    2312:	a802      	add	r0, sp, #8
    2314:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    2316:	4b25      	ldr	r3, [pc, #148]	; (23ac <xQueueGenericSend+0x1b8>)
    2318:	4798      	blx	r3
		vTaskSuspendAll();
    231a:	4b28      	ldr	r3, [pc, #160]	; (23bc <xQueueGenericSend+0x1c8>)
    231c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    231e:	47c0      	blx	r8
    2320:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2324:	b25b      	sxtb	r3, r3
    2326:	f1b3 3fff 	cmp.w	r3, #4294967295
    232a:	bf04      	itt	eq
    232c:	2300      	moveq	r3, #0
    232e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    2332:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2336:	b25b      	sxtb	r3, r3
    2338:	f1b3 3fff 	cmp.w	r3, #4294967295
    233c:	bf04      	itt	eq
    233e:	2300      	moveq	r3, #0
    2340:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    2344:	4b19      	ldr	r3, [pc, #100]	; (23ac <xQueueGenericSend+0x1b8>)
    2346:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    2348:	a901      	add	r1, sp, #4
    234a:	a802      	add	r0, sp, #8
    234c:	4b1c      	ldr	r3, [pc, #112]	; (23c0 <xQueueGenericSend+0x1cc>)
    234e:	4798      	blx	r3
    2350:	b9e0      	cbnz	r0, 238c <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    2352:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    2354:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    2358:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    235a:	4b14      	ldr	r3, [pc, #80]	; (23ac <xQueueGenericSend+0x1b8>)
    235c:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    235e:	45ab      	cmp	fp, r5
    2360:	d1c6      	bne.n	22f0 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    2362:	9901      	ldr	r1, [sp, #4]
    2364:	f104 0010 	add.w	r0, r4, #16
    2368:	4b16      	ldr	r3, [pc, #88]	; (23c4 <xQueueGenericSend+0x1d0>)
    236a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    236c:	4620      	mov	r0, r4
    236e:	4b11      	ldr	r3, [pc, #68]	; (23b4 <xQueueGenericSend+0x1c0>)
    2370:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    2372:	4b11      	ldr	r3, [pc, #68]	; (23b8 <xQueueGenericSend+0x1c4>)
    2374:	4798      	blx	r3
    2376:	2800      	cmp	r0, #0
    2378:	d1bf      	bne.n	22fa <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    237a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    237e:	f8c9 3000 	str.w	r3, [r9]
    2382:	f3bf 8f4f 	dsb	sy
    2386:	f3bf 8f6f 	isb	sy
    238a:	e7b6      	b.n	22fa <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    238c:	4620      	mov	r0, r4
    238e:	4b09      	ldr	r3, [pc, #36]	; (23b4 <xQueueGenericSend+0x1c0>)
    2390:	4798      	blx	r3
			(void)xTaskResumeAll();
    2392:	4b09      	ldr	r3, [pc, #36]	; (23b8 <xQueueGenericSend+0x1c4>)
    2394:	4798      	blx	r3
			return errQUEUE_FULL;
    2396:	2000      	movs	r0, #0
    2398:	e787      	b.n	22aa <xQueueGenericSend+0xb6>
    239a:	bf00      	nop
    239c:	00002b0d 	.word	0x00002b0d
    23a0:	00002049 	.word	0x00002049
    23a4:	000020c9 	.word	0x000020c9
    23a8:	e000ed04 	.word	0xe000ed04
    23ac:	00001dd9 	.word	0x00001dd9
    23b0:	000029cd 	.word	0x000029cd
    23b4:	0000214d 	.word	0x0000214d
    23b8:	000027c9 	.word	0x000027c9
    23bc:	0000268d 	.word	0x0000268d
    23c0:	00002a71 	.word	0x00002a71
    23c4:	00002991 	.word	0x00002991
    23c8:	00001d95 	.word	0x00001d95
    23cc:	00002a5d 	.word	0x00002a5d

000023d0 <xQueueSemaphoreTake>:
{
    23d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23d4:	b085      	sub	sp, #20
    23d6:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    23d8:	b158      	cbz	r0, 23f2 <xQueueSemaphoreTake+0x22>
    23da:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    23dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    23de:	b18b      	cbz	r3, 2404 <xQueueSemaphoreTake+0x34>
    23e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    23e4:	f383 8811 	msr	BASEPRI, r3
    23e8:	f3bf 8f6f 	isb	sy
    23ec:	f3bf 8f4f 	dsb	sy
    23f0:	e7fe      	b.n	23f0 <xQueueSemaphoreTake+0x20>
    23f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    23f6:	f383 8811 	msr	BASEPRI, r3
    23fa:	f3bf 8f6f 	isb	sy
    23fe:	f3bf 8f4f 	dsb	sy
    2402:	e7fe      	b.n	2402 <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    2404:	4b5b      	ldr	r3, [pc, #364]	; (2574 <xQueueSemaphoreTake+0x1a4>)
    2406:	4798      	blx	r3
    2408:	b950      	cbnz	r0, 2420 <xQueueSemaphoreTake+0x50>
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	b183      	cbz	r3, 2430 <xQueueSemaphoreTake+0x60>
    240e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2412:	f383 8811 	msr	BASEPRI, r3
    2416:	f3bf 8f6f 	isb	sy
    241a:	f3bf 8f4f 	dsb	sy
    241e:	e7fe      	b.n	241e <xQueueSemaphoreTake+0x4e>
    2420:	2500      	movs	r5, #0
    2422:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    2424:	4e54      	ldr	r6, [pc, #336]	; (2578 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    2426:	f8df 9184 	ldr.w	r9, [pc, #388]	; 25ac <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    242a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 2584 <xQueueSemaphoreTake+0x1b4>
    242e:	e048      	b.n	24c2 <xQueueSemaphoreTake+0xf2>
    2430:	2500      	movs	r5, #0
    2432:	462f      	mov	r7, r5
    2434:	e7f6      	b.n	2424 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    2436:	3b01      	subs	r3, #1
    2438:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    243a:	6823      	ldr	r3, [r4, #0]
    243c:	b913      	cbnz	r3, 2444 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    243e:	4b4f      	ldr	r3, [pc, #316]	; (257c <xQueueSemaphoreTake+0x1ac>)
    2440:	4798      	blx	r3
    2442:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2444:	6923      	ldr	r3, [r4, #16]
    2446:	b163      	cbz	r3, 2462 <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    2448:	f104 0010 	add.w	r0, r4, #16
    244c:	4b4c      	ldr	r3, [pc, #304]	; (2580 <xQueueSemaphoreTake+0x1b0>)
    244e:	4798      	blx	r3
    2450:	b138      	cbz	r0, 2462 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    2452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2456:	4b4b      	ldr	r3, [pc, #300]	; (2584 <xQueueSemaphoreTake+0x1b4>)
    2458:	601a      	str	r2, [r3, #0]
    245a:	f3bf 8f4f 	dsb	sy
    245e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    2462:	4b49      	ldr	r3, [pc, #292]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    2464:	4798      	blx	r3
				return pdPASS;
    2466:	2501      	movs	r5, #1
}
    2468:	4628      	mov	r0, r5
    246a:	b005      	add	sp, #20
    246c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    2470:	b145      	cbz	r5, 2484 <xQueueSemaphoreTake+0xb4>
    2472:	f04f 0380 	mov.w	r3, #128	; 0x80
    2476:	f383 8811 	msr	BASEPRI, r3
    247a:	f3bf 8f6f 	isb	sy
    247e:	f3bf 8f4f 	dsb	sy
    2482:	e7fe      	b.n	2482 <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    2484:	4b40      	ldr	r3, [pc, #256]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    2486:	4798      	blx	r3
					return errQUEUE_EMPTY;
    2488:	e7ee      	b.n	2468 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    248a:	a802      	add	r0, sp, #8
    248c:	47c8      	blx	r9
    248e:	e021      	b.n	24d4 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    2490:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    2492:	6860      	ldr	r0, [r4, #4]
    2494:	4b3d      	ldr	r3, [pc, #244]	; (258c <xQueueSemaphoreTake+0x1bc>)
    2496:	4798      	blx	r3
    2498:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    249a:	4b3b      	ldr	r3, [pc, #236]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    249c:	4798      	blx	r3
    249e:	e040      	b.n	2522 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    24a0:	4620      	mov	r0, r4
    24a2:	4b3b      	ldr	r3, [pc, #236]	; (2590 <xQueueSemaphoreTake+0x1c0>)
    24a4:	4798      	blx	r3
				(void)xTaskResumeAll();
    24a6:	4b3b      	ldr	r3, [pc, #236]	; (2594 <xQueueSemaphoreTake+0x1c4>)
    24a8:	4798      	blx	r3
    24aa:	e009      	b.n	24c0 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    24ac:	4620      	mov	r0, r4
    24ae:	4b38      	ldr	r3, [pc, #224]	; (2590 <xQueueSemaphoreTake+0x1c0>)
    24b0:	4798      	blx	r3
			(void)xTaskResumeAll();
    24b2:	4b38      	ldr	r3, [pc, #224]	; (2594 <xQueueSemaphoreTake+0x1c4>)
    24b4:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    24b6:	4620      	mov	r0, r4
    24b8:	4b37      	ldr	r3, [pc, #220]	; (2598 <xQueueSemaphoreTake+0x1c8>)
    24ba:	4798      	blx	r3
    24bc:	2800      	cmp	r0, #0
    24be:	d145      	bne.n	254c <xQueueSemaphoreTake+0x17c>
    24c0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    24c2:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    24c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    24c6:	2b00      	cmp	r3, #0
    24c8:	d1b5      	bne.n	2436 <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    24ca:	9b01      	ldr	r3, [sp, #4]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d0cf      	beq.n	2470 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    24d0:	2f00      	cmp	r7, #0
    24d2:	d0da      	beq.n	248a <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    24d4:	4b2c      	ldr	r3, [pc, #176]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    24d6:	4798      	blx	r3
		vTaskSuspendAll();
    24d8:	4b30      	ldr	r3, [pc, #192]	; (259c <xQueueSemaphoreTake+0x1cc>)
    24da:	4798      	blx	r3
		prvLockQueue(pxQueue);
    24dc:	47b0      	blx	r6
    24de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    24e2:	b25b      	sxtb	r3, r3
    24e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    24e8:	bf04      	itt	eq
    24ea:	2300      	moveq	r3, #0
    24ec:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    24f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    24f4:	b25b      	sxtb	r3, r3
    24f6:	f1b3 3fff 	cmp.w	r3, #4294967295
    24fa:	bf04      	itt	eq
    24fc:	2300      	moveq	r3, #0
    24fe:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    2502:	4b21      	ldr	r3, [pc, #132]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    2504:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    2506:	a901      	add	r1, sp, #4
    2508:	a802      	add	r0, sp, #8
    250a:	4b25      	ldr	r3, [pc, #148]	; (25a0 <xQueueSemaphoreTake+0x1d0>)
    250c:	4798      	blx	r3
    250e:	2800      	cmp	r0, #0
    2510:	d1cc      	bne.n	24ac <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    2512:	4620      	mov	r0, r4
    2514:	4b20      	ldr	r3, [pc, #128]	; (2598 <xQueueSemaphoreTake+0x1c8>)
    2516:	4798      	blx	r3
    2518:	2800      	cmp	r0, #0
    251a:	d0c1      	beq.n	24a0 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    251c:	6823      	ldr	r3, [r4, #0]
    251e:	2b00      	cmp	r3, #0
    2520:	d0b6      	beq.n	2490 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    2522:	9901      	ldr	r1, [sp, #4]
    2524:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2528:	4b1e      	ldr	r3, [pc, #120]	; (25a4 <xQueueSemaphoreTake+0x1d4>)
    252a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    252c:	4620      	mov	r0, r4
    252e:	4b18      	ldr	r3, [pc, #96]	; (2590 <xQueueSemaphoreTake+0x1c0>)
    2530:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    2532:	4b18      	ldr	r3, [pc, #96]	; (2594 <xQueueSemaphoreTake+0x1c4>)
    2534:	4798      	blx	r3
    2536:	2800      	cmp	r0, #0
    2538:	d1c2      	bne.n	24c0 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    253a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    253e:	f8c8 3000 	str.w	r3, [r8]
    2542:	f3bf 8f4f 	dsb	sy
    2546:	f3bf 8f6f 	isb	sy
    254a:	e7b9      	b.n	24c0 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    254c:	2d00      	cmp	r5, #0
    254e:	d08b      	beq.n	2468 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    2550:	4b09      	ldr	r3, [pc, #36]	; (2578 <xQueueSemaphoreTake+0x1a8>)
    2552:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    2554:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2556:	b153      	cbz	r3, 256e <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    2558:	6b23      	ldr	r3, [r4, #48]	; 0x30
    255a:	6819      	ldr	r1, [r3, #0]
    255c:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    2560:	6860      	ldr	r0, [r4, #4]
    2562:	4b11      	ldr	r3, [pc, #68]	; (25a8 <xQueueSemaphoreTake+0x1d8>)
    2564:	4798      	blx	r3
						taskEXIT_CRITICAL();
    2566:	4b08      	ldr	r3, [pc, #32]	; (2588 <xQueueSemaphoreTake+0x1b8>)
    2568:	4798      	blx	r3
				return errQUEUE_EMPTY;
    256a:	2500      	movs	r5, #0
    256c:	e77c      	b.n	2468 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    256e:	2100      	movs	r1, #0
    2570:	e7f6      	b.n	2560 <xQueueSemaphoreTake+0x190>
    2572:	bf00      	nop
    2574:	00002b0d 	.word	0x00002b0d
    2578:	00001d95 	.word	0x00001d95
    257c:	00002d19 	.word	0x00002d19
    2580:	000029cd 	.word	0x000029cd
    2584:	e000ed04 	.word	0xe000ed04
    2588:	00001dd9 	.word	0x00001dd9
    258c:	00002b2d 	.word	0x00002b2d
    2590:	0000214d 	.word	0x0000214d
    2594:	000027c9 	.word	0x000027c9
    2598:	00002029 	.word	0x00002029
    259c:	0000268d 	.word	0x0000268d
    25a0:	00002a71 	.word	0x00002a71
    25a4:	00002991 	.word	0x00002991
    25a8:	00002c6d 	.word	0x00002c6d
    25ac:	00002a5d 	.word	0x00002a5d

000025b0 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    25b0:	b940      	cbnz	r0, 25c4 <uxQueueMessagesWaiting+0x14>
    25b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    25b6:	f383 8811 	msr	BASEPRI, r3
    25ba:	f3bf 8f6f 	isb	sy
    25be:	f3bf 8f4f 	dsb	sy
    25c2:	e7fe      	b.n	25c2 <uxQueueMessagesWaiting+0x12>
{
    25c4:	b510      	push	{r4, lr}
    25c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    25c8:	4b03      	ldr	r3, [pc, #12]	; (25d8 <uxQueueMessagesWaiting+0x28>)
    25ca:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    25cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    25ce:	4b03      	ldr	r3, [pc, #12]	; (25dc <uxQueueMessagesWaiting+0x2c>)
    25d0:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    25d2:	4620      	mov	r0, r4
    25d4:	bd10      	pop	{r4, pc}
    25d6:	bf00      	nop
    25d8:	00001d95 	.word	0x00001d95
    25dc:	00001dd9 	.word	0x00001dd9

000025e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <prvResetNextTaskUnblockTime+0x28>)
    25e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	b143      	cbz	r3, 25fc <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    25ea:	4b07      	ldr	r3, [pc, #28]	; (2608 <prvResetNextTaskUnblockTime+0x28>)
    25ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    25f0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    25f2:	68d2      	ldr	r2, [r2, #12]
    25f4:	6852      	ldr	r2, [r2, #4]
    25f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    25fa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    25fc:	f04f 32ff 	mov.w	r2, #4294967295
    2600:	4b01      	ldr	r3, [pc, #4]	; (2608 <prvResetNextTaskUnblockTime+0x28>)
    2602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2606:	4770      	bx	lr
    2608:	2000322c 	.word	0x2000322c

0000260c <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    260c:	b570      	push	{r4, r5, r6, lr}
    260e:	4604      	mov	r4, r0
    2610:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    2612:	4b1a      	ldr	r3, [pc, #104]	; (267c <prvAddCurrentTaskToDelayedList+0x70>)
    2614:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    2618:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    261c:	3004      	adds	r0, #4
    261e:	4b18      	ldr	r3, [pc, #96]	; (2680 <prvAddCurrentTaskToDelayedList+0x74>)
    2620:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2622:	f1b4 3fff 	cmp.w	r4, #4294967295
    2626:	d016      	beq.n	2656 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2628:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    262a:	4b14      	ldr	r3, [pc, #80]	; (267c <prvAddCurrentTaskToDelayedList+0x70>)
    262c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    2630:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    2632:	42a5      	cmp	r5, r4
    2634:	d818      	bhi.n	2668 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2636:	4d11      	ldr	r5, [pc, #68]	; (267c <prvAddCurrentTaskToDelayedList+0x70>)
    2638:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    263c:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    2640:	3104      	adds	r1, #4
    2642:	4b10      	ldr	r3, [pc, #64]	; (2684 <prvAddCurrentTaskToDelayedList+0x78>)
    2644:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    2646:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    264a:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    264c:	bf3c      	itt	cc
    264e:	462b      	movcc	r3, r5
    2650:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    2654:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    2656:	2e00      	cmp	r6, #0
    2658:	d0e6      	beq.n	2628 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    265a:	4808      	ldr	r0, [pc, #32]	; (267c <prvAddCurrentTaskToDelayedList+0x70>)
    265c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    2660:	3104      	adds	r1, #4
    2662:	4b09      	ldr	r3, [pc, #36]	; (2688 <prvAddCurrentTaskToDelayedList+0x7c>)
    2664:	4798      	blx	r3
    2666:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <prvAddCurrentTaskToDelayedList+0x70>)
    266a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    266e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2672:	3104      	adds	r1, #4
    2674:	4b03      	ldr	r3, [pc, #12]	; (2684 <prvAddCurrentTaskToDelayedList+0x78>)
    2676:	4798      	blx	r3
    2678:	bd70      	pop	{r4, r5, r6, pc}
    267a:	bf00      	nop
    267c:	2000322c 	.word	0x2000322c
    2680:	00001d3d 	.word	0x00001d3d
    2684:	00001d09 	.word	0x00001d09
    2688:	00001cf1 	.word	0x00001cf1

0000268c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    268c:	4a03      	ldr	r2, [pc, #12]	; (269c <vTaskSuspendAll+0x10>)
    268e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    2692:	3301      	adds	r3, #1
    2694:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	2000322c 	.word	0x2000322c

000026a0 <xTaskIncrementTick>:
{
    26a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    26a4:	4b44      	ldr	r3, [pc, #272]	; (27b8 <xTaskIncrementTick+0x118>)
    26a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    26aa:	2b00      	cmp	r3, #0
    26ac:	d173      	bne.n	2796 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    26ae:	4b42      	ldr	r3, [pc, #264]	; (27b8 <xTaskIncrementTick+0x118>)
    26b0:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    26b4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    26b6:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    26ba:	b9e6      	cbnz	r6, 26f6 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    26bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	b143      	cbz	r3, 26d6 <xTaskIncrementTick+0x36>
    26c4:	f04f 0380 	mov.w	r3, #128	; 0x80
    26c8:	f383 8811 	msr	BASEPRI, r3
    26cc:	f3bf 8f6f 	isb	sy
    26d0:	f3bf 8f4f 	dsb	sy
    26d4:	e7fe      	b.n	26d4 <xTaskIncrementTick+0x34>
    26d6:	4b38      	ldr	r3, [pc, #224]	; (27b8 <xTaskIncrementTick+0x118>)
    26d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    26dc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    26e0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    26e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    26e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    26ec:	3201      	adds	r2, #1
    26ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    26f2:	4b32      	ldr	r3, [pc, #200]	; (27bc <xTaskIncrementTick+0x11c>)
    26f4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    26f6:	4b30      	ldr	r3, [pc, #192]	; (27b8 <xTaskIncrementTick+0x118>)
    26f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    26fc:	429e      	cmp	r6, r3
    26fe:	d20d      	bcs.n	271c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    2700:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2702:	4b2d      	ldr	r3, [pc, #180]	; (27b8 <xTaskIncrementTick+0x118>)
    2704:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2708:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    270a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    270e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    2714:	2b02      	cmp	r3, #2
    2716:	bf28      	it	cs
    2718:	2401      	movcs	r4, #1
    271a:	e043      	b.n	27a4 <xTaskIncrementTick+0x104>
    271c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    271e:	4d26      	ldr	r5, [pc, #152]	; (27b8 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2720:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 27c4 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    2724:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    2728:	e021      	b.n	276e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    272a:	f04f 32ff 	mov.w	r2, #4294967295
    272e:	4b22      	ldr	r3, [pc, #136]	; (27b8 <xTaskIncrementTick+0x118>)
    2730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    2734:	e7e5      	b.n	2702 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    2736:	4a20      	ldr	r2, [pc, #128]	; (27b8 <xTaskIncrementTick+0x118>)
    2738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    273c:	e7e1      	b.n	2702 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    273e:	f107 0018 	add.w	r0, r7, #24
    2742:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    2744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2746:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    274a:	4298      	cmp	r0, r3
    274c:	bf88      	it	hi
    274e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    2752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2756:	4649      	mov	r1, r9
    2758:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    275c:	4b18      	ldr	r3, [pc, #96]	; (27c0 <xTaskIncrementTick+0x120>)
    275e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2760:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    2764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    2768:	429a      	cmp	r2, r3
    276a:	bf28      	it	cs
    276c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    276e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2772:	681b      	ldr	r3, [r3, #0]
    2774:	2b00      	cmp	r3, #0
    2776:	d0d8      	beq.n	272a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2778:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    277c:	68db      	ldr	r3, [r3, #12]
    277e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2780:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    2782:	429e      	cmp	r6, r3
    2784:	d3d7      	bcc.n	2736 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2786:	f107 0904 	add.w	r9, r7, #4
    278a:	4648      	mov	r0, r9
    278c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2790:	2b00      	cmp	r3, #0
    2792:	d1d4      	bne.n	273e <xTaskIncrementTick+0x9e>
    2794:	e7d6      	b.n	2744 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    2796:	4a08      	ldr	r2, [pc, #32]	; (27b8 <xTaskIncrementTick+0x118>)
    2798:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    279c:	3301      	adds	r3, #1
    279e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    27a2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    27a4:	4b04      	ldr	r3, [pc, #16]	; (27b8 <xTaskIncrementTick+0x118>)
    27a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    27aa:	2b00      	cmp	r3, #0
}
    27ac:	bf0c      	ite	eq
    27ae:	4620      	moveq	r0, r4
    27b0:	2001      	movne	r0, #1
    27b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    27b6:	bf00      	nop
    27b8:	2000322c 	.word	0x2000322c
    27bc:	000025e1 	.word	0x000025e1
    27c0:	00001cf1 	.word	0x00001cf1
    27c4:	00001d3d 	.word	0x00001d3d

000027c8 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    27c8:	4b3a      	ldr	r3, [pc, #232]	; (28b4 <xTaskResumeAll+0xec>)
    27ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    27ce:	b943      	cbnz	r3, 27e2 <xTaskResumeAll+0x1a>
    27d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    27d4:	f383 8811 	msr	BASEPRI, r3
    27d8:	f3bf 8f6f 	isb	sy
    27dc:	f3bf 8f4f 	dsb	sy
    27e0:	e7fe      	b.n	27e0 <xTaskResumeAll+0x18>
{
    27e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    27e6:	4b34      	ldr	r3, [pc, #208]	; (28b8 <xTaskResumeAll+0xf0>)
    27e8:	4798      	blx	r3
		--uxSchedulerSuspended;
    27ea:	4b32      	ldr	r3, [pc, #200]	; (28b4 <xTaskResumeAll+0xec>)
    27ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    27f0:	3a01      	subs	r2, #1
    27f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    27f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    27fa:	2b00      	cmp	r3, #0
    27fc:	d155      	bne.n	28aa <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    27fe:	4b2d      	ldr	r3, [pc, #180]	; (28b4 <xTaskResumeAll+0xec>)
    2800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2804:	b92b      	cbnz	r3, 2812 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    2806:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    2808:	4b2c      	ldr	r3, [pc, #176]	; (28bc <xTaskResumeAll+0xf4>)
    280a:	4798      	blx	r3
}
    280c:	4620      	mov	r0, r4
    280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2812:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    2814:	4c27      	ldr	r4, [pc, #156]	; (28b4 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    2816:	4e2a      	ldr	r6, [pc, #168]	; (28c0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    2818:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    281c:	6963      	ldr	r3, [r4, #20]
    281e:	b1fb      	cbz	r3, 2860 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    2820:	6a23      	ldr	r3, [r4, #32]
    2822:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    2824:	f105 0018 	add.w	r0, r5, #24
    2828:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    282a:	1d2f      	adds	r7, r5, #4
    282c:	4638      	mov	r0, r7
    282e:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    2830:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    2832:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    2836:	4298      	cmp	r0, r3
    2838:	bf88      	it	hi
    283a:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    283e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2842:	4639      	mov	r1, r7
    2844:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    2848:	4b1e      	ldr	r3, [pc, #120]	; (28c4 <xTaskResumeAll+0xfc>)
    284a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    284c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    2850:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2854:	429a      	cmp	r2, r3
    2856:	d3e1      	bcc.n	281c <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    2858:	2301      	movs	r3, #1
    285a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    285e:	e7dd      	b.n	281c <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    2860:	b10d      	cbz	r5, 2866 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    2862:	4b19      	ldr	r3, [pc, #100]	; (28c8 <xTaskResumeAll+0x100>)
    2864:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2866:	4b13      	ldr	r3, [pc, #76]	; (28b4 <xTaskResumeAll+0xec>)
    2868:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    286c:	b17c      	cbz	r4, 288e <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    286e:	4f17      	ldr	r7, [pc, #92]	; (28cc <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    2870:	461e      	mov	r6, r3
    2872:	2501      	movs	r5, #1
    2874:	e001      	b.n	287a <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    2876:	3c01      	subs	r4, #1
    2878:	d005      	beq.n	2886 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    287a:	47b8      	blx	r7
    287c:	2800      	cmp	r0, #0
    287e:	d0fa      	beq.n	2876 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    2880:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    2884:	e7f7      	b.n	2876 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    2886:	2200      	movs	r2, #0
    2888:	4b0a      	ldr	r3, [pc, #40]	; (28b4 <xTaskResumeAll+0xec>)
    288a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    288e:	4b09      	ldr	r3, [pc, #36]	; (28b4 <xTaskResumeAll+0xec>)
    2890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    2894:	b15b      	cbz	r3, 28ae <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    2896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    289a:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <xTaskResumeAll+0x108>)
    289c:	601a      	str	r2, [r3, #0]
    289e:	f3bf 8f4f 	dsb	sy
    28a2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    28a6:	2401      	movs	r4, #1
    28a8:	e7ae      	b.n	2808 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    28aa:	2400      	movs	r4, #0
    28ac:	e7ac      	b.n	2808 <xTaskResumeAll+0x40>
    28ae:	2400      	movs	r4, #0
    28b0:	e7aa      	b.n	2808 <xTaskResumeAll+0x40>
    28b2:	bf00      	nop
    28b4:	2000322c 	.word	0x2000322c
    28b8:	00001d95 	.word	0x00001d95
    28bc:	00001dd9 	.word	0x00001dd9
    28c0:	00001d3d 	.word	0x00001d3d
    28c4:	00001cf1 	.word	0x00001cf1
    28c8:	000025e1 	.word	0x000025e1
    28cc:	000026a1 	.word	0x000026a1
    28d0:	e000ed04 	.word	0xe000ed04

000028d4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    28d4:	4b2c      	ldr	r3, [pc, #176]	; (2988 <vTaskSwitchContext+0xb4>)
    28d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    28da:	bb8b      	cbnz	r3, 2940 <vTaskSwitchContext+0x6c>
{
    28dc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    28de:	4b2a      	ldr	r3, [pc, #168]	; (2988 <vTaskSwitchContext+0xb4>)
    28e0:	2200      	movs	r2, #0
    28e2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    28e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    28ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    28ee:	6812      	ldr	r2, [r2, #0]
    28f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28f2:	429a      	cmp	r2, r3
    28f4:	d807      	bhi.n	2906 <vTaskSwitchContext+0x32>
    28f6:	4b24      	ldr	r3, [pc, #144]	; (2988 <vTaskSwitchContext+0xb4>)
    28f8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    28fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2900:	3134      	adds	r1, #52	; 0x34
    2902:	4b22      	ldr	r3, [pc, #136]	; (298c <vTaskSwitchContext+0xb8>)
    2904:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2906:	4a20      	ldr	r2, [pc, #128]	; (2988 <vTaskSwitchContext+0xb4>)
    2908:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    290c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2910:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2914:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2916:	b9c2      	cbnz	r2, 294a <vTaskSwitchContext+0x76>
    2918:	b14b      	cbz	r3, 292e <vTaskSwitchContext+0x5a>
    291a:	491b      	ldr	r1, [pc, #108]	; (2988 <vTaskSwitchContext+0xb4>)
    291c:	3b01      	subs	r3, #1
    291e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2922:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2926:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2928:	b97a      	cbnz	r2, 294a <vTaskSwitchContext+0x76>
    292a:	2b00      	cmp	r3, #0
    292c:	d1f6      	bne.n	291c <vTaskSwitchContext+0x48>
    292e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2932:	f383 8811 	msr	BASEPRI, r3
    2936:	f3bf 8f6f 	isb	sy
    293a:	f3bf 8f4f 	dsb	sy
    293e:	e7fe      	b.n	293e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    2940:	2201      	movs	r2, #1
    2942:	4b11      	ldr	r3, [pc, #68]	; (2988 <vTaskSwitchContext+0xb4>)
    2944:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2948:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    294a:	4a0f      	ldr	r2, [pc, #60]	; (2988 <vTaskSwitchContext+0xb4>)
    294c:	0099      	lsls	r1, r3, #2
    294e:	18c8      	adds	r0, r1, r3
    2950:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2954:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2956:	6864      	ldr	r4, [r4, #4]
    2958:	62c4      	str	r4, [r0, #44]	; 0x2c
    295a:	4419      	add	r1, r3
    295c:	4602      	mov	r2, r0
    295e:	3230      	adds	r2, #48	; 0x30
    2960:	4294      	cmp	r4, r2
    2962:	d00b      	beq.n	297c <vTaskSwitchContext+0xa8>
    2964:	4a08      	ldr	r2, [pc, #32]	; (2988 <vTaskSwitchContext+0xb4>)
    2966:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    296a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    296e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2970:	68c9      	ldr	r1, [r1, #12]
    2972:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    2976:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    297a:	bd10      	pop	{r4, pc}
    297c:	6860      	ldr	r0, [r4, #4]
    297e:	4a02      	ldr	r2, [pc, #8]	; (2988 <vTaskSwitchContext+0xb4>)
    2980:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2984:	62d0      	str	r0, [r2, #44]	; 0x2c
    2986:	e7ed      	b.n	2964 <vTaskSwitchContext+0x90>
    2988:	2000322c 	.word	0x2000322c
    298c:	000002d1 	.word	0x000002d1

00002990 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    2990:	b940      	cbnz	r0, 29a4 <vTaskPlaceOnEventList+0x14>
    2992:	f04f 0380 	mov.w	r3, #128	; 0x80
    2996:	f383 8811 	msr	BASEPRI, r3
    299a:	f3bf 8f6f 	isb	sy
    299e:	f3bf 8f4f 	dsb	sy
    29a2:	e7fe      	b.n	29a2 <vTaskPlaceOnEventList+0x12>
{
    29a4:	b510      	push	{r4, lr}
    29a6:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    29a8:	4b05      	ldr	r3, [pc, #20]	; (29c0 <vTaskPlaceOnEventList+0x30>)
    29aa:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    29ae:	3118      	adds	r1, #24
    29b0:	4b04      	ldr	r3, [pc, #16]	; (29c4 <vTaskPlaceOnEventList+0x34>)
    29b2:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    29b4:	2101      	movs	r1, #1
    29b6:	4620      	mov	r0, r4
    29b8:	4b03      	ldr	r3, [pc, #12]	; (29c8 <vTaskPlaceOnEventList+0x38>)
    29ba:	4798      	blx	r3
    29bc:	bd10      	pop	{r4, pc}
    29be:	bf00      	nop
    29c0:	2000322c 	.word	0x2000322c
    29c4:	00001d09 	.word	0x00001d09
    29c8:	0000260d 	.word	0x0000260d

000029cc <xTaskRemoveFromEventList>:
{
    29cc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    29ce:	68c3      	ldr	r3, [r0, #12]
    29d0:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    29d2:	2c00      	cmp	r4, #0
    29d4:	d02a      	beq.n	2a2c <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    29d6:	f104 0518 	add.w	r5, r4, #24
    29da:	4628      	mov	r0, r5
    29dc:	4b1a      	ldr	r3, [pc, #104]	; (2a48 <xTaskRemoveFromEventList+0x7c>)
    29de:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    29e0:	4b1a      	ldr	r3, [pc, #104]	; (2a4c <xTaskRemoveFromEventList+0x80>)
    29e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    29e6:	bb53      	cbnz	r3, 2a3e <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    29e8:	1d25      	adds	r5, r4, #4
    29ea:	4628      	mov	r0, r5
    29ec:	4b16      	ldr	r3, [pc, #88]	; (2a48 <xTaskRemoveFromEventList+0x7c>)
    29ee:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    29f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    29f2:	4b16      	ldr	r3, [pc, #88]	; (2a4c <xTaskRemoveFromEventList+0x80>)
    29f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    29f8:	4298      	cmp	r0, r3
    29fa:	bf84      	itt	hi
    29fc:	4b13      	ldrhi	r3, [pc, #76]	; (2a4c <xTaskRemoveFromEventList+0x80>)
    29fe:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    2a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2a06:	4629      	mov	r1, r5
    2a08:	4b11      	ldr	r3, [pc, #68]	; (2a50 <xTaskRemoveFromEventList+0x84>)
    2a0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2a0e:	4b11      	ldr	r3, [pc, #68]	; (2a54 <xTaskRemoveFromEventList+0x88>)
    2a10:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    2a12:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <xTaskRemoveFromEventList+0x80>)
    2a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    2a18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a1c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    2a1e:	bf83      	ittte	hi
    2a20:	2001      	movhi	r0, #1
    2a22:	4b0a      	ldrhi	r3, [pc, #40]	; (2a4c <xTaskRemoveFromEventList+0x80>)
    2a24:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    2a28:	2000      	movls	r0, #0
}
    2a2a:	bd38      	pop	{r3, r4, r5, pc}
    2a2c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2a30:	f383 8811 	msr	BASEPRI, r3
    2a34:	f3bf 8f6f 	isb	sy
    2a38:	f3bf 8f4f 	dsb	sy
    2a3c:	e7fe      	b.n	2a3c <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    2a3e:	4629      	mov	r1, r5
    2a40:	4805      	ldr	r0, [pc, #20]	; (2a58 <xTaskRemoveFromEventList+0x8c>)
    2a42:	4b04      	ldr	r3, [pc, #16]	; (2a54 <xTaskRemoveFromEventList+0x88>)
    2a44:	4798      	blx	r3
    2a46:	e7e4      	b.n	2a12 <xTaskRemoveFromEventList+0x46>
    2a48:	00001d3d 	.word	0x00001d3d
    2a4c:	2000322c 	.word	0x2000322c
    2a50:	20003254 	.word	0x20003254
    2a54:	00001cf1 	.word	0x00001cf1
    2a58:	20003240 	.word	0x20003240

00002a5c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    2a5c:	4b03      	ldr	r3, [pc, #12]	; (2a6c <vTaskInternalSetTimeOutState+0x10>)
    2a5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    2a62:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    2a68:	6043      	str	r3, [r0, #4]
    2a6a:	4770      	bx	lr
    2a6c:	2000322c 	.word	0x2000322c

00002a70 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    2a70:	b1f8      	cbz	r0, 2ab2 <xTaskCheckForTimeOut+0x42>
{
    2a72:	b570      	push	{r4, r5, r6, lr}
    2a74:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    2a76:	b329      	cbz	r1, 2ac4 <xTaskCheckForTimeOut+0x54>
    2a78:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    2a7a:	4b1c      	ldr	r3, [pc, #112]	; (2aec <xTaskCheckForTimeOut+0x7c>)
    2a7c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2a7e:	4b1c      	ldr	r3, [pc, #112]	; (2af0 <xTaskCheckForTimeOut+0x80>)
    2a80:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2a84:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    2a86:	6823      	ldr	r3, [r4, #0]
    2a88:	f1b3 3fff 	cmp.w	r3, #4294967295
    2a8c:	d02a      	beq.n	2ae4 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    2a8e:	4818      	ldr	r0, [pc, #96]	; (2af0 <xTaskCheckForTimeOut+0x80>)
    2a90:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    2a94:	682e      	ldr	r6, [r5, #0]
    2a96:	4286      	cmp	r6, r0
    2a98:	d001      	beq.n	2a9e <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    2a9a:	428a      	cmp	r2, r1
    2a9c:	d224      	bcs.n	2ae8 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2a9e:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    2aa0:	429a      	cmp	r2, r3
    2aa2:	d318      	bcc.n	2ad6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    2aa4:	2300      	movs	r3, #0
    2aa6:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    2aa8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    2aaa:	4b12      	ldr	r3, [pc, #72]	; (2af4 <xTaskCheckForTimeOut+0x84>)
    2aac:	4798      	blx	r3
}
    2aae:	4620      	mov	r0, r4
    2ab0:	bd70      	pop	{r4, r5, r6, pc}
    2ab2:	f04f 0380 	mov.w	r3, #128	; 0x80
    2ab6:	f383 8811 	msr	BASEPRI, r3
    2aba:	f3bf 8f6f 	isb	sy
    2abe:	f3bf 8f4f 	dsb	sy
    2ac2:	e7fe      	b.n	2ac2 <xTaskCheckForTimeOut+0x52>
    2ac4:	f04f 0380 	mov.w	r3, #128	; 0x80
    2ac8:	f383 8811 	msr	BASEPRI, r3
    2acc:	f3bf 8f6f 	isb	sy
    2ad0:	f3bf 8f4f 	dsb	sy
    2ad4:	e7fe      	b.n	2ad4 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    2ad6:	1a9b      	subs	r3, r3, r2
    2ad8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    2ada:	4628      	mov	r0, r5
    2adc:	4b06      	ldr	r3, [pc, #24]	; (2af8 <xTaskCheckForTimeOut+0x88>)
    2ade:	4798      	blx	r3
			xReturn = pdFALSE;
    2ae0:	2400      	movs	r4, #0
    2ae2:	e7e2      	b.n	2aaa <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    2ae4:	2400      	movs	r4, #0
    2ae6:	e7e0      	b.n	2aaa <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    2ae8:	2401      	movs	r4, #1
    2aea:	e7de      	b.n	2aaa <xTaskCheckForTimeOut+0x3a>
    2aec:	00001d95 	.word	0x00001d95
    2af0:	2000322c 	.word	0x2000322c
    2af4:	00001dd9 	.word	0x00001dd9
    2af8:	00002a5d 	.word	0x00002a5d

00002afc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    2afc:	2201      	movs	r2, #1
    2afe:	4b02      	ldr	r3, [pc, #8]	; (2b08 <vTaskMissedYield+0xc>)
    2b00:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2b04:	4770      	bx	lr
    2b06:	bf00      	nop
    2b08:	2000322c 	.word	0x2000322c

00002b0c <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    2b0c:	4b06      	ldr	r3, [pc, #24]	; (2b28 <xTaskGetSchedulerState+0x1c>)
    2b0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    2b12:	b13b      	cbz	r3, 2b24 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2b14:	4b04      	ldr	r3, [pc, #16]	; (2b28 <xTaskGetSchedulerState+0x1c>)
    2b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	bf0c      	ite	eq
    2b1e:	2002      	moveq	r0, #2
    2b20:	2000      	movne	r0, #0
    2b22:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    2b24:	2001      	movs	r0, #1
}
    2b26:	4770      	bx	lr
    2b28:	2000322c 	.word	0x2000322c

00002b2c <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d045      	beq.n	2bbc <xTaskPriorityInherit+0x90>
{
    2b30:	b538      	push	{r3, r4, r5, lr}
    2b32:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    2b34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2b36:	4922      	ldr	r1, [pc, #136]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2b38:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    2b3c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2b3e:	428a      	cmp	r2, r1
    2b40:	d232      	bcs.n	2ba8 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    2b42:	6981      	ldr	r1, [r0, #24]
    2b44:	2900      	cmp	r1, #0
    2b46:	db06      	blt.n	2b56 <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    2b48:	491d      	ldr	r1, [pc, #116]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2b4a:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    2b4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2b50:	f1c1 0105 	rsb	r1, r1, #5
    2b54:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    2b56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2b5a:	491a      	ldr	r1, [pc, #104]	; (2bc4 <xTaskPriorityInherit+0x98>)
    2b5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2b60:	6969      	ldr	r1, [r5, #20]
    2b62:	4291      	cmp	r1, r2
    2b64:	d006      	beq.n	2b74 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2b66:	4a16      	ldr	r2, [pc, #88]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2b68:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    2b6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2b6e:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    2b70:	2001      	movs	r0, #1
    2b72:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    2b74:	1d2c      	adds	r4, r5, #4
    2b76:	4620      	mov	r0, r4
    2b78:	4b13      	ldr	r3, [pc, #76]	; (2bc8 <xTaskPriorityInherit+0x9c>)
    2b7a:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    2b7c:	4b10      	ldr	r3, [pc, #64]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2b7e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2b82:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    2b84:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    2b86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2b8a:	4298      	cmp	r0, r3
    2b8c:	bf84      	itt	hi
    2b8e:	4b0c      	ldrhi	r3, [pc, #48]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2b90:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    2b94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2b98:	4621      	mov	r1, r4
    2b9a:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <xTaskPriorityInherit+0x98>)
    2b9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2ba0:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <xTaskPriorityInherit+0xa0>)
    2ba2:	4798      	blx	r3
			xReturn = pdTRUE;
    2ba4:	2001      	movs	r0, #1
    2ba6:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    2ba8:	4a05      	ldr	r2, [pc, #20]	; (2bc0 <xTaskPriorityInherit+0x94>)
    2baa:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    2bae:	6c40      	ldr	r0, [r0, #68]	; 0x44
    2bb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2bb2:	4298      	cmp	r0, r3
    2bb4:	bf2c      	ite	cs
    2bb6:	2000      	movcs	r0, #0
    2bb8:	2001      	movcc	r0, #1
    2bba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    2bbc:	2000      	movs	r0, #0
	return xReturn;
    2bbe:	4770      	bx	lr
    2bc0:	2000322c 	.word	0x2000322c
    2bc4:	20003254 	.word	0x20003254
    2bc8:	00001d3d 	.word	0x00001d3d
    2bcc:	00001cf1 	.word	0x00001cf1

00002bd0 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    2bd0:	2800      	cmp	r0, #0
    2bd2:	d03c      	beq.n	2c4e <xTaskPriorityDisinherit+0x7e>
{
    2bd4:	b538      	push	{r3, r4, r5, lr}
    2bd6:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    2bd8:	4a20      	ldr	r2, [pc, #128]	; (2c5c <xTaskPriorityDisinherit+0x8c>)
    2bda:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    2bde:	4290      	cmp	r0, r2
    2be0:	d008      	beq.n	2bf4 <xTaskPriorityDisinherit+0x24>
    2be2:	f04f 0380 	mov.w	r3, #128	; 0x80
    2be6:	f383 8811 	msr	BASEPRI, r3
    2bea:	f3bf 8f6f 	isb	sy
    2bee:	f3bf 8f4f 	dsb	sy
    2bf2:	e7fe      	b.n	2bf2 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    2bf4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    2bf6:	b942      	cbnz	r2, 2c0a <xTaskPriorityDisinherit+0x3a>
    2bf8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2bfc:	f383 8811 	msr	BASEPRI, r3
    2c00:	f3bf 8f6f 	isb	sy
    2c04:	f3bf 8f4f 	dsb	sy
    2c08:	e7fe      	b.n	2c08 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    2c0a:	3a01      	subs	r2, #1
    2c0c:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    2c0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2c10:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2c12:	4288      	cmp	r0, r1
    2c14:	d01d      	beq.n	2c52 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    2c16:	b9f2      	cbnz	r2, 2c56 <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    2c18:	1d25      	adds	r5, r4, #4
    2c1a:	4628      	mov	r0, r5
    2c1c:	4b10      	ldr	r3, [pc, #64]	; (2c60 <xTaskPriorityDisinherit+0x90>)
    2c1e:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2c20:	6c60      	ldr	r0, [r4, #68]	; 0x44
    2c22:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    2c24:	f1c0 0305 	rsb	r3, r0, #5
    2c28:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    2c2a:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <xTaskPriorityDisinherit+0x8c>)
    2c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2c30:	4298      	cmp	r0, r3
    2c32:	bf84      	itt	hi
    2c34:	4b09      	ldrhi	r3, [pc, #36]	; (2c5c <xTaskPriorityDisinherit+0x8c>)
    2c36:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    2c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2c3e:	4629      	mov	r1, r5
    2c40:	4b08      	ldr	r3, [pc, #32]	; (2c64 <xTaskPriorityDisinherit+0x94>)
    2c42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c46:	4b08      	ldr	r3, [pc, #32]	; (2c68 <xTaskPriorityDisinherit+0x98>)
    2c48:	4798      	blx	r3
				xReturn = pdTRUE;
    2c4a:	2001      	movs	r0, #1
    2c4c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    2c4e:	2000      	movs	r0, #0
    2c50:	4770      	bx	lr
    2c52:	2000      	movs	r0, #0
    2c54:	bd38      	pop	{r3, r4, r5, pc}
    2c56:	2000      	movs	r0, #0
}
    2c58:	bd38      	pop	{r3, r4, r5, pc}
    2c5a:	bf00      	nop
    2c5c:	2000322c 	.word	0x2000322c
    2c60:	00001d3d 	.word	0x00001d3d
    2c64:	20003254 	.word	0x20003254
    2c68:	00001cf1 	.word	0x00001cf1

00002c6c <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d049      	beq.n	2d04 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    2c70:	b538      	push	{r3, r4, r5, lr}
    2c72:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    2c74:	6c80      	ldr	r0, [r0, #72]	; 0x48
    2c76:	b940      	cbnz	r0, 2c8a <vTaskPriorityDisinheritAfterTimeout+0x1e>
    2c78:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c7c:	f383 8811 	msr	BASEPRI, r3
    2c80:	f3bf 8f6f 	isb	sy
    2c84:	f3bf 8f4f 	dsb	sy
    2c88:	e7fe      	b.n	2c88 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    2c8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    2c8c:	428a      	cmp	r2, r1
    2c8e:	bf38      	it	cc
    2c90:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    2c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2c94:	4291      	cmp	r1, r2
    2c96:	d001      	beq.n	2c9c <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    2c98:	2801      	cmp	r0, #1
    2c9a:	d000      	beq.n	2c9e <vTaskPriorityDisinheritAfterTimeout+0x32>
    2c9c:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    2c9e:	481a      	ldr	r0, [pc, #104]	; (2d08 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    2ca0:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    2ca4:	4284      	cmp	r4, r0
    2ca6:	d108      	bne.n	2cba <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2ca8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2cac:	f383 8811 	msr	BASEPRI, r3
    2cb0:	f3bf 8f6f 	isb	sy
    2cb4:	f3bf 8f4f 	dsb	sy
    2cb8:	e7fe      	b.n	2cb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    2cba:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    2cbc:	69a0      	ldr	r0, [r4, #24]
    2cbe:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    2cc0:	bfa4      	itt	ge
    2cc2:	f1c2 0205 	rsbge	r2, r2, #5
    2cc6:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    2cc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2ccc:	4a0f      	ldr	r2, [pc, #60]	; (2d0c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    2cce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2cd2:	6962      	ldr	r2, [r4, #20]
    2cd4:	428a      	cmp	r2, r1
    2cd6:	d1e1      	bne.n	2c9c <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    2cd8:	1d25      	adds	r5, r4, #4
    2cda:	4628      	mov	r0, r5
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    2cde:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    2ce0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2ce2:	4b09      	ldr	r3, [pc, #36]	; (2d08 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    2ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2ce8:	4298      	cmp	r0, r3
    2cea:	bf84      	itt	hi
    2cec:	4b06      	ldrhi	r3, [pc, #24]	; (2d08 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    2cee:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    2cf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2cf6:	4629      	mov	r1, r5
    2cf8:	4b04      	ldr	r3, [pc, #16]	; (2d0c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    2cfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cfe:	4b05      	ldr	r3, [pc, #20]	; (2d14 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    2d00:	4798      	blx	r3
}
    2d02:	e7cb      	b.n	2c9c <vTaskPriorityDisinheritAfterTimeout+0x30>
    2d04:	4770      	bx	lr
    2d06:	bf00      	nop
    2d08:	2000322c 	.word	0x2000322c
    2d0c:	20003254 	.word	0x20003254
    2d10:	00001d3d 	.word	0x00001d3d
    2d14:	00001cf1 	.word	0x00001cf1

00002d18 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    2d18:	4b06      	ldr	r3, [pc, #24]	; (2d34 <pvTaskIncrementMutexHeldCount+0x1c>)
    2d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    2d1e:	b12b      	cbz	r3, 2d2c <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    2d20:	4b04      	ldr	r3, [pc, #16]	; (2d34 <pvTaskIncrementMutexHeldCount+0x1c>)
    2d22:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2d26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2d28:	3301      	adds	r3, #1
    2d2a:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    2d2c:	4b01      	ldr	r3, [pc, #4]	; (2d34 <pvTaskIncrementMutexHeldCount+0x1c>)
    2d2e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    2d32:	4770      	bx	lr
    2d34:	2000322c 	.word	0x2000322c

00002d38 <xTaskGenericNotifyFromISR>:
{
    2d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d3c:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    2d3e:	b310      	cbz	r0, 2d86 <xTaskGenericNotifyFromISR+0x4e>
    2d40:	4604      	mov	r4, r0
    2d42:	4699      	mov	r9, r3
    2d44:	4617      	mov	r7, r2
    2d46:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    2d48:	4b3e      	ldr	r3, [pc, #248]	; (2e44 <xTaskGenericNotifyFromISR+0x10c>)
    2d4a:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    2d4c:	f3ef 8511 	mrs	r5, BASEPRI
    2d50:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d54:	f383 8811 	msr	BASEPRI, r3
    2d58:	f3bf 8f6f 	isb	sy
    2d5c:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    2d60:	f1b9 0f00 	cmp.w	r9, #0
    2d64:	d002      	beq.n	2d6c <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2d66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2d68:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    2d6c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    2d70:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    2d72:	2202      	movs	r2, #2
    2d74:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    2d78:	1e7a      	subs	r2, r7, #1
    2d7a:	2a03      	cmp	r2, #3
    2d7c:	d810      	bhi.n	2da0 <xTaskGenericNotifyFromISR+0x68>
    2d7e:	e8df f002 	tbb	[pc, r2]
    2d82:	1c0b      	.short	0x1c0b
    2d84:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    2d86:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d8a:	f383 8811 	msr	BASEPRI, r3
    2d8e:	f3bf 8f6f 	isb	sy
    2d92:	f3bf 8f4f 	dsb	sy
    2d96:	e7fe      	b.n	2d96 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    2d98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2d9a:	ea42 0208 	orr.w	r2, r2, r8
    2d9e:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    2da0:	2b01      	cmp	r3, #1
    2da2:	d147      	bne.n	2e34 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    2da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2da6:	b1a3      	cbz	r3, 2dd2 <xTaskGenericNotifyFromISR+0x9a>
    2da8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2dac:	f383 8811 	msr	BASEPRI, r3
    2db0:	f3bf 8f6f 	isb	sy
    2db4:	f3bf 8f4f 	dsb	sy
    2db8:	e7fe      	b.n	2db8 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    2dba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2dbc:	3201      	adds	r2, #1
    2dbe:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    2dc0:	e7ee      	b.n	2da0 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    2dc2:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    2dc6:	e7eb      	b.n	2da0 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    2dc8:	2b02      	cmp	r3, #2
    2dca:	d031      	beq.n	2e30 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    2dcc:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    2dd0:	e7e6      	b.n	2da0 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2dd2:	4b1d      	ldr	r3, [pc, #116]	; (2e48 <xTaskGenericNotifyFromISR+0x110>)
    2dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2dd8:	b9fb      	cbnz	r3, 2e1a <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    2dda:	1d27      	adds	r7, r4, #4
    2ddc:	4638      	mov	r0, r7
    2dde:	4b1b      	ldr	r3, [pc, #108]	; (2e4c <xTaskGenericNotifyFromISR+0x114>)
    2de0:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    2de2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2de4:	4b18      	ldr	r3, [pc, #96]	; (2e48 <xTaskGenericNotifyFromISR+0x110>)
    2de6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2dea:	4298      	cmp	r0, r3
    2dec:	bf84      	itt	hi
    2dee:	4b16      	ldrhi	r3, [pc, #88]	; (2e48 <xTaskGenericNotifyFromISR+0x110>)
    2df0:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    2df4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2df8:	4639      	mov	r1, r7
    2dfa:	4b15      	ldr	r3, [pc, #84]	; (2e50 <xTaskGenericNotifyFromISR+0x118>)
    2dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2e00:	4b14      	ldr	r3, [pc, #80]	; (2e54 <xTaskGenericNotifyFromISR+0x11c>)
    2e02:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    2e04:	4b10      	ldr	r3, [pc, #64]	; (2e48 <xTaskGenericNotifyFromISR+0x110>)
    2e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    2e0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e0e:	429a      	cmp	r2, r3
    2e10:	d915      	bls.n	2e3e <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    2e12:	b146      	cbz	r6, 2e26 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    2e14:	2001      	movs	r0, #1
    2e16:	6030      	str	r0, [r6, #0]
    2e18:	e00d      	b.n	2e36 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    2e1a:	f104 0118 	add.w	r1, r4, #24
    2e1e:	480e      	ldr	r0, [pc, #56]	; (2e58 <xTaskGenericNotifyFromISR+0x120>)
    2e20:	4b0c      	ldr	r3, [pc, #48]	; (2e54 <xTaskGenericNotifyFromISR+0x11c>)
    2e22:	4798      	blx	r3
    2e24:	e7ee      	b.n	2e04 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    2e26:	2001      	movs	r0, #1
    2e28:	4b07      	ldr	r3, [pc, #28]	; (2e48 <xTaskGenericNotifyFromISR+0x110>)
    2e2a:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    2e2e:	e002      	b.n	2e36 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    2e30:	2000      	movs	r0, #0
    2e32:	e000      	b.n	2e36 <xTaskGenericNotifyFromISR+0xfe>
    2e34:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2e36:	f385 8811 	msr	BASEPRI, r5
}
    2e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e3e:	2001      	movs	r0, #1
    2e40:	e7f9      	b.n	2e36 <xTaskGenericNotifyFromISR+0xfe>
    2e42:	bf00      	nop
    2e44:	00001ea5 	.word	0x00001ea5
    2e48:	2000322c 	.word	0x2000322c
    2e4c:	00001d3d 	.word	0x00001d3d
    2e50:	20003254 	.word	0x20003254
    2e54:	00001cf1 	.word	0x00001cf1
    2e58:	20003240 	.word	0x20003240

00002e5c <__libc_init_array>:
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	4e0d      	ldr	r6, [pc, #52]	; (2e94 <__libc_init_array+0x38>)
    2e60:	4c0d      	ldr	r4, [pc, #52]	; (2e98 <__libc_init_array+0x3c>)
    2e62:	1ba4      	subs	r4, r4, r6
    2e64:	10a4      	asrs	r4, r4, #2
    2e66:	2500      	movs	r5, #0
    2e68:	42a5      	cmp	r5, r4
    2e6a:	d109      	bne.n	2e80 <__libc_init_array+0x24>
    2e6c:	4e0b      	ldr	r6, [pc, #44]	; (2e9c <__libc_init_array+0x40>)
    2e6e:	4c0c      	ldr	r4, [pc, #48]	; (2ea0 <__libc_init_array+0x44>)
    2e70:	f001 fb18 	bl	44a4 <_init>
    2e74:	1ba4      	subs	r4, r4, r6
    2e76:	10a4      	asrs	r4, r4, #2
    2e78:	2500      	movs	r5, #0
    2e7a:	42a5      	cmp	r5, r4
    2e7c:	d105      	bne.n	2e8a <__libc_init_array+0x2e>
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
    2e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2e84:	4798      	blx	r3
    2e86:	3501      	adds	r5, #1
    2e88:	e7ee      	b.n	2e68 <__libc_init_array+0xc>
    2e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2e8e:	4798      	blx	r3
    2e90:	3501      	adds	r5, #1
    2e92:	e7f2      	b.n	2e7a <__libc_init_array+0x1e>
    2e94:	000044b0 	.word	0x000044b0
    2e98:	000044b0 	.word	0x000044b0
    2e9c:	000044b0 	.word	0x000044b0
    2ea0:	000044b4 	.word	0x000044b4

00002ea4 <memcpy>:
    2ea4:	b510      	push	{r4, lr}
    2ea6:	1e43      	subs	r3, r0, #1
    2ea8:	440a      	add	r2, r1
    2eaa:	4291      	cmp	r1, r2
    2eac:	d100      	bne.n	2eb0 <memcpy+0xc>
    2eae:	bd10      	pop	{r4, pc}
    2eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
    2eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
    2eb8:	e7f7      	b.n	2eaa <memcpy+0x6>

00002eba <memmove>:
    2eba:	4288      	cmp	r0, r1
    2ebc:	b510      	push	{r4, lr}
    2ebe:	eb01 0302 	add.w	r3, r1, r2
    2ec2:	d803      	bhi.n	2ecc <memmove+0x12>
    2ec4:	1e42      	subs	r2, r0, #1
    2ec6:	4299      	cmp	r1, r3
    2ec8:	d10c      	bne.n	2ee4 <memmove+0x2a>
    2eca:	bd10      	pop	{r4, pc}
    2ecc:	4298      	cmp	r0, r3
    2ece:	d2f9      	bcs.n	2ec4 <memmove+0xa>
    2ed0:	1881      	adds	r1, r0, r2
    2ed2:	1ad2      	subs	r2, r2, r3
    2ed4:	42d3      	cmn	r3, r2
    2ed6:	d100      	bne.n	2eda <memmove+0x20>
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    2ede:	f801 4d01 	strb.w	r4, [r1, #-1]!
    2ee2:	e7f7      	b.n	2ed4 <memmove+0x1a>
    2ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
    2ee8:	f802 4f01 	strb.w	r4, [r2, #1]!
    2eec:	e7eb      	b.n	2ec6 <memmove+0xc>

00002eee <memset>:
    2eee:	4402      	add	r2, r0
    2ef0:	4603      	mov	r3, r0
    2ef2:	4293      	cmp	r3, r2
    2ef4:	d100      	bne.n	2ef8 <memset+0xa>
    2ef6:	4770      	bx	lr
    2ef8:	f803 1b01 	strb.w	r1, [r3], #1
    2efc:	e7f9      	b.n	2ef2 <memset+0x4>
	...

00002f00 <_free_r>:
    2f00:	b538      	push	{r3, r4, r5, lr}
    2f02:	4605      	mov	r5, r0
    2f04:	2900      	cmp	r1, #0
    2f06:	d045      	beq.n	2f94 <_free_r+0x94>
    2f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2f0c:	1f0c      	subs	r4, r1, #4
    2f0e:	2b00      	cmp	r3, #0
    2f10:	bfb8      	it	lt
    2f12:	18e4      	addlt	r4, r4, r3
    2f14:	f000 f8e4 	bl	30e0 <__malloc_lock>
    2f18:	4a1f      	ldr	r2, [pc, #124]	; (2f98 <_free_r+0x98>)
    2f1a:	6813      	ldr	r3, [r2, #0]
    2f1c:	4610      	mov	r0, r2
    2f1e:	b933      	cbnz	r3, 2f2e <_free_r+0x2e>
    2f20:	6063      	str	r3, [r4, #4]
    2f22:	6014      	str	r4, [r2, #0]
    2f24:	4628      	mov	r0, r5
    2f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2f2a:	f000 b8da 	b.w	30e2 <__malloc_unlock>
    2f2e:	42a3      	cmp	r3, r4
    2f30:	d90c      	bls.n	2f4c <_free_r+0x4c>
    2f32:	6821      	ldr	r1, [r4, #0]
    2f34:	1862      	adds	r2, r4, r1
    2f36:	4293      	cmp	r3, r2
    2f38:	bf04      	itt	eq
    2f3a:	681a      	ldreq	r2, [r3, #0]
    2f3c:	685b      	ldreq	r3, [r3, #4]
    2f3e:	6063      	str	r3, [r4, #4]
    2f40:	bf04      	itt	eq
    2f42:	1852      	addeq	r2, r2, r1
    2f44:	6022      	streq	r2, [r4, #0]
    2f46:	6004      	str	r4, [r0, #0]
    2f48:	e7ec      	b.n	2f24 <_free_r+0x24>
    2f4a:	4613      	mov	r3, r2
    2f4c:	685a      	ldr	r2, [r3, #4]
    2f4e:	b10a      	cbz	r2, 2f54 <_free_r+0x54>
    2f50:	42a2      	cmp	r2, r4
    2f52:	d9fa      	bls.n	2f4a <_free_r+0x4a>
    2f54:	6819      	ldr	r1, [r3, #0]
    2f56:	1858      	adds	r0, r3, r1
    2f58:	42a0      	cmp	r0, r4
    2f5a:	d10b      	bne.n	2f74 <_free_r+0x74>
    2f5c:	6820      	ldr	r0, [r4, #0]
    2f5e:	4401      	add	r1, r0
    2f60:	1858      	adds	r0, r3, r1
    2f62:	4282      	cmp	r2, r0
    2f64:	6019      	str	r1, [r3, #0]
    2f66:	d1dd      	bne.n	2f24 <_free_r+0x24>
    2f68:	6810      	ldr	r0, [r2, #0]
    2f6a:	6852      	ldr	r2, [r2, #4]
    2f6c:	605a      	str	r2, [r3, #4]
    2f6e:	4401      	add	r1, r0
    2f70:	6019      	str	r1, [r3, #0]
    2f72:	e7d7      	b.n	2f24 <_free_r+0x24>
    2f74:	d902      	bls.n	2f7c <_free_r+0x7c>
    2f76:	230c      	movs	r3, #12
    2f78:	602b      	str	r3, [r5, #0]
    2f7a:	e7d3      	b.n	2f24 <_free_r+0x24>
    2f7c:	6820      	ldr	r0, [r4, #0]
    2f7e:	1821      	adds	r1, r4, r0
    2f80:	428a      	cmp	r2, r1
    2f82:	bf04      	itt	eq
    2f84:	6811      	ldreq	r1, [r2, #0]
    2f86:	6852      	ldreq	r2, [r2, #4]
    2f88:	6062      	str	r2, [r4, #4]
    2f8a:	bf04      	itt	eq
    2f8c:	1809      	addeq	r1, r1, r0
    2f8e:	6021      	streq	r1, [r4, #0]
    2f90:	605c      	str	r4, [r3, #4]
    2f92:	e7c7      	b.n	2f24 <_free_r+0x24>
    2f94:	bd38      	pop	{r3, r4, r5, pc}
    2f96:	bf00      	nop
    2f98:	20003318 	.word	0x20003318

00002f9c <_malloc_r>:
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	1ccd      	adds	r5, r1, #3
    2fa0:	f025 0503 	bic.w	r5, r5, #3
    2fa4:	3508      	adds	r5, #8
    2fa6:	2d0c      	cmp	r5, #12
    2fa8:	bf38      	it	cc
    2faa:	250c      	movcc	r5, #12
    2fac:	2d00      	cmp	r5, #0
    2fae:	4606      	mov	r6, r0
    2fb0:	db01      	blt.n	2fb6 <_malloc_r+0x1a>
    2fb2:	42a9      	cmp	r1, r5
    2fb4:	d903      	bls.n	2fbe <_malloc_r+0x22>
    2fb6:	230c      	movs	r3, #12
    2fb8:	6033      	str	r3, [r6, #0]
    2fba:	2000      	movs	r0, #0
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	f000 f88f 	bl	30e0 <__malloc_lock>
    2fc2:	4a23      	ldr	r2, [pc, #140]	; (3050 <_malloc_r+0xb4>)
    2fc4:	6814      	ldr	r4, [r2, #0]
    2fc6:	4621      	mov	r1, r4
    2fc8:	b991      	cbnz	r1, 2ff0 <_malloc_r+0x54>
    2fca:	4c22      	ldr	r4, [pc, #136]	; (3054 <_malloc_r+0xb8>)
    2fcc:	6823      	ldr	r3, [r4, #0]
    2fce:	b91b      	cbnz	r3, 2fd8 <_malloc_r+0x3c>
    2fd0:	4630      	mov	r0, r6
    2fd2:	f000 f841 	bl	3058 <_sbrk_r>
    2fd6:	6020      	str	r0, [r4, #0]
    2fd8:	4629      	mov	r1, r5
    2fda:	4630      	mov	r0, r6
    2fdc:	f000 f83c 	bl	3058 <_sbrk_r>
    2fe0:	1c43      	adds	r3, r0, #1
    2fe2:	d126      	bne.n	3032 <_malloc_r+0x96>
    2fe4:	230c      	movs	r3, #12
    2fe6:	6033      	str	r3, [r6, #0]
    2fe8:	4630      	mov	r0, r6
    2fea:	f000 f87a 	bl	30e2 <__malloc_unlock>
    2fee:	e7e4      	b.n	2fba <_malloc_r+0x1e>
    2ff0:	680b      	ldr	r3, [r1, #0]
    2ff2:	1b5b      	subs	r3, r3, r5
    2ff4:	d41a      	bmi.n	302c <_malloc_r+0x90>
    2ff6:	2b0b      	cmp	r3, #11
    2ff8:	d90f      	bls.n	301a <_malloc_r+0x7e>
    2ffa:	600b      	str	r3, [r1, #0]
    2ffc:	50cd      	str	r5, [r1, r3]
    2ffe:	18cc      	adds	r4, r1, r3
    3000:	4630      	mov	r0, r6
    3002:	f000 f86e 	bl	30e2 <__malloc_unlock>
    3006:	f104 000b 	add.w	r0, r4, #11
    300a:	1d23      	adds	r3, r4, #4
    300c:	f020 0007 	bic.w	r0, r0, #7
    3010:	1ac3      	subs	r3, r0, r3
    3012:	d01b      	beq.n	304c <_malloc_r+0xb0>
    3014:	425a      	negs	r2, r3
    3016:	50e2      	str	r2, [r4, r3]
    3018:	bd70      	pop	{r4, r5, r6, pc}
    301a:	428c      	cmp	r4, r1
    301c:	bf0d      	iteet	eq
    301e:	6863      	ldreq	r3, [r4, #4]
    3020:	684b      	ldrne	r3, [r1, #4]
    3022:	6063      	strne	r3, [r4, #4]
    3024:	6013      	streq	r3, [r2, #0]
    3026:	bf18      	it	ne
    3028:	460c      	movne	r4, r1
    302a:	e7e9      	b.n	3000 <_malloc_r+0x64>
    302c:	460c      	mov	r4, r1
    302e:	6849      	ldr	r1, [r1, #4]
    3030:	e7ca      	b.n	2fc8 <_malloc_r+0x2c>
    3032:	1cc4      	adds	r4, r0, #3
    3034:	f024 0403 	bic.w	r4, r4, #3
    3038:	42a0      	cmp	r0, r4
    303a:	d005      	beq.n	3048 <_malloc_r+0xac>
    303c:	1a21      	subs	r1, r4, r0
    303e:	4630      	mov	r0, r6
    3040:	f000 f80a 	bl	3058 <_sbrk_r>
    3044:	3001      	adds	r0, #1
    3046:	d0cd      	beq.n	2fe4 <_malloc_r+0x48>
    3048:	6025      	str	r5, [r4, #0]
    304a:	e7d9      	b.n	3000 <_malloc_r+0x64>
    304c:	bd70      	pop	{r4, r5, r6, pc}
    304e:	bf00      	nop
    3050:	20003318 	.word	0x20003318
    3054:	2000331c 	.word	0x2000331c

00003058 <_sbrk_r>:
    3058:	b538      	push	{r3, r4, r5, lr}
    305a:	4c06      	ldr	r4, [pc, #24]	; (3074 <_sbrk_r+0x1c>)
    305c:	2300      	movs	r3, #0
    305e:	4605      	mov	r5, r0
    3060:	4608      	mov	r0, r1
    3062:	6023      	str	r3, [r4, #0]
    3064:	f7fd ffc6 	bl	ff4 <_sbrk>
    3068:	1c43      	adds	r3, r0, #1
    306a:	d102      	bne.n	3072 <_sbrk_r+0x1a>
    306c:	6823      	ldr	r3, [r4, #0]
    306e:	b103      	cbz	r3, 3072 <_sbrk_r+0x1a>
    3070:	602b      	str	r3, [r5, #0]
    3072:	bd38      	pop	{r3, r4, r5, pc}
    3074:	20003d50 	.word	0x20003d50

00003078 <siprintf>:
    3078:	b40e      	push	{r1, r2, r3}
    307a:	b500      	push	{lr}
    307c:	b09c      	sub	sp, #112	; 0x70
    307e:	f44f 7102 	mov.w	r1, #520	; 0x208
    3082:	ab1d      	add	r3, sp, #116	; 0x74
    3084:	f8ad 1014 	strh.w	r1, [sp, #20]
    3088:	9002      	str	r0, [sp, #8]
    308a:	9006      	str	r0, [sp, #24]
    308c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3090:	480a      	ldr	r0, [pc, #40]	; (30bc <siprintf+0x44>)
    3092:	9104      	str	r1, [sp, #16]
    3094:	9107      	str	r1, [sp, #28]
    3096:	f64f 71ff 	movw	r1, #65535	; 0xffff
    309a:	f853 2b04 	ldr.w	r2, [r3], #4
    309e:	f8ad 1016 	strh.w	r1, [sp, #22]
    30a2:	6800      	ldr	r0, [r0, #0]
    30a4:	9301      	str	r3, [sp, #4]
    30a6:	a902      	add	r1, sp, #8
    30a8:	f000 f878 	bl	319c <_svfiprintf_r>
    30ac:	9b02      	ldr	r3, [sp, #8]
    30ae:	2200      	movs	r2, #0
    30b0:	701a      	strb	r2, [r3, #0]
    30b2:	b01c      	add	sp, #112	; 0x70
    30b4:	f85d eb04 	ldr.w	lr, [sp], #4
    30b8:	b003      	add	sp, #12
    30ba:	4770      	bx	lr
    30bc:	20000074 	.word	0x20000074

000030c0 <strcpy>:
    30c0:	4603      	mov	r3, r0
    30c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    30c6:	f803 2b01 	strb.w	r2, [r3], #1
    30ca:	2a00      	cmp	r2, #0
    30cc:	d1f9      	bne.n	30c2 <strcpy+0x2>
    30ce:	4770      	bx	lr

000030d0 <strlen>:
    30d0:	4603      	mov	r3, r0
    30d2:	f813 2b01 	ldrb.w	r2, [r3], #1
    30d6:	2a00      	cmp	r2, #0
    30d8:	d1fb      	bne.n	30d2 <strlen+0x2>
    30da:	1a18      	subs	r0, r3, r0
    30dc:	3801      	subs	r0, #1
    30de:	4770      	bx	lr

000030e0 <__malloc_lock>:
    30e0:	4770      	bx	lr

000030e2 <__malloc_unlock>:
    30e2:	4770      	bx	lr

000030e4 <__ssputs_r>:
    30e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30e8:	688e      	ldr	r6, [r1, #8]
    30ea:	429e      	cmp	r6, r3
    30ec:	4682      	mov	sl, r0
    30ee:	460c      	mov	r4, r1
    30f0:	4691      	mov	r9, r2
    30f2:	4698      	mov	r8, r3
    30f4:	d835      	bhi.n	3162 <__ssputs_r+0x7e>
    30f6:	898a      	ldrh	r2, [r1, #12]
    30f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    30fc:	d031      	beq.n	3162 <__ssputs_r+0x7e>
    30fe:	6825      	ldr	r5, [r4, #0]
    3100:	6909      	ldr	r1, [r1, #16]
    3102:	1a6f      	subs	r7, r5, r1
    3104:	6965      	ldr	r5, [r4, #20]
    3106:	2302      	movs	r3, #2
    3108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    310c:	fb95 f5f3 	sdiv	r5, r5, r3
    3110:	f108 0301 	add.w	r3, r8, #1
    3114:	443b      	add	r3, r7
    3116:	429d      	cmp	r5, r3
    3118:	bf38      	it	cc
    311a:	461d      	movcc	r5, r3
    311c:	0553      	lsls	r3, r2, #21
    311e:	d531      	bpl.n	3184 <__ssputs_r+0xa0>
    3120:	4629      	mov	r1, r5
    3122:	f7ff ff3b 	bl	2f9c <_malloc_r>
    3126:	4606      	mov	r6, r0
    3128:	b950      	cbnz	r0, 3140 <__ssputs_r+0x5c>
    312a:	230c      	movs	r3, #12
    312c:	f8ca 3000 	str.w	r3, [sl]
    3130:	89a3      	ldrh	r3, [r4, #12]
    3132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3136:	81a3      	strh	r3, [r4, #12]
    3138:	f04f 30ff 	mov.w	r0, #4294967295
    313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3140:	463a      	mov	r2, r7
    3142:	6921      	ldr	r1, [r4, #16]
    3144:	f7ff feae 	bl	2ea4 <memcpy>
    3148:	89a3      	ldrh	r3, [r4, #12]
    314a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    314e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3152:	81a3      	strh	r3, [r4, #12]
    3154:	6126      	str	r6, [r4, #16]
    3156:	6165      	str	r5, [r4, #20]
    3158:	443e      	add	r6, r7
    315a:	1bed      	subs	r5, r5, r7
    315c:	6026      	str	r6, [r4, #0]
    315e:	60a5      	str	r5, [r4, #8]
    3160:	4646      	mov	r6, r8
    3162:	4546      	cmp	r6, r8
    3164:	bf28      	it	cs
    3166:	4646      	movcs	r6, r8
    3168:	4632      	mov	r2, r6
    316a:	4649      	mov	r1, r9
    316c:	6820      	ldr	r0, [r4, #0]
    316e:	f7ff fea4 	bl	2eba <memmove>
    3172:	68a3      	ldr	r3, [r4, #8]
    3174:	1b9b      	subs	r3, r3, r6
    3176:	60a3      	str	r3, [r4, #8]
    3178:	6823      	ldr	r3, [r4, #0]
    317a:	441e      	add	r6, r3
    317c:	6026      	str	r6, [r4, #0]
    317e:	2000      	movs	r0, #0
    3180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3184:	462a      	mov	r2, r5
    3186:	f000 fae3 	bl	3750 <_realloc_r>
    318a:	4606      	mov	r6, r0
    318c:	2800      	cmp	r0, #0
    318e:	d1e1      	bne.n	3154 <__ssputs_r+0x70>
    3190:	6921      	ldr	r1, [r4, #16]
    3192:	4650      	mov	r0, sl
    3194:	f7ff feb4 	bl	2f00 <_free_r>
    3198:	e7c7      	b.n	312a <__ssputs_r+0x46>
	...

0000319c <_svfiprintf_r>:
    319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a0:	b09d      	sub	sp, #116	; 0x74
    31a2:	4680      	mov	r8, r0
    31a4:	9303      	str	r3, [sp, #12]
    31a6:	898b      	ldrh	r3, [r1, #12]
    31a8:	061c      	lsls	r4, r3, #24
    31aa:	460d      	mov	r5, r1
    31ac:	4616      	mov	r6, r2
    31ae:	d50f      	bpl.n	31d0 <_svfiprintf_r+0x34>
    31b0:	690b      	ldr	r3, [r1, #16]
    31b2:	b96b      	cbnz	r3, 31d0 <_svfiprintf_r+0x34>
    31b4:	2140      	movs	r1, #64	; 0x40
    31b6:	f7ff fef1 	bl	2f9c <_malloc_r>
    31ba:	6028      	str	r0, [r5, #0]
    31bc:	6128      	str	r0, [r5, #16]
    31be:	b928      	cbnz	r0, 31cc <_svfiprintf_r+0x30>
    31c0:	230c      	movs	r3, #12
    31c2:	f8c8 3000 	str.w	r3, [r8]
    31c6:	f04f 30ff 	mov.w	r0, #4294967295
    31ca:	e0c5      	b.n	3358 <_svfiprintf_r+0x1bc>
    31cc:	2340      	movs	r3, #64	; 0x40
    31ce:	616b      	str	r3, [r5, #20]
    31d0:	2300      	movs	r3, #0
    31d2:	9309      	str	r3, [sp, #36]	; 0x24
    31d4:	2320      	movs	r3, #32
    31d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    31da:	2330      	movs	r3, #48	; 0x30
    31dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    31e0:	f04f 0b01 	mov.w	fp, #1
    31e4:	4637      	mov	r7, r6
    31e6:	463c      	mov	r4, r7
    31e8:	f814 3b01 	ldrb.w	r3, [r4], #1
    31ec:	2b00      	cmp	r3, #0
    31ee:	d13c      	bne.n	326a <_svfiprintf_r+0xce>
    31f0:	ebb7 0a06 	subs.w	sl, r7, r6
    31f4:	d00b      	beq.n	320e <_svfiprintf_r+0x72>
    31f6:	4653      	mov	r3, sl
    31f8:	4632      	mov	r2, r6
    31fa:	4629      	mov	r1, r5
    31fc:	4640      	mov	r0, r8
    31fe:	f7ff ff71 	bl	30e4 <__ssputs_r>
    3202:	3001      	adds	r0, #1
    3204:	f000 80a3 	beq.w	334e <_svfiprintf_r+0x1b2>
    3208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    320a:	4453      	add	r3, sl
    320c:	9309      	str	r3, [sp, #36]	; 0x24
    320e:	783b      	ldrb	r3, [r7, #0]
    3210:	2b00      	cmp	r3, #0
    3212:	f000 809c 	beq.w	334e <_svfiprintf_r+0x1b2>
    3216:	2300      	movs	r3, #0
    3218:	f04f 32ff 	mov.w	r2, #4294967295
    321c:	9304      	str	r3, [sp, #16]
    321e:	9307      	str	r3, [sp, #28]
    3220:	9205      	str	r2, [sp, #20]
    3222:	9306      	str	r3, [sp, #24]
    3224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3228:	931a      	str	r3, [sp, #104]	; 0x68
    322a:	2205      	movs	r2, #5
    322c:	7821      	ldrb	r1, [r4, #0]
    322e:	4850      	ldr	r0, [pc, #320]	; (3370 <_svfiprintf_r+0x1d4>)
    3230:	f000 fa3e 	bl	36b0 <memchr>
    3234:	1c67      	adds	r7, r4, #1
    3236:	9b04      	ldr	r3, [sp, #16]
    3238:	b9d8      	cbnz	r0, 3272 <_svfiprintf_r+0xd6>
    323a:	06d9      	lsls	r1, r3, #27
    323c:	bf44      	itt	mi
    323e:	2220      	movmi	r2, #32
    3240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3244:	071a      	lsls	r2, r3, #28
    3246:	bf44      	itt	mi
    3248:	222b      	movmi	r2, #43	; 0x2b
    324a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    324e:	7822      	ldrb	r2, [r4, #0]
    3250:	2a2a      	cmp	r2, #42	; 0x2a
    3252:	d016      	beq.n	3282 <_svfiprintf_r+0xe6>
    3254:	9a07      	ldr	r2, [sp, #28]
    3256:	2100      	movs	r1, #0
    3258:	200a      	movs	r0, #10
    325a:	4627      	mov	r7, r4
    325c:	3401      	adds	r4, #1
    325e:	783b      	ldrb	r3, [r7, #0]
    3260:	3b30      	subs	r3, #48	; 0x30
    3262:	2b09      	cmp	r3, #9
    3264:	d951      	bls.n	330a <_svfiprintf_r+0x16e>
    3266:	b1c9      	cbz	r1, 329c <_svfiprintf_r+0x100>
    3268:	e011      	b.n	328e <_svfiprintf_r+0xf2>
    326a:	2b25      	cmp	r3, #37	; 0x25
    326c:	d0c0      	beq.n	31f0 <_svfiprintf_r+0x54>
    326e:	4627      	mov	r7, r4
    3270:	e7b9      	b.n	31e6 <_svfiprintf_r+0x4a>
    3272:	4a3f      	ldr	r2, [pc, #252]	; (3370 <_svfiprintf_r+0x1d4>)
    3274:	1a80      	subs	r0, r0, r2
    3276:	fa0b f000 	lsl.w	r0, fp, r0
    327a:	4318      	orrs	r0, r3
    327c:	9004      	str	r0, [sp, #16]
    327e:	463c      	mov	r4, r7
    3280:	e7d3      	b.n	322a <_svfiprintf_r+0x8e>
    3282:	9a03      	ldr	r2, [sp, #12]
    3284:	1d11      	adds	r1, r2, #4
    3286:	6812      	ldr	r2, [r2, #0]
    3288:	9103      	str	r1, [sp, #12]
    328a:	2a00      	cmp	r2, #0
    328c:	db01      	blt.n	3292 <_svfiprintf_r+0xf6>
    328e:	9207      	str	r2, [sp, #28]
    3290:	e004      	b.n	329c <_svfiprintf_r+0x100>
    3292:	4252      	negs	r2, r2
    3294:	f043 0302 	orr.w	r3, r3, #2
    3298:	9207      	str	r2, [sp, #28]
    329a:	9304      	str	r3, [sp, #16]
    329c:	783b      	ldrb	r3, [r7, #0]
    329e:	2b2e      	cmp	r3, #46	; 0x2e
    32a0:	d10e      	bne.n	32c0 <_svfiprintf_r+0x124>
    32a2:	787b      	ldrb	r3, [r7, #1]
    32a4:	2b2a      	cmp	r3, #42	; 0x2a
    32a6:	f107 0101 	add.w	r1, r7, #1
    32aa:	d132      	bne.n	3312 <_svfiprintf_r+0x176>
    32ac:	9b03      	ldr	r3, [sp, #12]
    32ae:	1d1a      	adds	r2, r3, #4
    32b0:	681b      	ldr	r3, [r3, #0]
    32b2:	9203      	str	r2, [sp, #12]
    32b4:	2b00      	cmp	r3, #0
    32b6:	bfb8      	it	lt
    32b8:	f04f 33ff 	movlt.w	r3, #4294967295
    32bc:	3702      	adds	r7, #2
    32be:	9305      	str	r3, [sp, #20]
    32c0:	4c2c      	ldr	r4, [pc, #176]	; (3374 <_svfiprintf_r+0x1d8>)
    32c2:	7839      	ldrb	r1, [r7, #0]
    32c4:	2203      	movs	r2, #3
    32c6:	4620      	mov	r0, r4
    32c8:	f000 f9f2 	bl	36b0 <memchr>
    32cc:	b138      	cbz	r0, 32de <_svfiprintf_r+0x142>
    32ce:	2340      	movs	r3, #64	; 0x40
    32d0:	1b00      	subs	r0, r0, r4
    32d2:	fa03 f000 	lsl.w	r0, r3, r0
    32d6:	9b04      	ldr	r3, [sp, #16]
    32d8:	4303      	orrs	r3, r0
    32da:	9304      	str	r3, [sp, #16]
    32dc:	3701      	adds	r7, #1
    32de:	7839      	ldrb	r1, [r7, #0]
    32e0:	4825      	ldr	r0, [pc, #148]	; (3378 <_svfiprintf_r+0x1dc>)
    32e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    32e6:	2206      	movs	r2, #6
    32e8:	1c7e      	adds	r6, r7, #1
    32ea:	f000 f9e1 	bl	36b0 <memchr>
    32ee:	2800      	cmp	r0, #0
    32f0:	d035      	beq.n	335e <_svfiprintf_r+0x1c2>
    32f2:	4b22      	ldr	r3, [pc, #136]	; (337c <_svfiprintf_r+0x1e0>)
    32f4:	b9fb      	cbnz	r3, 3336 <_svfiprintf_r+0x19a>
    32f6:	9b03      	ldr	r3, [sp, #12]
    32f8:	3307      	adds	r3, #7
    32fa:	f023 0307 	bic.w	r3, r3, #7
    32fe:	3308      	adds	r3, #8
    3300:	9303      	str	r3, [sp, #12]
    3302:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3304:	444b      	add	r3, r9
    3306:	9309      	str	r3, [sp, #36]	; 0x24
    3308:	e76c      	b.n	31e4 <_svfiprintf_r+0x48>
    330a:	fb00 3202 	mla	r2, r0, r2, r3
    330e:	2101      	movs	r1, #1
    3310:	e7a3      	b.n	325a <_svfiprintf_r+0xbe>
    3312:	2300      	movs	r3, #0
    3314:	9305      	str	r3, [sp, #20]
    3316:	4618      	mov	r0, r3
    3318:	240a      	movs	r4, #10
    331a:	460f      	mov	r7, r1
    331c:	3101      	adds	r1, #1
    331e:	783a      	ldrb	r2, [r7, #0]
    3320:	3a30      	subs	r2, #48	; 0x30
    3322:	2a09      	cmp	r2, #9
    3324:	d903      	bls.n	332e <_svfiprintf_r+0x192>
    3326:	2b00      	cmp	r3, #0
    3328:	d0ca      	beq.n	32c0 <_svfiprintf_r+0x124>
    332a:	9005      	str	r0, [sp, #20]
    332c:	e7c8      	b.n	32c0 <_svfiprintf_r+0x124>
    332e:	fb04 2000 	mla	r0, r4, r0, r2
    3332:	2301      	movs	r3, #1
    3334:	e7f1      	b.n	331a <_svfiprintf_r+0x17e>
    3336:	ab03      	add	r3, sp, #12
    3338:	9300      	str	r3, [sp, #0]
    333a:	462a      	mov	r2, r5
    333c:	4b10      	ldr	r3, [pc, #64]	; (3380 <_svfiprintf_r+0x1e4>)
    333e:	a904      	add	r1, sp, #16
    3340:	4640      	mov	r0, r8
    3342:	f3af 8000 	nop.w
    3346:	f1b0 3fff 	cmp.w	r0, #4294967295
    334a:	4681      	mov	r9, r0
    334c:	d1d9      	bne.n	3302 <_svfiprintf_r+0x166>
    334e:	89ab      	ldrh	r3, [r5, #12]
    3350:	065b      	lsls	r3, r3, #25
    3352:	f53f af38 	bmi.w	31c6 <_svfiprintf_r+0x2a>
    3356:	9809      	ldr	r0, [sp, #36]	; 0x24
    3358:	b01d      	add	sp, #116	; 0x74
    335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    335e:	ab03      	add	r3, sp, #12
    3360:	9300      	str	r3, [sp, #0]
    3362:	462a      	mov	r2, r5
    3364:	4b06      	ldr	r3, [pc, #24]	; (3380 <_svfiprintf_r+0x1e4>)
    3366:	a904      	add	r1, sp, #16
    3368:	4640      	mov	r0, r8
    336a:	f000 f881 	bl	3470 <_printf_i>
    336e:	e7ea      	b.n	3346 <_svfiprintf_r+0x1aa>
    3370:	00004470 	.word	0x00004470
    3374:	00004476 	.word	0x00004476
    3378:	0000447a 	.word	0x0000447a
    337c:	00000000 	.word	0x00000000
    3380:	000030e5 	.word	0x000030e5

00003384 <_printf_common>:
    3384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3388:	4691      	mov	r9, r2
    338a:	461f      	mov	r7, r3
    338c:	688a      	ldr	r2, [r1, #8]
    338e:	690b      	ldr	r3, [r1, #16]
    3390:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3394:	4293      	cmp	r3, r2
    3396:	bfb8      	it	lt
    3398:	4613      	movlt	r3, r2
    339a:	f8c9 3000 	str.w	r3, [r9]
    339e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    33a2:	4606      	mov	r6, r0
    33a4:	460c      	mov	r4, r1
    33a6:	b112      	cbz	r2, 33ae <_printf_common+0x2a>
    33a8:	3301      	adds	r3, #1
    33aa:	f8c9 3000 	str.w	r3, [r9]
    33ae:	6823      	ldr	r3, [r4, #0]
    33b0:	0699      	lsls	r1, r3, #26
    33b2:	bf42      	ittt	mi
    33b4:	f8d9 3000 	ldrmi.w	r3, [r9]
    33b8:	3302      	addmi	r3, #2
    33ba:	f8c9 3000 	strmi.w	r3, [r9]
    33be:	6825      	ldr	r5, [r4, #0]
    33c0:	f015 0506 	ands.w	r5, r5, #6
    33c4:	d107      	bne.n	33d6 <_printf_common+0x52>
    33c6:	f104 0a19 	add.w	sl, r4, #25
    33ca:	68e3      	ldr	r3, [r4, #12]
    33cc:	f8d9 2000 	ldr.w	r2, [r9]
    33d0:	1a9b      	subs	r3, r3, r2
    33d2:	429d      	cmp	r5, r3
    33d4:	db29      	blt.n	342a <_printf_common+0xa6>
    33d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    33da:	6822      	ldr	r2, [r4, #0]
    33dc:	3300      	adds	r3, #0
    33de:	bf18      	it	ne
    33e0:	2301      	movne	r3, #1
    33e2:	0692      	lsls	r2, r2, #26
    33e4:	d42e      	bmi.n	3444 <_printf_common+0xc0>
    33e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    33ea:	4639      	mov	r1, r7
    33ec:	4630      	mov	r0, r6
    33ee:	47c0      	blx	r8
    33f0:	3001      	adds	r0, #1
    33f2:	d021      	beq.n	3438 <_printf_common+0xb4>
    33f4:	6823      	ldr	r3, [r4, #0]
    33f6:	68e5      	ldr	r5, [r4, #12]
    33f8:	f8d9 2000 	ldr.w	r2, [r9]
    33fc:	f003 0306 	and.w	r3, r3, #6
    3400:	2b04      	cmp	r3, #4
    3402:	bf08      	it	eq
    3404:	1aad      	subeq	r5, r5, r2
    3406:	68a3      	ldr	r3, [r4, #8]
    3408:	6922      	ldr	r2, [r4, #16]
    340a:	bf0c      	ite	eq
    340c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3410:	2500      	movne	r5, #0
    3412:	4293      	cmp	r3, r2
    3414:	bfc4      	itt	gt
    3416:	1a9b      	subgt	r3, r3, r2
    3418:	18ed      	addgt	r5, r5, r3
    341a:	f04f 0900 	mov.w	r9, #0
    341e:	341a      	adds	r4, #26
    3420:	454d      	cmp	r5, r9
    3422:	d11b      	bne.n	345c <_printf_common+0xd8>
    3424:	2000      	movs	r0, #0
    3426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    342a:	2301      	movs	r3, #1
    342c:	4652      	mov	r2, sl
    342e:	4639      	mov	r1, r7
    3430:	4630      	mov	r0, r6
    3432:	47c0      	blx	r8
    3434:	3001      	adds	r0, #1
    3436:	d103      	bne.n	3440 <_printf_common+0xbc>
    3438:	f04f 30ff 	mov.w	r0, #4294967295
    343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3440:	3501      	adds	r5, #1
    3442:	e7c2      	b.n	33ca <_printf_common+0x46>
    3444:	18e1      	adds	r1, r4, r3
    3446:	1c5a      	adds	r2, r3, #1
    3448:	2030      	movs	r0, #48	; 0x30
    344a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    344e:	4422      	add	r2, r4
    3450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3458:	3302      	adds	r3, #2
    345a:	e7c4      	b.n	33e6 <_printf_common+0x62>
    345c:	2301      	movs	r3, #1
    345e:	4622      	mov	r2, r4
    3460:	4639      	mov	r1, r7
    3462:	4630      	mov	r0, r6
    3464:	47c0      	blx	r8
    3466:	3001      	adds	r0, #1
    3468:	d0e6      	beq.n	3438 <_printf_common+0xb4>
    346a:	f109 0901 	add.w	r9, r9, #1
    346e:	e7d7      	b.n	3420 <_printf_common+0x9c>

00003470 <_printf_i>:
    3470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3474:	4617      	mov	r7, r2
    3476:	7e0a      	ldrb	r2, [r1, #24]
    3478:	b085      	sub	sp, #20
    347a:	2a6e      	cmp	r2, #110	; 0x6e
    347c:	4698      	mov	r8, r3
    347e:	4606      	mov	r6, r0
    3480:	460c      	mov	r4, r1
    3482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3484:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3488:	f000 80bc 	beq.w	3604 <_printf_i+0x194>
    348c:	d81a      	bhi.n	34c4 <_printf_i+0x54>
    348e:	2a63      	cmp	r2, #99	; 0x63
    3490:	d02e      	beq.n	34f0 <_printf_i+0x80>
    3492:	d80a      	bhi.n	34aa <_printf_i+0x3a>
    3494:	2a00      	cmp	r2, #0
    3496:	f000 80c8 	beq.w	362a <_printf_i+0x1ba>
    349a:	2a58      	cmp	r2, #88	; 0x58
    349c:	f000 808a 	beq.w	35b4 <_printf_i+0x144>
    34a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    34a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    34a8:	e02a      	b.n	3500 <_printf_i+0x90>
    34aa:	2a64      	cmp	r2, #100	; 0x64
    34ac:	d001      	beq.n	34b2 <_printf_i+0x42>
    34ae:	2a69      	cmp	r2, #105	; 0x69
    34b0:	d1f6      	bne.n	34a0 <_printf_i+0x30>
    34b2:	6821      	ldr	r1, [r4, #0]
    34b4:	681a      	ldr	r2, [r3, #0]
    34b6:	f011 0f80 	tst.w	r1, #128	; 0x80
    34ba:	d023      	beq.n	3504 <_printf_i+0x94>
    34bc:	1d11      	adds	r1, r2, #4
    34be:	6019      	str	r1, [r3, #0]
    34c0:	6813      	ldr	r3, [r2, #0]
    34c2:	e027      	b.n	3514 <_printf_i+0xa4>
    34c4:	2a73      	cmp	r2, #115	; 0x73
    34c6:	f000 80b4 	beq.w	3632 <_printf_i+0x1c2>
    34ca:	d808      	bhi.n	34de <_printf_i+0x6e>
    34cc:	2a6f      	cmp	r2, #111	; 0x6f
    34ce:	d02a      	beq.n	3526 <_printf_i+0xb6>
    34d0:	2a70      	cmp	r2, #112	; 0x70
    34d2:	d1e5      	bne.n	34a0 <_printf_i+0x30>
    34d4:	680a      	ldr	r2, [r1, #0]
    34d6:	f042 0220 	orr.w	r2, r2, #32
    34da:	600a      	str	r2, [r1, #0]
    34dc:	e003      	b.n	34e6 <_printf_i+0x76>
    34de:	2a75      	cmp	r2, #117	; 0x75
    34e0:	d021      	beq.n	3526 <_printf_i+0xb6>
    34e2:	2a78      	cmp	r2, #120	; 0x78
    34e4:	d1dc      	bne.n	34a0 <_printf_i+0x30>
    34e6:	2278      	movs	r2, #120	; 0x78
    34e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    34ec:	496e      	ldr	r1, [pc, #440]	; (36a8 <_printf_i+0x238>)
    34ee:	e064      	b.n	35ba <_printf_i+0x14a>
    34f0:	681a      	ldr	r2, [r3, #0]
    34f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    34f6:	1d11      	adds	r1, r2, #4
    34f8:	6019      	str	r1, [r3, #0]
    34fa:	6813      	ldr	r3, [r2, #0]
    34fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3500:	2301      	movs	r3, #1
    3502:	e0a3      	b.n	364c <_printf_i+0x1dc>
    3504:	f011 0f40 	tst.w	r1, #64	; 0x40
    3508:	f102 0104 	add.w	r1, r2, #4
    350c:	6019      	str	r1, [r3, #0]
    350e:	d0d7      	beq.n	34c0 <_printf_i+0x50>
    3510:	f9b2 3000 	ldrsh.w	r3, [r2]
    3514:	2b00      	cmp	r3, #0
    3516:	da03      	bge.n	3520 <_printf_i+0xb0>
    3518:	222d      	movs	r2, #45	; 0x2d
    351a:	425b      	negs	r3, r3
    351c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3520:	4962      	ldr	r1, [pc, #392]	; (36ac <_printf_i+0x23c>)
    3522:	220a      	movs	r2, #10
    3524:	e017      	b.n	3556 <_printf_i+0xe6>
    3526:	6820      	ldr	r0, [r4, #0]
    3528:	6819      	ldr	r1, [r3, #0]
    352a:	f010 0f80 	tst.w	r0, #128	; 0x80
    352e:	d003      	beq.n	3538 <_printf_i+0xc8>
    3530:	1d08      	adds	r0, r1, #4
    3532:	6018      	str	r0, [r3, #0]
    3534:	680b      	ldr	r3, [r1, #0]
    3536:	e006      	b.n	3546 <_printf_i+0xd6>
    3538:	f010 0f40 	tst.w	r0, #64	; 0x40
    353c:	f101 0004 	add.w	r0, r1, #4
    3540:	6018      	str	r0, [r3, #0]
    3542:	d0f7      	beq.n	3534 <_printf_i+0xc4>
    3544:	880b      	ldrh	r3, [r1, #0]
    3546:	4959      	ldr	r1, [pc, #356]	; (36ac <_printf_i+0x23c>)
    3548:	2a6f      	cmp	r2, #111	; 0x6f
    354a:	bf14      	ite	ne
    354c:	220a      	movne	r2, #10
    354e:	2208      	moveq	r2, #8
    3550:	2000      	movs	r0, #0
    3552:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3556:	6865      	ldr	r5, [r4, #4]
    3558:	60a5      	str	r5, [r4, #8]
    355a:	2d00      	cmp	r5, #0
    355c:	f2c0 809c 	blt.w	3698 <_printf_i+0x228>
    3560:	6820      	ldr	r0, [r4, #0]
    3562:	f020 0004 	bic.w	r0, r0, #4
    3566:	6020      	str	r0, [r4, #0]
    3568:	2b00      	cmp	r3, #0
    356a:	d13f      	bne.n	35ec <_printf_i+0x17c>
    356c:	2d00      	cmp	r5, #0
    356e:	f040 8095 	bne.w	369c <_printf_i+0x22c>
    3572:	4675      	mov	r5, lr
    3574:	2a08      	cmp	r2, #8
    3576:	d10b      	bne.n	3590 <_printf_i+0x120>
    3578:	6823      	ldr	r3, [r4, #0]
    357a:	07da      	lsls	r2, r3, #31
    357c:	d508      	bpl.n	3590 <_printf_i+0x120>
    357e:	6923      	ldr	r3, [r4, #16]
    3580:	6862      	ldr	r2, [r4, #4]
    3582:	429a      	cmp	r2, r3
    3584:	bfde      	ittt	le
    3586:	2330      	movle	r3, #48	; 0x30
    3588:	f805 3c01 	strble.w	r3, [r5, #-1]
    358c:	f105 35ff 	addle.w	r5, r5, #4294967295
    3590:	ebae 0305 	sub.w	r3, lr, r5
    3594:	6123      	str	r3, [r4, #16]
    3596:	f8cd 8000 	str.w	r8, [sp]
    359a:	463b      	mov	r3, r7
    359c:	aa03      	add	r2, sp, #12
    359e:	4621      	mov	r1, r4
    35a0:	4630      	mov	r0, r6
    35a2:	f7ff feef 	bl	3384 <_printf_common>
    35a6:	3001      	adds	r0, #1
    35a8:	d155      	bne.n	3656 <_printf_i+0x1e6>
    35aa:	f04f 30ff 	mov.w	r0, #4294967295
    35ae:	b005      	add	sp, #20
    35b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    35b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    35b8:	493c      	ldr	r1, [pc, #240]	; (36ac <_printf_i+0x23c>)
    35ba:	6822      	ldr	r2, [r4, #0]
    35bc:	6818      	ldr	r0, [r3, #0]
    35be:	f012 0f80 	tst.w	r2, #128	; 0x80
    35c2:	f100 0504 	add.w	r5, r0, #4
    35c6:	601d      	str	r5, [r3, #0]
    35c8:	d001      	beq.n	35ce <_printf_i+0x15e>
    35ca:	6803      	ldr	r3, [r0, #0]
    35cc:	e002      	b.n	35d4 <_printf_i+0x164>
    35ce:	0655      	lsls	r5, r2, #25
    35d0:	d5fb      	bpl.n	35ca <_printf_i+0x15a>
    35d2:	8803      	ldrh	r3, [r0, #0]
    35d4:	07d0      	lsls	r0, r2, #31
    35d6:	bf44      	itt	mi
    35d8:	f042 0220 	orrmi.w	r2, r2, #32
    35dc:	6022      	strmi	r2, [r4, #0]
    35de:	b91b      	cbnz	r3, 35e8 <_printf_i+0x178>
    35e0:	6822      	ldr	r2, [r4, #0]
    35e2:	f022 0220 	bic.w	r2, r2, #32
    35e6:	6022      	str	r2, [r4, #0]
    35e8:	2210      	movs	r2, #16
    35ea:	e7b1      	b.n	3550 <_printf_i+0xe0>
    35ec:	4675      	mov	r5, lr
    35ee:	fbb3 f0f2 	udiv	r0, r3, r2
    35f2:	fb02 3310 	mls	r3, r2, r0, r3
    35f6:	5ccb      	ldrb	r3, [r1, r3]
    35f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    35fc:	4603      	mov	r3, r0
    35fe:	2800      	cmp	r0, #0
    3600:	d1f5      	bne.n	35ee <_printf_i+0x17e>
    3602:	e7b7      	b.n	3574 <_printf_i+0x104>
    3604:	6808      	ldr	r0, [r1, #0]
    3606:	681a      	ldr	r2, [r3, #0]
    3608:	6949      	ldr	r1, [r1, #20]
    360a:	f010 0f80 	tst.w	r0, #128	; 0x80
    360e:	d004      	beq.n	361a <_printf_i+0x1aa>
    3610:	1d10      	adds	r0, r2, #4
    3612:	6018      	str	r0, [r3, #0]
    3614:	6813      	ldr	r3, [r2, #0]
    3616:	6019      	str	r1, [r3, #0]
    3618:	e007      	b.n	362a <_printf_i+0x1ba>
    361a:	f010 0f40 	tst.w	r0, #64	; 0x40
    361e:	f102 0004 	add.w	r0, r2, #4
    3622:	6018      	str	r0, [r3, #0]
    3624:	6813      	ldr	r3, [r2, #0]
    3626:	d0f6      	beq.n	3616 <_printf_i+0x1a6>
    3628:	8019      	strh	r1, [r3, #0]
    362a:	2300      	movs	r3, #0
    362c:	6123      	str	r3, [r4, #16]
    362e:	4675      	mov	r5, lr
    3630:	e7b1      	b.n	3596 <_printf_i+0x126>
    3632:	681a      	ldr	r2, [r3, #0]
    3634:	1d11      	adds	r1, r2, #4
    3636:	6019      	str	r1, [r3, #0]
    3638:	6815      	ldr	r5, [r2, #0]
    363a:	6862      	ldr	r2, [r4, #4]
    363c:	2100      	movs	r1, #0
    363e:	4628      	mov	r0, r5
    3640:	f000 f836 	bl	36b0 <memchr>
    3644:	b108      	cbz	r0, 364a <_printf_i+0x1da>
    3646:	1b40      	subs	r0, r0, r5
    3648:	6060      	str	r0, [r4, #4]
    364a:	6863      	ldr	r3, [r4, #4]
    364c:	6123      	str	r3, [r4, #16]
    364e:	2300      	movs	r3, #0
    3650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3654:	e79f      	b.n	3596 <_printf_i+0x126>
    3656:	6923      	ldr	r3, [r4, #16]
    3658:	462a      	mov	r2, r5
    365a:	4639      	mov	r1, r7
    365c:	4630      	mov	r0, r6
    365e:	47c0      	blx	r8
    3660:	3001      	adds	r0, #1
    3662:	d0a2      	beq.n	35aa <_printf_i+0x13a>
    3664:	6823      	ldr	r3, [r4, #0]
    3666:	079b      	lsls	r3, r3, #30
    3668:	d507      	bpl.n	367a <_printf_i+0x20a>
    366a:	2500      	movs	r5, #0
    366c:	f104 0919 	add.w	r9, r4, #25
    3670:	68e3      	ldr	r3, [r4, #12]
    3672:	9a03      	ldr	r2, [sp, #12]
    3674:	1a9b      	subs	r3, r3, r2
    3676:	429d      	cmp	r5, r3
    3678:	db05      	blt.n	3686 <_printf_i+0x216>
    367a:	68e0      	ldr	r0, [r4, #12]
    367c:	9b03      	ldr	r3, [sp, #12]
    367e:	4298      	cmp	r0, r3
    3680:	bfb8      	it	lt
    3682:	4618      	movlt	r0, r3
    3684:	e793      	b.n	35ae <_printf_i+0x13e>
    3686:	2301      	movs	r3, #1
    3688:	464a      	mov	r2, r9
    368a:	4639      	mov	r1, r7
    368c:	4630      	mov	r0, r6
    368e:	47c0      	blx	r8
    3690:	3001      	adds	r0, #1
    3692:	d08a      	beq.n	35aa <_printf_i+0x13a>
    3694:	3501      	adds	r5, #1
    3696:	e7eb      	b.n	3670 <_printf_i+0x200>
    3698:	2b00      	cmp	r3, #0
    369a:	d1a7      	bne.n	35ec <_printf_i+0x17c>
    369c:	780b      	ldrb	r3, [r1, #0]
    369e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    36a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    36a6:	e765      	b.n	3574 <_printf_i+0x104>
    36a8:	00004492 	.word	0x00004492
    36ac:	00004481 	.word	0x00004481

000036b0 <memchr>:
    36b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    36b4:	2a10      	cmp	r2, #16
    36b6:	db2b      	blt.n	3710 <memchr+0x60>
    36b8:	f010 0f07 	tst.w	r0, #7
    36bc:	d008      	beq.n	36d0 <memchr+0x20>
    36be:	f810 3b01 	ldrb.w	r3, [r0], #1
    36c2:	3a01      	subs	r2, #1
    36c4:	428b      	cmp	r3, r1
    36c6:	d02d      	beq.n	3724 <memchr+0x74>
    36c8:	f010 0f07 	tst.w	r0, #7
    36cc:	b342      	cbz	r2, 3720 <memchr+0x70>
    36ce:	d1f6      	bne.n	36be <memchr+0xe>
    36d0:	b4f0      	push	{r4, r5, r6, r7}
    36d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    36d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    36da:	f022 0407 	bic.w	r4, r2, #7
    36de:	f07f 0700 	mvns.w	r7, #0
    36e2:	2300      	movs	r3, #0
    36e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    36e8:	3c08      	subs	r4, #8
    36ea:	ea85 0501 	eor.w	r5, r5, r1
    36ee:	ea86 0601 	eor.w	r6, r6, r1
    36f2:	fa85 f547 	uadd8	r5, r5, r7
    36f6:	faa3 f587 	sel	r5, r3, r7
    36fa:	fa86 f647 	uadd8	r6, r6, r7
    36fe:	faa5 f687 	sel	r6, r5, r7
    3702:	b98e      	cbnz	r6, 3728 <memchr+0x78>
    3704:	d1ee      	bne.n	36e4 <memchr+0x34>
    3706:	bcf0      	pop	{r4, r5, r6, r7}
    3708:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    370c:	f002 0207 	and.w	r2, r2, #7
    3710:	b132      	cbz	r2, 3720 <memchr+0x70>
    3712:	f810 3b01 	ldrb.w	r3, [r0], #1
    3716:	3a01      	subs	r2, #1
    3718:	ea83 0301 	eor.w	r3, r3, r1
    371c:	b113      	cbz	r3, 3724 <memchr+0x74>
    371e:	d1f8      	bne.n	3712 <memchr+0x62>
    3720:	2000      	movs	r0, #0
    3722:	4770      	bx	lr
    3724:	3801      	subs	r0, #1
    3726:	4770      	bx	lr
    3728:	2d00      	cmp	r5, #0
    372a:	bf06      	itte	eq
    372c:	4635      	moveq	r5, r6
    372e:	3803      	subeq	r0, #3
    3730:	3807      	subne	r0, #7
    3732:	f015 0f01 	tst.w	r5, #1
    3736:	d107      	bne.n	3748 <memchr+0x98>
    3738:	3001      	adds	r0, #1
    373a:	f415 7f80 	tst.w	r5, #256	; 0x100
    373e:	bf02      	ittt	eq
    3740:	3001      	addeq	r0, #1
    3742:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3746:	3001      	addeq	r0, #1
    3748:	bcf0      	pop	{r4, r5, r6, r7}
    374a:	3801      	subs	r0, #1
    374c:	4770      	bx	lr
    374e:	bf00      	nop

00003750 <_realloc_r>:
    3750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3752:	4607      	mov	r7, r0
    3754:	4614      	mov	r4, r2
    3756:	460e      	mov	r6, r1
    3758:	b921      	cbnz	r1, 3764 <_realloc_r+0x14>
    375a:	4611      	mov	r1, r2
    375c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3760:	f7ff bc1c 	b.w	2f9c <_malloc_r>
    3764:	b922      	cbnz	r2, 3770 <_realloc_r+0x20>
    3766:	f7ff fbcb 	bl	2f00 <_free_r>
    376a:	4625      	mov	r5, r4
    376c:	4628      	mov	r0, r5
    376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3770:	f000 f814 	bl	379c <_malloc_usable_size_r>
    3774:	4284      	cmp	r4, r0
    3776:	d90f      	bls.n	3798 <_realloc_r+0x48>
    3778:	4621      	mov	r1, r4
    377a:	4638      	mov	r0, r7
    377c:	f7ff fc0e 	bl	2f9c <_malloc_r>
    3780:	4605      	mov	r5, r0
    3782:	2800      	cmp	r0, #0
    3784:	d0f2      	beq.n	376c <_realloc_r+0x1c>
    3786:	4631      	mov	r1, r6
    3788:	4622      	mov	r2, r4
    378a:	f7ff fb8b 	bl	2ea4 <memcpy>
    378e:	4631      	mov	r1, r6
    3790:	4638      	mov	r0, r7
    3792:	f7ff fbb5 	bl	2f00 <_free_r>
    3796:	e7e9      	b.n	376c <_realloc_r+0x1c>
    3798:	4635      	mov	r5, r6
    379a:	e7e7      	b.n	376c <_realloc_r+0x1c>

0000379c <_malloc_usable_size_r>:
    379c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    37a0:	2800      	cmp	r0, #0
    37a2:	f1a0 0004 	sub.w	r0, r0, #4
    37a6:	bfbc      	itt	lt
    37a8:	580b      	ldrlt	r3, [r1, r0]
    37aa:	18c0      	addlt	r0, r0, r3
    37ac:	4770      	bx	lr
    37ae:	0000      	movs	r0, r0
    37b0:	2a2a2a2a 	.word	0x2a2a2a2a
    37b4:	2a2a2a2a 	.word	0x2a2a2a2a
    37b8:	2a2a2a2a 	.word	0x2a2a2a2a
    37bc:	2a2a2a2a 	.word	0x2a2a2a2a
    37c0:	2a2a2a2a 	.word	0x2a2a2a2a
    37c4:	2a2a2a2a 	.word	0x2a2a2a2a
    37c8:	2a2a2a2a 	.word	0x2a2a2a2a
    37cc:	2a2a2a2a 	.word	0x2a2a2a2a
    37d0:	2a2a2a2a 	.word	0x2a2a2a2a
    37d4:	2a2a2a2a 	.word	0x2a2a2a2a
    37d8:	2a2a2a2a 	.word	0x2a2a2a2a
    37dc:	2a2a2a2a 	.word	0x2a2a2a2a
    37e0:	2a2a2a2a 	.word	0x2a2a2a2a
    37e4:	2a2a2a2a 	.word	0x2a2a2a2a
    37e8:	00002a2a 	.word	0x00002a2a
    37ec:	2a2a2a2a 	.word	0x2a2a2a2a
    37f0:	2a2a2a2a 	.word	0x2a2a2a2a
    37f4:	2a2a2a2a 	.word	0x2a2a2a2a
    37f8:	532a2a2a 	.word	0x532a2a2a
    37fc:	4b434154 	.word	0x4b434154
    3800:	45564f20 	.word	0x45564f20
    3804:	4f4c4652 	.word	0x4f4c4652
    3808:	45442057 	.word	0x45442057
    380c:	54434554 	.word	0x54434554
    3810:	2a2a4445 	.word	0x2a2a4445
    3814:	2a2a2a2a 	.word	0x2a2a2a2a
    3818:	2a2a2a2a 	.word	0x2a2a2a2a
    381c:	2a2a2a2a 	.word	0x2a2a2a2a
    3820:	2a2a2a2a 	.word	0x2a2a2a2a
    3824:	00002a2a 	.word	0x00002a2a
    3828:	6b736154 	.word	0x6b736154
    382c:	6e614820 	.word	0x6e614820
    3830:	20656c64 	.word	0x20656c64
    3834:	6425202d 	.word	0x6425202d
    3838:	00000a0d 	.word	0x00000a0d
    383c:	2a2a2a2a 	.word	0x2a2a2a2a
    3840:	2a2a2a2a 	.word	0x2a2a2a2a
    3844:	2a2a2a2a 	.word	0x2a2a2a2a
    3848:	4d2a2a2a 	.word	0x4d2a2a2a
    384c:	4f4c4c41 	.word	0x4f4c4c41
    3850:	41462043 	.word	0x41462043
    3854:	52554c49 	.word	0x52554c49
    3858:	45442045 	.word	0x45442045
    385c:	54434554 	.word	0x54434554
    3860:	2a2a4445 	.word	0x2a2a4445
    3864:	2a2a2a2a 	.word	0x2a2a2a2a
    3868:	2a2a2a2a 	.word	0x2a2a2a2a
    386c:	2a2a2a2a 	.word	0x2a2a2a2a
    3870:	2a2a2a2a 	.word	0x2a2a2a2a
    3874:	00002a2a 	.word	0x00002a2a
    3878:	41204e49 	.word	0x41204e49
    387c:	5f304344 	.word	0x5f304344
    3880:	61682030 	.word	0x61682030
    3884:	656c646e 	.word	0x656c646e
    3888:	00000072 	.word	0x00000072
    388c:	41204e49 	.word	0x41204e49
    3890:	5f304344 	.word	0x5f304344
    3894:	61682031 	.word	0x61682031
    3898:	656c646e 	.word	0x656c646e
    389c:	00000072 	.word	0x00000072

000038a0 <ModemCmdData>:
    38a0:	00000200 0000411c 00000000 0000060d     .....A..........
    38b0:	00000000 00000001 00003d80 00020003     .........=......
    38c0:	0000060d 00000009 00000002 00003d84     .............=..
    38d0:	000f0008 0000060d 0000001b 00000003     ................
    38e0:	00003d90 000e000c 0000060d 0000001e     .=..............
    38f0:	00000004 00003da0 000c0008 0000060d     .....=..........
    3900:	00000018 00000005 00003dac 00080005     .........=......
    3910:	0000060d 00000011 00000006 00003db8     .............=..
    3920:	000b000a 0000060d 00000019 00000007     ................
    3930:	00003dc4 0015000a 0000060d 00000023     .=..........#...
    3940:	00000008 00003dd0 00020005 0000060d     .....=..........
    3950:	0000000b 00000109 00003dd8 003d0027     .........=..'.=.
    3960:	0000060d 00000068 0000010a 00003e00     ....h........>..
    3970:	00020012 0000060d 00000018 0000010b     ................
    3980:	00003e14 00020012 0000060d 00000018     .>..............
    3990:	0000010c 00003e28 00020012 0000060d     ....(>..........
    39a0:	00000018 0000010d 00003e3c 00020012     ........<>......
    39b0:	0000060d 00000018 0000010e 00003e50     ............P>..
    39c0:	00020012 0000060d 00000018 0000010f     ................
    39d0:	00003e64 00020012 0000060d 00000018     d>..............
    39e0:	00000110 00003e78 00020012 0000060d     ....x>..........
    39f0:	00000018 00000111 00003e8c 00020012     .........>......
    3a00:	0000060d 00000018 00000112 00003ea0     .............>..
    3a10:	00020012 0000060d 00000018 00000113     ................
    3a20:	00003eb4 00020013 0000060d 00000019     .>..............
    3a30:	00000114 00003ec8 0002001f 0000060d     .....>..........
    3a40:	00000025 00000115 00003ee8 00020023     %........>..#...
    3a50:	0000060d 00000029 00000116 00003f0c     ....)........?..
    3a60:	0002001a 0000060d 00000020 00000117     ........ .......
    3a70:	20000000 00070011 0000060d 0000001c     ... ............
    3a80:	00000118 200000fc 00bf003a 0000060d     ....... :.......
    3a90:	000000fd 00000119 00003f28 00020010     ........(?......
    3aa0:	0000060d 00000016 0000011a 00003f3c     ............<?..
    3ab0:	00020010 0000060d 00000016 0000011b     ................
    3ac0:	00003f50 0002000b 0000060d 00000011     P?..............
	...
    3d50:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    3d60:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    3d70:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    3d80:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    3d90:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    3da0:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    3db0:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    3dc0:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    3dd0:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    3de0:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    3df0:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    3e00:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    3e10:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    3e20:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    3e30:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    3e40:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    3e50:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    3e60:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    3e70:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    3e80:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    3e90:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    3ea0:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    3eb0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    3ec0:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    3ed0:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    3ee0:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    3ef0:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    3f00:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    3f10:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    3f20:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    3f30:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    3f40:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    3f50:	432b5441 54544147 000d303d 6c696146     AT+CGATT=0..Fail
    3f60:	74206465 6573206f 7420746e 44206568     ed to sent the D
    3f70:	20676169 61746164 206f7420 54207854     iag data to Tx T
    3f80:	006b7361 69726556 6e697966 68742067     ask.Verifying th
    3f90:	41552065 4c205452 206b6e69 74617473     e UART Link stat
    3fa0:	77207375 20687469 65646f4d 0000006d     us with Modem...
    3fb0:	63637553 46737365 796c6c75 72657620     SuccessFully ver
    3fc0:	65696669 68742064 41552065 4c205452     ified the UART L
    3fd0:	206b6e69 77746562 206e6565 444d4153     ink between SAMD
    3fe0:	43203135 72746e6f 656c6c6f 20262072     51 Controller & 
    3ff0:	65646f4d 0000006d 72746552 65766569     Modem...Retrieve
    4000:	68742064 6f4d2065 206d6564 49454d49     d the Modem IMEI
    4010:	6d754e20 00726562 72746552 65766569      Number.Retrieve
    4020:	68742064 6f4d2065 206d6564 69726573     d the Modem seri
    4030:	4e206c61 65626d75 00000072 6c696146     al Number...Fail
    4040:	74206465 6f70206f 74207473 63206568     ed to post the c
    4050:	656e6e6f 6f697463 6552206e 6e6f7073     onnection Respon
    4060:	74206573 7551206f 00657565 6f727245     se to Queue.Erro
    4070:	203a2072 6d6d6f43 20646e61 70736552     r : Command Resp
    4080:	65736e6f 65755120 69206575 6f6e2073     onse Queue is no
    4090:	6d652074 00797470 4f525245 52203a52     t empty.ERROR: R
    40a0:	69656365 20646576 65206e61 7974706d     eceived an empty
    40b0:	73657220 736e6f70 74732065 676e6972      response string
    40c0:	206e6920 6d6d6f63 20646e61 70736572      in command resp
    40d0:	65736e6f 6e616820 72656c64 00000000     onse handler....
    40e0:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    40f0:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    4100:	0000000a 2d207325 20642520 00000a0d     ....%s - %d ....
    4110:	2d207325 6d642520 0a0d2056 00000000     %s - %dmV ......
    4120:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    4130:	775f6c61 682e7464 00000000 2a232a23     al_wdt.h....#*#*
    4140:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    4150:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    4160:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    4170:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    4180:	2a232a23 00000000 78656e55 74636570     #*#*....Unexpect
    4190:	49206465 7265746e 74707572 70614820     ed Interrupt Hap
    41a0:	656e6570 2e2e2e64 74696157 20676e69     pened...Waiting 
    41b0:	20726f66 20656874 63746177 6f642068     for the watch do
    41c0:	69742067 756f656d 00000074 682f2e2e     g timeout...../h
    41d0:	732f6c61 682f6372 615f6c61 735f6364     al/src/hal_adc_s
    41e0:	2e636e79 00000063 682f2e2e 752f6c61     ync.c...../hal/u
    41f0:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
    4200:	62676e69 65666675 00632e72              ingbuffer.c.

0000420c <_adcs>:
    420c:	00c00000 00030009 02481980 00000000     ..........H.....
    421c:	00000000 00010001 00000000 00000000     ................
	...
    4238:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    4248:	632e6364 00000000                       dc.c....

00004250 <_cfgs>:
	...
    4350:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4360:	43000000 43000400                       ...C...C

00004368 <_usarts>:
    4368:	00000003 40200004 00030000 00700002     ...... @......p.
    4378:	0000f62b 00000000 00000004 40300184     +.............0@
    4388:	00030300 00700002 0000ff2e 00000000     ......p.........
    4398:	00000005 40300004 00030000 00700002     ......0@......p.
    43a8:	0000f62b 00000000                       +.......

000043b0 <_i2cms>:
	...

000043c8 <sercomspi_regs>:
	...
    43dc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    43ec:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    43fc:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    440c:	00000000                                ....

00004410 <__sf_fake_stderr>:
	...

00004430 <__sf_fake_stdin>:
	...

00004450 <__sf_fake_stdout>:
	...
    4470:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4480:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4490:	31300046 35343332 39383736 64636261     F.0123456789abcd
    44a0:	00006665                                ef..

000044a4 <_init>:
    44a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44a6:	bf00      	nop
    44a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44aa:	bc08      	pop	{r3}
    44ac:	469e      	mov	lr, r3
    44ae:	4770      	bx	lr

000044b0 <__init_array_start>:
    44b0:	00000289 	.word	0x00000289

000044b4 <_fini>:
    44b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44b6:	bf00      	nop
    44b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44ba:	bc08      	pop	{r3}
    44bc:	469e      	mov	lr, r3
    44be:	4770      	bx	lr

000044c0 <__fini_array_start>:
    44c0:	00000265 	.word	0x00000265
