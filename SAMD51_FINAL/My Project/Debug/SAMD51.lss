
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f3c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  00006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003054  20000190  000070d0  00020190  2**4
                  ALLOC
  5 .stack        00010004  200031e4  0000a124  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   00059855  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000090ae  00000000  00000000  00079a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a735  00000000  00000000  00082b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b50  00000000  00000000  0009d24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002188  00000000  00000000  0009ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001a84a  00000000  00000000  000a0f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cd37  00000000  00000000  000bb76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001078a1  00000000  00000000  000e84a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000491c  00000000  00000000  001efd48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 31 01 20 e1 10 00 00 dd 10 00 00 dd 10 00 00     .1. ............
      10:	dd 10 00 00 dd 10 00 00 dd 10 00 00 00 00 00 00     ................
	...
      2c:	71 35 00 00 dd 10 00 00 00 00 00 00 11 36 00 00     q5...........6..
      3c:	75 36 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     u6..............
      4c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      5c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      6c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      7c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      8c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      9c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      ac:	dd 10 00 00 dd 10 00 00 69 24 00 00 7d 24 00 00     ........i$..}$..
      bc:	f9 21 00 00 05 22 00 00 11 22 00 00 1d 22 00 00     .!..."..."..."..
      cc:	29 22 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     )"..............
      dc:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
      ec:	dd 10 00 00 00 00 00 00 79 25 00 00 dd 10 00 00     ........y%......
      fc:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     10c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     11c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 65 07 00 00     ............e...
     12c:	71 07 00 00 7d 07 00 00 dd 10 00 00 dd 10 00 00     q...}...........
     13c:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     14c:	dd 10 00 00 c5 0f 00 00 dd 10 00 00 00 00 00 00     ................
	...
     180:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     190:	00 00 00 00 09 2b 00 00 dd 10 00 00 dd 10 00 00     .....+..........
     1a0:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     1b0:	1d 2b 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     .+..............
     1c0:	dd 10 00 00 31 2b 00 00 dd 10 00 00 dd 10 00 00     ....1+..........
     1d0:	dd 10 00 00 45 2b 00 00 dd 10 00 00 dd 10 00 00     ....E+..........
     1e0:	59 2b 00 00 dd 10 00 00 dd 10 00 00 4d 30 00 00     Y+..........M0..
     1f0:	61 30 00 00 75 30 00 00 89 30 00 00 9d 30 00 00     a0..u0...0...0..
     200:	b1 30 00 00 00 00 00 00 00 00 00 00 dd 10 00 00     .0..............
     210:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     220:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     230:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     240:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     250:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00006f3c 	.word	0x00006f3c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00006f3c 	.word	0x00006f3c
     2c4:	20000194 	.word	0x20000194
     2c8:	00006f3c 	.word	0x00006f3c
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	4606      	mov	r6, r0
     2d6:	460f      	mov	r7, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     2d8:	2264      	movs	r2, #100	; 0x64
     2da:	2100      	movs	r1, #0
     2dc:	a801      	add	r0, sp, #4
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e0:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e2:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e4:	4628      	mov	r0, r5
     2e6:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2ea:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ec:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ee:	4628      	mov	r0, r5
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f2:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f4:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer," Task Handle - %d ### Task Name - %s",xTask,pcTaskName);
     2f6:	463b      	mov	r3, r7
     2f8:	4632      	mov	r2, r6
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	a801      	add	r0, sp, #4
     2fe:	4c0b      	ldr	r4, [pc, #44]	; (32c <vApplicationStackOverflowHook+0x5c>)
     300:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     302:	a801      	add	r0, sp, #4
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <vApplicationStackOverflowHook+0x60>)
     306:	4798      	blx	r3
     308:	b281      	uxth	r1, r0
     30a:	a801      	add	r0, sp, #4
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <vApplicationStackOverflowHook+0x64>)
     30e:	4798      	blx	r3
     310:	e7fe      	b.n	310 <vApplicationStackOverflowHook+0x40>
     312:	bf00      	nop
     314:	00005229 	.word	0x00005229
     318:	00005b40 	.word	0x00005b40
     31c:	00000f7d 	.word	0x00000f7d
     320:	00005b7c 	.word	0x00005b7c
     324:	00006480 	.word	0x00006480
     328:	00005bb8 	.word	0x00005bb8
     32c:	000053b1 	.word	0x000053b1
     330:	00005409 	.word	0x00005409
     334:	00000f39 	.word	0x00000f39

00000338 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(10000UL);
	xLastWakeTime = xTaskGetTickCount();
     33c:	4b06      	ldr	r3, [pc, #24]	; (358 <DispatchTask+0x20>)
     33e:	4798      	blx	r3
     340:	9001      	str	r0, [sp, #4]

	while(1)
	{
		DEBUG_PRINT("Running Dispatch Task successfully");
     342:	4e06      	ldr	r6, [pc, #24]	; (35c <DispatchTask+0x24>)
     344:	4d06      	ldr	r5, [pc, #24]	; (360 <DispatchTask+0x28>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     346:	4c07      	ldr	r4, [pc, #28]	; (364 <DispatchTask+0x2c>)
		DEBUG_PRINT("Running Dispatch Task successfully");
     348:	4630      	mov	r0, r6
     34a:	47a8      	blx	r5
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     34c:	f242 7110 	movw	r1, #10000	; 0x2710
     350:	a801      	add	r0, sp, #4
     352:	47a0      	blx	r4
     354:	e7f8      	b.n	348 <DispatchTask+0x10>
     356:	bf00      	nop
     358:	000045c5 	.word	0x000045c5
     35c:	00005be0 	.word	0x00005be0
     360:	00000f7d 	.word	0x00000f7d
     364:	00004805 	.word	0x00004805

00000368 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     368:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     36a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     36e:	460d      	mov	r5, r1
     370:	4c04      	ldr	r4, [pc, #16]	; (384 <getModemCommandData+0x1c>)
     372:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     37a:	6823      	ldr	r3, [r4, #0]
     37c:	602b      	str	r3, [r5, #0]
}
     37e:	bc30      	pop	{r4, r5}
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	00005c04 	.word	0x00005c04

00000388 <mdmParser_SetKhttpHeaderString>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetKhttpHeaderString(uint8_t* sessionID)
{
     388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (*sessionID)
     38a:	7803      	ldrb	r3, [r0, #0]
     38c:	3b31      	subs	r3, #49	; 0x31
     38e:	2b07      	cmp	r3, #7
     390:	d86d      	bhi.n	46e <mdmParser_SetKhttpHeaderString+0xe6>
     392:	e8df f003 	tbb	[pc, r3]
     396:	2d04      	.short	0x2d04
     398:	51483f36 	.word	0x51483f36
     39c:	635a      	.short	0x635a
	{
		case 49:
		{
			kHttpHeaderString[15] = '1';
     39e:	4b36      	ldr	r3, [pc, #216]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     3a0:	2231      	movs	r2, #49	; 0x31
     3a2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '1';
     3a4:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 1");
     3a8:	4834      	ldr	r0, [pc, #208]	; (47c <mdmParser_SetKhttpHeaderString+0xf4>)
     3aa:	4b35      	ldr	r3, [pc, #212]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     3ac:	4798      	blx	r3
			DEBUG_PRINT("Session ID value exceeds the max value");
		}
		break;
	}

	DEBUG_PRINT("KHTTP HEADER String is ");
     3ae:	4835      	ldr	r0, [pc, #212]	; (484 <mdmParser_SetKhttpHeaderString+0xfc>)
     3b0:	4b33      	ldr	r3, [pc, #204]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     3b2:	4798      	blx	r3

	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     3b4:	4c34      	ldr	r4, [pc, #208]	; (488 <mdmParser_SetKhttpHeaderString+0x100>)
     3b6:	220f      	movs	r2, #15
     3b8:	4934      	ldr	r1, [pc, #208]	; (48c <mdmParser_SetKhttpHeaderString+0x104>)
     3ba:	4620      	mov	r0, r4
     3bc:	4b34      	ldr	r3, [pc, #208]	; (490 <mdmParser_SetKhttpHeaderString+0x108>)
     3be:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     3c0:	4620      	mov	r0, r4
     3c2:	4b34      	ldr	r3, [pc, #208]	; (494 <mdmParser_SetKhttpHeaderString+0x10c>)
     3c4:	4798      	blx	r3
     3c6:	4d34      	ldr	r5, [pc, #208]	; (498 <mdmParser_SetKhttpHeaderString+0x110>)
     3c8:	4404      	add	r4, r0
     3ca:	f105 0720 	add.w	r7, r5, #32
     3ce:	462e      	mov	r6, r5
     3d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     3d2:	6020      	str	r0, [r4, #0]
     3d4:	6061      	str	r1, [r4, #4]
     3d6:	60a2      	str	r2, [r4, #8]
     3d8:	60e3      	str	r3, [r4, #12]
     3da:	4635      	mov	r5, r6
     3dc:	3410      	adds	r4, #16
     3de:	42be      	cmp	r6, r7
     3e0:	d1f5      	bne.n	3ce <mdmParser_SetKhttpHeaderString+0x46>
     3e2:	cd07      	ldmia	r5!, {r0, r1, r2}
     3e4:	6020      	str	r0, [r4, #0]
     3e6:	6061      	str	r1, [r4, #4]
     3e8:	60a2      	str	r2, [r4, #8]
     3ea:	782b      	ldrb	r3, [r5, #0]
     3ec:	7323      	strb	r3, [r4, #12]
     3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kHttpHeaderString[15] = '2';
     3f0:	4b21      	ldr	r3, [pc, #132]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     3f2:	2232      	movs	r2, #50	; 0x32
     3f4:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '2';
     3f6:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 2");
     3fa:	4828      	ldr	r0, [pc, #160]	; (49c <mdmParser_SetKhttpHeaderString+0x114>)
     3fc:	4b20      	ldr	r3, [pc, #128]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     3fe:	4798      	blx	r3
		break;
     400:	e7d5      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '3';
     402:	4b1d      	ldr	r3, [pc, #116]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     404:	2233      	movs	r2, #51	; 0x33
     406:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '3';
     408:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 3");
     40c:	4824      	ldr	r0, [pc, #144]	; (4a0 <mdmParser_SetKhttpHeaderString+0x118>)
     40e:	4b1c      	ldr	r3, [pc, #112]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     410:	4798      	blx	r3
		break;
     412:	e7cc      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '4';
     414:	4b18      	ldr	r3, [pc, #96]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     416:	2234      	movs	r2, #52	; 0x34
     418:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '4';
     41a:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 4");
     41e:	4821      	ldr	r0, [pc, #132]	; (4a4 <mdmParser_SetKhttpHeaderString+0x11c>)
     420:	4b17      	ldr	r3, [pc, #92]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     422:	4798      	blx	r3
		break;
     424:	e7c3      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '5';
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     428:	2235      	movs	r2, #53	; 0x35
     42a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '5';
     42c:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 5");
     430:	481d      	ldr	r0, [pc, #116]	; (4a8 <mdmParser_SetKhttpHeaderString+0x120>)
     432:	4b13      	ldr	r3, [pc, #76]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     434:	4798      	blx	r3
		break;
     436:	e7ba      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '6';
     438:	4b0f      	ldr	r3, [pc, #60]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     43a:	2236      	movs	r2, #54	; 0x36
     43c:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '6';
     43e:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 6");
     442:	481a      	ldr	r0, [pc, #104]	; (4ac <mdmParser_SetKhttpHeaderString+0x124>)
     444:	4b0e      	ldr	r3, [pc, #56]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     446:	4798      	blx	r3
		break;
     448:	e7b1      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '7';
     44a:	4b0b      	ldr	r3, [pc, #44]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     44c:	2237      	movs	r2, #55	; 0x37
     44e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '7';
     450:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 7");
     454:	4816      	ldr	r0, [pc, #88]	; (4b0 <mdmParser_SetKhttpHeaderString+0x128>)
     456:	4b0a      	ldr	r3, [pc, #40]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     458:	4798      	blx	r3
		break;
     45a:	e7a8      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '8';
     45c:	4b06      	ldr	r3, [pc, #24]	; (478 <mdmParser_SetKhttpHeaderString+0xf0>)
     45e:	2238      	movs	r2, #56	; 0x38
     460:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '8';
     462:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 8");
     466:	4813      	ldr	r0, [pc, #76]	; (4b4 <mdmParser_SetKhttpHeaderString+0x12c>)
     468:	4b05      	ldr	r3, [pc, #20]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     46a:	4798      	blx	r3
		break;
     46c:	e79f      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
			DEBUG_PRINT("Session ID value exceeds the max value");
     46e:	4812      	ldr	r0, [pc, #72]	; (4b8 <mdmParser_SetKhttpHeaderString+0x130>)
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <mdmParser_SetKhttpHeaderString+0xf8>)
     472:	4798      	blx	r3
		break;
     474:	e79b      	b.n	3ae <mdmParser_SetKhttpHeaderString+0x26>
     476:	bf00      	nop
     478:	20000000 	.word	0x20000000
     47c:	000060b4 	.word	0x000060b4
     480:	00000f7d 	.word	0x00000f7d
     484:	0000615c 	.word	0x0000615c
     488:	200001ac 	.word	0x200001ac
     48c:	20000014 	.word	0x20000014
     490:	0000543d 	.word	0x0000543d
     494:	00005409 	.word	0x00005409
     498:	00006174 	.word	0x00006174
     49c:	000060c4 	.word	0x000060c4
     4a0:	000060d4 	.word	0x000060d4
     4a4:	000060e4 	.word	0x000060e4
     4a8:	000060f4 	.word	0x000060f4
     4ac:	00006104 	.word	0x00006104
     4b0:	00006114 	.word	0x00006114
     4b4:	00006124 	.word	0x00006124
     4b8:	00006134 	.word	0x00006134

000004bc <mdmParser_SendCommandToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
void mdmParser_SendCommandToModem(AT_CMD_TYPE atCmd)
{
     4bc:	b510      	push	{r4, lr}
     4be:	b086      	sub	sp, #24
     4c0:	4604      	mov	r4, r0
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     4c2:	a901      	add	r1, sp, #4
     4c4:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <mdmParser_SendCommandToModem+0x3c>)
     4c6:	4798      	blx	r3

	if(atCmd == CMD_AT_KHTTP_GET)
     4c8:	2c17      	cmp	r4, #23
     4ca:	d010      	beq.n	4ee <mdmParser_SendCommandToModem+0x32>
	{
		SerialDebugPrint("\r\n",2);
	}
	mdmCtrlr_FlushRxBuffer();
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <mdmParser_SendCommandToModem+0x40>)
     4ce:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     4d0:	f89d 100c 	ldrb.w	r1, [sp, #12]
     4d4:	9802      	ldr	r0, [sp, #8]
     4d6:	4b0a      	ldr	r3, [pc, #40]	; (500 <mdmParser_SendCommandToModem+0x44>)
     4d8:	4798      	blx	r3
	lastSendATCommand = atCmd;
     4da:	4b0a      	ldr	r3, [pc, #40]	; (504 <mdmParser_SendCommandToModem+0x48>)
     4dc:	701c      	strb	r4, [r3, #0]
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4de:	2200      	movs	r2, #0
     4e0:	705a      	strb	r2, [r3, #1]
	delay_ms(1000);
     4e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4e6:	4b08      	ldr	r3, [pc, #32]	; (508 <mdmParser_SendCommandToModem+0x4c>)
     4e8:	4798      	blx	r3
}
     4ea:	b006      	add	sp, #24
     4ec:	bd10      	pop	{r4, pc}
		SerialDebugPrint("\r\n",2);
     4ee:	2102      	movs	r1, #2
     4f0:	4806      	ldr	r0, [pc, #24]	; (50c <mdmParser_SendCommandToModem+0x50>)
     4f2:	4b07      	ldr	r3, [pc, #28]	; (510 <mdmParser_SendCommandToModem+0x54>)
     4f4:	4798      	blx	r3
     4f6:	e7e9      	b.n	4cc <mdmParser_SendCommandToModem+0x10>
     4f8:	00000369 	.word	0x00000369
     4fc:	0000082d 	.word	0x0000082d
     500:	000007b1 	.word	0x000007b1
     504:	20000023 	.word	0x20000023
     508:	00001a1d 	.word	0x00001a1d
     50c:	00006480 	.word	0x00006480
     510:	00000f39 	.word	0x00000f39

00000514 <mdmParser_ProcessModemResponse>:
{
     514:	b510      	push	{r4, lr}
     516:	b086      	sub	sp, #24
	getModemCommandData(lastSendATCommand, &cmdData);
     518:	4c16      	ldr	r4, [pc, #88]	; (574 <mdmParser_ProcessModemResponse+0x60>)
     51a:	a901      	add	r1, sp, #4
     51c:	7820      	ldrb	r0, [r4, #0]
     51e:	4b16      	ldr	r3, [pc, #88]	; (578 <mdmParser_ProcessModemResponse+0x64>)
     520:	4798      	blx	r3
	if(lastSendATCommand != CMD_AT_MAX)
     522:	7820      	ldrb	r0, [r4, #0]
     524:	281b      	cmp	r0, #27
     526:	d00b      	beq.n	540 <mdmParser_ProcessModemResponse+0x2c>
		if(false != mdmParser_solicitedCmdParser(lastSendATCommand,responseDataBuffer))
     528:	4914      	ldr	r1, [pc, #80]	; (57c <mdmParser_ProcessModemResponse+0x68>)
     52a:	4b15      	ldr	r3, [pc, #84]	; (580 <mdmParser_ProcessModemResponse+0x6c>)
     52c:	4798      	blx	r3
     52e:	b188      	cbz	r0, 554 <mdmParser_ProcessModemResponse+0x40>
			if(lastSendATCommand == cmdData.AtCmd)
     530:	f89d 2004 	ldrb.w	r2, [sp, #4]
     534:	7823      	ldrb	r3, [r4, #0]
     536:	429a      	cmp	r2, r3
     538:	d004      	beq.n	544 <mdmParser_ProcessModemResponse+0x30>
		lastSendATCommand = CMD_AT_MAX;
     53a:	221b      	movs	r2, #27
     53c:	4b0d      	ldr	r3, [pc, #52]	; (574 <mdmParser_ProcessModemResponse+0x60>)
     53e:	701a      	strb	r2, [r3, #0]
}
     540:	b006      	add	sp, #24
     542:	bd10      	pop	{r4, pc}
				cmdData.respHandler(responseDataBuffer,cmdData.validDataCnt);
     544:	f89d 100e 	ldrb.w	r1, [sp, #14]
     548:	480c      	ldr	r0, [pc, #48]	; (57c <mdmParser_ProcessModemResponse+0x68>)
     54a:	9b04      	ldr	r3, [sp, #16]
     54c:	4798      	blx	r3
	isPrevCmdRespProcessed = status;
     54e:	2201      	movs	r2, #1
     550:	7062      	strb	r2, [r4, #1]
     552:	e7f2      	b.n	53a <mdmParser_ProcessModemResponse+0x26>
			DEBUG_PRINT("Expected modem response is not received");
     554:	480b      	ldr	r0, [pc, #44]	; (584 <mdmParser_ProcessModemResponse+0x70>)
     556:	4b0c      	ldr	r3, [pc, #48]	; (588 <mdmParser_ProcessModemResponse+0x74>)
     558:	4798      	blx	r3
			if (lastSendATCommand == CMD_AT_KHTTP_GET)
     55a:	4b06      	ldr	r3, [pc, #24]	; (574 <mdmParser_ProcessModemResponse+0x60>)
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	2b17      	cmp	r3, #23
     560:	d1eb      	bne.n	53a <mdmParser_ProcessModemResponse+0x26>
				DEBUG_PRINT("No Response from Web Sever....Posting data to sever is failed");
     562:	480a      	ldr	r0, [pc, #40]	; (58c <mdmParser_ProcessModemResponse+0x78>)
     564:	4c08      	ldr	r4, [pc, #32]	; (588 <mdmParser_ProcessModemResponse+0x74>)
     566:	47a0      	blx	r4
				DEBUG_PRINT("Performing the Error Recovery Procedures..");
     568:	4809      	ldr	r0, [pc, #36]	; (590 <mdmParser_ProcessModemResponse+0x7c>)
     56a:	47a0      	blx	r4
				mdmParser_PerformErrorRecovery();
     56c:	4b09      	ldr	r3, [pc, #36]	; (594 <mdmParser_ProcessModemResponse+0x80>)
     56e:	4798      	blx	r3
     570:	e7e3      	b.n	53a <mdmParser_ProcessModemResponse+0x26>
     572:	bf00      	nop
     574:	20000023 	.word	0x20000023
     578:	00000369 	.word	0x00000369
     57c:	200001e8 	.word	0x200001e8
     580:	000005f9 	.word	0x000005f9
     584:	00006380 	.word	0x00006380
     588:	00000f7d 	.word	0x00000f7d
     58c:	000063a8 	.word	0x000063a8
     590:	000063e8 	.word	0x000063e8
     594:	00000599 	.word	0x00000599

00000598 <mdmParser_PerformErrorRecovery>:
{
     598:	b570      	push	{r4, r5, r6, lr}
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     59a:	2009      	movs	r0, #9
     59c:	4e0f      	ldr	r6, [pc, #60]	; (5dc <mdmParser_PerformErrorRecovery+0x44>)
     59e:	47b0      	blx	r6
	delay_ms(1000);
     5a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5a4:	4c0e      	ldr	r4, [pc, #56]	; (5e0 <mdmParser_PerformErrorRecovery+0x48>)
     5a6:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     5a8:	4d0e      	ldr	r5, [pc, #56]	; (5e4 <mdmParser_PerformErrorRecovery+0x4c>)
     5aa:	47a8      	blx	r5
	mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     5ac:	2019      	movs	r0, #25
     5ae:	47b0      	blx	r6
	delay_ms(1000);
     5b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5b4:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     5b6:	47a8      	blx	r5
	mdmParser_SendCommandToModem(CMD_AT_CGATT);
     5b8:	201a      	movs	r0, #26
     5ba:	47b0      	blx	r6
	delay_ms(1000);
     5bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5c0:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     5c2:	47a8      	blx	r5
	delay_ms(3000);
     5c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
     5c8:	47a0      	blx	r4
	mdmParam_InitiateConnection();
     5ca:	4b07      	ldr	r3, [pc, #28]	; (5e8 <mdmParser_PerformErrorRecovery+0x50>)
     5cc:	4798      	blx	r3
	DEBUG_PRINT("Closed and Reopened the session......");
     5ce:	4807      	ldr	r0, [pc, #28]	; (5ec <mdmParser_PerformErrorRecovery+0x54>)
     5d0:	4c07      	ldr	r4, [pc, #28]	; (5f0 <mdmParser_PerformErrorRecovery+0x58>)
     5d2:	47a0      	blx	r4
	DEBUG_PRINT("Auto recovery completed......");
     5d4:	4807      	ldr	r0, [pc, #28]	; (5f4 <mdmParser_PerformErrorRecovery+0x5c>)
     5d6:	47a0      	blx	r4
     5d8:	bd70      	pop	{r4, r5, r6, pc}
     5da:	bf00      	nop
     5dc:	000004bd 	.word	0x000004bd
     5e0:	00001a1d 	.word	0x00001a1d
     5e4:	00000515 	.word	0x00000515
     5e8:	00000901 	.word	0x00000901
     5ec:	00006414 	.word	0x00006414
     5f0:	00000f7d 	.word	0x00000f7d
     5f4:	0000643c 	.word	0x0000643c

000005f8 <mdmParser_solicitedCmdParser>:
{
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fa:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
     5fe:	4607      	mov	r7, r0
     600:	460c      	mov	r4, r1
	getModemCommandData(cmd, &cmdData);
     602:	4669      	mov	r1, sp
     604:	4b2a      	ldr	r3, [pc, #168]	; (6b0 <mdmParser_solicitedCmdParser+0xb8>)
     606:	4798      	blx	r3
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     608:	f89d 6008 	ldrb.w	r6, [sp, #8]
	readStatus = mdmCtrlr_ReadResponseFromModem(dataBuffer,cmdData.ResponseLength);
     60c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
     610:	a805      	add	r0, sp, #20
     612:	4b28      	ldr	r3, [pc, #160]	; (6b4 <mdmParser_solicitedCmdParser+0xbc>)
     614:	4798      	blx	r3
    if((false != readStatus) &&
     616:	4605      	mov	r5, r0
     618:	2800      	cmp	r0, #0
     61a:	d041      	beq.n	6a0 <mdmParser_solicitedCmdParser+0xa8>
     61c:	2f17      	cmp	r7, #23
     61e:	d01a      	beq.n	656 <mdmParser_solicitedCmdParser+0x5e>
		if(VERIFIED_EQUAL == strncmp(cmdData.AtString, dataBuffer, cmdData.CmdLength))
     620:	f89d 2008 	ldrb.w	r2, [sp, #8]
     624:	a905      	add	r1, sp, #20
     626:	9801      	ldr	r0, [sp, #4]
     628:	4b23      	ldr	r3, [pc, #140]	; (6b8 <mdmParser_solicitedCmdParser+0xc0>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d135      	bne.n	69c <mdmParser_solicitedCmdParser+0xa4>
			while(parseCnt < cmdData.validDataCnt)
     630:	f8bd 000a 	ldrh.w	r0, [sp, #10]
     634:	2800      	cmp	r0, #0
     636:	d02f      	beq.n	698 <mdmParser_solicitedCmdParser+0xa0>
     638:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     63a:	1cb1      	adds	r1, r6, #2
				response[parseCnt] = dataBuffer[dataStartIndex + parseCnt];
     63c:	b2c9      	uxtb	r1, r1
     63e:	aa05      	add	r2, sp, #20
     640:	441a      	add	r2, r3
     642:	5c52      	ldrb	r2, [r2, r1]
     644:	54e2      	strb	r2, [r4, r3]
				parseCnt++;
     646:	3301      	adds	r3, #1
     648:	b2db      	uxtb	r3, r3
			while(parseCnt < cmdData.validDataCnt)
     64a:	b29a      	uxth	r2, r3
     64c:	4282      	cmp	r2, r0
     64e:	d3f6      	bcc.n	63e <mdmParser_solicitedCmdParser+0x46>
			response[parseCnt] = '\0';
     650:	2200      	movs	r2, #0
     652:	54e2      	strb	r2, [r4, r3]
     654:	e026      	b.n	6a4 <mdmParser_solicitedCmdParser+0xac>
    	DEBUG_PRINT("Received new response from server...\r\n");
     656:	4819      	ldr	r0, [pc, #100]	; (6bc <mdmParser_solicitedCmdParser+0xc4>)
     658:	4b19      	ldr	r3, [pc, #100]	; (6c0 <mdmParser_solicitedCmdParser+0xc8>)
     65a:	4798      	blx	r3
		SerialDebugPrint(dataBuffer,cmdData.ResponseLength);
     65c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
     660:	a805      	add	r0, sp, #20
     662:	4c18      	ldr	r4, [pc, #96]	; (6c4 <mdmParser_solicitedCmdParser+0xcc>)
     664:	47a0      	blx	r4
		SerialDebugPrint("\r\n",2);
     666:	2102      	movs	r1, #2
     668:	4817      	ldr	r0, [pc, #92]	; (6c8 <mdmParser_solicitedCmdParser+0xd0>)
     66a:	47a0      	blx	r4
		delay_ms(500);
     66c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     670:	4b16      	ldr	r3, [pc, #88]	; (6cc <mdmParser_solicitedCmdParser+0xd4>)
     672:	4798      	blx	r3
		parseStatus = true;
     674:	e016      	b.n	6a4 <mdmParser_solicitedCmdParser+0xac>
    	DEBUG_PRINT("Modem Hanged. Data is not transmitted to server");
     676:	4816      	ldr	r0, [pc, #88]	; (6d0 <mdmParser_solicitedCmdParser+0xd8>)
     678:	4c11      	ldr	r4, [pc, #68]	; (6c0 <mdmParser_solicitedCmdParser+0xc8>)
     67a:	47a0      	blx	r4
    	delay_ms(500);
     67c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     680:	4b12      	ldr	r3, [pc, #72]	; (6cc <mdmParser_solicitedCmdParser+0xd4>)
     682:	4798      	blx	r3
		SerialDebugPrint("\r\n",2);
     684:	2102      	movs	r1, #2
     686:	4810      	ldr	r0, [pc, #64]	; (6c8 <mdmParser_solicitedCmdParser+0xd0>)
     688:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <mdmParser_solicitedCmdParser+0xcc>)
     68a:	4798      	blx	r3
		DEBUG_PRINT("Performing the auto recovery");
     68c:	4811      	ldr	r0, [pc, #68]	; (6d4 <mdmParser_solicitedCmdParser+0xdc>)
     68e:	47a0      	blx	r4
		mdmParser_PerformErrorRecovery();
     690:	4b11      	ldr	r3, [pc, #68]	; (6d8 <mdmParser_solicitedCmdParser+0xe0>)
     692:	4798      	blx	r3
		parseStatus = true;
     694:	2501      	movs	r5, #1
		mdmParser_PerformErrorRecovery();
     696:	e005      	b.n	6a4 <mdmParser_solicitedCmdParser+0xac>
			while(parseCnt < cmdData.validDataCnt)
     698:	2300      	movs	r3, #0
     69a:	e7d9      	b.n	650 <mdmParser_solicitedCmdParser+0x58>
			parseStatus = false;
     69c:	2500      	movs	r5, #0
     69e:	e001      	b.n	6a4 <mdmParser_solicitedCmdParser+0xac>
    else if((cmd == CMD_AT_KHTTP_GET) &&
     6a0:	2f17      	cmp	r7, #23
     6a2:	d0e8      	beq.n	676 <mdmParser_solicitedCmdParser+0x7e>
	mdmCtrlr_FlushRxBuffer();
     6a4:	4b0d      	ldr	r3, [pc, #52]	; (6dc <mdmParser_solicitedCmdParser+0xe4>)
     6a6:	4798      	blx	r3
}
     6a8:	4628      	mov	r0, r5
     6aa:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
     6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b0:	00000369 	.word	0x00000369
     6b4:	000007d9 	.word	0x000007d9
     6b8:	00005419 	.word	0x00005419
     6bc:	0000645c 	.word	0x0000645c
     6c0:	00000f7d 	.word	0x00000f7d
     6c4:	00000f39 	.word	0x00000f39
     6c8:	00006480 	.word	0x00006480
     6cc:	00001a1d 	.word	0x00001a1d
     6d0:	00006484 	.word	0x00006484
     6d4:	000064b4 	.word	0x000064b4
     6d8:	00000599 	.word	0x00000599
     6dc:	0000082d 	.word	0x0000082d

000006e0 <mdmParser_SetLastCmdProcessed>:
	isPrevCmdRespProcessed = status;
     6e0:	4b01      	ldr	r3, [pc, #4]	; (6e8 <mdmParser_SetLastCmdProcessed+0x8>)
     6e2:	7058      	strb	r0, [r3, #1]
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop
     6e8:	20000023 	.word	0x20000023

000006ec <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <mdmParser_SetLastSentAtCommand+0x8>)
     6ee:	7018      	strb	r0, [r3, #0]
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	20000023 	.word	0x20000023

000006f8 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     6f8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     6fa:	490f      	ldr	r1, [pc, #60]	; (738 <mdmCtrlr_DataCommInit+0x40>)
     6fc:	480f      	ldr	r0, [pc, #60]	; (73c <mdmCtrlr_DataCommInit+0x44>)
     6fe:	4b10      	ldr	r3, [pc, #64]	; (740 <mdmCtrlr_DataCommInit+0x48>)
     700:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     702:	b118      	cbz	r0, 70c <mdmCtrlr_DataCommInit+0x14>
		_usart_async_enable(&MODEM_DATA);
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     704:	480f      	ldr	r0, [pc, #60]	; (744 <mdmCtrlr_DataCommInit+0x4c>)
     706:	4b10      	ldr	r3, [pc, #64]	; (748 <mdmCtrlr_DataCommInit+0x50>)
     708:	4798      	blx	r3
     70a:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     70c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     710:	490e      	ldr	r1, [pc, #56]	; (74c <mdmCtrlr_DataCommInit+0x54>)
     712:	480f      	ldr	r0, [pc, #60]	; (750 <mdmCtrlr_DataCommInit+0x58>)
     714:	4b0f      	ldr	r3, [pc, #60]	; (754 <mdmCtrlr_DataCommInit+0x5c>)
     716:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     718:	2800      	cmp	r0, #0
     71a:	d1f3      	bne.n	704 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     71c:	4c07      	ldr	r4, [pc, #28]	; (73c <mdmCtrlr_DataCommInit+0x44>)
     71e:	2201      	movs	r2, #1
     720:	4611      	mov	r1, r2
     722:	4620      	mov	r0, r4
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <mdmCtrlr_DataCommInit+0x60>)
     726:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     728:	4620      	mov	r0, r4
     72a:	4b0c      	ldr	r3, [pc, #48]	; (75c <mdmCtrlr_DataCommInit+0x64>)
     72c:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     72e:	480c      	ldr	r0, [pc, #48]	; (760 <mdmCtrlr_DataCommInit+0x68>)
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <mdmCtrlr_DataCommInit+0x50>)
     732:	4798      	blx	r3
     734:	bd10      	pop	{r4, pc}
     736:	bf00      	nop
     738:	41014000 	.word	0x41014000
     73c:	20000028 	.word	0x20000028
     740:	000026f5 	.word	0x000026f5
     744:	000064fc 	.word	0x000064fc
     748:	00000f7d 	.word	0x00000f7d
     74c:	20002804 	.word	0x20002804
     750:	20003004 	.word	0x20003004
     754:	00001cdd 	.word	0x00001cdd
     758:	00002791 	.word	0x00002791
     75c:	00002759 	.word	0x00002759
     760:	000064d4 	.word	0x000064d4

00000764 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     764:	2201      	movs	r2, #1
     766:	4b01      	ldr	r3, [pc, #4]	; (76c <SERCOM3_0_Handler+0x8>)
     768:	761a      	strb	r2, [r3, #24]
     76a:	4770      	bx	lr
     76c:	41014000 	.word	0x41014000

00000770 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     770:	2202      	movs	r2, #2
     772:	4b01      	ldr	r3, [pc, #4]	; (778 <SERCOM3_1_Handler+0x8>)
     774:	761a      	strb	r2, [r3, #24]
     776:	4770      	bx	lr
     778:	41014000 	.word	0x41014000

0000077c <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     77c:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar[2];
	uint8_t rxPrint[2];
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     77e:	4d07      	ldr	r5, [pc, #28]	; (79c <SERCOM3_2_Handler+0x20>)
     780:	4c07      	ldr	r4, [pc, #28]	; (7a0 <SERCOM3_2_Handler+0x24>)
     782:	4628      	mov	r0, r5
     784:	47a0      	blx	r4
     786:	2800      	cmp	r0, #0
     788:	d0fb      	beq.n	782 <SERCOM3_2_Handler+0x6>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_DATA);
     78a:	4804      	ldr	r0, [pc, #16]	; (79c <SERCOM3_2_Handler+0x20>)
     78c:	4b05      	ldr	r3, [pc, #20]	; (7a4 <SERCOM3_2_Handler+0x28>)
     78e:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     790:	4601      	mov	r1, r0
     792:	4805      	ldr	r0, [pc, #20]	; (7a8 <SERCOM3_2_Handler+0x2c>)
     794:	4b05      	ldr	r3, [pc, #20]	; (7ac <SERCOM3_2_Handler+0x30>)
     796:	4798      	blx	r3
     798:	bd38      	pop	{r3, r4, r5, pc}
     79a:	bf00      	nop
     79c:	20000028 	.word	0x20000028
     7a0:	00002785 	.word	0x00002785
     7a4:	00002773 	.word	0x00002773
     7a8:	20003004 	.word	0x20003004
     7ac:	00001d71 	.word	0x00001d71

000007b0 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     7b0:	b570      	push	{r4, r5, r6, lr}
     7b2:	4605      	mov	r5, r0
     7b4:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     7b6:	4c05      	ldr	r4, [pc, #20]	; (7cc <mdmCtrlr_SendDataToModem+0x1c>)
     7b8:	4620      	mov	r0, r4
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <mdmCtrlr_SendDataToModem+0x20>)
     7bc:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     7be:	4632      	mov	r2, r6
     7c0:	4629      	mov	r1, r5
     7c2:	4620      	mov	r0, r4
     7c4:	4b03      	ldr	r3, [pc, #12]	; (7d4 <mdmCtrlr_SendDataToModem+0x24>)
     7c6:	4798      	blx	r3
}
     7c8:	bd70      	pop	{r4, r5, r6, pc}
     7ca:	bf00      	nop
     7cc:	20000028 	.word	0x20000028
     7d0:	00002759 	.word	0x00002759
     7d4:	00000eb5 	.word	0x00000eb5

000007d8 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7da:	b083      	sub	sp, #12
     7dc:	4605      	mov	r5, r0
     7de:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     7e0:	480d      	ldr	r0, [pc, #52]	; (818 <mdmCtrlr_ReadResponseFromModem+0x40>)
     7e2:	4b0e      	ldr	r3, [pc, #56]	; (81c <mdmCtrlr_ReadResponseFromModem+0x44>)
     7e4:	4798      	blx	r3
     7e6:	42b0      	cmp	r0, r6
     7e8:	d201      	bcs.n	7ee <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     7ea:	b003      	add	sp, #12
     7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     7ee:	a801      	add	r0, sp, #4
     7f0:	4b0b      	ldr	r3, [pc, #44]	; (820 <mdmCtrlr_ReadResponseFromModem+0x48>)
     7f2:	4798      	blx	r3
		while (readCnt < length)
     7f4:	b166      	cbz	r6, 810 <mdmCtrlr_ReadResponseFromModem+0x38>
     7f6:	462c      	mov	r4, r5
     7f8:	3e01      	subs	r6, #1
     7fa:	b2b6      	uxth	r6, r6
     7fc:	3601      	adds	r6, #1
     7fe:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     800:	4f05      	ldr	r7, [pc, #20]	; (818 <mdmCtrlr_ReadResponseFromModem+0x40>)
     802:	4e08      	ldr	r6, [pc, #32]	; (824 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     804:	4621      	mov	r1, r4
     806:	4638      	mov	r0, r7
     808:	47b0      	blx	r6
     80a:	3401      	adds	r4, #1
		while (readCnt < length)
     80c:	42ac      	cmp	r4, r5
     80e:	d1f9      	bne.n	804 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     810:	a801      	add	r0, sp, #4
     812:	4b05      	ldr	r3, [pc, #20]	; (828 <mdmCtrlr_ReadResponseFromModem+0x50>)
     814:	4798      	blx	r3
     816:	e7e8      	b.n	7ea <mdmCtrlr_ReadResponseFromModem+0x12>
     818:	20003004 	.word	0x20003004
     81c:	00001db1 	.word	0x00001db1
     820:	000019ad 	.word	0x000019ad
     824:	00001d2d 	.word	0x00001d2d
     828:	000019bb 	.word	0x000019bb

0000082c <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     82c:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     82e:	4802      	ldr	r0, [pc, #8]	; (838 <mdmCtrlr_FlushRxBuffer+0xc>)
     830:	4b02      	ldr	r3, [pc, #8]	; (83c <mdmCtrlr_FlushRxBuffer+0x10>)
     832:	4798      	blx	r3
     834:	bd08      	pop	{r3, pc}
     836:	bf00      	nop
     838:	20003004 	.word	0x20003004
     83c:	00001dd5 	.word	0x00001dd5

00000840 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
	ModemDiagState = MODEM_DIAG_TEST_AT;
     844:	2200      	movs	r2, #0
     846:	4b21      	ldr	r3, [pc, #132]	; (8cc <ModemDiagTask+0x8c>)
     848:	701a      	strb	r2, [r3, #0]
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     84a:	4c21      	ldr	r4, [pc, #132]	; (8d0 <ModemDiagTask+0x90>)
						vTaskDelay(DiagDelayMs);
					}
				}
				else
				{
					DEBUG_PRINT("Couldn't obtain the semaphore");
     84c:	4d21      	ldr	r5, [pc, #132]	; (8d4 <ModemDiagTask+0x94>)
						vTaskDelay(DiagDelayMs);
     84e:	4e22      	ldr	r6, [pc, #136]	; (8d8 <ModemDiagTask+0x98>)
     850:	e015      	b.n	87e <ModemDiagTask+0x3e>
					TxMsgQueueData.atCmd = CMD_AT_CGSN;
     852:	a902      	add	r1, sp, #8
     854:	2301      	movs	r3, #1
     856:	f801 3d04 	strb.w	r3, [r1, #-4]!
					TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     85a:	2300      	movs	r3, #0
     85c:	2264      	movs	r2, #100	; 0x64
     85e:	481f      	ldr	r0, [pc, #124]	; (8dc <ModemDiagTask+0x9c>)
     860:	6800      	ldr	r0, [r0, #0]
     862:	4f1f      	ldr	r7, [pc, #124]	; (8e0 <ModemDiagTask+0xa0>)
     864:	47b8      	blx	r7
					if(TxQueuePushStatus == pdPASS)
     866:	2801      	cmp	r0, #1
     868:	d020      	beq.n	8ac <ModemDiagTask+0x6c>
						DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     86a:	481e      	ldr	r0, [pc, #120]	; (8e4 <ModemDiagTask+0xa4>)
     86c:	47a8      	blx	r5
						vTaskDelay(DiagDelayMs);
     86e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     872:	47b0      	blx	r6
			DEBUG_PRINT("Running Diag Process Task successfully");
     874:	481c      	ldr	r0, [pc, #112]	; (8e8 <ModemDiagTask+0xa8>)
     876:	47a8      	blx	r5
			vTaskDelay(xDelayMs);
     878:	f640 50ac 	movw	r0, #3500	; 0xdac
     87c:	47b0      	blx	r6
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     87e:	47a0      	blx	r4
     880:	2804      	cmp	r0, #4
     882:	d1fc      	bne.n	87e <ModemDiagTask+0x3e>
	switch(ModemDiagState)
     884:	4b11      	ldr	r3, [pc, #68]	; (8cc <ModemDiagTask+0x8c>)
     886:	781b      	ldrb	r3, [r3, #0]
     888:	2b00      	cmp	r3, #0
     88a:	d1f3      	bne.n	874 <ModemDiagTask+0x34>
			if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     88c:	4b13      	ldr	r3, [pc, #76]	; (8dc <ModemDiagTask+0x9c>)
     88e:	6818      	ldr	r0, [r3, #0]
     890:	4b16      	ldr	r3, [pc, #88]	; (8ec <ModemDiagTask+0xac>)
     892:	4798      	blx	r3
     894:	2800      	cmp	r0, #0
     896:	d1ed      	bne.n	874 <ModemDiagTask+0x34>
				if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     898:	2100      	movs	r1, #0
     89a:	4b15      	ldr	r3, [pc, #84]	; (8f0 <ModemDiagTask+0xb0>)
     89c:	6818      	ldr	r0, [r3, #0]
     89e:	4b15      	ldr	r3, [pc, #84]	; (8f4 <ModemDiagTask+0xb4>)
     8a0:	4798      	blx	r3
     8a2:	2801      	cmp	r0, #1
     8a4:	d0d5      	beq.n	852 <ModemDiagTask+0x12>
					DEBUG_PRINT("Couldn't obtain the semaphore");
     8a6:	4814      	ldr	r0, [pc, #80]	; (8f8 <ModemDiagTask+0xb8>)
     8a8:	47a8      	blx	r5
     8aa:	e7e3      	b.n	874 <ModemDiagTask+0x34>
						DEBUG_PRINT("Sent the Diag data to Tx Task");
     8ac:	4813      	ldr	r0, [pc, #76]	; (8fc <ModemDiagTask+0xbc>)
     8ae:	47a8      	blx	r5
						xSemaphoreGive(AtTxQueueLoadSemaphore);
     8b0:	2300      	movs	r3, #0
     8b2:	461a      	mov	r2, r3
     8b4:	4619      	mov	r1, r3
     8b6:	480e      	ldr	r0, [pc, #56]	; (8f0 <ModemDiagTask+0xb0>)
     8b8:	6800      	ldr	r0, [r0, #0]
     8ba:	47b8      	blx	r7
						vTaskDelay(DiagDelayMs);
     8bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8c0:	47b0      	blx	r6
						ModemDiagState = MODEM_DIAG_GET_IMEI;
     8c2:	2201      	movs	r2, #1
     8c4:	4b01      	ldr	r3, [pc, #4]	; (8cc <ModemDiagTask+0x8c>)
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	e7d4      	b.n	874 <ModemDiagTask+0x34>
     8ca:	bf00      	nop
     8cc:	20003014 	.word	0x20003014
     8d0:	0000099d 	.word	0x0000099d
     8d4:	00000f7d 	.word	0x00000f7d
     8d8:	000048b1 	.word	0x000048b1
     8dc:	200027f4 	.word	0x200027f4
     8e0:	00003ba1 	.word	0x00003ba1
     8e4:	00006548 	.word	0x00006548
     8e8:	00006590 	.word	0x00006590
     8ec:	000041ed 	.word	0x000041ed
     8f0:	200027f8 	.word	0x200027f8
     8f4:	0000400d 	.word	0x0000400d
     8f8:	00006570 	.word	0x00006570
     8fc:	00006528 	.word	0x00006528

00000900 <mdmParam_InitiateConnection>:




void mdmParam_InitiateConnection(void)
{
     900:	b570      	push	{r4, r5, r6, lr}
}


static void closeExistingConnections(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     902:	2009      	movs	r0, #9
     904:	4e21      	ldr	r6, [pc, #132]	; (98c <mdmParam_InitiateConnection+0x8c>)
     906:	47b0      	blx	r6
	delay_ms(1000);
     908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     90c:	4c20      	ldr	r4, [pc, #128]	; (990 <mdmParam_InitiateConnection+0x90>)
     90e:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     910:	4d20      	ldr	r5, [pc, #128]	; (994 <mdmParam_InitiateConnection+0x94>)
     912:	47a8      	blx	r5
	delay_ms(1000);
     914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     918:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_2);
     91a:	200a      	movs	r0, #10
     91c:	47b0      	blx	r6
	delay_ms(1000);
     91e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     922:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     924:	47a8      	blx	r5
	delay_ms(1000);
     926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     92a:	47a0      	blx	r4
	
}

static void sendAT_KPATTERN(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KPATTERN);
     92c:	2013      	movs	r0, #19
     92e:	47b0      	blx	r6
	delay_ms(2000);
     930:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     934:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     936:	47a8      	blx	r5
	delay_ms(2000);
     938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     93c:	47a0      	blx	r4
}

static void sendAT_KCNXCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXCFG);
     93e:	2014      	movs	r0, #20
     940:	47b0      	blx	r6
	delay_ms(2000);
     942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     946:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     948:	47a8      	blx	r5
	delay_ms(2000);
     94a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     94e:	47a0      	blx	r4
}

static void sendAT_KCNXTIMER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXTIMER);
     950:	2015      	movs	r0, #21
     952:	47b0      	blx	r6
	delay_ms(2000);
     954:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     958:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     95a:	47a8      	blx	r5
	delay_ms(2000);
     95c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     960:	47a0      	blx	r4
}

static void sendAT_KHTTPCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CFG);
     962:	2008      	movs	r0, #8
     964:	47b0      	blx	r6
	delay_ms(2000);
     966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     96a:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     96c:	47a8      	blx	r5
	delay_ms(2000);
     96e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     972:	47a0      	blx	r4
}

static void sendAT_KHTTPHEADER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_HEADER);
     974:	2016      	movs	r0, #22
     976:	47b0      	blx	r6
	delay_ms(2000);
     978:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     97c:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     97e:	47a8      	blx	r5
	delay_ms(2000);
     980:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     984:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     986:	4b04      	ldr	r3, [pc, #16]	; (998 <mdmParam_InitiateConnection+0x98>)
     988:	4798      	blx	r3
     98a:	bd70      	pop	{r4, r5, r6, pc}
     98c:	000004bd 	.word	0x000004bd
     990:	00001a1d 	.word	0x00001a1d
     994:	00000515 	.word	0x00000515
     998:	0000082d 	.word	0x0000082d

0000099c <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     99c:	4b01      	ldr	r3, [pc, #4]	; (9a4 <getModemPowerStatus+0x8>)
     99e:	7818      	ldrb	r0, [r3, #0]
     9a0:	4770      	bx	lr
     9a2:	bf00      	nop
     9a4:	200004a4 	.word	0x200004a4

000009a8 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <modemPowerStateInit+0x10>)
     9aa:	2200      	movs	r2, #0
     9ac:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     9ae:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     9b0:	2201      	movs	r2, #1
     9b2:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     9b4:	70da      	strb	r2, [r3, #3]
     9b6:	4770      	bx	lr
     9b8:	200004a4 	.word	0x200004a4

000009bc <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     9bc:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     9be:	4b5d      	ldr	r3, [pc, #372]	; (b34 <modemPowerSchedule+0x178>)
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	2b06      	cmp	r3, #6
     9c4:	f000 8089 	beq.w	ada <modemPowerSchedule+0x11e>
     9c8:	2b07      	cmp	r3, #7
     9ca:	d054      	beq.n	a76 <modemPowerSchedule+0xba>
     9cc:	b103      	cbz	r3, 9d0 <modemPowerSchedule+0x14>
     9ce:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     9d0:	4b58      	ldr	r3, [pc, #352]	; (b34 <modemPowerSchedule+0x178>)
     9d2:	785b      	ldrb	r3, [r3, #1]
     9d4:	2b03      	cmp	r3, #3
     9d6:	d8fa      	bhi.n	9ce <modemPowerSchedule+0x12>
     9d8:	e8df f003 	tbb	[pc, r3]
     9dc:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e0:	4b55      	ldr	r3, [pc, #340]	; (b38 <modemPowerSchedule+0x17c>)
     9e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     9e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     9ee:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     9f2:	4c52      	ldr	r4, [pc, #328]	; (b3c <modemPowerSchedule+0x180>)
     9f4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f8:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     9fc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a00:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a08:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     a0c:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a0e:	6299      	str	r1, [r3, #40]	; 0x28
     a10:	484b      	ldr	r0, [pc, #300]	; (b40 <modemPowerSchedule+0x184>)
     a12:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a14:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     a18:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1c:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a20:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a24:	6299      	str	r1, [r3, #40]	; 0x28
     a26:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a30:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     a36:	2201      	movs	r2, #1
     a38:	4b3e      	ldr	r3, [pc, #248]	; (b34 <modemPowerSchedule+0x178>)
     a3a:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a40:	4b40      	ldr	r3, [pc, #256]	; (b44 <modemPowerSchedule+0x188>)
     a42:	4798      	blx	r3
                }
                break;
     a44:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     a4a:	4b3b      	ldr	r3, [pc, #236]	; (b38 <modemPowerSchedule+0x17c>)
     a4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     a50:	2202      	movs	r2, #2
     a52:	4b38      	ldr	r3, [pc, #224]	; (b34 <modemPowerSchedule+0x178>)
     a54:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     a56:	2032      	movs	r0, #50	; 0x32
     a58:	4b3a      	ldr	r3, [pc, #232]	; (b44 <modemPowerSchedule+0x188>)
     a5a:	4798      	blx	r3
                }
                break;
     a5c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     a5e:	2203      	movs	r2, #3
     a60:	4b34      	ldr	r3, [pc, #208]	; (b34 <modemPowerSchedule+0x178>)
     a62:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     a64:	f640 30b8 	movw	r0, #3000	; 0xbb8
     a68:	4b36      	ldr	r3, [pc, #216]	; (b44 <modemPowerSchedule+0x188>)
     a6a:	4798      	blx	r3
                }
                break;
     a6c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     a6e:	2204      	movs	r2, #4
     a70:	4b30      	ldr	r3, [pc, #192]	; (b34 <modemPowerSchedule+0x178>)
     a72:	701a      	strb	r2, [r3, #0]
                }
                break;
     a74:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     a76:	4b2f      	ldr	r3, [pc, #188]	; (b34 <modemPowerSchedule+0x178>)
     a78:	789b      	ldrb	r3, [r3, #2]
     a7a:	b113      	cbz	r3, a82 <modemPowerSchedule+0xc6>
     a7c:	2b01      	cmp	r3, #1
     a7e:	d017      	beq.n	ab0 <modemPowerSchedule+0xf4>
     a80:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a82:	4b2d      	ldr	r3, [pc, #180]	; (b38 <modemPowerSchedule+0x17c>)
     a84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     a88:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     a8e:	629a      	str	r2, [r3, #40]	; 0x28
     a90:	4a2b      	ldr	r2, [pc, #172]	; (b40 <modemPowerSchedule+0x184>)
     a92:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a94:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a9c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aa0:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     aa2:	2201      	movs	r2, #1
     aa4:	4b23      	ldr	r3, [pc, #140]	; (b34 <modemPowerSchedule+0x178>)
     aa6:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     aa8:	2019      	movs	r0, #25
     aaa:	4b26      	ldr	r3, [pc, #152]	; (b44 <modemPowerSchedule+0x188>)
     aac:	4798      	blx	r3
                }
                break;
     aae:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab0:	4b21      	ldr	r3, [pc, #132]	; (b38 <modemPowerSchedule+0x17c>)
     ab2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     ab6:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     abc:	629a      	str	r2, [r3, #40]	; 0x28
     abe:	4a20      	ldr	r2, [pc, #128]	; (b40 <modemPowerSchedule+0x184>)
     ac0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     ad0:	4b18      	ldr	r3, [pc, #96]	; (b34 <modemPowerSchedule+0x178>)
     ad2:	2200      	movs	r2, #0
     ad4:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     ad6:	705a      	strb	r2, [r3, #1]
                }
                break;
     ad8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     ada:	4b16      	ldr	r3, [pc, #88]	; (b34 <modemPowerSchedule+0x178>)
     adc:	78db      	ldrb	r3, [r3, #3]
     ade:	2b00      	cmp	r3, #0
     ae0:	f47f af75 	bne.w	9ce <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ae4:	4b14      	ldr	r3, [pc, #80]	; (b38 <modemPowerSchedule+0x17c>)
     ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     aea:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     af2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     af6:	4a11      	ldr	r2, [pc, #68]	; (b3c <modemPowerSchedule+0x180>)
     af8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     afc:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b04:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b08:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     b10:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b12:	6298      	str	r0, [r3, #40]	; 0x28
     b14:	4a0a      	ldr	r2, [pc, #40]	; (b40 <modemPowerSchedule+0x184>)
     b16:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b18:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b24:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     b26:	2201      	movs	r2, #1
     b28:	4b02      	ldr	r3, [pc, #8]	; (b34 <modemPowerSchedule+0x178>)
     b2a:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     b2c:	2019      	movs	r0, #25
     b2e:	4b05      	ldr	r3, [pc, #20]	; (b44 <modemPowerSchedule+0x188>)
     b30:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     b32:	e74c      	b.n	9ce <modemPowerSchedule+0x12>
     b34:	200004a4 	.word	0x200004a4
     b38:	41008000 	.word	0x41008000
     b3c:	c0000001 	.word	0xc0000001
     b40:	c0000008 	.word	0xc0000008
     b44:	000048b1 	.word	0x000048b1

00000b48 <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     b48:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);

    modemPowerStateInit();
     b4a:	4b08      	ldr	r3, [pc, #32]	; (b6c <ModemProcessTask+0x24>)
     b4c:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     b4e:	4d08      	ldr	r5, [pc, #32]	; (b70 <ModemProcessTask+0x28>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     b50:	4c08      	ldr	r4, [pc, #32]	; (b74 <ModemProcessTask+0x2c>)
        {
            DEBUG_PRINT("Running Modem Process Task successfully");
     b52:	4e09      	ldr	r6, [pc, #36]	; (b78 <ModemProcessTask+0x30>)
        modemPowerSchedule();
     b54:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     b56:	47a0      	blx	r4
     b58:	2804      	cmp	r0, #4
     b5a:	d1fb      	bne.n	b54 <ModemProcessTask+0xc>
            DEBUG_PRINT("Running Modem Process Task successfully");
     b5c:	4630      	mov	r0, r6
     b5e:	4b07      	ldr	r3, [pc, #28]	; (b7c <ModemProcessTask+0x34>)
     b60:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     b62:	f241 3088 	movw	r0, #5000	; 0x1388
     b66:	4b06      	ldr	r3, [pc, #24]	; (b80 <ModemProcessTask+0x38>)
     b68:	4798      	blx	r3
     b6a:	e7f3      	b.n	b54 <ModemProcessTask+0xc>
     b6c:	000009a9 	.word	0x000009a9
     b70:	000009bd 	.word	0x000009bd
     b74:	0000099d 	.word	0x0000099d
     b78:	000065b8 	.word	0x000065b8
     b7c:	00000f7d 	.word	0x00000f7d
     b80:	000048b1 	.word	0x000048b1

00000b84 <mdmResp_AtRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_AtRespHandler(uint8_t* response, uint8_t length)
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	4605      	mov	r5, r0
     b88:	460e      	mov	r6, r1
	SerialDebugPrint("In AT handler\r\n",15);
     b8a:	210f      	movs	r1, #15
     b8c:	4804      	ldr	r0, [pc, #16]	; (ba0 <mdmResp_AtRespHandler+0x1c>)
     b8e:	4c05      	ldr	r4, [pc, #20]	; (ba4 <mdmResp_AtRespHandler+0x20>)
     b90:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     b92:	4631      	mov	r1, r6
     b94:	4628      	mov	r0, r5
     b96:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     b98:	2102      	movs	r1, #2
     b9a:	4803      	ldr	r0, [pc, #12]	; (ba8 <mdmResp_AtRespHandler+0x24>)
     b9c:	47a0      	blx	r4
     b9e:	bd70      	pop	{r4, r5, r6, pc}
     ba0:	000065e0 	.word	0x000065e0
     ba4:	00000f39 	.word	0x00000f39
     ba8:	00006480 	.word	0x00006480

00000bac <defaultFunctionPointer>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void defaultFunctionPointer(uint8_t* response, uint8_t length)
{
     bac:	4770      	bx	lr
	...

00000bb0 <mdmResp_IMEIRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_IMEIRespHandler(uint8_t* response, uint8_t length)
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	4605      	mov	r5, r0
     bb4:	460e      	mov	r6, r1
	SerialDebugPrint("In CGSN handler\r\n",18);
     bb6:	2112      	movs	r1, #18
     bb8:	4804      	ldr	r0, [pc, #16]	; (bcc <mdmResp_IMEIRespHandler+0x1c>)
     bba:	4c05      	ldr	r4, [pc, #20]	; (bd0 <mdmResp_IMEIRespHandler+0x20>)
     bbc:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     bbe:	4631      	mov	r1, r6
     bc0:	4628      	mov	r0, r5
     bc2:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     bc4:	2102      	movs	r1, #2
     bc6:	4803      	ldr	r0, [pc, #12]	; (bd4 <mdmResp_IMEIRespHandler+0x24>)
     bc8:	47a0      	blx	r4
     bca:	bd70      	pop	{r4, r5, r6, pc}
     bcc:	000065f0 	.word	0x000065f0
     bd0:	00000f39 	.word	0x00000f39
     bd4:	00006480 	.word	0x00006480

00000bd8 <mdmResp_KhttpCloseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCloseHandler(uint8_t* response, uint8_t length)
{
     bd8:	b570      	push	{r4, r5, r6, lr}
	//DEBUG_PRINT("In KHTTP CLOSE handler");

	if(response[0] == 'O')
     bda:	7803      	ldrb	r3, [r0, #0]
     bdc:	2b4f      	cmp	r3, #79	; 0x4f
     bde:	d008      	beq.n	bf2 <mdmResp_KhttpCloseHandler+0x1a>
		delay_ms(500);
		mdmCtrlr_FlushRxBuffer();
	}
	else
	{
		DEBUG_PRINT("There is no connection established with this session ID...");
     be0:	4812      	ldr	r0, [pc, #72]	; (c2c <mdmResp_KhttpCloseHandler+0x54>)
     be2:	4c13      	ldr	r4, [pc, #76]	; (c30 <mdmResp_KhttpCloseHandler+0x58>)
     be4:	47a0      	blx	r4
		DEBUG_PRINT("Checking for an active connection with next session ID...\n");
     be6:	4813      	ldr	r0, [pc, #76]	; (c34 <mdmResp_KhttpCloseHandler+0x5c>)
     be8:	47a0      	blx	r4
	}

	DEBUG_PRINT("\r\n");
     bea:	4813      	ldr	r0, [pc, #76]	; (c38 <mdmResp_KhttpCloseHandler+0x60>)
     bec:	4b10      	ldr	r3, [pc, #64]	; (c30 <mdmResp_KhttpCloseHandler+0x58>)
     bee:	4798      	blx	r3
     bf0:	bd70      	pop	{r4, r5, r6, pc}
		SerialDebugPrint(response,length);
     bf2:	4b12      	ldr	r3, [pc, #72]	; (c3c <mdmResp_KhttpCloseHandler+0x64>)
     bf4:	4798      	blx	r3
		DEBUG_PRINT("\r\nClosed an active connection");
     bf6:	4812      	ldr	r0, [pc, #72]	; (c40 <mdmResp_KhttpCloseHandler+0x68>)
     bf8:	4b0d      	ldr	r3, [pc, #52]	; (c30 <mdmResp_KhttpCloseHandler+0x58>)
     bfa:	4798      	blx	r3
		mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     bfc:	2019      	movs	r0, #25
     bfe:	4e11      	ldr	r6, [pc, #68]	; (c44 <mdmResp_KhttpCloseHandler+0x6c>)
     c00:	47b0      	blx	r6
		delay_ms(1000);
     c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c06:	4c10      	ldr	r4, [pc, #64]	; (c48 <mdmResp_KhttpCloseHandler+0x70>)
     c08:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     c0a:	4d10      	ldr	r5, [pc, #64]	; (c4c <mdmResp_KhttpCloseHandler+0x74>)
     c0c:	47a8      	blx	r5
		delay_ms(500);
     c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c12:	47a0      	blx	r4
		mdmParser_SendCommandToModem(CMD_AT_CGATT);
     c14:	201a      	movs	r0, #26
     c16:	47b0      	blx	r6
		delay_ms(1000);
     c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c1c:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     c1e:	47a8      	blx	r5
		delay_ms(500);
     c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c24:	47a0      	blx	r4
		mdmCtrlr_FlushRxBuffer();
     c26:	4b0a      	ldr	r3, [pc, #40]	; (c50 <mdmResp_KhttpCloseHandler+0x78>)
     c28:	4798      	blx	r3
     c2a:	e7de      	b.n	bea <mdmResp_KhttpCloseHandler+0x12>
     c2c:	00006624 	.word	0x00006624
     c30:	00000f7d 	.word	0x00000f7d
     c34:	00006660 	.word	0x00006660
     c38:	00006480 	.word	0x00006480
     c3c:	00000f39 	.word	0x00000f39
     c40:	00006604 	.word	0x00006604
     c44:	000004bd 	.word	0x000004bd
     c48:	00001a1d 	.word	0x00001a1d
     c4c:	00000515 	.word	0x00000515
     c50:	0000082d 	.word	0x0000082d

00000c54 <mdmResp_KPatternHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KPatternHandler(uint8_t* response, uint8_t length)
{
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	4605      	mov	r5, r0
     c58:	460e      	mov	r6, r1
	DEBUG_PRINT("In KPATTERN handler");
     c5a:	4805      	ldr	r0, [pc, #20]	; (c70 <mdmResp_KPatternHandler+0x1c>)
     c5c:	4c05      	ldr	r4, [pc, #20]	; (c74 <mdmResp_KPatternHandler+0x20>)
     c5e:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     c60:	4631      	mov	r1, r6
     c62:	4628      	mov	r0, r5
     c64:	4b04      	ldr	r3, [pc, #16]	; (c78 <mdmResp_KPatternHandler+0x24>)
     c66:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     c68:	4804      	ldr	r0, [pc, #16]	; (c7c <mdmResp_KPatternHandler+0x28>)
     c6a:	47a0      	blx	r4
     c6c:	bd70      	pop	{r4, r5, r6, pc}
     c6e:	bf00      	nop
     c70:	0000669c 	.word	0x0000669c
     c74:	00000f7d 	.word	0x00000f7d
     c78:	00000f39 	.word	0x00000f39
     c7c:	00006480 	.word	0x00006480

00000c80 <mdmResp_KcnxCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxCfgHandler(uint8_t* response, uint8_t length)
{
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	4605      	mov	r5, r0
     c84:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXCFG handler");
     c86:	4805      	ldr	r0, [pc, #20]	; (c9c <mdmResp_KcnxCfgHandler+0x1c>)
     c88:	4c05      	ldr	r4, [pc, #20]	; (ca0 <mdmResp_KcnxCfgHandler+0x20>)
     c8a:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     c8c:	4631      	mov	r1, r6
     c8e:	4628      	mov	r0, r5
     c90:	4b04      	ldr	r3, [pc, #16]	; (ca4 <mdmResp_KcnxCfgHandler+0x24>)
     c92:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     c94:	4804      	ldr	r0, [pc, #16]	; (ca8 <mdmResp_KcnxCfgHandler+0x28>)
     c96:	47a0      	blx	r4
     c98:	bd70      	pop	{r4, r5, r6, pc}
     c9a:	bf00      	nop
     c9c:	000066b0 	.word	0x000066b0
     ca0:	00000f7d 	.word	0x00000f7d
     ca4:	00000f39 	.word	0x00000f39
     ca8:	00006480 	.word	0x00006480

00000cac <mdmResp_KcnxTimerHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxTimerHandler(uint8_t* response, uint8_t length)
{
     cac:	b570      	push	{r4, r5, r6, lr}
     cae:	4605      	mov	r5, r0
     cb0:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXTIMER handler");
     cb2:	4805      	ldr	r0, [pc, #20]	; (cc8 <mdmResp_KcnxTimerHandler+0x1c>)
     cb4:	4c05      	ldr	r4, [pc, #20]	; (ccc <mdmResp_KcnxTimerHandler+0x20>)
     cb6:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     cb8:	4631      	mov	r1, r6
     cba:	4628      	mov	r0, r5
     cbc:	4b04      	ldr	r3, [pc, #16]	; (cd0 <mdmResp_KcnxTimerHandler+0x24>)
     cbe:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     cc0:	4804      	ldr	r0, [pc, #16]	; (cd4 <mdmResp_KcnxTimerHandler+0x28>)
     cc2:	47a0      	blx	r4
     cc4:	bd70      	pop	{r4, r5, r6, pc}
     cc6:	bf00      	nop
     cc8:	000066c4 	.word	0x000066c4
     ccc:	00000f7d 	.word	0x00000f7d
     cd0:	00000f39 	.word	0x00000f39
     cd4:	00006480 	.word	0x00006480

00000cd8 <mdmResp_KhttpCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCfgHandler(uint8_t* response, uint8_t length)
{
     cd8:	b570      	push	{r4, r5, r6, lr}
     cda:	4604      	mov	r4, r0
     cdc:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTPCFG handler");
     cde:	4807      	ldr	r0, [pc, #28]	; (cfc <mdmResp_KhttpCfgHandler+0x24>)
     ce0:	4d07      	ldr	r5, [pc, #28]	; (d00 <mdmResp_KhttpCfgHandler+0x28>)
     ce2:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     ce4:	4631      	mov	r1, r6
     ce6:	4620      	mov	r0, r4
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <mdmResp_KhttpCfgHandler+0x2c>)
     cea:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     cec:	4806      	ldr	r0, [pc, #24]	; (d08 <mdmResp_KhttpCfgHandler+0x30>)
     cee:	47a8      	blx	r5

	sessionID = response[11];
     cf0:	4806      	ldr	r0, [pc, #24]	; (d0c <mdmResp_KhttpCfgHandler+0x34>)
     cf2:	7ae3      	ldrb	r3, [r4, #11]
     cf4:	7003      	strb	r3, [r0, #0]
	mdmParser_SetKhttpHeaderString(&sessionID);
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <mdmResp_KhttpCfgHandler+0x38>)
     cf8:	4798      	blx	r3
     cfa:	bd70      	pop	{r4, r5, r6, pc}
     cfc:	000066dc 	.word	0x000066dc
     d00:	00000f7d 	.word	0x00000f7d
     d04:	00000f39 	.word	0x00000f39
     d08:	00006480 	.word	0x00006480
     d0c:	200004a8 	.word	0x200004a8
     d10:	00000389 	.word	0x00000389

00000d14 <mdmResp_KhttpHeaderHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpHeaderHandler(uint8_t* response, uint8_t length)
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	4604      	mov	r4, r0
     d18:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTP HEADER handler");
     d1a:	4814      	ldr	r0, [pc, #80]	; (d6c <mdmResp_KhttpHeaderHandler+0x58>)
     d1c:	4d14      	ldr	r5, [pc, #80]	; (d70 <mdmResp_KhttpHeaderHandler+0x5c>)
     d1e:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     d20:	4631      	mov	r1, r6
     d22:	4620      	mov	r0, r4
     d24:	4b13      	ldr	r3, [pc, #76]	; (d74 <mdmResp_KhttpHeaderHandler+0x60>)
     d26:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d28:	4813      	ldr	r0, [pc, #76]	; (d78 <mdmResp_KhttpHeaderHandler+0x64>)
     d2a:	47a8      	blx	r5

	if(0==memcmp(response,"CONNECT",7))
     d2c:	2207      	movs	r2, #7
     d2e:	4913      	ldr	r1, [pc, #76]	; (d7c <mdmResp_KhttpHeaderHandler+0x68>)
     d30:	4620      	mov	r0, r4
     d32:	4b13      	ldr	r3, [pc, #76]	; (d80 <mdmResp_KhttpHeaderHandler+0x6c>)
     d34:	4798      	blx	r3
     d36:	b138      	cbz	r0, d48 <mdmResp_KhttpHeaderHandler+0x34>
		mdmCtrlr_FlushRxBuffer();
		dataPacketSentOk = true;
	}
	else
	{
		headerResponseOk = false;
     d38:	4b12      	ldr	r3, [pc, #72]	; (d84 <mdmResp_KhttpHeaderHandler+0x70>)
     d3a:	2200      	movs	r2, #0
     d3c:	705a      	strb	r2, [r3, #1]
		dataPacketSentOk = false;
     d3e:	709a      	strb	r2, [r3, #2]
		DEBUG_PRINT("Header Response Not Ok");
     d40:	4811      	ldr	r0, [pc, #68]	; (d88 <mdmResp_KhttpHeaderHandler+0x74>)
     d42:	4b0b      	ldr	r3, [pc, #44]	; (d70 <mdmResp_KhttpHeaderHandler+0x5c>)
     d44:	4798      	blx	r3
     d46:	bd70      	pop	{r4, r5, r6, pc}
		headerResponseOk = true;
     d48:	4c0e      	ldr	r4, [pc, #56]	; (d84 <mdmResp_KhttpHeaderHandler+0x70>)
     d4a:	2501      	movs	r5, #1
     d4c:	7065      	strb	r5, [r4, #1]
		DEBUG_PRINT("Header Response Ok");
     d4e:	480f      	ldr	r0, [pc, #60]	; (d8c <mdmResp_KhttpHeaderHandler+0x78>)
     d50:	4b07      	ldr	r3, [pc, #28]	; (d70 <mdmResp_KhttpHeaderHandler+0x5c>)
     d52:	4798      	blx	r3
		mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     d54:	2110      	movs	r1, #16
     d56:	480e      	ldr	r0, [pc, #56]	; (d90 <mdmResp_KhttpHeaderHandler+0x7c>)
     d58:	4b0e      	ldr	r3, [pc, #56]	; (d94 <mdmResp_KhttpHeaderHandler+0x80>)
     d5a:	4798      	blx	r3
		delay_ms(1000);
     d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d60:	4b0d      	ldr	r3, [pc, #52]	; (d98 <mdmResp_KhttpHeaderHandler+0x84>)
     d62:	4798      	blx	r3
		mdmCtrlr_FlushRxBuffer();
     d64:	4b0d      	ldr	r3, [pc, #52]	; (d9c <mdmResp_KhttpHeaderHandler+0x88>)
     d66:	4798      	blx	r3
		dataPacketSentOk = true;
     d68:	70a5      	strb	r5, [r4, #2]
     d6a:	bd70      	pop	{r4, r5, r6, pc}
     d6c:	000066f0 	.word	0x000066f0
     d70:	00000f7d 	.word	0x00000f7d
     d74:	00000f39 	.word	0x00000f39
     d78:	00006480 	.word	0x00006480
     d7c:	00006708 	.word	0x00006708
     d80:	000051c1 	.word	0x000051c1
     d84:	200004a8 	.word	0x200004a8
     d88:	00006724 	.word	0x00006724
     d8c:	00006710 	.word	0x00006710
     d90:	0000634c 	.word	0x0000634c
     d94:	000007b1 	.word	0x000007b1
     d98:	00001a1d 	.word	0x00001a1d
     d9c:	0000082d 	.word	0x0000082d

00000da0 <mdmResp_KhttpGetHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpGetHandler(uint8_t* response, uint8_t length)
{
     da0:	b508      	push	{r3, lr}
	DEBUG_PRINT("\r\n\n");
     da2:	4803      	ldr	r0, [pc, #12]	; (db0 <mdmResp_KhttpGetHandler+0x10>)
     da4:	4b03      	ldr	r3, [pc, #12]	; (db4 <mdmResp_KhttpGetHandler+0x14>)
     da6:	4798      	blx	r3
	//SerialDebugPrint(response,length);
	dataPacketSentOk = true;
     da8:	2201      	movs	r2, #1
     daa:	4b03      	ldr	r3, [pc, #12]	; (db8 <mdmResp_KhttpGetHandler+0x18>)
     dac:	709a      	strb	r2, [r3, #2]
     dae:	bd08      	pop	{r3, pc}
     db0:	0000673c 	.word	0x0000673c
     db4:	00000f7d 	.word	0x00000f7d
     db8:	200004a8 	.word	0x200004a8

00000dbc <ModemRxTask>:
#include "apps/Tasks/ModemTask/include/ModemPowerControl.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"

void ModemRxTask( void *ModemTaskParam)
{
     dbc:	b570      	push	{r4, r5, r6, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(3000UL);

	while(1)
	{
		DEBUG_PRINT("Running Modem Rx Task successfully");
     dbe:	4e04      	ldr	r6, [pc, #16]	; (dd0 <ModemRxTask+0x14>)
     dc0:	4d04      	ldr	r5, [pc, #16]	; (dd4 <ModemRxTask+0x18>)
		vTaskDelay(xDelayMs);
     dc2:	4c05      	ldr	r4, [pc, #20]	; (dd8 <ModemRxTask+0x1c>)
		DEBUG_PRINT("Running Modem Rx Task successfully");
     dc4:	4630      	mov	r0, r6
     dc6:	47a8      	blx	r5
		vTaskDelay(xDelayMs);
     dc8:	f640 30b8 	movw	r0, #3000	; 0xbb8
     dcc:	47a0      	blx	r4
     dce:	e7f9      	b.n	dc4 <ModemRxTask+0x8>
     dd0:	0000675c 	.word	0x0000675c
     dd4:	00000f7d 	.word	0x00000f7d
     dd8:	000048b1 	.word	0x000048b1

00000ddc <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dde:	b087      	sub	sp, #28
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     de0:	2300      	movs	r3, #0
     de2:	461a      	mov	r2, r3
     de4:	4619      	mov	r1, r3
     de6:	4821      	ldr	r0, [pc, #132]	; (e6c <ModemTxTask+0x90>)
     de8:	6800      	ldr	r0, [r0, #0]
     dea:	4c21      	ldr	r4, [pc, #132]	; (e70 <ModemTxTask+0x94>)
     dec:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     dee:	4c21      	ldr	r4, [pc, #132]	; (e74 <ModemTxTask+0x98>)
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemTxTaskSchedule(void)
{
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     df0:	4e21      	ldr	r6, [pc, #132]	; (e78 <ModemTxTask+0x9c>)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
			DEBUG_PRINT("Transmitted a command to Modem");
     df2:	4d22      	ldr	r5, [pc, #136]	; (e7c <ModemTxTask+0xa0>)
     df4:	e007      	b.n	e06 <ModemTxTask+0x2a>
			kickWatchDog();
     df6:	4b22      	ldr	r3, [pc, #136]	; (e80 <ModemTxTask+0xa4>)
     df8:	4798      	blx	r3
			DEBUG_PRINT("Running Modem Tx Task successfully");
     dfa:	4822      	ldr	r0, [pc, #136]	; (e84 <ModemTxTask+0xa8>)
     dfc:	47a8      	blx	r5
			vTaskDelay(xDelayMs);
     dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e02:	4b21      	ldr	r3, [pc, #132]	; (e88 <ModemTxTask+0xac>)
     e04:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     e06:	47a0      	blx	r4
     e08:	2804      	cmp	r0, #4
     e0a:	d1fc      	bne.n	e06 <ModemTxTask+0x2a>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     e0c:	6830      	ldr	r0, [r6, #0]
     e0e:	4b1f      	ldr	r3, [pc, #124]	; (e8c <ModemTxTask+0xb0>)
     e10:	4798      	blx	r3
     e12:	2800      	cmp	r0, #0
     e14:	d0ef      	beq.n	df6 <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     e16:	2100      	movs	r1, #0
     e18:	4b14      	ldr	r3, [pc, #80]	; (e6c <ModemTxTask+0x90>)
     e1a:	6818      	ldr	r0, [r3, #0]
     e1c:	4b1c      	ldr	r3, [pc, #112]	; (e90 <ModemTxTask+0xb4>)
     e1e:	4798      	blx	r3
     e20:	2801      	cmp	r0, #1
     e22:	d1e8      	bne.n	df6 <ModemTxTask+0x1a>
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
     e24:	4f1b      	ldr	r7, [pc, #108]	; (e94 <ModemTxTask+0xb8>)
     e26:	f04f 32ff 	mov.w	r2, #4294967295
     e2a:	4639      	mov	r1, r7
     e2c:	6830      	ldr	r0, [r6, #0]
     e2e:	4b1a      	ldr	r3, [pc, #104]	; (e98 <ModemTxTask+0xbc>)
     e30:	4798      	blx	r3
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     e32:	783f      	ldrb	r7, [r7, #0]
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     e34:	a901      	add	r1, sp, #4
     e36:	4638      	mov	r0, r7
     e38:	4b18      	ldr	r3, [pc, #96]	; (e9c <ModemTxTask+0xc0>)
     e3a:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     e3c:	4b18      	ldr	r3, [pc, #96]	; (ea0 <ModemTxTask+0xc4>)
     e3e:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     e40:	f89d 100c 	ldrb.w	r1, [sp, #12]
     e44:	9802      	ldr	r0, [sp, #8]
     e46:	4b17      	ldr	r3, [pc, #92]	; (ea4 <ModemTxTask+0xc8>)
     e48:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     e4a:	4638      	mov	r0, r7
     e4c:	4b16      	ldr	r3, [pc, #88]	; (ea8 <ModemTxTask+0xcc>)
     e4e:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     e50:	2000      	movs	r0, #0
     e52:	4b16      	ldr	r3, [pc, #88]	; (eac <ModemTxTask+0xd0>)
     e54:	4798      	blx	r3
			DEBUG_PRINT("Transmitted a command to Modem");
     e56:	4816      	ldr	r0, [pc, #88]	; (eb0 <ModemTxTask+0xd4>)
     e58:	47a8      	blx	r5
			xSemaphoreGive(AtTxQueueLoadSemaphore);
     e5a:	2300      	movs	r3, #0
     e5c:	461a      	mov	r2, r3
     e5e:	4619      	mov	r1, r3
     e60:	4802      	ldr	r0, [pc, #8]	; (e6c <ModemTxTask+0x90>)
     e62:	6800      	ldr	r0, [r0, #0]
     e64:	4f02      	ldr	r7, [pc, #8]	; (e70 <ModemTxTask+0x94>)
     e66:	47b8      	blx	r7
     e68:	e7c5      	b.n	df6 <ModemTxTask+0x1a>
     e6a:	bf00      	nop
     e6c:	200027f8 	.word	0x200027f8
     e70:	00003ba1 	.word	0x00003ba1
     e74:	0000099d 	.word	0x0000099d
     e78:	200027f4 	.word	0x200027f4
     e7c:	00000f7d 	.word	0x00000f7d
     e80:	000010b1 	.word	0x000010b1
     e84:	000067a0 	.word	0x000067a0
     e88:	000048b1 	.word	0x000048b1
     e8c:	000041ed 	.word	0x000041ed
     e90:	0000400d 	.word	0x0000400d
     e94:	200004ac 	.word	0x200004ac
     e98:	00003e85 	.word	0x00003e85
     e9c:	00000369 	.word	0x00000369
     ea0:	0000082d 	.word	0x0000082d
     ea4:	000007b1 	.word	0x000007b1
     ea8:	000006ed 	.word	0x000006ed
     eac:	000006e1 	.word	0x000006e1
     eb0:	00006780 	.word	0x00006780

00000eb4 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     eb8:	4604      	mov	r4, r0
     eba:	460e      	mov	r6, r1
     ebc:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     ebe:	4d0e      	ldr	r5, [pc, #56]	; (ef8 <usart_async_write+0x44>)
     ec0:	4620      	mov	r0, r4
     ec2:	47a8      	blx	r5
     ec4:	2800      	cmp	r0, #0
     ec6:	d0fb      	beq.n	ec0 <usart_async_write+0xc>
     ec8:	3e01      	subs	r6, #1
     eca:	f8df 8030 	ldr.w	r8, [pc, #48]	; efc <usart_async_write+0x48>
     ece:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     ed0:	f8df a02c 	ldr.w	sl, [pc, #44]	; f00 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     ed4:	4d08      	ldr	r5, [pc, #32]	; (ef8 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     ed6:	7873      	ldrb	r3, [r6, #1]
     ed8:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     edc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     ee0:	4620      	mov	r0, r4
     ee2:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     ee4:	4620      	mov	r0, r4
     ee6:	47a8      	blx	r5
     ee8:	2800      	cmp	r0, #0
     eea:	d0fb      	beq.n	ee4 <usart_async_write+0x30>
		;
	} while (++offset < length);
     eec:	3701      	adds	r7, #1
     eee:	454f      	cmp	r7, r9
     ef0:	d3f1      	bcc.n	ed6 <usart_async_write+0x22>

	return (int32_t)offset;
}
     ef2:	4638      	mov	r0, r7
     ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ef8:	0000277b 	.word	0x0000277b
     efc:	200004b0 	.word	0x200004b0
     f00:	0000276d 	.word	0x0000276d

00000f04 <SerialDebugTxByteSentCallBack>:
     f04:	2302      	movs	r3, #2
     f06:	7603      	strb	r3, [r0, #24]
     f08:	4770      	bx	lr

00000f0a <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	7603      	strb	r3, [r0, #24]
     f0e:	4770      	bx	lr

00000f10 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     f10:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     f12:	4c05      	ldr	r4, [pc, #20]	; (f28 <SerialDebugPrintInit+0x18>)
     f14:	4905      	ldr	r1, [pc, #20]	; (f2c <SerialDebugPrintInit+0x1c>)
     f16:	4620      	mov	r0, r4
     f18:	4b05      	ldr	r3, [pc, #20]	; (f30 <SerialDebugPrintInit+0x20>)
     f1a:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     f1c:	2201      	movs	r2, #1
     f1e:	4611      	mov	r1, r2
     f20:	4620      	mov	r0, r4
     f22:	4b04      	ldr	r3, [pc, #16]	; (f34 <SerialDebugPrintInit+0x24>)
     f24:	4798      	blx	r3
     f26:	bd10      	pop	{r4, pc}
     f28:	20000044 	.word	0x20000044
     f2c:	43000400 	.word	0x43000400
     f30:	000026f5 	.word	0x000026f5
     f34:	00002791 	.word	0x00002791

00000f38 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	4605      	mov	r5, r0
     f3c:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     f3e:	4c05      	ldr	r4, [pc, #20]	; (f54 <SerialDebugPrint+0x1c>)
     f40:	4620      	mov	r0, r4
     f42:	4b05      	ldr	r3, [pc, #20]	; (f58 <SerialDebugPrint+0x20>)
     f44:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     f46:	4632      	mov	r2, r6
     f48:	4629      	mov	r1, r5
     f4a:	4620      	mov	r0, r4
     f4c:	4b03      	ldr	r3, [pc, #12]	; (f5c <SerialDebugPrint+0x24>)
     f4e:	4798      	blx	r3
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	bf00      	nop
     f54:	20000044 	.word	0x20000044
     f58:	00002759 	.word	0x00002759
     f5c:	00000eb5 	.word	0x00000eb5

00000f60 <SerialDebugTxDoneCallBack>:
{
     f60:	b510      	push	{r4, lr}
     f62:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     f64:	2116      	movs	r1, #22
     f66:	4803      	ldr	r0, [pc, #12]	; (f74 <SerialDebugTxDoneCallBack+0x14>)
     f68:	4b03      	ldr	r3, [pc, #12]	; (f78 <SerialDebugTxDoneCallBack+0x18>)
     f6a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     f6c:	2301      	movs	r3, #1
     f6e:	7623      	strb	r3, [r4, #24]
     f70:	bd10      	pop	{r4, pc}
     f72:	bf00      	nop
     f74:	000067c4 	.word	0x000067c4
     f78:	00000f39 	.word	0x00000f39

00000f7c <ConsoleDebugPrint>:
}


void ConsoleDebugPrint(const uint8_t *const dataToPrint)
{
     f7c:	b510      	push	{r4, lr}
     f7e:	b09a      	sub	sp, #104	; 0x68
     f80:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     f82:	2264      	movs	r2, #100	; 0x64
     f84:	2100      	movs	r1, #0
     f86:	a801      	add	r0, sp, #4
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <ConsoleDebugPrint+0x30>)
     f8a:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
     f8c:	4b08      	ldr	r3, [pc, #32]	; (fb0 <ConsoleDebugPrint+0x34>)
     f8e:	4622      	mov	r2, r4
     f90:	4908      	ldr	r1, [pc, #32]	; (fb4 <ConsoleDebugPrint+0x38>)
     f92:	a801      	add	r0, sp, #4
     f94:	4c08      	ldr	r4, [pc, #32]	; (fb8 <ConsoleDebugPrint+0x3c>)
     f96:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     f98:	a801      	add	r0, sp, #4
     f9a:	4b08      	ldr	r3, [pc, #32]	; (fbc <ConsoleDebugPrint+0x40>)
     f9c:	4798      	blx	r3
     f9e:	b281      	uxth	r1, r0
     fa0:	a801      	add	r0, sp, #4
     fa2:	4b07      	ldr	r3, [pc, #28]	; (fc0 <ConsoleDebugPrint+0x44>)
     fa4:	4798      	blx	r3
}
     fa6:	b01a      	add	sp, #104	; 0x68
     fa8:	bd10      	pop	{r4, pc}
     faa:	bf00      	nop
     fac:	00005229 	.word	0x00005229
     fb0:	00006480 	.word	0x00006480
     fb4:	000067e8 	.word	0x000067e8
     fb8:	000053b1 	.word	0x000053b1
     fbc:	00005409 	.word	0x00005409
     fc0:	00000f39 	.word	0x00000f39

00000fc4 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     fc4:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     fc6:	2204      	movs	r2, #4
     fc8:	4b0b      	ldr	r3, [pc, #44]	; (ff8 <SERCOM5_2_Handler+0x34>)
     fca:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
     fcc:	4d0b      	ldr	r5, [pc, #44]	; (ffc <SERCOM5_2_Handler+0x38>)
     fce:	4c0c      	ldr	r4, [pc, #48]	; (1000 <SERCOM5_2_Handler+0x3c>)
     fd0:	4628      	mov	r0, r5
     fd2:	47a0      	blx	r4
     fd4:	2800      	cmp	r0, #0
     fd6:	d0fb      	beq.n	fd0 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
     fd8:	4808      	ldr	r0, [pc, #32]	; (ffc <SERCOM5_2_Handler+0x38>)
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <SERCOM5_2_Handler+0x40>)
     fdc:	4798      	blx	r3
     fde:	490a      	ldr	r1, [pc, #40]	; (1008 <SERCOM5_2_Handler+0x44>)
     fe0:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     fe2:	2300      	movs	r3, #0
     fe4:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     fe6:	4c09      	ldr	r4, [pc, #36]	; (100c <SERCOM5_2_Handler+0x48>)
     fe8:	4620      	mov	r0, r4
     fea:	4b09      	ldr	r3, [pc, #36]	; (1010 <SERCOM5_2_Handler+0x4c>)
     fec:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     fee:	2105      	movs	r1, #5
     ff0:	4620      	mov	r0, r4
     ff2:	4b08      	ldr	r3, [pc, #32]	; (1014 <SERCOM5_2_Handler+0x50>)
     ff4:	4798      	blx	r3
     ff6:	bd38      	pop	{r3, r4, r5, pc}
     ff8:	43000400 	.word	0x43000400
     ffc:	20000044 	.word	0x20000044
    1000:	00002785 	.word	0x00002785
    1004:	00002773 	.word	0x00002773
    1008:	20003018 	.word	0x20003018
    100c:	2000301c 	.word	0x2000301c
    1010:	000053f9 	.word	0x000053f9
    1014:	00000f39 	.word	0x00000f39

00001018 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    1018:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <configureWatchDogTimeOut+0x2c>)
    101c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1020:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1022:	4c09      	ldr	r4, [pc, #36]	; (1048 <configureWatchDogTimeOut+0x30>)
    1024:	6820      	ldr	r0, [r4, #0]
    1026:	2279      	movs	r2, #121	; 0x79
    1028:	4908      	ldr	r1, [pc, #32]	; (104c <configureWatchDogTimeOut+0x34>)
    102a:	3000      	adds	r0, #0
    102c:	bf18      	it	ne
    102e:	2001      	movne	r0, #1
    1030:	4b07      	ldr	r3, [pc, #28]	; (1050 <configureWatchDogTimeOut+0x38>)
    1032:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1034:	462a      	mov	r2, r5
    1036:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    103a:	4620      	mov	r0, r4
    103c:	4b05      	ldr	r3, [pc, #20]	; (1054 <configureWatchDogTimeOut+0x3c>)
    103e:	4798      	blx	r3
    1040:	bd38      	pop	{r3, r4, r5, pc}
    1042:	bf00      	nop
    1044:	20000060 	.word	0x20000060
    1048:	200030f8 	.word	0x200030f8
    104c:	000067f0 	.word	0x000067f0
    1050:	00001c75 	.word	0x00001c75
    1054:	00003131 	.word	0x00003131

00001058 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    1058:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    105a:	2002      	movs	r0, #2
    105c:	4b07      	ldr	r3, [pc, #28]	; (107c <enableWatchDogTimer+0x24>)
    105e:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1060:	4c07      	ldr	r4, [pc, #28]	; (1080 <enableWatchDogTimer+0x28>)
    1062:	6820      	ldr	r0, [r4, #0]
    1064:	2296      	movs	r2, #150	; 0x96
    1066:	4907      	ldr	r1, [pc, #28]	; (1084 <enableWatchDogTimer+0x2c>)
    1068:	3000      	adds	r0, #0
    106a:	bf18      	it	ne
    106c:	2001      	movne	r0, #1
    106e:	4b06      	ldr	r3, [pc, #24]	; (1088 <enableWatchDogTimer+0x30>)
    1070:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1072:	4620      	mov	r0, r4
    1074:	4b05      	ldr	r3, [pc, #20]	; (108c <enableWatchDogTimer+0x34>)
    1076:	4798      	blx	r3
    1078:	bd10      	pop	{r4, pc}
    107a:	bf00      	nop
    107c:	00001019 	.word	0x00001019
    1080:	200030f8 	.word	0x200030f8
    1084:	000067f0 	.word	0x000067f0
    1088:	00001c75 	.word	0x00001c75
    108c:	0000324d 	.word	0x0000324d

00001090 <atmel_start_init>:
{
    1090:	b508      	push	{r3, lr}
    system_init();
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <atmel_start_init+0x14>)
    1094:	4798      	blx	r3
    delay_ms(1000);
    1096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    109a:	4b03      	ldr	r3, [pc, #12]	; (10a8 <atmel_start_init+0x18>)
    109c:	4798      	blx	r3
    enableWatchDogTimer();
    109e:	4b03      	ldr	r3, [pc, #12]	; (10ac <atmel_start_init+0x1c>)
    10a0:	4798      	blx	r3
    10a2:	bd08      	pop	{r3, pc}
    10a4:	0000182d 	.word	0x0000182d
    10a8:	00001a1d 	.word	0x00001a1d
    10ac:	00001059 	.word	0x00001059

000010b0 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    10b0:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    10b2:	4c06      	ldr	r4, [pc, #24]	; (10cc <kickWatchDog+0x1c>)
    10b4:	6820      	ldr	r0, [r4, #0]
    10b6:	22b3      	movs	r2, #179	; 0xb3
    10b8:	4905      	ldr	r1, [pc, #20]	; (10d0 <kickWatchDog+0x20>)
    10ba:	3000      	adds	r0, #0
    10bc:	bf18      	it	ne
    10be:	2001      	movne	r0, #1
    10c0:	4b04      	ldr	r3, [pc, #16]	; (10d4 <kickWatchDog+0x24>)
    10c2:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    10c4:	4620      	mov	r0, r4
    10c6:	4b04      	ldr	r3, [pc, #16]	; (10d8 <kickWatchDog+0x28>)
    10c8:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	200030f8 	.word	0x200030f8
    10d0:	000067f0 	.word	0x000067f0
    10d4:	00001c75 	.word	0x00001c75
    10d8:	00003289 	.word	0x00003289

000010dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    10dc:	e7fe      	b.n	10dc <Dummy_Handler>
	...

000010e0 <Reset_Handler>:
{
    10e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    10e2:	4b1c      	ldr	r3, [pc, #112]	; (1154 <Reset_Handler+0x74>)
    10e4:	4a1c      	ldr	r2, [pc, #112]	; (1158 <Reset_Handler+0x78>)
    10e6:	429a      	cmp	r2, r3
    10e8:	d010      	beq.n	110c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    10ea:	4b1c      	ldr	r3, [pc, #112]	; (115c <Reset_Handler+0x7c>)
    10ec:	4a19      	ldr	r2, [pc, #100]	; (1154 <Reset_Handler+0x74>)
    10ee:	429a      	cmp	r2, r3
    10f0:	d20c      	bcs.n	110c <Reset_Handler+0x2c>
    10f2:	3b01      	subs	r3, #1
    10f4:	1a9b      	subs	r3, r3, r2
    10f6:	f023 0303 	bic.w	r3, r3, #3
    10fa:	3304      	adds	r3, #4
    10fc:	4413      	add	r3, r2
    10fe:	4916      	ldr	r1, [pc, #88]	; (1158 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    1100:	f851 0b04 	ldr.w	r0, [r1], #4
    1104:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1108:	429a      	cmp	r2, r3
    110a:	d1f9      	bne.n	1100 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    110c:	4b14      	ldr	r3, [pc, #80]	; (1160 <Reset_Handler+0x80>)
    110e:	4a15      	ldr	r2, [pc, #84]	; (1164 <Reset_Handler+0x84>)
    1110:	429a      	cmp	r2, r3
    1112:	d20a      	bcs.n	112a <Reset_Handler+0x4a>
    1114:	3b01      	subs	r3, #1
    1116:	1a9b      	subs	r3, r3, r2
    1118:	f023 0303 	bic.w	r3, r3, #3
    111c:	3304      	adds	r3, #4
    111e:	4413      	add	r3, r2
                *pDest++ = 0;
    1120:	2100      	movs	r1, #0
    1122:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1126:	4293      	cmp	r3, r2
    1128:	d1fb      	bne.n	1122 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    112a:	4b0f      	ldr	r3, [pc, #60]	; (1168 <Reset_Handler+0x88>)
    112c:	4a0f      	ldr	r2, [pc, #60]	; (116c <Reset_Handler+0x8c>)
    112e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1132:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    1134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1138:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    113c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1144:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    1148:	4b09      	ldr	r3, [pc, #36]	; (1170 <Reset_Handler+0x90>)
    114a:	4798      	blx	r3
        main();
    114c:	4b09      	ldr	r3, [pc, #36]	; (1174 <Reset_Handler+0x94>)
    114e:	4798      	blx	r3
    1150:	e7fe      	b.n	1150 <Reset_Handler+0x70>
    1152:	bf00      	nop
    1154:	20000000 	.word	0x20000000
    1158:	00006f3c 	.word	0x00006f3c
    115c:	2000018c 	.word	0x2000018c
    1160:	200031e4 	.word	0x200031e4
    1164:	20000190 	.word	0x20000190
    1168:	e000ed00 	.word	0xe000ed00
    116c:	00000000 	.word	0x00000000
    1170:	00005179 	.word	0x00005179
    1174:	00003315 	.word	0x00003315

00001178 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    1178:	4a04      	ldr	r2, [pc, #16]	; (118c <AC_0_CLOCK_init+0x14>)
    117a:	69d3      	ldr	r3, [r2, #28]
    117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1180:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1182:	2240      	movs	r2, #64	; 0x40
    1184:	4b02      	ldr	r3, [pc, #8]	; (1190 <AC_0_CLOCK_init+0x18>)
    1186:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    118a:	4770      	bx	lr
    118c:	40000800 	.word	0x40000800
    1190:	40001c00 	.word	0x40001c00

00001194 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1194:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    1196:	4b03      	ldr	r3, [pc, #12]	; (11a4 <AC_0_init+0x10>)
    1198:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    119a:	4903      	ldr	r1, [pc, #12]	; (11a8 <AC_0_init+0x14>)
    119c:	4803      	ldr	r0, [pc, #12]	; (11ac <AC_0_init+0x18>)
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <AC_0_init+0x1c>)
    11a0:	4798      	blx	r3
    11a2:	bd08      	pop	{r3, pc}
    11a4:	00001179 	.word	0x00001179
    11a8:	42002000 	.word	0x42002000
    11ac:	200030c4 	.word	0x200030c4
    11b0:	0000194d 	.word	0x0000194d

000011b4 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11b4:	4b5d      	ldr	r3, [pc, #372]	; (132c <ADC_0_PORT_init+0x178>)
    11b6:	2204      	movs	r2, #4
    11b8:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    11be:	629a      	str	r2, [r3, #40]	; 0x28
    11c0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    11c4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11c6:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11d2:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11d6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11da:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11de:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11e2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11e6:	2108      	movs	r1, #8
    11e8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    11ee:	6299      	str	r1, [r3, #40]	; 0x28
    11f0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11f2:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    11f6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11fa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11fe:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1202:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1206:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    120a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    120e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1212:	f44f 7180 	mov.w	r1, #256	; 0x100
    1216:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    121a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    121e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1222:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1226:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    122a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    122e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1232:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1236:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    123a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    123e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1242:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1246:	f44f 7100 	mov.w	r1, #512	; 0x200
    124a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    124e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1252:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1256:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    125a:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    125e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1262:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1266:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    126a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    126e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1272:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1276:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    127a:	2110      	movs	r1, #16
    127c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    127e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1282:	6299      	str	r1, [r3, #40]	; 0x28
    1284:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1286:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    128a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    128e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1292:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1296:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    129a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    129e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12a2:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12a6:	2120      	movs	r1, #32
    12a8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12aa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12ae:	6299      	str	r1, [r3, #40]	; 0x28
    12b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12b2:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    12b6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12ba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12be:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12c2:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12c6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12ca:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12ce:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12d2:	2140      	movs	r1, #64	; 0x40
    12d4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12d6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12da:	6299      	str	r1, [r3, #40]	; 0x28
    12dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12de:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    12e2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12e6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ea:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12ee:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12f2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    12f6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12fa:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12fe:	2180      	movs	r1, #128	; 0x80
    1300:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1302:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1306:	6299      	str	r1, [r3, #40]	; 0x28
    1308:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    130a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    130e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1312:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1316:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    131a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    131e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1322:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1326:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    132a:	4770      	bx	lr
    132c:	41008000 	.word	0x41008000

00001330 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    1330:	4a04      	ldr	r2, [pc, #16]	; (1344 <ADC_0_CLOCK_init+0x14>)
    1332:	6a13      	ldr	r3, [r2, #32]
    1334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1338:	6213      	str	r3, [r2, #32]
    133a:	2241      	movs	r2, #65	; 0x41
    133c:	4b02      	ldr	r3, [pc, #8]	; (1348 <ADC_0_CLOCK_init+0x18>)
    133e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    1342:	4770      	bx	lr
    1344:	40000800 	.word	0x40000800
    1348:	40001c00 	.word	0x40001c00

0000134c <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    134c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <ADC_0_init+0x18>)
    1350:	4798      	blx	r3
	ADC_0_PORT_init();
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <ADC_0_init+0x1c>)
    1354:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    1356:	2200      	movs	r2, #0
    1358:	4904      	ldr	r1, [pc, #16]	; (136c <ADC_0_init+0x20>)
    135a:	4805      	ldr	r0, [pc, #20]	; (1370 <ADC_0_init+0x24>)
    135c:	4b05      	ldr	r3, [pc, #20]	; (1374 <ADC_0_init+0x28>)
    135e:	4798      	blx	r3
    1360:	bd08      	pop	{r3, pc}
    1362:	bf00      	nop
    1364:	00001331 	.word	0x00001331
    1368:	000011b5 	.word	0x000011b5
    136c:	43001c00 	.word	0x43001c00
    1370:	200030d4 	.word	0x200030d4
    1374:	0000197d 	.word	0x0000197d

00001378 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    1378:	4a04      	ldr	r2, [pc, #16]	; (138c <ADC_1_CLOCK_init+0x14>)
    137a:	6a13      	ldr	r3, [r2, #32]
    137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1380:	6213      	str	r3, [r2, #32]
    1382:	2240      	movs	r2, #64	; 0x40
    1384:	4b02      	ldr	r3, [pc, #8]	; (1390 <ADC_1_CLOCK_init+0x18>)
    1386:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    138a:	4770      	bx	lr
    138c:	40000800 	.word	0x40000800
    1390:	40001c00 	.word	0x40001c00

00001394 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1394:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <ADC_1_init+0x14>)
    1398:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    139a:	2200      	movs	r2, #0
    139c:	4903      	ldr	r1, [pc, #12]	; (13ac <ADC_1_init+0x18>)
    139e:	4804      	ldr	r0, [pc, #16]	; (13b0 <ADC_1_init+0x1c>)
    13a0:	4b04      	ldr	r3, [pc, #16]	; (13b4 <ADC_1_init+0x20>)
    13a2:	4798      	blx	r3
    13a4:	bd08      	pop	{r3, pc}
    13a6:	bf00      	nop
    13a8:	00001379 	.word	0x00001379
    13ac:	43002000 	.word	0x43002000
    13b0:	2000318c 	.word	0x2000318c
    13b4:	0000197d 	.word	0x0000197d

000013b8 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    13b8:	4a04      	ldr	r2, [pc, #16]	; (13cc <DAC_0_CLOCK_init+0x14>)
    13ba:	6a13      	ldr	r3, [r2, #32]
    13bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    13c0:	6213      	str	r3, [r2, #32]
    13c2:	2240      	movs	r2, #64	; 0x40
    13c4:	4b02      	ldr	r3, [pc, #8]	; (13d0 <DAC_0_CLOCK_init+0x18>)
    13c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    13ca:	4770      	bx	lr
    13cc:	40000800 	.word	0x40000800
    13d0:	40001c00 	.word	0x40001c00

000013d4 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    13d4:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    13d6:	4b03      	ldr	r3, [pc, #12]	; (13e4 <DAC_0_init+0x10>)
    13d8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    13da:	4903      	ldr	r1, [pc, #12]	; (13e8 <DAC_0_init+0x14>)
    13dc:	4803      	ldr	r0, [pc, #12]	; (13ec <DAC_0_init+0x18>)
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <DAC_0_init+0x1c>)
    13e0:	4798      	blx	r3
    13e2:	bd08      	pop	{r3, pc}
    13e4:	000013b9 	.word	0x000013b9
    13e8:	43002400 	.word	0x43002400
    13ec:	200030fc 	.word	0x200030fc
    13f0:	000019c9 	.word	0x000019c9

000013f4 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    13f4:	b508      	push	{r3, lr}
    13f6:	2240      	movs	r2, #64	; 0x40
    13f8:	4b05      	ldr	r3, [pc, #20]	; (1410 <EXTERNAL_IRQ_0_init+0x1c>)
    13fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    13fe:	4a05      	ldr	r2, [pc, #20]	; (1414 <EXTERNAL_IRQ_0_init+0x20>)
    1400:	6953      	ldr	r3, [r2, #20]
    1402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1406:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    1408:	4b03      	ldr	r3, [pc, #12]	; (1418 <EXTERNAL_IRQ_0_init+0x24>)
    140a:	4798      	blx	r3
    140c:	bd08      	pop	{r3, pc}
    140e:	bf00      	nop
    1410:	40001c00 	.word	0x40001c00
    1414:	40000800 	.word	0x40000800
    1418:	00001a81 	.word	0x00001a81

0000141c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    141c:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    141e:	4a04      	ldr	r2, [pc, #16]	; (1430 <EVENT_SYSTEM_0_init+0x14>)
    1420:	6993      	ldr	r3, [r2, #24]
    1422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1426:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    1428:	4b02      	ldr	r3, [pc, #8]	; (1434 <EVENT_SYSTEM_0_init+0x18>)
    142a:	4798      	blx	r3
    142c:	bd08      	pop	{r3, pc}
    142e:	bf00      	nop
    1430:	40000800 	.word	0x40000800
    1434:	00001a3d 	.word	0x00001a3d

00001438 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1438:	4a02      	ldr	r2, [pc, #8]	; (1444 <FLASH_0_CLOCK_init+0xc>)
    143a:	6913      	ldr	r3, [r2, #16]
    143c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1440:	6113      	str	r3, [r2, #16]
    1442:	4770      	bx	lr
    1444:	40000800 	.word	0x40000800

00001448 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    1448:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <FLASH_0_init+0x10>)
    144c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    144e:	4903      	ldr	r1, [pc, #12]	; (145c <FLASH_0_init+0x14>)
    1450:	4803      	ldr	r0, [pc, #12]	; (1460 <FLASH_0_init+0x18>)
    1452:	4b04      	ldr	r3, [pc, #16]	; (1464 <FLASH_0_init+0x1c>)
    1454:	4798      	blx	r3
    1456:	bd08      	pop	{r3, pc}
    1458:	00001439 	.word	0x00001439
    145c:	41004000 	.word	0x41004000
    1460:	20003088 	.word	0x20003088
    1464:	00001ab9 	.word	0x00001ab9

00001468 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1468:	4b10      	ldr	r3, [pc, #64]	; (14ac <ModemData_PORT_init+0x44>)
    146a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    146e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    147a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    147e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1482:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    148a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    148e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1496:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    149a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    149e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    14a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    14aa:	4770      	bx	lr
    14ac:	41008000 	.word	0x41008000

000014b0 <ModemData_CLOCK_init>:
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <ModemData_CLOCK_init+0x1c>)
    14b2:	2240      	movs	r2, #64	; 0x40
    14b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    14b8:	224a      	movs	r2, #74	; 0x4a
    14ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    14be:	4a04      	ldr	r2, [pc, #16]	; (14d0 <ModemData_CLOCK_init+0x20>)
    14c0:	6993      	ldr	r3, [r2, #24]
    14c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    14c6:	6193      	str	r3, [r2, #24]
    14c8:	4770      	bx	lr
    14ca:	bf00      	nop
    14cc:	40001c00 	.word	0x40001c00
    14d0:	40000800 	.word	0x40000800

000014d4 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    14d4:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    14d6:	4b03      	ldr	r3, [pc, #12]	; (14e4 <ModemData_init+0x10>)
    14d8:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    14da:	4b03      	ldr	r3, [pc, #12]	; (14e8 <ModemData_init+0x14>)
    14dc:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    14de:	4b03      	ldr	r3, [pc, #12]	; (14ec <ModemData_init+0x18>)
    14e0:	4798      	blx	r3
    14e2:	bd08      	pop	{r3, pc}
    14e4:	000014b1 	.word	0x000014b1
    14e8:	000006f9 	.word	0x000006f9
    14ec:	00001469 	.word	0x00001469

000014f0 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    14f0:	4b10      	ldr	r3, [pc, #64]	; (1534 <SerialDebug_PORT_init+0x44>)
    14f2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    14f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    14fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    14fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1502:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1506:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    150a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    150e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1512:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1516:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    151a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    151e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1522:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1526:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    152a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    152e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    1532:	4770      	bx	lr
    1534:	41008000 	.word	0x41008000

00001538 <SerialDebug_CLOCK_init>:
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <SerialDebug_CLOCK_init+0x1c>)
    153a:	2240      	movs	r2, #64	; 0x40
    153c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1540:	224a      	movs	r2, #74	; 0x4a
    1542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1546:	4a04      	ldr	r2, [pc, #16]	; (1558 <SerialDebug_CLOCK_init+0x20>)
    1548:	6a13      	ldr	r3, [r2, #32]
    154a:	f043 0302 	orr.w	r3, r3, #2
    154e:	6213      	str	r3, [r2, #32]
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	40001c00 	.word	0x40001c00
    1558:	40000800 	.word	0x40000800

0000155c <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    155c:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    155e:	4b03      	ldr	r3, [pc, #12]	; (156c <SerialDebug_init+0x10>)
    1560:	4798      	blx	r3
	SerialDebugPrintInit();
    1562:	4b03      	ldr	r3, [pc, #12]	; (1570 <SerialDebug_init+0x14>)
    1564:	4798      	blx	r3
	SerialDebug_PORT_init();
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <SerialDebug_init+0x18>)
    1568:	4798      	blx	r3
    156a:	bd08      	pop	{r3, pc}
    156c:	00001539 	.word	0x00001539
    1570:	00000f11 	.word	0x00000f11
    1574:	000014f1 	.word	0x000014f1

00001578 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1578:	b508      	push	{r3, lr}
	delay_init(SysTick);
    157a:	4802      	ldr	r0, [pc, #8]	; (1584 <delay_driver_init+0xc>)
    157c:	4b02      	ldr	r3, [pc, #8]	; (1588 <delay_driver_init+0x10>)
    157e:	4798      	blx	r3
    1580:	bd08      	pop	{r3, pc}
    1582:	bf00      	nop
    1584:	e000e010 	.word	0xe000e010
    1588:	00001a09 	.word	0x00001a09

0000158c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    158c:	4a04      	ldr	r2, [pc, #16]	; (15a0 <PWM_0_CLOCK_init+0x14>)
    158e:	6953      	ldr	r3, [r2, #20]
    1590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1594:	6153      	str	r3, [r2, #20]
    1596:	2240      	movs	r2, #64	; 0x40
    1598:	4b02      	ldr	r3, [pc, #8]	; (15a4 <PWM_0_CLOCK_init+0x18>)
    159a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    159e:	4770      	bx	lr
    15a0:	40000800 	.word	0x40000800
    15a4:	40001c00 	.word	0x40001c00

000015a8 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    15a8:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <PWM_0_init+0x18>)
    15ac:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    15ae:	4b05      	ldr	r3, [pc, #20]	; (15c4 <PWM_0_init+0x1c>)
    15b0:	4798      	blx	r3
    15b2:	4602      	mov	r2, r0
    15b4:	4904      	ldr	r1, [pc, #16]	; (15c8 <PWM_0_init+0x20>)
    15b6:	4805      	ldr	r0, [pc, #20]	; (15cc <PWM_0_init+0x24>)
    15b8:	4b05      	ldr	r3, [pc, #20]	; (15d0 <PWM_0_init+0x28>)
    15ba:	4798      	blx	r3
    15bc:	bd08      	pop	{r3, pc}
    15be:	bf00      	nop
    15c0:	0000158d 	.word	0x0000158d
    15c4:	00003049 	.word	0x00003049
    15c8:	40003800 	.word	0x40003800
    15cc:	20003050 	.word	0x20003050
    15d0:	00001b15 	.word	0x00001b15

000015d4 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    15d4:	4a04      	ldr	r2, [pc, #16]	; (15e8 <PWM_1_CLOCK_init+0x14>)
    15d6:	6953      	ldr	r3, [r2, #20]
    15d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    15dc:	6153      	str	r3, [r2, #20]
    15de:	2240      	movs	r2, #64	; 0x40
    15e0:	4b02      	ldr	r3, [pc, #8]	; (15ec <PWM_1_CLOCK_init+0x18>)
    15e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    15e6:	4770      	bx	lr
    15e8:	40000800 	.word	0x40000800
    15ec:	40001c00 	.word	0x40001c00

000015f0 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    15f0:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <PWM_1_init+0x18>)
    15f4:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    15f6:	4b05      	ldr	r3, [pc, #20]	; (160c <PWM_1_init+0x1c>)
    15f8:	4798      	blx	r3
    15fa:	4602      	mov	r2, r0
    15fc:	4904      	ldr	r1, [pc, #16]	; (1610 <PWM_1_init+0x20>)
    15fe:	4805      	ldr	r0, [pc, #20]	; (1614 <PWM_1_init+0x24>)
    1600:	4b05      	ldr	r3, [pc, #20]	; (1618 <PWM_1_init+0x28>)
    1602:	4798      	blx	r3
    1604:	bd08      	pop	{r3, pc}
    1606:	bf00      	nop
    1608:	000015d5 	.word	0x000015d5
    160c:	00003049 	.word	0x00003049
    1610:	40003c00 	.word	0x40003c00
    1614:	20003170 	.word	0x20003170
    1618:	00001b15 	.word	0x00001b15

0000161c <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    161c:	4a04      	ldr	r2, [pc, #16]	; (1630 <PWM_2_CLOCK_init+0x14>)
    161e:	6993      	ldr	r3, [r2, #24]
    1620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1624:	6193      	str	r3, [r2, #24]
    1626:	2240      	movs	r2, #64	; 0x40
    1628:	4b02      	ldr	r3, [pc, #8]	; (1634 <PWM_2_CLOCK_init+0x18>)
    162a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    162e:	4770      	bx	lr
    1630:	40000800 	.word	0x40000800
    1634:	40001c00 	.word	0x40001c00

00001638 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    1638:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    163a:	4b05      	ldr	r3, [pc, #20]	; (1650 <PWM_2_init+0x18>)
    163c:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <PWM_2_init+0x1c>)
    1640:	4798      	blx	r3
    1642:	4602      	mov	r2, r0
    1644:	4904      	ldr	r1, [pc, #16]	; (1658 <PWM_2_init+0x20>)
    1646:	4805      	ldr	r0, [pc, #20]	; (165c <PWM_2_init+0x24>)
    1648:	4b05      	ldr	r3, [pc, #20]	; (1660 <PWM_2_init+0x28>)
    164a:	4798      	blx	r3
    164c:	bd08      	pop	{r3, pc}
    164e:	bf00      	nop
    1650:	0000161d 	.word	0x0000161d
    1654:	00003049 	.word	0x00003049
    1658:	4101a000 	.word	0x4101a000
    165c:	2000306c 	.word	0x2000306c
    1660:	00001b15 	.word	0x00001b15

00001664 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1664:	4a04      	ldr	r2, [pc, #16]	; (1678 <TIMER_3_CLOCK_init+0x14>)
    1666:	6993      	ldr	r3, [r2, #24]
    1668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    166c:	6193      	str	r3, [r2, #24]
    166e:	2240      	movs	r2, #64	; 0x40
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <TIMER_3_CLOCK_init+0x18>)
    1672:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1676:	4770      	bx	lr
    1678:	40000800 	.word	0x40000800
    167c:	40001c00 	.word	0x40001c00

00001680 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1680:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <TIMER_3_init+0x18>)
    1684:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <TIMER_3_init+0x1c>)
    1688:	4798      	blx	r3
    168a:	4602      	mov	r2, r0
    168c:	4904      	ldr	r1, [pc, #16]	; (16a0 <TIMER_3_init+0x20>)
    168e:	4805      	ldr	r0, [pc, #20]	; (16a4 <TIMER_3_init+0x24>)
    1690:	4b05      	ldr	r3, [pc, #20]	; (16a8 <TIMER_3_init+0x28>)
    1692:	4798      	blx	r3
    1694:	bd08      	pop	{r3, pc}
    1696:	bf00      	nop
    1698:	00001665 	.word	0x00001665
    169c:	00002b01 	.word	0x00002b01
    16a0:	41016000 	.word	0x41016000
    16a4:	20003190 	.word	0x20003190
    16a8:	00001c31 	.word	0x00001c31

000016ac <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    16ac:	4a04      	ldr	r2, [pc, #16]	; (16c0 <TIMER_4_CLOCK_init+0x14>)
    16ae:	6993      	ldr	r3, [r2, #24]
    16b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    16b4:	6193      	str	r3, [r2, #24]
    16b6:	2240      	movs	r2, #64	; 0x40
    16b8:	4b02      	ldr	r3, [pc, #8]	; (16c4 <TIMER_4_CLOCK_init+0x18>)
    16ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    16be:	4770      	bx	lr
    16c0:	40000800 	.word	0x40000800
    16c4:	40001c00 	.word	0x40001c00

000016c8 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    16c8:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    16ca:	4b05      	ldr	r3, [pc, #20]	; (16e0 <TIMER_4_init+0x18>)
    16cc:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    16ce:	4b05      	ldr	r3, [pc, #20]	; (16e4 <TIMER_4_init+0x1c>)
    16d0:	4798      	blx	r3
    16d2:	4602      	mov	r2, r0
    16d4:	4904      	ldr	r1, [pc, #16]	; (16e8 <TIMER_4_init+0x20>)
    16d6:	4805      	ldr	r0, [pc, #20]	; (16ec <TIMER_4_init+0x24>)
    16d8:	4b05      	ldr	r3, [pc, #20]	; (16f0 <TIMER_4_init+0x28>)
    16da:	4798      	blx	r3
    16dc:	bd08      	pop	{r3, pc}
    16de:	bf00      	nop
    16e0:	000016ad 	.word	0x000016ad
    16e4:	00002b01 	.word	0x00002b01
    16e8:	41018000 	.word	0x41018000
    16ec:	200030d8 	.word	0x200030d8
    16f0:	00001c31 	.word	0x00001c31

000016f4 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    16f4:	4a04      	ldr	r2, [pc, #16]	; (1708 <TIMER_5_CLOCK_init+0x14>)
    16f6:	69d3      	ldr	r3, [r2, #28]
    16f8:	f043 0308 	orr.w	r3, r3, #8
    16fc:	61d3      	str	r3, [r2, #28]
    16fe:	2240      	movs	r2, #64	; 0x40
    1700:	4b02      	ldr	r3, [pc, #8]	; (170c <TIMER_5_CLOCK_init+0x18>)
    1702:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1706:	4770      	bx	lr
    1708:	40000800 	.word	0x40000800
    170c:	40001c00 	.word	0x40001c00

00001710 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    1710:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    1712:	4b05      	ldr	r3, [pc, #20]	; (1728 <TIMER_5_init+0x18>)
    1714:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    1716:	4b05      	ldr	r3, [pc, #20]	; (172c <TIMER_5_init+0x1c>)
    1718:	4798      	blx	r3
    171a:	4602      	mov	r2, r0
    171c:	4904      	ldr	r1, [pc, #16]	; (1730 <TIMER_5_init+0x20>)
    171e:	4805      	ldr	r0, [pc, #20]	; (1734 <TIMER_5_init+0x24>)
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <TIMER_5_init+0x28>)
    1722:	4798      	blx	r3
    1724:	bd08      	pop	{r3, pc}
    1726:	bf00      	nop
    1728:	000016f5 	.word	0x000016f5
    172c:	00002b01 	.word	0x00002b01
    1730:	42000c00 	.word	0x42000c00
    1734:	20003130 	.word	0x20003130
    1738:	00001c31 	.word	0x00001c31

0000173c <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    173c:	4a04      	ldr	r2, [pc, #16]	; (1750 <TIMER_6_CLOCK_init+0x14>)
    173e:	69d3      	ldr	r3, [r2, #28]
    1740:	f043 0310 	orr.w	r3, r3, #16
    1744:	61d3      	str	r3, [r2, #28]
    1746:	2240      	movs	r2, #64	; 0x40
    1748:	4b02      	ldr	r3, [pc, #8]	; (1754 <TIMER_6_CLOCK_init+0x18>)
    174a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    174e:	4770      	bx	lr
    1750:	40000800 	.word	0x40000800
    1754:	40001c00 	.word	0x40001c00

00001758 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    1758:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    175a:	4b05      	ldr	r3, [pc, #20]	; (1770 <TIMER_6_init+0x18>)
    175c:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <TIMER_6_init+0x1c>)
    1760:	4798      	blx	r3
    1762:	4602      	mov	r2, r0
    1764:	4904      	ldr	r1, [pc, #16]	; (1778 <TIMER_6_init+0x20>)
    1766:	4805      	ldr	r0, [pc, #20]	; (177c <TIMER_6_init+0x24>)
    1768:	4b05      	ldr	r3, [pc, #20]	; (1780 <TIMER_6_init+0x28>)
    176a:	4798      	blx	r3
    176c:	bd08      	pop	{r3, pc}
    176e:	bf00      	nop
    1770:	0000173d 	.word	0x0000173d
    1774:	00002b01 	.word	0x00002b01
    1778:	42001000 	.word	0x42001000
    177c:	20003150 	.word	0x20003150
    1780:	00001c31 	.word	0x00001c31

00001784 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1784:	4a04      	ldr	r2, [pc, #16]	; (1798 <TIMER_7_CLOCK_init+0x14>)
    1786:	6a13      	ldr	r3, [r2, #32]
    1788:	f043 0310 	orr.w	r3, r3, #16
    178c:	6213      	str	r3, [r2, #32]
    178e:	2240      	movs	r2, #64	; 0x40
    1790:	4b02      	ldr	r3, [pc, #8]	; (179c <TIMER_7_CLOCK_init+0x18>)
    1792:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1796:	4770      	bx	lr
    1798:	40000800 	.word	0x40000800
    179c:	40001c00 	.word	0x40001c00

000017a0 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    17a0:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <TIMER_7_init+0x18>)
    17a4:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <TIMER_7_init+0x1c>)
    17a8:	4798      	blx	r3
    17aa:	4602      	mov	r2, r0
    17ac:	4904      	ldr	r1, [pc, #16]	; (17c0 <TIMER_7_init+0x20>)
    17ae:	4805      	ldr	r0, [pc, #20]	; (17c4 <TIMER_7_init+0x24>)
    17b0:	4b05      	ldr	r3, [pc, #20]	; (17c8 <TIMER_7_init+0x28>)
    17b2:	4798      	blx	r3
    17b4:	bd08      	pop	{r3, pc}
    17b6:	bf00      	nop
    17b8:	00001785 	.word	0x00001785
    17bc:	00002b01 	.word	0x00002b01
    17c0:	43001000 	.word	0x43001000
    17c4:	200030a4 	.word	0x200030a4
    17c8:	00001c31 	.word	0x00001c31

000017cc <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    17cc:	4a02      	ldr	r2, [pc, #8]	; (17d8 <WDT_0_CLOCK_init+0xc>)
    17ce:	6953      	ldr	r3, [r2, #20]
    17d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17d4:	6153      	str	r3, [r2, #20]
    17d6:	4770      	bx	lr
    17d8:	40000800 	.word	0x40000800

000017dc <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    17dc:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    17de:	4b0a      	ldr	r3, [pc, #40]	; (1808 <WDT_0_init+0x2c>)
    17e0:	4798      	blx	r3
	ASSERT(wdt && hw);
    17e2:	2252      	movs	r2, #82	; 0x52
    17e4:	4909      	ldr	r1, [pc, #36]	; (180c <WDT_0_init+0x30>)
    17e6:	2001      	movs	r0, #1
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <WDT_0_init+0x34>)
    17ea:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    17ec:	4809      	ldr	r0, [pc, #36]	; (1814 <WDT_0_init+0x38>)
    17ee:	4b0a      	ldr	r3, [pc, #40]	; (1818 <WDT_0_init+0x3c>)
    17f0:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    17f2:	4b0a      	ldr	r3, [pc, #40]	; (181c <WDT_0_init+0x40>)
    17f4:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    17f6:	b118      	cbz	r0, 1800 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    17f8:	4809      	ldr	r0, [pc, #36]	; (1820 <WDT_0_init+0x44>)
    17fa:	4b0a      	ldr	r3, [pc, #40]	; (1824 <WDT_0_init+0x48>)
    17fc:	4798      	blx	r3
    17fe:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    1800:	4809      	ldr	r0, [pc, #36]	; (1828 <WDT_0_init+0x4c>)
    1802:	4b08      	ldr	r3, [pc, #32]	; (1824 <WDT_0_init+0x48>)
    1804:	4798      	blx	r3
    1806:	bd08      	pop	{r3, pc}
    1808:	000017cd 	.word	0x000017cd
    180c:	000067f0 	.word	0x000067f0
    1810:	00001c75 	.word	0x00001c75
    1814:	200030f8 	.word	0x200030f8
    1818:	40002000 	.word	0x40002000
    181c:	000030c5 	.word	0x000030c5
    1820:	0000681c 	.word	0x0000681c
    1824:	00000f7d 	.word	0x00000f7d
    1828:	0000680c 	.word	0x0000680c

0000182c <system_init>:
	}
}

void system_init(void)
{
    182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1830:	4b28      	ldr	r3, [pc, #160]	; (18d4 <system_init+0xa8>)
    1832:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    1834:	4b28      	ldr	r3, [pc, #160]	; (18d8 <system_init+0xac>)
    1836:	4798      	blx	r3

	AC_0_init();
    1838:	4b28      	ldr	r3, [pc, #160]	; (18dc <system_init+0xb0>)
    183a:	4798      	blx	r3

	ADC_0_init();
    183c:	4b28      	ldr	r3, [pc, #160]	; (18e0 <system_init+0xb4>)
    183e:	4798      	blx	r3

	ADC_1_init();
    1840:	4b28      	ldr	r3, [pc, #160]	; (18e4 <system_init+0xb8>)
    1842:	4798      	blx	r3

	DAC_0_init();
    1844:	4b28      	ldr	r3, [pc, #160]	; (18e8 <system_init+0xbc>)
    1846:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1848:	4b28      	ldr	r3, [pc, #160]	; (18ec <system_init+0xc0>)
    184a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    184c:	4b28      	ldr	r3, [pc, #160]	; (18f0 <system_init+0xc4>)
    184e:	4798      	blx	r3

	FLASH_0_init();
    1850:	4b28      	ldr	r3, [pc, #160]	; (18f4 <system_init+0xc8>)
    1852:	4798      	blx	r3

	SerialDebug_init();
    1854:	4b28      	ldr	r3, [pc, #160]	; (18f8 <system_init+0xcc>)
    1856:	4798      	blx	r3
	
	ModemData_init();
    1858:	4b28      	ldr	r3, [pc, #160]	; (18fc <system_init+0xd0>)
    185a:	4798      	blx	r3

	PWM_0_init();
    185c:	4b28      	ldr	r3, [pc, #160]	; (1900 <system_init+0xd4>)
    185e:	4798      	blx	r3

	PWM_1_init();
    1860:	4b28      	ldr	r3, [pc, #160]	; (1904 <system_init+0xd8>)
    1862:	4798      	blx	r3

	PWM_2_init();
    1864:	4b28      	ldr	r3, [pc, #160]	; (1908 <system_init+0xdc>)
    1866:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1868:	4c28      	ldr	r4, [pc, #160]	; (190c <system_init+0xe0>)
    186a:	69a3      	ldr	r3, [r4, #24]
    186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1870:	61a3      	str	r3, [r4, #24]
    1872:	4f27      	ldr	r7, [pc, #156]	; (1910 <system_init+0xe4>)
    1874:	f04f 0840 	mov.w	r8, #64	; 0x40
    1878:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    187c:	4e25      	ldr	r6, [pc, #148]	; (1914 <system_init+0xe8>)
    187e:	47b0      	blx	r6
    1880:	4602      	mov	r2, r0
    1882:	4925      	ldr	r1, [pc, #148]	; (1918 <system_init+0xec>)
    1884:	4825      	ldr	r0, [pc, #148]	; (191c <system_init+0xf0>)
    1886:	4d26      	ldr	r5, [pc, #152]	; (1920 <system_init+0xf4>)
    1888:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    188a:	69e3      	ldr	r3, [r4, #28]
    188c:	f043 0320 	orr.w	r3, r3, #32
    1890:	61e3      	str	r3, [r4, #28]
    1892:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1896:	47b0      	blx	r6
    1898:	4602      	mov	r2, r0
    189a:	4922      	ldr	r1, [pc, #136]	; (1924 <system_init+0xf8>)
    189c:	4822      	ldr	r0, [pc, #136]	; (1928 <system_init+0xfc>)
    189e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    18a0:	69e3      	ldr	r3, [r4, #28]
    18a2:	ea43 0308 	orr.w	r3, r3, r8
    18a6:	61e3      	str	r3, [r4, #28]
    18a8:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    18ac:	47b0      	blx	r6
    18ae:	4602      	mov	r2, r0
    18b0:	491e      	ldr	r1, [pc, #120]	; (192c <system_init+0x100>)
    18b2:	481f      	ldr	r0, [pc, #124]	; (1930 <system_init+0x104>)
    18b4:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    18b6:	4b1f      	ldr	r3, [pc, #124]	; (1934 <system_init+0x108>)
    18b8:	4798      	blx	r3

	TIMER_4_init();
    18ba:	4b1f      	ldr	r3, [pc, #124]	; (1938 <system_init+0x10c>)
    18bc:	4798      	blx	r3

	TIMER_5_init();
    18be:	4b1f      	ldr	r3, [pc, #124]	; (193c <system_init+0x110>)
    18c0:	4798      	blx	r3

	TIMER_6_init();
    18c2:	4b1f      	ldr	r3, [pc, #124]	; (1940 <system_init+0x114>)
    18c4:	4798      	blx	r3

	TIMER_7_init();
    18c6:	4b1f      	ldr	r3, [pc, #124]	; (1944 <system_init+0x118>)
    18c8:	4798      	blx	r3
	
	WDT_0_init();
    18ca:	4b1f      	ldr	r3, [pc, #124]	; (1948 <system_init+0x11c>)
    18cc:	4798      	blx	r3
    18ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18d2:	bf00      	nop
    18d4:	00001fc1 	.word	0x00001fc1
    18d8:	00001579 	.word	0x00001579
    18dc:	00001195 	.word	0x00001195
    18e0:	0000134d 	.word	0x0000134d
    18e4:	00001395 	.word	0x00001395
    18e8:	000013d5 	.word	0x000013d5
    18ec:	000013f5 	.word	0x000013f5
    18f0:	0000141d 	.word	0x0000141d
    18f4:	00001449 	.word	0x00001449
    18f8:	0000155d 	.word	0x0000155d
    18fc:	000014d5 	.word	0x000014d5
    1900:	000015a9 	.word	0x000015a9
    1904:	000015f1 	.word	0x000015f1
    1908:	00001639 	.word	0x00001639
    190c:	40000800 	.word	0x40000800
    1910:	40001c00 	.word	0x40001c00
    1914:	00003041 	.word	0x00003041
    1918:	4101c000 	.word	0x4101c000
    191c:	200031b0 	.word	0x200031b0
    1920:	00001c31 	.word	0x00001c31
    1924:	42001400 	.word	0x42001400
    1928:	20003110 	.word	0x20003110
    192c:	42001800 	.word	0x42001800
    1930:	20003030 	.word	0x20003030
    1934:	00001681 	.word	0x00001681
    1938:	000016c9 	.word	0x000016c9
    193c:	00001711 	.word	0x00001711
    1940:	00001759 	.word	0x00001759
    1944:	000017a1 	.word	0x000017a1
    1948:	000017dd 	.word	0x000017dd

0000194c <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    194c:	b538      	push	{r3, r4, r5, lr}
    194e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1950:	4605      	mov	r5, r0
    1952:	b158      	cbz	r0, 196c <ac_sync_init+0x20>
    1954:	1c08      	adds	r0, r1, #0
    1956:	bf18      	it	ne
    1958:	2001      	movne	r0, #1
    195a:	223b      	movs	r2, #59	; 0x3b
    195c:	4904      	ldr	r1, [pc, #16]	; (1970 <ac_sync_init+0x24>)
    195e:	4b05      	ldr	r3, [pc, #20]	; (1974 <ac_sync_init+0x28>)
    1960:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1962:	4621      	mov	r1, r4
    1964:	4628      	mov	r0, r5
    1966:	4b04      	ldr	r3, [pc, #16]	; (1978 <ac_sync_init+0x2c>)
    1968:	4798      	blx	r3
}
    196a:	bd38      	pop	{r3, r4, r5, pc}
    196c:	2000      	movs	r0, #0
    196e:	e7f4      	b.n	195a <ac_sync_init+0xe>
    1970:	00006838 	.word	0x00006838
    1974:	00001c75 	.word	0x00001c75
    1978:	00001e89 	.word	0x00001e89

0000197c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    197c:	b538      	push	{r3, r4, r5, lr}
    197e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1980:	4605      	mov	r5, r0
    1982:	b158      	cbz	r0, 199c <adc_sync_init+0x20>
    1984:	1c08      	adds	r0, r1, #0
    1986:	bf18      	it	ne
    1988:	2001      	movne	r0, #1
    198a:	2243      	movs	r2, #67	; 0x43
    198c:	4904      	ldr	r1, [pc, #16]	; (19a0 <adc_sync_init+0x24>)
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <adc_sync_init+0x28>)
    1990:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1992:	4621      	mov	r1, r4
    1994:	4628      	mov	r0, r5
    1996:	4b04      	ldr	r3, [pc, #16]	; (19a8 <adc_sync_init+0x2c>)
    1998:	4798      	blx	r3
}
    199a:	bd38      	pop	{r3, r4, r5, pc}
    199c:	2000      	movs	r0, #0
    199e:	e7f4      	b.n	198a <adc_sync_init+0xe>
    19a0:	00006854 	.word	0x00006854
    19a4:	00001c75 	.word	0x00001c75
    19a8:	00001f61 	.word	0x00001f61

000019ac <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19ac:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    19b0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    19b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    19b4:	f3bf 8f5f 	dmb	sy
    19b8:	4770      	bx	lr

000019ba <atomic_leave_critical>:
    19ba:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    19be:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    19c0:	f383 8810 	msr	PRIMASK, r3
    19c4:	4770      	bx	lr
	...

000019c8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    19c8:	b538      	push	{r3, r4, r5, lr}
    19ca:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    19cc:	4604      	mov	r4, r0
    19ce:	b198      	cbz	r0, 19f8 <dac_sync_init+0x30>
    19d0:	1c08      	adds	r0, r1, #0
    19d2:	bf18      	it	ne
    19d4:	2001      	movne	r0, #1
    19d6:	223c      	movs	r2, #60	; 0x3c
    19d8:	4908      	ldr	r1, [pc, #32]	; (19fc <dac_sync_init+0x34>)
    19da:	4b09      	ldr	r3, [pc, #36]	; (1a00 <dac_sync_init+0x38>)
    19dc:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    19de:	4629      	mov	r1, r5
    19e0:	4620      	mov	r0, r4
    19e2:	4b08      	ldr	r3, [pc, #32]	; (1a04 <dac_sync_init+0x3c>)
    19e4:	4798      	blx	r3
	if (rc) {
    19e6:	4602      	mov	r2, r0
    19e8:	b920      	cbnz	r0, 19f4 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    19ea:	2300      	movs	r3, #0
    19ec:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    19ee:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    19f0:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    19f2:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    19f4:	4610      	mov	r0, r2
    19f6:	bd38      	pop	{r3, r4, r5, pc}
    19f8:	2000      	movs	r0, #0
    19fa:	e7ec      	b.n	19d6 <dac_sync_init+0xe>
    19fc:	00006870 	.word	0x00006870
    1a00:	00001c75 	.word	0x00001c75
    1a04:	00002079 	.word	0x00002079

00001a08 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1a08:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1a0a:	4b02      	ldr	r3, [pc, #8]	; (1a14 <delay_init+0xc>)
    1a0c:	6018      	str	r0, [r3, #0]
    1a0e:	4b02      	ldr	r3, [pc, #8]	; (1a18 <delay_init+0x10>)
    1a10:	4798      	blx	r3
    1a12:	bd08      	pop	{r3, pc}
    1a14:	200004bc 	.word	0x200004bc
    1a18:	000027fd 	.word	0x000027fd

00001a1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1a1c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1a1e:	4b04      	ldr	r3, [pc, #16]	; (1a30 <delay_ms+0x14>)
    1a20:	681c      	ldr	r4, [r3, #0]
    1a22:	4b04      	ldr	r3, [pc, #16]	; (1a34 <delay_ms+0x18>)
    1a24:	4798      	blx	r3
    1a26:	4601      	mov	r1, r0
    1a28:	4620      	mov	r0, r4
    1a2a:	4b03      	ldr	r3, [pc, #12]	; (1a38 <delay_ms+0x1c>)
    1a2c:	4798      	blx	r3
    1a2e:	bd10      	pop	{r4, pc}
    1a30:	200004bc 	.word	0x200004bc
    1a34:	00001fb5 	.word	0x00001fb5
    1a38:	00002811 	.word	0x00002811

00001a3c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1a3c:	b508      	push	{r3, lr}
	return _event_system_init();
    1a3e:	4b01      	ldr	r3, [pc, #4]	; (1a44 <event_system_init+0x8>)
    1a40:	4798      	blx	r3
}
    1a42:	bd08      	pop	{r3, pc}
    1a44:	000022b5 	.word	0x000022b5

00001a48 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1a48:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1a4a:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <process_ext_irq+0x34>)
    1a4c:	685c      	ldr	r4, [r3, #4]
    1a4e:	42a0      	cmp	r0, r4
    1a50:	d00e      	beq.n	1a70 <process_ext_irq+0x28>
    1a52:	2301      	movs	r3, #1
    1a54:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1a56:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1a58:	25ff      	movs	r5, #255	; 0xff
    1a5a:	e003      	b.n	1a64 <process_ext_irq+0x1c>
    1a5c:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1a5e:	185a      	adds	r2, r3, r1
    1a60:	0852      	lsrs	r2, r2, #1
    1a62:	d104      	bne.n	1a6e <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1a64:	42a0      	cmp	r0, r4
    1a66:	d9f9      	bls.n	1a5c <process_ext_irq+0x14>
	while (upper >= lower) {
    1a68:	b13b      	cbz	r3, 1a7a <process_ext_irq+0x32>
			lower = middle + 1;
    1a6a:	4631      	mov	r1, r6
    1a6c:	e7f7      	b.n	1a5e <process_ext_irq+0x16>
    1a6e:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1a70:	4b02      	ldr	r3, [pc, #8]	; (1a7c <process_ext_irq+0x34>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	b10b      	cbz	r3, 1a7a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1a76:	4798      	blx	r3
    1a78:	bd70      	pop	{r4, r5, r6, pc}
    1a7a:	bd70      	pop	{r4, r5, r6, pc}
    1a7c:	200004c0 	.word	0x200004c0

00001a80 <ext_irq_init>:
{
    1a80:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1a82:	4b05      	ldr	r3, [pc, #20]	; (1a98 <ext_irq_init+0x18>)
    1a84:	f04f 32ff 	mov.w	r2, #4294967295
    1a88:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1a8a:	2200      	movs	r2, #0
    1a8c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1a8e:	4803      	ldr	r0, [pc, #12]	; (1a9c <ext_irq_init+0x1c>)
    1a90:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <ext_irq_init+0x20>)
    1a92:	4798      	blx	r3
}
    1a94:	bd08      	pop	{r3, pc}
    1a96:	bf00      	nop
    1a98:	200004c0 	.word	0x200004c0
    1a9c:	00001a49 	.word	0x00001a49
    1aa0:	00002235 	.word	0x00002235

00001aa4 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1aa4:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1aa6:	6943      	ldr	r3, [r0, #20]
    1aa8:	b103      	cbz	r3, 1aac <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1aaa:	4798      	blx	r3
    1aac:	bd08      	pop	{r3, pc}

00001aae <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1aae:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1ab0:	6983      	ldr	r3, [r0, #24]
    1ab2:	b103      	cbz	r3, 1ab6 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1ab4:	4798      	blx	r3
    1ab6:	bd08      	pop	{r3, pc}

00001ab8 <flash_init>:
{
    1ab8:	b538      	push	{r3, r4, r5, lr}
    1aba:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1abc:	4604      	mov	r4, r0
    1abe:	b190      	cbz	r0, 1ae6 <flash_init+0x2e>
    1ac0:	1c08      	adds	r0, r1, #0
    1ac2:	bf18      	it	ne
    1ac4:	2001      	movne	r0, #1
    1ac6:	2242      	movs	r2, #66	; 0x42
    1ac8:	4908      	ldr	r1, [pc, #32]	; (1aec <flash_init+0x34>)
    1aca:	4b09      	ldr	r3, [pc, #36]	; (1af0 <flash_init+0x38>)
    1acc:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1ace:	4629      	mov	r1, r5
    1ad0:	4620      	mov	r0, r4
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <flash_init+0x3c>)
    1ad4:	4798      	blx	r3
	if (rc) {
    1ad6:	4603      	mov	r3, r0
    1ad8:	b918      	cbnz	r0, 1ae2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1ada:	4a07      	ldr	r2, [pc, #28]	; (1af8 <flash_init+0x40>)
    1adc:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1ade:	4a07      	ldr	r2, [pc, #28]	; (1afc <flash_init+0x44>)
    1ae0:	6062      	str	r2, [r4, #4]
}
    1ae2:	4618      	mov	r0, r3
    1ae4:	bd38      	pop	{r3, r4, r5, pc}
    1ae6:	2000      	movs	r0, #0
    1ae8:	e7ed      	b.n	1ac6 <flash_init+0xe>
    1aea:	bf00      	nop
    1aec:	0000688c 	.word	0x0000688c
    1af0:	00001c75 	.word	0x00001c75
    1af4:	000023f1 	.word	0x000023f1
    1af8:	00001aa5 	.word	0x00001aa5
    1afc:	00001aaf 	.word	0x00001aaf

00001b00 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1b00:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1b02:	6943      	ldr	r3, [r0, #20]
    1b04:	b103      	cbz	r3, 1b08 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1b06:	4798      	blx	r3
    1b08:	bd08      	pop	{r3, pc}

00001b0a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1b0a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1b0c:	6983      	ldr	r3, [r0, #24]
    1b0e:	b103      	cbz	r3, 1b12 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1b10:	4798      	blx	r3
    1b12:	bd08      	pop	{r3, pc}

00001b14 <pwm_init>:
{
    1b14:	b538      	push	{r3, r4, r5, lr}
    1b16:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1b18:	4604      	mov	r4, r0
    1b1a:	b180      	cbz	r0, 1b3e <pwm_init+0x2a>
    1b1c:	1c08      	adds	r0, r1, #0
    1b1e:	bf18      	it	ne
    1b20:	2001      	movne	r0, #1
    1b22:	223d      	movs	r2, #61	; 0x3d
    1b24:	4907      	ldr	r1, [pc, #28]	; (1b44 <pwm_init+0x30>)
    1b26:	4b08      	ldr	r3, [pc, #32]	; (1b48 <pwm_init+0x34>)
    1b28:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1b2a:	4629      	mov	r1, r5
    1b2c:	4620      	mov	r0, r4
    1b2e:	4b07      	ldr	r3, [pc, #28]	; (1b4c <pwm_init+0x38>)
    1b30:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1b32:	4b07      	ldr	r3, [pc, #28]	; (1b50 <pwm_init+0x3c>)
    1b34:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1b36:	4b07      	ldr	r3, [pc, #28]	; (1b54 <pwm_init+0x40>)
    1b38:	6063      	str	r3, [r4, #4]
}
    1b3a:	2000      	movs	r0, #0
    1b3c:	bd38      	pop	{r3, r4, r5, pc}
    1b3e:	2000      	movs	r0, #0
    1b40:	e7ef      	b.n	1b22 <pwm_init+0xe>
    1b42:	bf00      	nop
    1b44:	000068a4 	.word	0x000068a4
    1b48:	00001c75 	.word	0x00001c75
    1b4c:	00002f29 	.word	0x00002f29
    1b50:	00001b01 	.word	0x00001b01
    1b54:	00001b0b 	.word	0x00001b0b

00001b58 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b5a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1b5c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1b5e:	b12f      	cbz	r7, 1b6c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1b60:	688d      	ldr	r5, [r1, #8]
    1b62:	463c      	mov	r4, r7
    1b64:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1b66:	f1c2 0e01 	rsb	lr, r2, #1
    1b6a:	e00b      	b.n	1b84 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1b6c:	4b0e      	ldr	r3, [pc, #56]	; (1ba8 <timer_add_timer_task+0x50>)
    1b6e:	4798      	blx	r3
		return;
    1b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1b72:	4473      	add	r3, lr
    1b74:	68a0      	ldr	r0, [r4, #8]
    1b76:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1b78:	42ab      	cmp	r3, r5
    1b7a:	d20a      	bcs.n	1b92 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1b7c:	6823      	ldr	r3, [r4, #0]
    1b7e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1b80:	b153      	cbz	r3, 1b98 <timer_add_timer_task+0x40>
    1b82:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1b84:	6863      	ldr	r3, [r4, #4]
    1b86:	4293      	cmp	r3, r2
    1b88:	d8f3      	bhi.n	1b72 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1b8a:	68a0      	ldr	r0, [r4, #8]
    1b8c:	4403      	add	r3, r0
    1b8e:	1a9b      	subs	r3, r3, r2
    1b90:	e7f2      	b.n	1b78 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1b92:	42a7      	cmp	r7, r4
    1b94:	d004      	beq.n	1ba0 <timer_add_timer_task+0x48>
    1b96:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1b98:	4620      	mov	r0, r4
    1b9a:	4b04      	ldr	r3, [pc, #16]	; (1bac <timer_add_timer_task+0x54>)
    1b9c:	4798      	blx	r3
    1b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1ba0:	4660      	mov	r0, ip
    1ba2:	4b01      	ldr	r3, [pc, #4]	; (1ba8 <timer_add_timer_task+0x50>)
    1ba4:	4798      	blx	r3
    1ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba8:	00001c9d 	.word	0x00001c9d
    1bac:	00001cc9 	.word	0x00001cc9

00001bb0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1bb4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1bb6:	6907      	ldr	r7, [r0, #16]
    1bb8:	3701      	adds	r7, #1
    1bba:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1bbc:	7e03      	ldrb	r3, [r0, #24]
    1bbe:	f013 0f01 	tst.w	r3, #1
    1bc2:	d113      	bne.n	1bec <timer_process_counted+0x3c>
    1bc4:	7e03      	ldrb	r3, [r0, #24]
    1bc6:	f013 0f02 	tst.w	r3, #2
    1bca:	d10f      	bne.n	1bec <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1bcc:	b354      	cbz	r4, 1c24 <timer_process_counted+0x74>
    1bce:	6863      	ldr	r3, [r4, #4]
    1bd0:	1afb      	subs	r3, r7, r3
    1bd2:	68a2      	ldr	r2, [r4, #8]
    1bd4:	4293      	cmp	r3, r2
    1bd6:	d307      	bcc.n	1be8 <timer_process_counted+0x38>
    1bd8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1bda:	f100 0814 	add.w	r8, r0, #20
    1bde:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1c28 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1be2:	f8df a048 	ldr.w	sl, [pc, #72]	; 1c2c <timer_process_counted+0x7c>
    1be6:	e012      	b.n	1c0e <timer_process_counted+0x5e>
    1be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1bec:	7e03      	ldrb	r3, [r0, #24]
    1bee:	f043 0302 	orr.w	r3, r3, #2
    1bf2:	7603      	strb	r3, [r0, #24]
		return;
    1bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bf8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1bfa:	68e3      	ldr	r3, [r4, #12]
    1bfc:	4620      	mov	r0, r4
    1bfe:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1c00:	b185      	cbz	r5, 1c24 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1c02:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1c04:	686b      	ldr	r3, [r5, #4]
    1c06:	1afb      	subs	r3, r7, r3
    1c08:	68aa      	ldr	r2, [r5, #8]
    1c0a:	4293      	cmp	r3, r2
    1c0c:	d30a      	bcc.n	1c24 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1c0e:	4640      	mov	r0, r8
    1c10:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1c12:	7c23      	ldrb	r3, [r4, #16]
    1c14:	2b01      	cmp	r3, #1
    1c16:	d1ef      	bne.n	1bf8 <timer_process_counted+0x48>
			tmp->time_label = time;
    1c18:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1c1a:	463a      	mov	r2, r7
    1c1c:	4621      	mov	r1, r4
    1c1e:	4640      	mov	r0, r8
    1c20:	47d0      	blx	sl
    1c22:	e7e9      	b.n	1bf8 <timer_process_counted+0x48>
    1c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c28:	00001cd1 	.word	0x00001cd1
    1c2c:	00001b59 	.word	0x00001b59

00001c30 <timer_init>:
{
    1c30:	b570      	push	{r4, r5, r6, lr}
    1c32:	460e      	mov	r6, r1
    1c34:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1c36:	4604      	mov	r4, r0
    1c38:	b190      	cbz	r0, 1c60 <timer_init+0x30>
    1c3a:	b199      	cbz	r1, 1c64 <timer_init+0x34>
    1c3c:	1c10      	adds	r0, r2, #0
    1c3e:	bf18      	it	ne
    1c40:	2001      	movne	r0, #1
    1c42:	2245      	movs	r2, #69	; 0x45
    1c44:	4908      	ldr	r1, [pc, #32]	; (1c68 <timer_init+0x38>)
    1c46:	4b09      	ldr	r3, [pc, #36]	; (1c6c <timer_init+0x3c>)
    1c48:	4798      	blx	r3
	descr->func = func;
    1c4a:	4620      	mov	r0, r4
    1c4c:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1c50:	682b      	ldr	r3, [r5, #0]
    1c52:	4631      	mov	r1, r6
    1c54:	4798      	blx	r3
	descr->time                           = 0;
    1c56:	2000      	movs	r0, #0
    1c58:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1c5a:	4b05      	ldr	r3, [pc, #20]	; (1c70 <timer_init+0x40>)
    1c5c:	6063      	str	r3, [r4, #4]
}
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1c60:	2000      	movs	r0, #0
    1c62:	e7ee      	b.n	1c42 <timer_init+0x12>
    1c64:	2000      	movs	r0, #0
    1c66:	e7ec      	b.n	1c42 <timer_init+0x12>
    1c68:	000068bc 	.word	0x000068bc
    1c6c:	00001c75 	.word	0x00001c75
    1c70:	00001bb1 	.word	0x00001bb1

00001c74 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1c74:	b900      	cbnz	r0, 1c78 <assert+0x4>
		__asm("BKPT #0");
    1c76:	be00      	bkpt	0x0000
    1c78:	4770      	bx	lr

00001c7a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1c7a:	6803      	ldr	r3, [r0, #0]
    1c7c:	b14b      	cbz	r3, 1c92 <is_list_element+0x18>
		if (it == element) {
    1c7e:	428b      	cmp	r3, r1
    1c80:	d009      	beq.n	1c96 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	b11b      	cbz	r3, 1c8e <is_list_element+0x14>
		if (it == element) {
    1c86:	4299      	cmp	r1, r3
    1c88:	d1fb      	bne.n	1c82 <is_list_element+0x8>
			return true;
    1c8a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1c8c:	4770      	bx	lr
	return false;
    1c8e:	2000      	movs	r0, #0
    1c90:	4770      	bx	lr
    1c92:	2000      	movs	r0, #0
    1c94:	4770      	bx	lr
			return true;
    1c96:	2001      	movs	r0, #1
    1c98:	4770      	bx	lr
	...

00001c9c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1c9c:	b538      	push	{r3, r4, r5, lr}
    1c9e:	4604      	mov	r4, r0
    1ca0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1ca2:	4b06      	ldr	r3, [pc, #24]	; (1cbc <list_insert_as_head+0x20>)
    1ca4:	4798      	blx	r3
    1ca6:	f080 0001 	eor.w	r0, r0, #1
    1caa:	2243      	movs	r2, #67	; 0x43
    1cac:	4904      	ldr	r1, [pc, #16]	; (1cc0 <list_insert_as_head+0x24>)
    1cae:	b2c0      	uxtb	r0, r0
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <list_insert_as_head+0x28>)
    1cb2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1cb8:	6025      	str	r5, [r4, #0]
    1cba:	bd38      	pop	{r3, r4, r5, pc}
    1cbc:	00001c7b 	.word	0x00001c7b
    1cc0:	000068d4 	.word	0x000068d4
    1cc4:	00001c75 	.word	0x00001c75

00001cc8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1cc8:	6803      	ldr	r3, [r0, #0]
    1cca:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1ccc:	6001      	str	r1, [r0, #0]
    1cce:	4770      	bx	lr

00001cd0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1cd0:	6803      	ldr	r3, [r0, #0]
    1cd2:	b10b      	cbz	r3, 1cd8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1cd4:	681a      	ldr	r2, [r3, #0]
    1cd6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1cd8:	4618      	mov	r0, r3
    1cda:	4770      	bx	lr

00001cdc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1cdc:	b570      	push	{r4, r5, r6, lr}
    1cde:	460e      	mov	r6, r1
    1ce0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1ce2:	4604      	mov	r4, r0
    1ce4:	b178      	cbz	r0, 1d06 <ringbuffer_init+0x2a>
    1ce6:	b181      	cbz	r1, 1d0a <ringbuffer_init+0x2e>
    1ce8:	b1a2      	cbz	r2, 1d14 <ringbuffer_init+0x38>
    1cea:	2001      	movs	r0, #1
    1cec:	2232      	movs	r2, #50	; 0x32
    1cee:	490d      	ldr	r1, [pc, #52]	; (1d24 <ringbuffer_init+0x48>)
    1cf0:	4b0d      	ldr	r3, [pc, #52]	; (1d28 <ringbuffer_init+0x4c>)
    1cf2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1cf4:	1e6b      	subs	r3, r5, #1
    1cf6:	421d      	tst	r5, r3
    1cf8:	d109      	bne.n	1d0e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1cfa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1cfc:	2000      	movs	r0, #0
    1cfe:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1d00:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1d02:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1d04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1d06:	2000      	movs	r0, #0
    1d08:	e7f0      	b.n	1cec <ringbuffer_init+0x10>
    1d0a:	2000      	movs	r0, #0
    1d0c:	e7ee      	b.n	1cec <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1d0e:	f06f 000c 	mvn.w	r0, #12
    1d12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1d14:	2232      	movs	r2, #50	; 0x32
    1d16:	4903      	ldr	r1, [pc, #12]	; (1d24 <ringbuffer_init+0x48>)
    1d18:	2000      	movs	r0, #0
    1d1a:	4b03      	ldr	r3, [pc, #12]	; (1d28 <ringbuffer_init+0x4c>)
    1d1c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1d1e:	1e6b      	subs	r3, r5, #1
    1d20:	e7eb      	b.n	1cfa <ringbuffer_init+0x1e>
    1d22:	bf00      	nop
    1d24:	000068f4 	.word	0x000068f4
    1d28:	00001c75 	.word	0x00001c75

00001d2c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1d2c:	b538      	push	{r3, r4, r5, lr}
    1d2e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1d30:	4604      	mov	r4, r0
    1d32:	b1a0      	cbz	r0, 1d5e <ringbuffer_get+0x32>
    1d34:	1c08      	adds	r0, r1, #0
    1d36:	bf18      	it	ne
    1d38:	2001      	movne	r0, #1
    1d3a:	224a      	movs	r2, #74	; 0x4a
    1d3c:	490a      	ldr	r1, [pc, #40]	; (1d68 <ringbuffer_get+0x3c>)
    1d3e:	4b0b      	ldr	r3, [pc, #44]	; (1d6c <ringbuffer_get+0x40>)
    1d40:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1d42:	68a3      	ldr	r3, [r4, #8]
    1d44:	68e2      	ldr	r2, [r4, #12]
    1d46:	429a      	cmp	r2, r3
    1d48:	d00b      	beq.n	1d62 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1d4a:	6862      	ldr	r2, [r4, #4]
    1d4c:	4013      	ands	r3, r2
    1d4e:	6822      	ldr	r2, [r4, #0]
    1d50:	5cd3      	ldrb	r3, [r2, r3]
    1d52:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1d54:	68a3      	ldr	r3, [r4, #8]
    1d56:	3301      	adds	r3, #1
    1d58:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1d5a:	2000      	movs	r0, #0
    1d5c:	bd38      	pop	{r3, r4, r5, pc}
    1d5e:	2000      	movs	r0, #0
    1d60:	e7eb      	b.n	1d3a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1d62:	f06f 0009 	mvn.w	r0, #9
}
    1d66:	bd38      	pop	{r3, r4, r5, pc}
    1d68:	000068f4 	.word	0x000068f4
    1d6c:	00001c75 	.word	0x00001c75

00001d70 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1d70:	b538      	push	{r3, r4, r5, lr}
    1d72:	460d      	mov	r5, r1
	ASSERT(rb);
    1d74:	4604      	mov	r4, r0
    1d76:	225b      	movs	r2, #91	; 0x5b
    1d78:	490b      	ldr	r1, [pc, #44]	; (1da8 <ringbuffer_put+0x38>)
    1d7a:	3000      	adds	r0, #0
    1d7c:	bf18      	it	ne
    1d7e:	2001      	movne	r0, #1
    1d80:	4b0a      	ldr	r3, [pc, #40]	; (1dac <ringbuffer_put+0x3c>)
    1d82:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1d84:	68e3      	ldr	r3, [r4, #12]
    1d86:	6862      	ldr	r2, [r4, #4]
    1d88:	4013      	ands	r3, r2
    1d8a:	6822      	ldr	r2, [r4, #0]
    1d8c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1d8e:	68e3      	ldr	r3, [r4, #12]
    1d90:	6861      	ldr	r1, [r4, #4]
    1d92:	68a2      	ldr	r2, [r4, #8]
    1d94:	1a9a      	subs	r2, r3, r2
    1d96:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1d98:	bf84      	itt	hi
    1d9a:	1a59      	subhi	r1, r3, r1
    1d9c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1d9e:	3301      	adds	r3, #1
    1da0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1da2:	2000      	movs	r0, #0
    1da4:	bd38      	pop	{r3, r4, r5, pc}
    1da6:	bf00      	nop
    1da8:	000068f4 	.word	0x000068f4
    1dac:	00001c75 	.word	0x00001c75

00001db0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1db0:	b510      	push	{r4, lr}
	ASSERT(rb);
    1db2:	4604      	mov	r4, r0
    1db4:	2271      	movs	r2, #113	; 0x71
    1db6:	4905      	ldr	r1, [pc, #20]	; (1dcc <ringbuffer_num+0x1c>)
    1db8:	3000      	adds	r0, #0
    1dba:	bf18      	it	ne
    1dbc:	2001      	movne	r0, #1
    1dbe:	4b04      	ldr	r3, [pc, #16]	; (1dd0 <ringbuffer_num+0x20>)
    1dc0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1dc2:	68e0      	ldr	r0, [r4, #12]
    1dc4:	68a3      	ldr	r3, [r4, #8]
}
    1dc6:	1ac0      	subs	r0, r0, r3
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	bf00      	nop
    1dcc:	000068f4 	.word	0x000068f4
    1dd0:	00001c75 	.word	0x00001c75

00001dd4 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1dd4:	b510      	push	{r4, lr}
	ASSERT(rb);
    1dd6:	4604      	mov	r4, r0
    1dd8:	227b      	movs	r2, #123	; 0x7b
    1dda:	4905      	ldr	r1, [pc, #20]	; (1df0 <ringbuffer_flush+0x1c>)
    1ddc:	3000      	adds	r0, #0
    1dde:	bf18      	it	ne
    1de0:	2001      	movne	r0, #1
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <ringbuffer_flush+0x20>)
    1de4:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1de6:	68e3      	ldr	r3, [r4, #12]
    1de8:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1dea:	2000      	movs	r0, #0
    1dec:	bd10      	pop	{r4, pc}
    1dee:	bf00      	nop
    1df0:	000068f4 	.word	0x000068f4
    1df4:	00001c75 	.word	0x00001c75

00001df8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1df8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1dfa:	4a06      	ldr	r2, [pc, #24]	; (1e14 <_sbrk+0x1c>)
    1dfc:	6812      	ldr	r2, [r2, #0]
    1dfe:	b122      	cbz	r2, 1e0a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1e00:	4a04      	ldr	r2, [pc, #16]	; (1e14 <_sbrk+0x1c>)
    1e02:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e04:	4403      	add	r3, r0
    1e06:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1e08:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1e0a:	4903      	ldr	r1, [pc, #12]	; (1e18 <_sbrk+0x20>)
    1e0c:	4a01      	ldr	r2, [pc, #4]	; (1e14 <_sbrk+0x1c>)
    1e0e:	6011      	str	r1, [r2, #0]
    1e10:	e7f6      	b.n	1e00 <_sbrk+0x8>
    1e12:	bf00      	nop
    1e14:	200004c8 	.word	0x200004c8
    1e18:	200131e8 	.word	0x200131e8

00001e1c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1e1c:	b510      	push	{r4, lr}
    1e1e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1e20:	f44f 7281 	mov.w	r2, #258	; 0x102
    1e24:	4915      	ldr	r1, [pc, #84]	; (1e7c <_ac_init+0x60>)
    1e26:	4816      	ldr	r0, [pc, #88]	; (1e80 <_ac_init+0x64>)
    1e28:	4284      	cmp	r4, r0
    1e2a:	bf14      	ite	ne
    1e2c:	2000      	movne	r0, #0
    1e2e:	2001      	moveq	r0, #1
    1e30:	4b14      	ldr	r3, [pc, #80]	; (1e84 <_ac_init+0x68>)
    1e32:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1e34:	6a23      	ldr	r3, [r4, #32]
    1e36:	f013 0f01 	tst.w	r3, #1
    1e3a:	d1fb      	bne.n	1e34 <_ac_init+0x18>
    1e3c:	6a23      	ldr	r3, [r4, #32]
    1e3e:	f013 0f03 	tst.w	r3, #3
    1e42:	d1fb      	bne.n	1e3c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1e44:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1e46:	f013 0f02 	tst.w	r3, #2
    1e4a:	d114      	bne.n	1e76 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1e4c:	6a23      	ldr	r3, [r4, #32]
    1e4e:	f013 0f01 	tst.w	r3, #1
    1e52:	d1fb      	bne.n	1e4c <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1e54:	7823      	ldrb	r3, [r4, #0]
    1e56:	f043 0301 	orr.w	r3, r3, #1
    1e5a:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1e5c:	6a23      	ldr	r3, [r4, #32]
    1e5e:	f013 0f01 	tst.w	r3, #1
    1e62:	d1fb      	bne.n	1e5c <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1e64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1e68:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1e6a:	2000      	movs	r0, #0
    1e6c:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1e6e:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1e70:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1e72:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1e74:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1e76:	f06f 0010 	mvn.w	r0, #16
}
    1e7a:	bd10      	pop	{r4, pc}
    1e7c:	00006918 	.word	0x00006918
    1e80:	42002000 	.word	0x42002000
    1e84:	00001c75 	.word	0x00001c75

00001e88 <_ac_sync_init>:
{
    1e88:	b538      	push	{r3, r4, r5, lr}
    1e8a:	460c      	mov	r4, r1
	ASSERT(device);
    1e8c:	4605      	mov	r5, r0
    1e8e:	226c      	movs	r2, #108	; 0x6c
    1e90:	4905      	ldr	r1, [pc, #20]	; (1ea8 <_ac_sync_init+0x20>)
    1e92:	3000      	adds	r0, #0
    1e94:	bf18      	it	ne
    1e96:	2001      	movne	r0, #1
    1e98:	4b04      	ldr	r3, [pc, #16]	; (1eac <_ac_sync_init+0x24>)
    1e9a:	4798      	blx	r3
	device->hw = hw;
    1e9c:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1e9e:	4620      	mov	r0, r4
    1ea0:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <_ac_sync_init+0x28>)
    1ea2:	4798      	blx	r3
}
    1ea4:	bd38      	pop	{r3, r4, r5, pc}
    1ea6:	bf00      	nop
    1ea8:	00006918 	.word	0x00006918
    1eac:	00001c75 	.word	0x00001c75
    1eb0:	00001e1d 	.word	0x00001e1d

00001eb4 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1eb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1eb6:	f013 0f01 	tst.w	r3, #1
    1eba:	d1fb      	bne.n	1eb4 <_adc_init>
    1ebc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ebe:	f013 0f03 	tst.w	r3, #3
    1ec2:	d1fb      	bne.n	1ebc <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1ec4:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1ec6:	f013 0f02 	tst.w	r3, #2
    1eca:	d12a      	bne.n	1f22 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ecc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ece:	f013 0f01 	tst.w	r3, #1
    1ed2:	d1fb      	bne.n	1ecc <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1ed4:	8803      	ldrh	r3, [r0, #0]
    1ed6:	b29b      	uxth	r3, r3
    1ed8:	f043 0301 	orr.w	r3, r3, #1
    1edc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1ede:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ee0:	f013 0f01 	tst.w	r3, #1
    1ee4:	d1fb      	bne.n	1ede <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1ee6:	2216      	movs	r2, #22
    1ee8:	4b0f      	ldr	r3, [pc, #60]	; (1f28 <_adc_init+0x74>)
    1eea:	fb02 3101 	mla	r1, r2, r1, r3
    1eee:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1ef0:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1ef2:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1ef4:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1ef6:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1ef8:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1efa:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1efc:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1efe:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1f00:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1f02:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1f04:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1f06:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1f08:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1f0a:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1f0c:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1f0e:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1f10:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1f12:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1f14:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1f16:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1f18:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1f1a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1f1c:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    1f1e:	2000      	movs	r0, #0
    1f20:	4770      	bx	lr
		return ERR_DENIED;
    1f22:	f06f 0010 	mvn.w	r0, #16
}
    1f26:	4770      	bx	lr
    1f28:	0000692c 	.word	0x0000692c

00001f2c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1f2c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1f30:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1f34:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1f38:	b148      	cbz	r0, 1f4e <_adc_get_regs+0x22>
    1f3a:	2801      	cmp	r0, #1
    1f3c:	d009      	beq.n	1f52 <_adc_get_regs+0x26>
{
    1f3e:	b508      	push	{r3, lr}
	ASSERT(false);
    1f40:	2291      	movs	r2, #145	; 0x91
    1f42:	4905      	ldr	r1, [pc, #20]	; (1f58 <_adc_get_regs+0x2c>)
    1f44:	2000      	movs	r0, #0
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <_adc_get_regs+0x30>)
    1f48:	4798      	blx	r3
	return 0;
    1f4a:	2000      	movs	r0, #0
    1f4c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1f4e:	2000      	movs	r0, #0
    1f50:	4770      	bx	lr
    1f52:	2001      	movs	r0, #1
    1f54:	4770      	bx	lr
    1f56:	bf00      	nop
    1f58:	00006958 	.word	0x00006958
    1f5c:	00001c75 	.word	0x00001c75

00001f60 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1f60:	b538      	push	{r3, r4, r5, lr}
    1f62:	460c      	mov	r4, r1
	ASSERT(device);
    1f64:	4605      	mov	r5, r0
    1f66:	22d5      	movs	r2, #213	; 0xd5
    1f68:	4907      	ldr	r1, [pc, #28]	; (1f88 <_adc_sync_init+0x28>)
    1f6a:	3000      	adds	r0, #0
    1f6c:	bf18      	it	ne
    1f6e:	2001      	movne	r0, #1
    1f70:	4b06      	ldr	r3, [pc, #24]	; (1f8c <_adc_sync_init+0x2c>)
    1f72:	4798      	blx	r3

	device->hw = hw;
    1f74:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1f76:	4620      	mov	r0, r4
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <_adc_sync_init+0x30>)
    1f7a:	4798      	blx	r3
    1f7c:	4601      	mov	r1, r0
    1f7e:	4620      	mov	r0, r4
    1f80:	4b04      	ldr	r3, [pc, #16]	; (1f94 <_adc_sync_init+0x34>)
    1f82:	4798      	blx	r3
}
    1f84:	bd38      	pop	{r3, r4, r5, pc}
    1f86:	bf00      	nop
    1f88:	00006958 	.word	0x00006958
    1f8c:	00001c75 	.word	0x00001c75
    1f90:	00001f2d 	.word	0x00001f2d
    1f94:	00001eb5 	.word	0x00001eb5

00001f98 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f98:	0943      	lsrs	r3, r0, #5
    1f9a:	f000 001f 	and.w	r0, r0, #31
    1f9e:	2201      	movs	r2, #1
    1fa0:	fa02 f000 	lsl.w	r0, r2, r0
    1fa4:	3340      	adds	r3, #64	; 0x40
    1fa6:	4a02      	ldr	r2, [pc, #8]	; (1fb0 <_irq_set+0x18>)
    1fa8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1fac:	4770      	bx	lr
    1fae:	bf00      	nop
    1fb0:	e000e100 	.word	0xe000e100

00001fb4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1fb4:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1fb8:	fb03 f000 	mul.w	r0, r3, r0
    1fbc:	4770      	bx	lr
	...

00001fc0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1fc0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1fc2:	4a0c      	ldr	r2, [pc, #48]	; (1ff4 <_init_chip+0x34>)
    1fc4:	8813      	ldrh	r3, [r2, #0]
    1fc6:	b29b      	uxth	r3, r3
    1fc8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1fca:	4b0b      	ldr	r3, [pc, #44]	; (1ff8 <_init_chip+0x38>)
    1fcc:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    1fce:	4b0b      	ldr	r3, [pc, #44]	; (1ffc <_init_chip+0x3c>)
    1fd0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1fd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1fd6:	4c0a      	ldr	r4, [pc, #40]	; (2000 <_init_chip+0x40>)
    1fd8:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1fda:	4b0a      	ldr	r3, [pc, #40]	; (2004 <_init_chip+0x44>)
    1fdc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1fde:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1fe2:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1fe4:	4a08      	ldr	r2, [pc, #32]	; (2008 <_init_chip+0x48>)
    1fe6:	6913      	ldr	r3, [r2, #16]
    1fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1fec:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1fee:	4b07      	ldr	r3, [pc, #28]	; (200c <_init_chip+0x4c>)
    1ff0:	4798      	blx	r3
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	41004000 	.word	0x41004000
    1ff8:	00002491 	.word	0x00002491
    1ffc:	000023b9 	.word	0x000023b9
    2000:	00002311 	.word	0x00002311
    2004:	000024bd 	.word	0x000024bd
    2008:	40000800 	.word	0x40000800
    200c:	00002119 	.word	0x00002119

00002010 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    2010:	b510      	push	{r4, lr}
    2012:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    2014:	22f3      	movs	r2, #243	; 0xf3
    2016:	4915      	ldr	r1, [pc, #84]	; (206c <_dac_init+0x5c>)
    2018:	4815      	ldr	r0, [pc, #84]	; (2070 <_dac_init+0x60>)
    201a:	4284      	cmp	r4, r0
    201c:	bf14      	ite	ne
    201e:	2000      	movne	r0, #0
    2020:	2001      	moveq	r0, #1
    2022:	4b14      	ldr	r3, [pc, #80]	; (2074 <_dac_init+0x64>)
    2024:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2026:	68a3      	ldr	r3, [r4, #8]
    2028:	f013 0f01 	tst.w	r3, #1
    202c:	d1fb      	bne.n	2026 <_dac_init+0x16>
    202e:	68a3      	ldr	r3, [r4, #8]
    2030:	f013 0f03 	tst.w	r3, #3
    2034:	d1fb      	bne.n	202e <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    2036:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    2038:	f013 0f02 	tst.w	r3, #2
    203c:	d113      	bne.n	2066 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    203e:	68a3      	ldr	r3, [r4, #8]
    2040:	f013 0f01 	tst.w	r3, #1
    2044:	d1fb      	bne.n	203e <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    2046:	7823      	ldrb	r3, [r4, #0]
    2048:	f043 0301 	orr.w	r3, r3, #1
    204c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    204e:	68a3      	ldr	r3, [r4, #8]
    2050:	f013 0f01 	tst.w	r3, #1
    2054:	d1fb      	bne.n	204e <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    2056:	2000      	movs	r0, #0
    2058:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    205a:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    205c:	81a0      	strh	r0, [r4, #12]
    205e:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    2060:	2301      	movs	r3, #1
    2062:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    2064:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2066:	f06f 0003 	mvn.w	r0, #3
}
    206a:	bd10      	pop	{r4, pc}
    206c:	00006970 	.word	0x00006970
    2070:	43002400 	.word	0x43002400
    2074:	00001c75 	.word	0x00001c75

00002078 <_dac_sync_init>:
{
    2078:	b538      	push	{r3, r4, r5, lr}
    207a:	460c      	mov	r4, r1
	ASSERT(device);
    207c:	4605      	mov	r5, r0
    207e:	2261      	movs	r2, #97	; 0x61
    2080:	4905      	ldr	r1, [pc, #20]	; (2098 <_dac_sync_init+0x20>)
    2082:	3000      	adds	r0, #0
    2084:	bf18      	it	ne
    2086:	2001      	movne	r0, #1
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <_dac_sync_init+0x24>)
    208a:	4798      	blx	r3
	device->hw = hw;
    208c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    208e:	4620      	mov	r0, r4
    2090:	4b03      	ldr	r3, [pc, #12]	; (20a0 <_dac_sync_init+0x28>)
    2092:	4798      	blx	r3
}
    2094:	bd38      	pop	{r3, r4, r5, pc}
    2096:	bf00      	nop
    2098:	00006970 	.word	0x00006970
    209c:	00001c75 	.word	0x00001c75
    20a0:	00002011 	.word	0x00002011

000020a4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    20a4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    20a6:	4a1a      	ldr	r2, [pc, #104]	; (2110 <_dmac_handler+0x6c>)
    20a8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    20aa:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    20ae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    20b2:	4818      	ldr	r0, [pc, #96]	; (2114 <_dmac_handler+0x70>)
    20b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    20b8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    20bc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    20c0:	f012 0f01 	tst.w	r2, #1
    20c4:	d10a      	bne.n	20dc <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    20c6:	011a      	lsls	r2, r3, #4
    20c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    20cc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    20d0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    20d4:	f012 0f02 	tst.w	r2, #2
    20d8:	d10b      	bne.n	20f2 <_dmac_handler+0x4e>
    20da:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    20dc:	011a      	lsls	r2, r3, #4
    20de:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    20e2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    20e6:	2101      	movs	r1, #1
    20e8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    20ec:	6843      	ldr	r3, [r0, #4]
    20ee:	4798      	blx	r3
    20f0:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    20f2:	011a      	lsls	r2, r3, #4
    20f4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    20f8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    20fc:	2102      	movs	r1, #2
    20fe:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2106:	4a03      	ldr	r2, [pc, #12]	; (2114 <_dmac_handler+0x70>)
    2108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    210c:	4798      	blx	r3
	}
}
    210e:	e7e4      	b.n	20da <_dmac_handler+0x36>
    2110:	4100a000 	.word	0x4100a000
    2114:	200004d0 	.word	0x200004d0

00002118 <_dma_init>:
{
    2118:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    211a:	4a33      	ldr	r2, [pc, #204]	; (21e8 <_dma_init+0xd0>)
    211c:	8813      	ldrh	r3, [r2, #0]
    211e:	f023 0302 	bic.w	r3, r3, #2
    2122:	041b      	lsls	r3, r3, #16
    2124:	0c1b      	lsrs	r3, r3, #16
    2126:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2128:	8853      	ldrh	r3, [r2, #2]
    212a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    212e:	041b      	lsls	r3, r3, #16
    2130:	0c1b      	lsrs	r3, r3, #16
    2132:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2134:	8813      	ldrh	r3, [r2, #0]
    2136:	b29b      	uxth	r3, r3
    2138:	f043 0301 	orr.w	r3, r3, #1
    213c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    213e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2140:	f013 0f01 	tst.w	r3, #1
    2144:	d1fb      	bne.n	213e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2146:	4b28      	ldr	r3, [pc, #160]	; (21e8 <_dma_init+0xd0>)
    2148:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    214c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    214e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2154:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2156:	2000      	movs	r0, #0
    2158:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    215a:	4a24      	ldr	r2, [pc, #144]	; (21ec <_dma_init+0xd4>)
    215c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2160:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2162:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2166:	639a      	str	r2, [r3, #56]	; 0x38
    2168:	4b21      	ldr	r3, [pc, #132]	; (21f0 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    216a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    216e:	681c      	ldr	r4, [r3, #0]
    2170:	0101      	lsls	r1, r0, #4
    2172:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2176:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    217a:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    217c:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    217e:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2182:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2184:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2188:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    218a:	4429      	add	r1, r5
    218c:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2190:	3001      	adds	r0, #1
    2192:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2194:	2820      	cmp	r0, #32
    2196:	d1ea      	bne.n	216e <_dma_init+0x56>
    2198:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    219a:	2001      	movs	r0, #1
    219c:	4915      	ldr	r1, [pc, #84]	; (21f4 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    219e:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    21a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    21a4:	d00b      	beq.n	21be <_dma_init+0xa6>
    21a6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    21a8:	2b24      	cmp	r3, #36	; 0x24
    21aa:	d1f8      	bne.n	219e <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    21ac:	4a0e      	ldr	r2, [pc, #56]	; (21e8 <_dma_init+0xd0>)
    21ae:	8813      	ldrh	r3, [r2, #0]
    21b0:	b29b      	uxth	r3, r3
    21b2:	f043 0302 	orr.w	r3, r3, #2
    21b6:	8013      	strh	r3, [r2, #0]
}
    21b8:	2000      	movs	r0, #0
    21ba:	bc30      	pop	{r4, r5}
    21bc:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21be:	095c      	lsrs	r4, r3, #5
    21c0:	f002 021f 	and.w	r2, r2, #31
    21c4:	fa00 f202 	lsl.w	r2, r0, r2
    21c8:	f104 0520 	add.w	r5, r4, #32
    21cc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    21d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21d4:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21d8:	f104 0560 	add.w	r5, r4, #96	; 0x60
    21dc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21e0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    21e4:	e7df      	b.n	21a6 <_dma_init+0x8e>
    21e6:	bf00      	nop
    21e8:	4100a000 	.word	0x4100a000
    21ec:	200004d0 	.word	0x200004d0
    21f0:	00006988 	.word	0x00006988
    21f4:	e000e100 	.word	0xe000e100

000021f8 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    21f8:	b508      	push	{r3, lr}
	_dmac_handler();
    21fa:	4b01      	ldr	r3, [pc, #4]	; (2200 <DMAC_0_Handler+0x8>)
    21fc:	4798      	blx	r3
    21fe:	bd08      	pop	{r3, pc}
    2200:	000020a5 	.word	0x000020a5

00002204 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    2204:	b508      	push	{r3, lr}
	_dmac_handler();
    2206:	4b01      	ldr	r3, [pc, #4]	; (220c <DMAC_1_Handler+0x8>)
    2208:	4798      	blx	r3
    220a:	bd08      	pop	{r3, pc}
    220c:	000020a5 	.word	0x000020a5

00002210 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    2210:	b508      	push	{r3, lr}
	_dmac_handler();
    2212:	4b01      	ldr	r3, [pc, #4]	; (2218 <DMAC_2_Handler+0x8>)
    2214:	4798      	blx	r3
    2216:	bd08      	pop	{r3, pc}
    2218:	000020a5 	.word	0x000020a5

0000221c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    221c:	b508      	push	{r3, lr}
	_dmac_handler();
    221e:	4b01      	ldr	r3, [pc, #4]	; (2224 <DMAC_3_Handler+0x8>)
    2220:	4798      	blx	r3
    2222:	bd08      	pop	{r3, pc}
    2224:	000020a5 	.word	0x000020a5

00002228 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    2228:	b508      	push	{r3, lr}
	_dmac_handler();
    222a:	4b01      	ldr	r3, [pc, #4]	; (2230 <DMAC_4_Handler+0x8>)
    222c:	4798      	blx	r3
    222e:	bd08      	pop	{r3, pc}
    2230:	000020a5 	.word	0x000020a5

00002234 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2234:	4a1e      	ldr	r2, [pc, #120]	; (22b0 <_ext_irq_init+0x7c>)
    2236:	6853      	ldr	r3, [r2, #4]
    2238:	f013 0f01 	tst.w	r3, #1
    223c:	d1fb      	bne.n	2236 <_ext_irq_init+0x2>
    223e:	4a1c      	ldr	r2, [pc, #112]	; (22b0 <_ext_irq_init+0x7c>)
    2240:	6853      	ldr	r3, [r2, #4]
    2242:	f013 0f03 	tst.w	r3, #3
    2246:	d1fb      	bne.n	2240 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2248:	4b19      	ldr	r3, [pc, #100]	; (22b0 <_ext_irq_init+0x7c>)
    224a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    224c:	f013 0f02 	tst.w	r3, #2
    2250:	d12b      	bne.n	22aa <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2252:	4a17      	ldr	r2, [pc, #92]	; (22b0 <_ext_irq_init+0x7c>)
    2254:	6853      	ldr	r3, [r2, #4]
    2256:	f013 0f01 	tst.w	r3, #1
    225a:	d1fb      	bne.n	2254 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    225c:	4a14      	ldr	r2, [pc, #80]	; (22b0 <_ext_irq_init+0x7c>)
    225e:	7813      	ldrb	r3, [r2, #0]
    2260:	f043 0301 	orr.w	r3, r3, #1
    2264:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2266:	6853      	ldr	r3, [r2, #4]
    2268:	f013 0f01 	tst.w	r3, #1
    226c:	d1fb      	bne.n	2266 <_ext_irq_init+0x32>
    226e:	4a10      	ldr	r2, [pc, #64]	; (22b0 <_ext_irq_init+0x7c>)
    2270:	6853      	ldr	r3, [r2, #4]
    2272:	f013 0f03 	tst.w	r3, #3
    2276:	d1fb      	bne.n	2270 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2278:	4b0d      	ldr	r3, [pc, #52]	; (22b0 <_ext_irq_init+0x7c>)
    227a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    227c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2280:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2282:	2200      	movs	r2, #0
    2284:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2286:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2288:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    228a:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    228c:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    228e:	61da      	str	r2, [r3, #28]
    2290:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2292:	461a      	mov	r2, r3
    2294:	6853      	ldr	r3, [r2, #4]
    2296:	f013 0f03 	tst.w	r3, #3
    229a:	d1fb      	bne.n	2294 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    229c:	4a04      	ldr	r2, [pc, #16]	; (22b0 <_ext_irq_init+0x7c>)
    229e:	7813      	ldrb	r3, [r2, #0]
    22a0:	f043 0302 	orr.w	r3, r3, #2
    22a4:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    22a6:	2000      	movs	r0, #0
    22a8:	4770      	bx	lr
		return ERR_DENIED;
    22aa:	f06f 0010 	mvn.w	r0, #16
}
    22ae:	4770      	bx	lr
    22b0:	40002800 	.word	0x40002800

000022b4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    22b4:	b430      	push	{r4, r5}
    22b6:	4814      	ldr	r0, [pc, #80]	; (2308 <_event_system_init+0x54>)
    22b8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    22bc:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    22be:	4c13      	ldr	r4, [pc, #76]	; (230c <_event_system_init+0x58>)
    22c0:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    22c2:	f813 1b01 	ldrb.w	r1, [r3], #1
    22c6:	3248      	adds	r2, #72	; 0x48
    22c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    22cc:	42ab      	cmp	r3, r5
    22ce:	d1f7      	bne.n	22c0 <_event_system_init+0xc>
    22d0:	480d      	ldr	r0, [pc, #52]	; (2308 <_event_system_init+0x54>)
    22d2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    22d6:	3080      	adds	r0, #128	; 0x80
    22d8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    22da:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    22de:	00ca      	lsls	r2, r1, #3
    22e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    22e4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    22e8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    22ea:	f850 3f04 	ldr.w	r3, [r0, #4]!
    22ee:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    22f0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    22f4:	43db      	mvns	r3, r3
    22f6:	b2db      	uxtb	r3, r3
    22f8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    22fc:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    22fe:	2920      	cmp	r1, #32
    2300:	d1eb      	bne.n	22da <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2302:	2000      	movs	r0, #0
    2304:	bc30      	pop	{r4, r5}
    2306:	4770      	bx	lr
    2308:	00006a88 	.word	0x00006a88
    230c:	4100e000 	.word	0x4100e000

00002310 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2310:	f010 0f01 	tst.w	r0, #1
    2314:	d002      	beq.n	231c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2316:	4a23      	ldr	r2, [pc, #140]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2318:	4b23      	ldr	r3, [pc, #140]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    231a:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    231c:	f010 0f02 	tst.w	r0, #2
    2320:	d002      	beq.n	2328 <_gclk_init_generators_by_fref+0x18>
    2322:	4a22      	ldr	r2, [pc, #136]	; (23ac <_gclk_init_generators_by_fref+0x9c>)
    2324:	4b20      	ldr	r3, [pc, #128]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2326:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    2328:	f010 0f04 	tst.w	r0, #4
    232c:	d002      	beq.n	2334 <_gclk_init_generators_by_fref+0x24>
    232e:	4a1d      	ldr	r2, [pc, #116]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2330:	4b1d      	ldr	r3, [pc, #116]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2332:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    2334:	f010 0f08 	tst.w	r0, #8
    2338:	d002      	beq.n	2340 <_gclk_init_generators_by_fref+0x30>
    233a:	4a1a      	ldr	r2, [pc, #104]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    233c:	4b1a      	ldr	r3, [pc, #104]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    233e:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    2340:	f010 0f10 	tst.w	r0, #16
    2344:	d002      	beq.n	234c <_gclk_init_generators_by_fref+0x3c>
    2346:	4a17      	ldr	r2, [pc, #92]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2348:	4b17      	ldr	r3, [pc, #92]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    234a:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    234c:	f010 0f20 	tst.w	r0, #32
    2350:	d002      	beq.n	2358 <_gclk_init_generators_by_fref+0x48>
    2352:	4a14      	ldr	r2, [pc, #80]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2354:	4b14      	ldr	r3, [pc, #80]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2356:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    2358:	f010 0f40 	tst.w	r0, #64	; 0x40
    235c:	d002      	beq.n	2364 <_gclk_init_generators_by_fref+0x54>
    235e:	4a11      	ldr	r2, [pc, #68]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2360:	4b11      	ldr	r3, [pc, #68]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2362:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    2364:	f010 0f80 	tst.w	r0, #128	; 0x80
    2368:	d002      	beq.n	2370 <_gclk_init_generators_by_fref+0x60>
    236a:	4a0e      	ldr	r2, [pc, #56]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    236c:	4b0e      	ldr	r3, [pc, #56]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    236e:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    2370:	f410 7f80 	tst.w	r0, #256	; 0x100
    2374:	d002      	beq.n	237c <_gclk_init_generators_by_fref+0x6c>
    2376:	4a0b      	ldr	r2, [pc, #44]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2378:	4b0b      	ldr	r3, [pc, #44]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    237a:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    237c:	f410 7f00 	tst.w	r0, #512	; 0x200
    2380:	d002      	beq.n	2388 <_gclk_init_generators_by_fref+0x78>
    2382:	4a08      	ldr	r2, [pc, #32]	; (23a4 <_gclk_init_generators_by_fref+0x94>)
    2384:	4b08      	ldr	r3, [pc, #32]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2386:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    2388:	f410 6f80 	tst.w	r0, #1024	; 0x400
    238c:	d002      	beq.n	2394 <_gclk_init_generators_by_fref+0x84>
    238e:	4a08      	ldr	r2, [pc, #32]	; (23b0 <_gclk_init_generators_by_fref+0xa0>)
    2390:	4b05      	ldr	r3, [pc, #20]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    2392:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2394:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2398:	d002      	beq.n	23a0 <_gclk_init_generators_by_fref+0x90>
    239a:	4a06      	ldr	r2, [pc, #24]	; (23b4 <_gclk_init_generators_by_fref+0xa4>)
    239c:	4b02      	ldr	r3, [pc, #8]	; (23a8 <_gclk_init_generators_by_fref+0x98>)
    239e:	64da      	str	r2, [r3, #76]	; 0x4c
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop
    23a4:	00012b06 	.word	0x00012b06
    23a8:	40001c00 	.word	0x40001c00
    23ac:	00012306 	.word	0x00012306
    23b0:	00012b05 	.word	0x00012b05
    23b4:	00013b05 	.word	0x00013b05

000023b8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    23b8:	2201      	movs	r2, #1
    23ba:	4b01      	ldr	r3, [pc, #4]	; (23c0 <_mclk_init+0x8>)
    23bc:	715a      	strb	r2, [r3, #5]
    23be:	4770      	bx	lr
    23c0:	40000800 	.word	0x40000800

000023c4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    23c4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    23c6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    23c8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    23ca:	f012 0f01 	tst.w	r2, #1
    23ce:	d005      	beq.n	23dc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    23d0:	2201      	movs	r2, #1
    23d2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    23d4:	6803      	ldr	r3, [r0, #0]
    23d6:	b153      	cbz	r3, 23ee <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    23d8:	4798      	blx	r3
    23da:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    23dc:	8a1a      	ldrh	r2, [r3, #16]
    23de:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    23e0:	b12a      	cbz	r2, 23ee <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    23e2:	f240 225e 	movw	r2, #606	; 0x25e
    23e6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    23e8:	6843      	ldr	r3, [r0, #4]
    23ea:	b103      	cbz	r3, 23ee <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    23ec:	4798      	blx	r3
    23ee:	bd08      	pop	{r3, pc}

000023f0 <_flash_init>:
{
    23f0:	b538      	push	{r3, r4, r5, lr}
    23f2:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    23f4:	4605      	mov	r5, r0
    23f6:	b350      	cbz	r0, 244e <_flash_init+0x5e>
    23f8:	4816      	ldr	r0, [pc, #88]	; (2454 <_flash_init+0x64>)
    23fa:	4281      	cmp	r1, r0
    23fc:	bf14      	ite	ne
    23fe:	2000      	movne	r0, #0
    2400:	2001      	moveq	r0, #1
    2402:	2256      	movs	r2, #86	; 0x56
    2404:	4914      	ldr	r1, [pc, #80]	; (2458 <_flash_init+0x68>)
    2406:	4b15      	ldr	r3, [pc, #84]	; (245c <_flash_init+0x6c>)
    2408:	4798      	blx	r3
	device->hw = hw;
    240a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    240c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    240e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2412:	049b      	lsls	r3, r3, #18
    2414:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2416:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2418:	4b11      	ldr	r3, [pc, #68]	; (2460 <_flash_init+0x70>)
    241a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    241c:	4b11      	ldr	r3, [pc, #68]	; (2464 <_flash_init+0x74>)
    241e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2422:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    242a:	f3bf 8f6f 	isb	sy
    242e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    243a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    243e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2442:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2446:	6019      	str	r1, [r3, #0]
    2448:	601a      	str	r2, [r3, #0]
}
    244a:	2000      	movs	r0, #0
    244c:	bd38      	pop	{r3, r4, r5, pc}
    244e:	2000      	movs	r0, #0
    2450:	e7d7      	b.n	2402 <_flash_init+0x12>
    2452:	bf00      	nop
    2454:	41004000 	.word	0x41004000
    2458:	00006b8c 	.word	0x00006b8c
    245c:	00001c75 	.word	0x00001c75
    2460:	20000a50 	.word	0x20000a50
    2464:	e000e100 	.word	0xe000e100

00002468 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2468:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    246a:	4b02      	ldr	r3, [pc, #8]	; (2474 <NVMCTRL_0_Handler+0xc>)
    246c:	6818      	ldr	r0, [r3, #0]
    246e:	4b02      	ldr	r3, [pc, #8]	; (2478 <NVMCTRL_0_Handler+0x10>)
    2470:	4798      	blx	r3
    2472:	bd08      	pop	{r3, pc}
    2474:	20000a50 	.word	0x20000a50
    2478:	000023c5 	.word	0x000023c5

0000247c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    247c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    247e:	4b02      	ldr	r3, [pc, #8]	; (2488 <NVMCTRL_1_Handler+0xc>)
    2480:	6818      	ldr	r0, [r3, #0]
    2482:	4b02      	ldr	r3, [pc, #8]	; (248c <NVMCTRL_1_Handler+0x10>)
    2484:	4798      	blx	r3
    2486:	bd08      	pop	{r3, pc}
    2488:	20000a50 	.word	0x20000a50
    248c:	000023c5 	.word	0x000023c5

00002490 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2490:	4b09      	ldr	r3, [pc, #36]	; (24b8 <_osc32kctrl_init_sources+0x28>)
    2492:	f242 024e 	movw	r2, #8270	; 0x204e
    2496:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2498:	2201      	movs	r2, #1
    249a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    249c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    249e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    24a0:	2200      	movs	r2, #0
    24a2:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    24a4:	461a      	mov	r2, r3
    24a6:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    24a8:	f013 0f01 	tst.w	r3, #1
    24ac:	d0fb      	beq.n	24a6 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    24ae:	2204      	movs	r2, #4
    24b0:	4b01      	ldr	r3, [pc, #4]	; (24b8 <_osc32kctrl_init_sources+0x28>)
    24b2:	741a      	strb	r2, [r3, #16]
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop
    24b8:	40001400 	.word	0x40001400

000024bc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    24bc:	4a2b      	ldr	r2, [pc, #172]	; (256c <_oscctrl_init_referenced_generators+0xb0>)
    24be:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    24c0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    24c4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    24c8:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    24ca:	4b29      	ldr	r3, [pc, #164]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    24cc:	2200      	movs	r2, #0
    24ce:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    24d0:	4a28      	ldr	r2, [pc, #160]	; (2574 <_oscctrl_init_referenced_generators+0xb8>)
    24d2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    24d4:	461a      	mov	r2, r3
    24d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    24da:	f013 0f10 	tst.w	r3, #16
    24de:	d1fa      	bne.n	24d6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    24e0:	2200      	movs	r2, #0
    24e2:	4b23      	ldr	r3, [pc, #140]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    24e4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    24e8:	461a      	mov	r2, r3
    24ea:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    24ee:	f013 0f04 	tst.w	r3, #4
    24f2:	d1fa      	bne.n	24ea <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    24f4:	2242      	movs	r2, #66	; 0x42
    24f6:	4b1e      	ldr	r3, [pc, #120]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    24f8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    24fa:	461a      	mov	r2, r3
    24fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2500:	f013 0f02 	tst.w	r3, #2
    2504:	d1fa      	bne.n	24fc <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2506:	4b1a      	ldr	r3, [pc, #104]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    2508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    250a:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    250c:	461a      	mov	r2, r3
    250e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2512:	f013 0f08 	tst.w	r3, #8
    2516:	d1fa      	bne.n	250e <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2518:	2282      	movs	r2, #130	; 0x82
    251a:	4b15      	ldr	r3, [pc, #84]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    251c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2520:	461a      	mov	r2, r3
    2522:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2526:	f013 0f04 	tst.w	r3, #4
    252a:	d1fa      	bne.n	2522 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    252c:	4b10      	ldr	r3, [pc, #64]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    252e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2532:	f013 0f01 	tst.w	r3, #1
    2536:	d012      	beq.n	255e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2538:	4a0d      	ldr	r2, [pc, #52]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    253a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    253c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2540:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2544:	d1f9      	bne.n	253a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2546:	4a09      	ldr	r2, [pc, #36]	; (256c <_oscctrl_init_referenced_generators+0xb0>)
    2548:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    254a:	2b00      	cmp	r3, #0
    254c:	d1fc      	bne.n	2548 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    254e:	4a07      	ldr	r2, [pc, #28]	; (256c <_oscctrl_init_referenced_generators+0xb0>)
    2550:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2552:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2556:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    255a:	6213      	str	r3, [r2, #32]
    255c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    255e:	4a04      	ldr	r2, [pc, #16]	; (2570 <_oscctrl_init_referenced_generators+0xb4>)
    2560:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2562:	f413 7f80 	tst.w	r3, #256	; 0x100
    2566:	d0fb      	beq.n	2560 <_oscctrl_init_referenced_generators+0xa4>
    2568:	e7ed      	b.n	2546 <_oscctrl_init_referenced_generators+0x8a>
    256a:	bf00      	nop
    256c:	40001c00 	.word	0x40001c00
    2570:	40001000 	.word	0x40001000
    2574:	04010000 	.word	0x04010000

00002578 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2578:	b500      	push	{lr}
    257a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    257c:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <RAMECC_Handler+0x3c>)
    257e:	789b      	ldrb	r3, [r3, #2]
    2580:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2582:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2584:	9b01      	ldr	r3, [sp, #4]
    2586:	f013 0f02 	tst.w	r3, #2
    258a:	d006      	beq.n	259a <RAMECC_Handler+0x22>
    258c:	4b0a      	ldr	r3, [pc, #40]	; (25b8 <RAMECC_Handler+0x40>)
    258e:	681b      	ldr	r3, [r3, #0]
    2590:	b11b      	cbz	r3, 259a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2592:	4a08      	ldr	r2, [pc, #32]	; (25b4 <RAMECC_Handler+0x3c>)
    2594:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2596:	4798      	blx	r3
    2598:	e009      	b.n	25ae <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    259a:	9b01      	ldr	r3, [sp, #4]
    259c:	f013 0f01 	tst.w	r3, #1
    25a0:	d005      	beq.n	25ae <RAMECC_Handler+0x36>
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <RAMECC_Handler+0x40>)
    25a4:	685b      	ldr	r3, [r3, #4]
    25a6:	b113      	cbz	r3, 25ae <RAMECC_Handler+0x36>
    25a8:	4a02      	ldr	r2, [pc, #8]	; (25b4 <RAMECC_Handler+0x3c>)
    25aa:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    25ac:	4798      	blx	r3
	} else {
		return;
	}
}
    25ae:	b003      	add	sp, #12
    25b0:	f85d fb04 	ldr.w	pc, [sp], #4
    25b4:	41020000 	.word	0x41020000
    25b8:	200031d0 	.word	0x200031d0

000025bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    25bc:	b470      	push	{r4, r5, r6}
    25be:	b087      	sub	sp, #28
    25c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    25c2:	466c      	mov	r4, sp
    25c4:	4d0c      	ldr	r5, [pc, #48]	; (25f8 <_sercom_get_hardware_index+0x3c>)
    25c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    25c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    25ca:	e895 0003 	ldmia.w	r5, {r0, r1}
    25ce:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    25d2:	9b00      	ldr	r3, [sp, #0]
    25d4:	42b3      	cmp	r3, r6
    25d6:	d00c      	beq.n	25f2 <_sercom_get_hardware_index+0x36>
    25d8:	4632      	mov	r2, r6
    25da:	2001      	movs	r0, #1
    25dc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    25e0:	4293      	cmp	r3, r2
    25e2:	d007      	beq.n	25f4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25e4:	3001      	adds	r0, #1
    25e6:	2806      	cmp	r0, #6
    25e8:	d1f8      	bne.n	25dc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    25ea:	2000      	movs	r0, #0
}
    25ec:	b007      	add	sp, #28
    25ee:	bc70      	pop	{r4, r5, r6}
    25f0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25f2:	2000      	movs	r0, #0
			return i;
    25f4:	b2c0      	uxtb	r0, r0
    25f6:	e7f9      	b.n	25ec <_sercom_get_hardware_index+0x30>
    25f8:	00006bac 	.word	0x00006bac

000025fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    25fc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <_sercom_get_irq_num+0x10>)
    2600:	4798      	blx	r3
    2602:	0080      	lsls	r0, r0, #2
    2604:	302e      	adds	r0, #46	; 0x2e
}
    2606:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    260a:	bd08      	pop	{r3, pc}
    260c:	000025bd 	.word	0x000025bd

00002610 <_usart_init>:
{
    2610:	b538      	push	{r3, r4, r5, lr}
    2612:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2614:	4b33      	ldr	r3, [pc, #204]	; (26e4 <_usart_init+0xd4>)
    2616:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2618:	2803      	cmp	r0, #3
    261a:	d056      	beq.n	26ca <_usart_init+0xba>
    261c:	2804      	cmp	r0, #4
    261e:	d052      	beq.n	26c6 <_usart_init+0xb6>
    2620:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2622:	bf08      	it	eq
    2624:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    2626:	d006      	beq.n	2636 <_usart_init+0x26>
	ASSERT(false);
    2628:	f240 2262 	movw	r2, #610	; 0x262
    262c:	492e      	ldr	r1, [pc, #184]	; (26e8 <_usart_init+0xd8>)
    262e:	2000      	movs	r0, #0
    2630:	4b2e      	ldr	r3, [pc, #184]	; (26ec <_usart_init+0xdc>)
    2632:	4798      	blx	r3
	return 0;
    2634:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2636:	69e3      	ldr	r3, [r4, #28]
    2638:	f013 0f01 	tst.w	r3, #1
    263c:	d1fb      	bne.n	2636 <_usart_init+0x26>
    263e:	69e3      	ldr	r3, [r4, #28]
    2640:	f013 0f03 	tst.w	r3, #3
    2644:	d1fb      	bne.n	263e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2646:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    2648:	f013 0f02 	tst.w	r3, #2
    264c:	d147      	bne.n	26de <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    264e:	69e3      	ldr	r3, [r4, #28]
    2650:	f013 0f01 	tst.w	r3, #1
    2654:	d1fb      	bne.n	264e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    2656:	6823      	ldr	r3, [r4, #0]
    2658:	f043 0301 	orr.w	r3, r3, #1
    265c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    265e:	69e3      	ldr	r3, [r4, #28]
    2660:	f013 0f01 	tst.w	r3, #1
    2664:	d1fb      	bne.n	265e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2666:	4610      	mov	r0, r2
    2668:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    266c:	4920      	ldr	r1, [pc, #128]	; (26f0 <_usart_init+0xe0>)
    266e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2672:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2674:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2676:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2678:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    267c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    267e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2682:	d024      	beq.n	26ce <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2684:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2688:	4b19      	ldr	r3, [pc, #100]	; (26f0 <_usart_init+0xe0>)
    268a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    268e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2690:	89a3      	ldrh	r3, [r4, #12]
    2692:	f361 030c 	bfi	r3, r1, #0, #13
    2696:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2698:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    269c:	89a3      	ldrh	r3, [r4, #12]
    269e:	f362 334f 	bfi	r3, r2, #13, #3
    26a2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    26a4:	4b12      	ldr	r3, [pc, #72]	; (26f0 <_usart_init+0xe0>)
    26a6:	0042      	lsls	r2, r0, #1
    26a8:	1811      	adds	r1, r2, r0
    26aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    26ae:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    26b2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    26b4:	4402      	add	r2, r0
    26b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    26ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    26be:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    26c2:	2000      	movs	r0, #0
    26c4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    26c6:	2201      	movs	r2, #1
    26c8:	e7b5      	b.n	2636 <_usart_init+0x26>
    26ca:	2200      	movs	r2, #0
    26cc:	e7b3      	b.n	2636 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    26ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    26d2:	4b07      	ldr	r3, [pc, #28]	; (26f0 <_usart_init+0xe0>)
    26d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    26d8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    26da:	81a3      	strh	r3, [r4, #12]
    26dc:	e7e2      	b.n	26a4 <_usart_init+0x94>
		return ERR_DENIED;
    26de:	f06f 0010 	mvn.w	r0, #16
}
    26e2:	bd38      	pop	{r3, r4, r5, pc}
    26e4:	000025bd 	.word	0x000025bd
    26e8:	00006c38 	.word	0x00006c38
    26ec:	00001c75 	.word	0x00001c75
    26f0:	00006bac 	.word	0x00006bac

000026f4 <_usart_async_init>:
{
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	460d      	mov	r5, r1
	ASSERT(device);
    26f8:	4606      	mov	r6, r0
    26fa:	22da      	movs	r2, #218	; 0xda
    26fc:	4912      	ldr	r1, [pc, #72]	; (2748 <_usart_async_init+0x54>)
    26fe:	3000      	adds	r0, #0
    2700:	bf18      	it	ne
    2702:	2001      	movne	r0, #1
    2704:	4b11      	ldr	r3, [pc, #68]	; (274c <_usart_async_init+0x58>)
    2706:	4798      	blx	r3
	init_status = _usart_init(hw);
    2708:	4628      	mov	r0, r5
    270a:	4b11      	ldr	r3, [pc, #68]	; (2750 <_usart_async_init+0x5c>)
    270c:	4798      	blx	r3
	if (init_status) {
    270e:	4604      	mov	r4, r0
    2710:	b9c0      	cbnz	r0, 2744 <_usart_async_init+0x50>
	device->hw = hw;
    2712:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    2714:	4628      	mov	r0, r5
    2716:	4b0f      	ldr	r3, [pc, #60]	; (2754 <_usart_async_init+0x60>)
    2718:	4798      	blx	r3
		irq = irq +2;
    271a:	3002      	adds	r0, #2
    271c:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    271e:	f000 031f 	and.w	r3, r0, #31
    2722:	2201      	movs	r2, #1
    2724:	409a      	lsls	r2, r3
    2726:	0943      	lsrs	r3, r0, #5
    2728:	009b      	lsls	r3, r3, #2
    272a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    272e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    273a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    273e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2742:	601a      	str	r2, [r3, #0]
}
    2744:	4620      	mov	r0, r4
    2746:	bd70      	pop	{r4, r5, r6, pc}
    2748:	00006c38 	.word	0x00006c38
    274c:	00001c75 	.word	0x00001c75
    2750:	00002611 	.word	0x00002611
    2754:	000025fd 	.word	0x000025fd

00002758 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2758:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    275a:	69d3      	ldr	r3, [r2, #28]
    275c:	f013 0f03 	tst.w	r3, #3
    2760:	d1fb      	bne.n	275a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2762:	6813      	ldr	r3, [r2, #0]
    2764:	f043 0302 	orr.w	r3, r3, #2
    2768:	6013      	str	r3, [r2, #0]
    276a:	4770      	bx	lr

0000276c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    276c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    276e:	6299      	str	r1, [r3, #40]	; 0x28
    2770:	4770      	bx	lr

00002772 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2772:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2774:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2776:	b2c0      	uxtb	r0, r0
    2778:	4770      	bx	lr

0000277a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    277a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    277c:	7e18      	ldrb	r0, [r3, #24]
}
    277e:	f000 0001 	and.w	r0, r0, #1
    2782:	4770      	bx	lr

00002784 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2784:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2786:	7e18      	ldrb	r0, [r3, #24]
}
    2788:	f3c0 0080 	ubfx	r0, r0, #2, #1
    278c:	4770      	bx	lr
	...

00002790 <_usart_async_set_irq_state>:
{
    2790:	b570      	push	{r4, r5, r6, lr}
    2792:	460c      	mov	r4, r1
    2794:	4616      	mov	r6, r2
	ASSERT(device);
    2796:	4605      	mov	r5, r0
    2798:	f44f 7211 	mov.w	r2, #580	; 0x244
    279c:	4915      	ldr	r1, [pc, #84]	; (27f4 <_usart_async_set_irq_state+0x64>)
    279e:	3000      	adds	r0, #0
    27a0:	bf18      	it	ne
    27a2:	2001      	movne	r0, #1
    27a4:	4b14      	ldr	r3, [pc, #80]	; (27f8 <_usart_async_set_irq_state+0x68>)
    27a6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    27a8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    27ac:	d10d      	bne.n	27ca <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    27ae:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    27b0:	b92e      	cbnz	r6, 27be <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    27b2:	2201      	movs	r2, #1
    27b4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    27b6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    27b8:	2202      	movs	r2, #2
    27ba:	751a      	strb	r2, [r3, #20]
    27bc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    27be:	2201      	movs	r2, #1
    27c0:	759a      	strb	r2, [r3, #22]
    27c2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    27c4:	2202      	movs	r2, #2
    27c6:	759a      	strb	r2, [r3, #22]
    27c8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    27ca:	2c01      	cmp	r4, #1
    27cc:	d002      	beq.n	27d4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    27ce:	2c03      	cmp	r4, #3
    27d0:	d008      	beq.n	27e4 <_usart_async_set_irq_state+0x54>
    27d2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    27d4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    27d6:	b916      	cbnz	r6, 27de <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    27d8:	2204      	movs	r2, #4
    27da:	751a      	strb	r2, [r3, #20]
    27dc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    27de:	2204      	movs	r2, #4
    27e0:	759a      	strb	r2, [r3, #22]
    27e2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    27e4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    27e6:	b116      	cbz	r6, 27ee <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    27e8:	2280      	movs	r2, #128	; 0x80
    27ea:	759a      	strb	r2, [r3, #22]
}
    27ec:	e7f1      	b.n	27d2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    27ee:	2280      	movs	r2, #128	; 0x80
    27f0:	751a      	strb	r2, [r3, #20]
    27f2:	bd70      	pop	{r4, r5, r6, pc}
    27f4:	00006c38 	.word	0x00006c38
    27f8:	00001c75 	.word	0x00001c75

000027fc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <_delay_init+0x10>)
    27fe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2802:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2804:	2205      	movs	r2, #5
    2806:	601a      	str	r2, [r3, #0]
    2808:	4770      	bx	lr
    280a:	bf00      	nop
    280c:	e000e010 	.word	0xe000e010

00002810 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2810:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2812:	b303      	cbz	r3, 2856 <_delay_cycles+0x46>
{
    2814:	b430      	push	{r4, r5}
    2816:	1e5d      	subs	r5, r3, #1
    2818:	b2ed      	uxtb	r5, r5
	while (n--) {
    281a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    281c:	4a12      	ldr	r2, [pc, #72]	; (2868 <_delay_cycles+0x58>)
    281e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2822:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2824:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2826:	6813      	ldr	r3, [r2, #0]
    2828:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    282c:	d0fb      	beq.n	2826 <_delay_cycles+0x16>
	while (n--) {
    282e:	3801      	subs	r0, #1
    2830:	b2c0      	uxtb	r0, r0
    2832:	28ff      	cmp	r0, #255	; 0xff
    2834:	d1f5      	bne.n	2822 <_delay_cycles+0x12>
    2836:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    283a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    283e:	3101      	adds	r1, #1
    2840:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2842:	4b09      	ldr	r3, [pc, #36]	; (2868 <_delay_cycles+0x58>)
    2844:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2846:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2848:	461a      	mov	r2, r3
    284a:	6813      	ldr	r3, [r2, #0]
    284c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2850:	d0fb      	beq.n	284a <_delay_cycles+0x3a>
		;
}
    2852:	bc30      	pop	{r4, r5}
    2854:	4770      	bx	lr
	SysTick->LOAD = buf;
    2856:	4b04      	ldr	r3, [pc, #16]	; (2868 <_delay_cycles+0x58>)
    2858:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    285a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    285c:	461a      	mov	r2, r3
    285e:	6813      	ldr	r3, [r2, #0]
    2860:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2864:	d0fb      	beq.n	285e <_delay_cycles+0x4e>
    2866:	4770      	bx	lr
    2868:	e000e010 	.word	0xe000e010

0000286c <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    286c:	b470      	push	{r4, r5, r6}
    286e:	b087      	sub	sp, #28
    2870:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2872:	ac01      	add	r4, sp, #4
    2874:	4d14      	ldr	r5, [pc, #80]	; (28c8 <_get_irq_num+0x5c>)
    2876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    287a:	682b      	ldr	r3, [r5, #0]
    287c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    287e:	42b0      	cmp	r0, r6
    2880:	d017      	beq.n	28b2 <_get_irq_num+0x46>
    2882:	4631      	mov	r1, r6
    2884:	2301      	movs	r3, #1
    2886:	a801      	add	r0, sp, #4
    2888:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    288c:	428a      	cmp	r2, r1
    288e:	d006      	beq.n	289e <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2890:	3301      	adds	r3, #1
    2892:	2b05      	cmp	r3, #5
    2894:	d1f8      	bne.n	2888 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2896:	2055      	movs	r0, #85	; 0x55
}
    2898:	b007      	add	sp, #28
    289a:	bc70      	pop	{r4, r5, r6}
    289c:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    289e:	b2db      	uxtb	r3, r3
    28a0:	2b04      	cmp	r3, #4
    28a2:	d80c      	bhi.n	28be <_get_irq_num+0x52>
    28a4:	e8df f003 	tbb	[pc, r3]
    28a8:	070d0305 	.word	0x070d0305
    28ac:	09          	.byte	0x09
    28ad:	00          	.byte	0x00
		return TCC1_0_IRQn;
    28ae:	205c      	movs	r0, #92	; 0x5c
    28b0:	e7f2      	b.n	2898 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    28b2:	2055      	movs	r0, #85	; 0x55
    28b4:	e7f0      	b.n	2898 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    28b6:	2065      	movs	r0, #101	; 0x65
    28b8:	e7ee      	b.n	2898 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    28ba:	2068      	movs	r0, #104	; 0x68
    28bc:	e7ec      	b.n	2898 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    28be:	2089      	movs	r0, #137	; 0x89
    28c0:	e7ea      	b.n	2898 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    28c2:	2061      	movs	r0, #97	; 0x61
    28c4:	e7e8      	b.n	2898 <_get_irq_num+0x2c>
    28c6:	bf00      	nop
    28c8:	00006c54 	.word	0x00006c54

000028cc <_tcc_timer_deinit>:
{
    28cc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    28ce:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    28d0:	4620      	mov	r0, r4
    28d2:	4b10      	ldr	r3, [pc, #64]	; (2914 <_tcc_timer_deinit+0x48>)
    28d4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    28d6:	0943      	lsrs	r3, r0, #5
    28d8:	f000 001f 	and.w	r0, r0, #31
    28dc:	2201      	movs	r2, #1
    28de:	fa02 f000 	lsl.w	r0, r2, r0
    28e2:	3320      	adds	r3, #32
    28e4:	4a0c      	ldr	r2, [pc, #48]	; (2918 <_tcc_timer_deinit+0x4c>)
    28e6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    28ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28ee:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    28f2:	68a3      	ldr	r3, [r4, #8]
    28f4:	f013 0f03 	tst.w	r3, #3
    28f8:	d1fb      	bne.n	28f2 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    28fa:	6823      	ldr	r3, [r4, #0]
    28fc:	f023 0302 	bic.w	r3, r3, #2
    2900:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2902:	68a3      	ldr	r3, [r4, #8]
    2904:	f013 0f01 	tst.w	r3, #1
    2908:	d1fb      	bne.n	2902 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    290a:	6823      	ldr	r3, [r4, #0]
    290c:	f043 0301 	orr.w	r3, r3, #1
    2910:	6023      	str	r3, [r4, #0]
    2912:	bd10      	pop	{r4, pc}
    2914:	0000286d 	.word	0x0000286d
    2918:	e000e100 	.word	0xe000e100

0000291c <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    291c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    291e:	6893      	ldr	r3, [r2, #8]
    2920:	f013 0f03 	tst.w	r3, #3
    2924:	d1fb      	bne.n	291e <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2926:	6813      	ldr	r3, [r2, #0]
    2928:	f043 0302 	orr.w	r3, r3, #2
    292c:	6013      	str	r3, [r2, #0]
    292e:	4770      	bx	lr

00002930 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2930:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2932:	6893      	ldr	r3, [r2, #8]
    2934:	f013 0f03 	tst.w	r3, #3
    2938:	d1fb      	bne.n	2932 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    293a:	6813      	ldr	r3, [r2, #0]
    293c:	f023 0302 	bic.w	r3, r3, #2
    2940:	6013      	str	r3, [r2, #0]
    2942:	4770      	bx	lr

00002944 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2944:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2946:	6419      	str	r1, [r3, #64]	; 0x40
    2948:	4770      	bx	lr

0000294a <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    294a:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    294c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    294e:	4770      	bx	lr

00002950 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2950:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2952:	6893      	ldr	r3, [r2, #8]
    2954:	f013 0f03 	tst.w	r3, #3
    2958:	d1fb      	bne.n	2952 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    295a:	6810      	ldr	r0, [r2, #0]
}
    295c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2960:	4770      	bx	lr

00002962 <tcc_interrupt_handler>:
{
    2962:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2964:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2968:	f012 0f01 	tst.w	r2, #1
    296c:	d100      	bne.n	2970 <tcc_interrupt_handler+0xe>
    296e:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2970:	2201      	movs	r2, #1
    2972:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2974:	6803      	ldr	r3, [r0, #0]
    2976:	4798      	blx	r3
}
    2978:	e7f9      	b.n	296e <tcc_interrupt_handler+0xc>
	...

0000297c <_tcc_timer_init>:
{
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	b087      	sub	sp, #28
    2980:	4605      	mov	r5, r0
    2982:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2984:	ae01      	add	r6, sp, #4
    2986:	4f4e      	ldr	r7, [pc, #312]	; (2ac0 <_tcc_timer_init+0x144>)
    2988:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    298a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    298c:	683b      	ldr	r3, [r7, #0]
    298e:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2990:	42a0      	cmp	r0, r4
    2992:	d00c      	beq.n	29ae <_tcc_timer_init+0x32>
    2994:	4621      	mov	r1, r4
    2996:	2301      	movs	r3, #1
    2998:	a801      	add	r0, sp, #4
    299a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    299e:	428a      	cmp	r2, r1
    29a0:	d006      	beq.n	29b0 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    29a2:	3301      	adds	r3, #1
    29a4:	2b05      	cmp	r3, #5
    29a6:	d1f8      	bne.n	299a <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    29a8:	2600      	movs	r6, #0
			return i;
    29aa:	b276      	sxtb	r6, r6
    29ac:	e015      	b.n	29da <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    29ae:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    29b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    29b4:	d073      	beq.n	2a9e <_tcc_timer_init+0x122>
    29b6:	2b01      	cmp	r3, #1
    29b8:	d06b      	beq.n	2a92 <_tcc_timer_init+0x116>
    29ba:	2b02      	cmp	r3, #2
    29bc:	d06b      	beq.n	2a96 <_tcc_timer_init+0x11a>
    29be:	2b03      	cmp	r3, #3
    29c0:	d06b      	beq.n	2a9a <_tcc_timer_init+0x11e>
    29c2:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    29c4:	bf08      	it	eq
    29c6:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    29c8:	d0ef      	beq.n	29aa <_tcc_timer_init+0x2e>
	ASSERT(false);
    29ca:	f240 128b 	movw	r2, #395	; 0x18b
    29ce:	493d      	ldr	r1, [pc, #244]	; (2ac4 <_tcc_timer_init+0x148>)
    29d0:	2000      	movs	r0, #0
    29d2:	4b3d      	ldr	r3, [pc, #244]	; (2ac8 <_tcc_timer_init+0x14c>)
    29d4:	4798      	blx	r3
	return -1;
    29d6:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    29da:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    29dc:	22e4      	movs	r2, #228	; 0xe4
    29de:	4939      	ldr	r1, [pc, #228]	; (2ac4 <_tcc_timer_init+0x148>)
    29e0:	2001      	movs	r0, #1
    29e2:	4b39      	ldr	r3, [pc, #228]	; (2ac8 <_tcc_timer_init+0x14c>)
    29e4:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    29e6:	68a3      	ldr	r3, [r4, #8]
    29e8:	f013 0f01 	tst.w	r3, #1
    29ec:	d1fb      	bne.n	29e6 <_tcc_timer_init+0x6a>
    29ee:	68a3      	ldr	r3, [r4, #8]
    29f0:	f013 0f03 	tst.w	r3, #3
    29f4:	d1fb      	bne.n	29ee <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    29f6:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    29f8:	f013 0f02 	tst.w	r3, #2
    29fc:	d15d      	bne.n	2aba <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    29fe:	68a3      	ldr	r3, [r4, #8]
    2a00:	f013 0f01 	tst.w	r3, #1
    2a04:	d1fb      	bne.n	29fe <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2a06:	6823      	ldr	r3, [r4, #0]
    2a08:	f043 0301 	orr.w	r3, r3, #1
    2a0c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a0e:	68a3      	ldr	r3, [r4, #8]
    2a10:	f013 0f01 	tst.w	r3, #1
    2a14:	d1fb      	bne.n	2a0e <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2a16:	4a2a      	ldr	r2, [pc, #168]	; (2ac0 <_tcc_timer_init+0x144>)
    2a18:	00f1      	lsls	r1, r6, #3
    2a1a:	198b      	adds	r3, r1, r6
    2a1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a20:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2a22:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2a24:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2a26:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2a28:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2a2a:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2a2c:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2a2e:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2a30:	440e      	add	r6, r1
    2a32:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2a36:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2a38:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2a3a:	2301      	movs	r3, #1
    2a3c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2a3e:	4b23      	ldr	r3, [pc, #140]	; (2acc <_tcc_timer_init+0x150>)
    2a40:	429c      	cmp	r4, r3
    2a42:	d02e      	beq.n	2aa2 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2a44:	4b22      	ldr	r3, [pc, #136]	; (2ad0 <_tcc_timer_init+0x154>)
    2a46:	429c      	cmp	r4, r3
    2a48:	d02e      	beq.n	2aa8 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2a4a:	4b22      	ldr	r3, [pc, #136]	; (2ad4 <_tcc_timer_init+0x158>)
    2a4c:	429c      	cmp	r4, r3
    2a4e:	d02e      	beq.n	2aae <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2a50:	4b21      	ldr	r3, [pc, #132]	; (2ad8 <_tcc_timer_init+0x15c>)
    2a52:	429c      	cmp	r4, r3
    2a54:	d02e      	beq.n	2ab4 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2a56:	4b21      	ldr	r3, [pc, #132]	; (2adc <_tcc_timer_init+0x160>)
    2a58:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2a5a:	bf04      	itt	eq
    2a5c:	4b20      	ldreq	r3, [pc, #128]	; (2ae0 <_tcc_timer_init+0x164>)
    2a5e:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2a60:	4620      	mov	r0, r4
    2a62:	4b20      	ldr	r3, [pc, #128]	; (2ae4 <_tcc_timer_init+0x168>)
    2a64:	4798      	blx	r3
    2a66:	f000 031f 	and.w	r3, r0, #31
    2a6a:	2201      	movs	r2, #1
    2a6c:	409a      	lsls	r2, r3
    2a6e:	0943      	lsrs	r3, r0, #5
    2a70:	009b      	lsls	r3, r3, #2
    2a72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2a76:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a8a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2a8c:	2000      	movs	r0, #0
}
    2a8e:	b007      	add	sp, #28
    2a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2a92:	2601      	movs	r6, #1
    2a94:	e789      	b.n	29aa <_tcc_timer_init+0x2e>
    2a96:	2602      	movs	r6, #2
    2a98:	e787      	b.n	29aa <_tcc_timer_init+0x2e>
    2a9a:	2603      	movs	r6, #3
    2a9c:	e785      	b.n	29aa <_tcc_timer_init+0x2e>
    2a9e:	2600      	movs	r6, #0
    2aa0:	e783      	b.n	29aa <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2aa2:	4b0f      	ldr	r3, [pc, #60]	; (2ae0 <_tcc_timer_init+0x164>)
    2aa4:	601d      	str	r5, [r3, #0]
    2aa6:	e7d3      	b.n	2a50 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2aa8:	4b0d      	ldr	r3, [pc, #52]	; (2ae0 <_tcc_timer_init+0x164>)
    2aaa:	605d      	str	r5, [r3, #4]
    2aac:	e7d3      	b.n	2a56 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2aae:	4b0c      	ldr	r3, [pc, #48]	; (2ae0 <_tcc_timer_init+0x164>)
    2ab0:	609d      	str	r5, [r3, #8]
    2ab2:	e7d5      	b.n	2a60 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2ab4:	4b0a      	ldr	r3, [pc, #40]	; (2ae0 <_tcc_timer_init+0x164>)
    2ab6:	60dd      	str	r5, [r3, #12]
    2ab8:	e7d2      	b.n	2a60 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2aba:	f06f 0010 	mvn.w	r0, #16
    2abe:	e7e6      	b.n	2a8e <_tcc_timer_init+0x112>
    2ac0:	00006c54 	.word	0x00006c54
    2ac4:	00006d1c 	.word	0x00006d1c
    2ac8:	00001c75 	.word	0x00001c75
    2acc:	41016000 	.word	0x41016000
    2ad0:	41018000 	.word	0x41018000
    2ad4:	42000c00 	.word	0x42000c00
    2ad8:	42001000 	.word	0x42001000
    2adc:	43001000 	.word	0x43001000
    2ae0:	20000a54 	.word	0x20000a54
    2ae4:	0000286d 	.word	0x0000286d

00002ae8 <_tcc_timer_set_irq>:
{
    2ae8:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2aea:	68c0      	ldr	r0, [r0, #12]
    2aec:	4b02      	ldr	r3, [pc, #8]	; (2af8 <_tcc_timer_set_irq+0x10>)
    2aee:	4798      	blx	r3
    2af0:	4b02      	ldr	r3, [pc, #8]	; (2afc <_tcc_timer_set_irq+0x14>)
    2af2:	4798      	blx	r3
    2af4:	bd08      	pop	{r3, pc}
    2af6:	bf00      	nop
    2af8:	0000286d 	.word	0x0000286d
    2afc:	00001f99 	.word	0x00001f99

00002b00 <_tcc_get_timer>:
}
    2b00:	4800      	ldr	r0, [pc, #0]	; (2b04 <_tcc_get_timer+0x4>)
    2b02:	4770      	bx	lr
    2b04:	2000006c 	.word	0x2000006c

00002b08 <TCC0_0_Handler>:
{
    2b08:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2b0a:	4b02      	ldr	r3, [pc, #8]	; (2b14 <TCC0_0_Handler+0xc>)
    2b0c:	6818      	ldr	r0, [r3, #0]
    2b0e:	4b02      	ldr	r3, [pc, #8]	; (2b18 <TCC0_0_Handler+0x10>)
    2b10:	4798      	blx	r3
    2b12:	bd08      	pop	{r3, pc}
    2b14:	20000a54 	.word	0x20000a54
    2b18:	00002963 	.word	0x00002963

00002b1c <TCC1_0_Handler>:
{
    2b1c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2b1e:	4b02      	ldr	r3, [pc, #8]	; (2b28 <TCC1_0_Handler+0xc>)
    2b20:	6858      	ldr	r0, [r3, #4]
    2b22:	4b02      	ldr	r3, [pc, #8]	; (2b2c <TCC1_0_Handler+0x10>)
    2b24:	4798      	blx	r3
    2b26:	bd08      	pop	{r3, pc}
    2b28:	20000a54 	.word	0x20000a54
    2b2c:	00002963 	.word	0x00002963

00002b30 <TCC2_0_Handler>:
{
    2b30:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2b32:	4b02      	ldr	r3, [pc, #8]	; (2b3c <TCC2_0_Handler+0xc>)
    2b34:	6898      	ldr	r0, [r3, #8]
    2b36:	4b02      	ldr	r3, [pc, #8]	; (2b40 <TCC2_0_Handler+0x10>)
    2b38:	4798      	blx	r3
    2b3a:	bd08      	pop	{r3, pc}
    2b3c:	20000a54 	.word	0x20000a54
    2b40:	00002963 	.word	0x00002963

00002b44 <TCC3_0_Handler>:
{
    2b44:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2b46:	4b02      	ldr	r3, [pc, #8]	; (2b50 <TCC3_0_Handler+0xc>)
    2b48:	68d8      	ldr	r0, [r3, #12]
    2b4a:	4b02      	ldr	r3, [pc, #8]	; (2b54 <TCC3_0_Handler+0x10>)
    2b4c:	4798      	blx	r3
    2b4e:	bd08      	pop	{r3, pc}
    2b50:	20000a54 	.word	0x20000a54
    2b54:	00002963 	.word	0x00002963

00002b58 <TCC4_0_Handler>:
{
    2b58:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2b5a:	4b02      	ldr	r3, [pc, #8]	; (2b64 <TCC4_0_Handler+0xc>)
    2b5c:	6918      	ldr	r0, [r3, #16]
    2b5e:	4b02      	ldr	r3, [pc, #8]	; (2b68 <TCC4_0_Handler+0x10>)
    2b60:	4798      	blx	r3
    2b62:	bd08      	pop	{r3, pc}
    2b64:	20000a54 	.word	0x20000a54
    2b68:	00002963 	.word	0x00002963

00002b6c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2b6c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b6e:	6913      	ldr	r3, [r2, #16]
    2b70:	f013 0f03 	tst.w	r3, #3
    2b74:	d1fb      	bne.n	2b6e <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2b76:	6813      	ldr	r3, [r2, #0]
    2b78:	f043 0302 	orr.w	r3, r3, #2
    2b7c:	6013      	str	r3, [r2, #0]
    2b7e:	4770      	bx	lr

00002b80 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2b80:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b82:	6913      	ldr	r3, [r2, #16]
    2b84:	f013 0f03 	tst.w	r3, #3
    2b88:	d1fb      	bne.n	2b82 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2b8a:	6813      	ldr	r3, [r2, #0]
    2b8c:	f023 0302 	bic.w	r3, r3, #2
    2b90:	6013      	str	r3, [r2, #0]
    2b92:	4770      	bx	lr

00002b94 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2b94:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2b96:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2b98:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2b9c:	2b02      	cmp	r3, #2
    2b9e:	d00b      	beq.n	2bb8 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2ba0:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2ba2:	f013 0f0c 	tst.w	r3, #12
    2ba6:	d009      	beq.n	2bbc <_tc_timer_set_period+0x28>
    2ba8:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2baa:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2bae:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2bb0:	bf04      	itt	eq
    2bb2:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2bb4:	76d1      	strbeq	r1, [r2, #27]
    2bb6:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2bb8:	61d1      	str	r1, [r2, #28]
    2bba:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2bbc:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2bbe:	8391      	strh	r1, [r2, #28]
    2bc0:	4770      	bx	lr

00002bc2 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2bc2:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2bc4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2bc6:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2bca:	2b02      	cmp	r3, #2
    2bcc:	d00c      	beq.n	2be8 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2bce:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2bd0:	f013 0f0c 	tst.w	r3, #12
    2bd4:	d00a      	beq.n	2bec <_tc_timer_get_period+0x2a>
    2bd6:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2bd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2bdc:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2bde:	bf06      	itte	eq
    2be0:	7ed0      	ldrbeq	r0, [r2, #27]
    2be2:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2be4:	2000      	movne	r0, #0
}
    2be6:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2be8:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2bea:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2bec:	8b90      	ldrh	r0, [r2, #28]
    2bee:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2bf0:	4770      	bx	lr

00002bf2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2bf2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bf4:	6913      	ldr	r3, [r2, #16]
    2bf6:	f013 0f03 	tst.w	r3, #3
    2bfa:	d1fb      	bne.n	2bf4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2bfc:	6810      	ldr	r0, [r2, #0]
}
    2bfe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2c02:	4770      	bx	lr

00002c04 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2c04:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2c06:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2c08:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2c0a:	f012 0f01 	tst.w	r2, #1
    2c0e:	d100      	bne.n	2c12 <tc_interrupt_handler+0xe>
    2c10:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2c12:	2201      	movs	r2, #1
    2c14:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2c16:	6803      	ldr	r3, [r0, #0]
    2c18:	4798      	blx	r3
	}
}
    2c1a:	e7f9      	b.n	2c10 <tc_interrupt_handler+0xc>

00002c1c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2c1c:	b538      	push	{r3, r4, r5, lr}
    2c1e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2c20:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2c22:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2c24:	f013 0f01 	tst.w	r3, #1
    2c28:	d004      	beq.n	2c34 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2c2a:	2301      	movs	r3, #1
    2c2c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2c2e:	6803      	ldr	r3, [r0, #0]
    2c30:	b103      	cbz	r3, 2c34 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2c32:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2c34:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2c36:	f013 0f02 	tst.w	r3, #2
    2c3a:	d005      	beq.n	2c48 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2c3c:	2302      	movs	r3, #2
    2c3e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2c40:	686b      	ldr	r3, [r5, #4]
    2c42:	b10b      	cbz	r3, 2c48 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2c44:	4628      	mov	r0, r5
    2c46:	4798      	blx	r3
    2c48:	bd38      	pop	{r3, r4, r5, pc}
	...

00002c4c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2c4c:	4b11      	ldr	r3, [pc, #68]	; (2c94 <_tc_init_irq_param+0x48>)
    2c4e:	4298      	cmp	r0, r3
    2c50:	d011      	beq.n	2c76 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2c52:	4b11      	ldr	r3, [pc, #68]	; (2c98 <_tc_init_irq_param+0x4c>)
    2c54:	4298      	cmp	r0, r3
    2c56:	d011      	beq.n	2c7c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2c58:	4b10      	ldr	r3, [pc, #64]	; (2c9c <_tc_init_irq_param+0x50>)
    2c5a:	4298      	cmp	r0, r3
    2c5c:	d011      	beq.n	2c82 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2c5e:	4b10      	ldr	r3, [pc, #64]	; (2ca0 <_tc_init_irq_param+0x54>)
    2c60:	4298      	cmp	r0, r3
    2c62:	d011      	beq.n	2c88 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2c64:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <_tc_init_irq_param+0x58>)
    2c66:	4298      	cmp	r0, r3
    2c68:	d011      	beq.n	2c8e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2c6a:	4b0f      	ldr	r3, [pc, #60]	; (2ca8 <_tc_init_irq_param+0x5c>)
    2c6c:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2c6e:	bf04      	itt	eq
    2c70:	4b0e      	ldreq	r3, [pc, #56]	; (2cac <_tc_init_irq_param+0x60>)
    2c72:	6159      	streq	r1, [r3, #20]
    2c74:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2c76:	4b0d      	ldr	r3, [pc, #52]	; (2cac <_tc_init_irq_param+0x60>)
    2c78:	6019      	str	r1, [r3, #0]
    2c7a:	e7f0      	b.n	2c5e <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2c7c:	4b0b      	ldr	r3, [pc, #44]	; (2cac <_tc_init_irq_param+0x60>)
    2c7e:	6059      	str	r1, [r3, #4]
    2c80:	e7f0      	b.n	2c64 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2c82:	4b0a      	ldr	r3, [pc, #40]	; (2cac <_tc_init_irq_param+0x60>)
    2c84:	6099      	str	r1, [r3, #8]
    2c86:	e7f0      	b.n	2c6a <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2c88:	4b08      	ldr	r3, [pc, #32]	; (2cac <_tc_init_irq_param+0x60>)
    2c8a:	60d9      	str	r1, [r3, #12]
    2c8c:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2c8e:	4b07      	ldr	r3, [pc, #28]	; (2cac <_tc_init_irq_param+0x60>)
    2c90:	6119      	str	r1, [r3, #16]
    2c92:	4770      	bx	lr
    2c94:	40003800 	.word	0x40003800
    2c98:	40003c00 	.word	0x40003c00
    2c9c:	4101a000 	.word	0x4101a000
    2ca0:	4101c000 	.word	0x4101c000
    2ca4:	42001400 	.word	0x42001400
    2ca8:	42001800 	.word	0x42001800
    2cac:	20000a68 	.word	0x20000a68

00002cb0 <get_tc_index>:
{
    2cb0:	b570      	push	{r4, r5, r6, lr}
    2cb2:	b086      	sub	sp, #24
    2cb4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2cb6:	466c      	mov	r4, sp
    2cb8:	4d18      	ldr	r5, [pc, #96]	; (2d1c <get_tc_index+0x6c>)
    2cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cbe:	e895 0003 	ldmia.w	r5, {r0, r1}
    2cc2:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2cc6:	9b00      	ldr	r3, [sp, #0]
    2cc8:	42b3      	cmp	r3, r6
    2cca:	d021      	beq.n	2d10 <get_tc_index+0x60>
    2ccc:	4631      	mov	r1, r6
    2cce:	2301      	movs	r3, #1
    2cd0:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2cd4:	428a      	cmp	r2, r1
    2cd6:	d01c      	beq.n	2d12 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2cd8:	3301      	adds	r3, #1
    2cda:	2b06      	cmp	r3, #6
    2cdc:	d1f8      	bne.n	2cd0 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2cde:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2ce0:	4a0f      	ldr	r2, [pc, #60]	; (2d20 <get_tc_index+0x70>)
    2ce2:	7812      	ldrb	r2, [r2, #0]
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d016      	beq.n	2d16 <get_tc_index+0x66>
    2ce8:	4a0d      	ldr	r2, [pc, #52]	; (2d20 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2cea:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2cec:	7d11      	ldrb	r1, [r2, #20]
    2cee:	4299      	cmp	r1, r3
    2cf0:	d012      	beq.n	2d18 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2cf2:	3001      	adds	r0, #1
    2cf4:	b2c0      	uxtb	r0, r0
    2cf6:	3214      	adds	r2, #20
    2cf8:	2806      	cmp	r0, #6
    2cfa:	d1f7      	bne.n	2cec <get_tc_index+0x3c>
	ASSERT(false);
    2cfc:	f240 2227 	movw	r2, #551	; 0x227
    2d00:	4908      	ldr	r1, [pc, #32]	; (2d24 <get_tc_index+0x74>)
    2d02:	2000      	movs	r0, #0
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <get_tc_index+0x78>)
    2d06:	4798      	blx	r3
	return -1;
    2d08:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d0c:	b006      	add	sp, #24
    2d0e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2d10:	2300      	movs	r3, #0
			return i;
    2d12:	b2db      	uxtb	r3, r3
    2d14:	e7e4      	b.n	2ce0 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2d16:	2000      	movs	r0, #0
			return i;
    2d18:	b240      	sxtb	r0, r0
    2d1a:	e7f7      	b.n	2d0c <get_tc_index+0x5c>
    2d1c:	00006d34 	.word	0x00006d34
    2d20:	2000008c 	.word	0x2000008c
    2d24:	00006d4c 	.word	0x00006d4c
    2d28:	00001c75 	.word	0x00001c75

00002d2c <_tc_timer_init>:
{
    2d2c:	b570      	push	{r4, r5, r6, lr}
    2d2e:	4606      	mov	r6, r0
    2d30:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2d32:	4608      	mov	r0, r1
    2d34:	4b48      	ldr	r3, [pc, #288]	; (2e58 <_tc_timer_init+0x12c>)
    2d36:	4798      	blx	r3
    2d38:	4605      	mov	r5, r0
	device->hw = hw;
    2d3a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2d3c:	22af      	movs	r2, #175	; 0xaf
    2d3e:	4947      	ldr	r1, [pc, #284]	; (2e5c <_tc_timer_init+0x130>)
    2d40:	2001      	movs	r0, #1
    2d42:	4b47      	ldr	r3, [pc, #284]	; (2e60 <_tc_timer_init+0x134>)
    2d44:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d46:	6923      	ldr	r3, [r4, #16]
    2d48:	f013 0f01 	tst.w	r3, #1
    2d4c:	d1fb      	bne.n	2d46 <_tc_timer_init+0x1a>
    2d4e:	6923      	ldr	r3, [r4, #16]
    2d50:	f013 0f03 	tst.w	r3, #3
    2d54:	d1fb      	bne.n	2d4e <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d56:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2d58:	f013 0f02 	tst.w	r3, #2
    2d5c:	d175      	bne.n	2e4a <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d5e:	6923      	ldr	r3, [r4, #16]
    2d60:	f013 0f01 	tst.w	r3, #1
    2d64:	d1fb      	bne.n	2d5e <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2d66:	6823      	ldr	r3, [r4, #0]
    2d68:	f043 0301 	orr.w	r3, r3, #1
    2d6c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d6e:	6923      	ldr	r3, [r4, #16]
    2d70:	f013 0f01 	tst.w	r3, #1
    2d74:	d1fb      	bne.n	2d6e <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2d76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d7a:	4a3a      	ldr	r2, [pc, #232]	; (2e64 <_tc_timer_init+0x138>)
    2d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d80:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2d82:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2d84:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2d86:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2d88:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2d8a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2d8c:	2201      	movs	r2, #1
    2d8e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	f003 030c 	and.w	r3, r3, #12
    2d96:	2b08      	cmp	r3, #8
    2d98:	d03f      	beq.n	2e1a <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d147      	bne.n	2e2e <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2d9e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2da2:	4a30      	ldr	r2, [pc, #192]	; (2e64 <_tc_timer_init+0x138>)
    2da4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2da8:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2daa:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2dac:	8a1b      	ldrh	r3, [r3, #16]
    2dae:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2db0:	2301      	movs	r3, #1
    2db2:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2db4:	4631      	mov	r1, r6
    2db6:	4620      	mov	r0, r4
    2db8:	4b2b      	ldr	r3, [pc, #172]	; (2e68 <_tc_timer_init+0x13c>)
    2dba:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2dbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2dc0:	4a28      	ldr	r2, [pc, #160]	; (2e64 <_tc_timer_init+0x138>)
    2dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2dca:	2b00      	cmp	r3, #0
    2dcc:	db40      	blt.n	2e50 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dce:	095a      	lsrs	r2, r3, #5
    2dd0:	f003 031f 	and.w	r3, r3, #31
    2dd4:	2101      	movs	r1, #1
    2dd6:	fa01 f303 	lsl.w	r3, r1, r3
    2dda:	3220      	adds	r2, #32
    2ddc:	4923      	ldr	r1, [pc, #140]	; (2e6c <_tc_timer_init+0x140>)
    2dde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2de2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2de6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2dea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2dee:	4b1d      	ldr	r3, [pc, #116]	; (2e64 <_tc_timer_init+0x138>)
    2df0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2df4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2df8:	2b00      	cmp	r3, #0
    2dfa:	db2b      	blt.n	2e54 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dfc:	0959      	lsrs	r1, r3, #5
    2dfe:	f003 031f 	and.w	r3, r3, #31
    2e02:	2201      	movs	r2, #1
    2e04:	fa02 f303 	lsl.w	r3, r2, r3
    2e08:	4a18      	ldr	r2, [pc, #96]	; (2e6c <_tc_timer_init+0x140>)
    2e0a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2e0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2e16:	2000      	movs	r0, #0
    2e18:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2e1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e1e:	4a11      	ldr	r2, [pc, #68]	; (2e64 <_tc_timer_init+0x138>)
    2e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e24:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2e26:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2e28:	691b      	ldr	r3, [r3, #16]
    2e2a:	6223      	str	r3, [r4, #32]
    2e2c:	e7c0      	b.n	2db0 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2e2e:	2b04      	cmp	r3, #4
    2e30:	d1be      	bne.n	2db0 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2e32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e36:	4a0b      	ldr	r2, [pc, #44]	; (2e64 <_tc_timer_init+0x138>)
    2e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e3c:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2e3e:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2e40:	7c1a      	ldrb	r2, [r3, #16]
    2e42:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2e44:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2e46:	76e3      	strb	r3, [r4, #27]
    2e48:	e7b2      	b.n	2db0 <_tc_timer_init+0x84>
		return ERR_DENIED;
    2e4a:	f06f 0010 	mvn.w	r0, #16
    2e4e:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2e50:	2000      	movs	r0, #0
    2e52:	bd70      	pop	{r4, r5, r6, pc}
    2e54:	2000      	movs	r0, #0
}
    2e56:	bd70      	pop	{r4, r5, r6, pc}
    2e58:	00002cb1 	.word	0x00002cb1
    2e5c:	00006d4c 	.word	0x00006d4c
    2e60:	00001c75 	.word	0x00001c75
    2e64:	2000008c 	.word	0x2000008c
    2e68:	00002c4d 	.word	0x00002c4d
    2e6c:	e000e100 	.word	0xe000e100

00002e70 <_tc_timer_deinit>:
{
    2e70:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2e72:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2e74:	4620      	mov	r0, r4
    2e76:	4b18      	ldr	r3, [pc, #96]	; (2ed8 <_tc_timer_deinit+0x68>)
    2e78:	4798      	blx	r3
    2e7a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2e7c:	f240 1201 	movw	r2, #257	; 0x101
    2e80:	4916      	ldr	r1, [pc, #88]	; (2edc <_tc_timer_deinit+0x6c>)
    2e82:	2001      	movs	r0, #1
    2e84:	4b16      	ldr	r3, [pc, #88]	; (2ee0 <_tc_timer_deinit+0x70>)
    2e86:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2e88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2e8c:	4b15      	ldr	r3, [pc, #84]	; (2ee4 <_tc_timer_deinit+0x74>)
    2e8e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2e92:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2e96:	2b00      	cmp	r3, #0
    2e98:	db0d      	blt.n	2eb6 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2e9a:	095a      	lsrs	r2, r3, #5
    2e9c:	f003 031f 	and.w	r3, r3, #31
    2ea0:	2101      	movs	r1, #1
    2ea2:	fa01 f303 	lsl.w	r3, r1, r3
    2ea6:	3220      	adds	r2, #32
    2ea8:	490f      	ldr	r1, [pc, #60]	; (2ee8 <_tc_timer_deinit+0x78>)
    2eaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eb2:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2eb6:	6923      	ldr	r3, [r4, #16]
    2eb8:	f013 0f03 	tst.w	r3, #3
    2ebc:	d1fb      	bne.n	2eb6 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2ebe:	6823      	ldr	r3, [r4, #0]
    2ec0:	f023 0302 	bic.w	r3, r3, #2
    2ec4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ec6:	6923      	ldr	r3, [r4, #16]
    2ec8:	f013 0f01 	tst.w	r3, #1
    2ecc:	d1fb      	bne.n	2ec6 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2ece:	6823      	ldr	r3, [r4, #0]
    2ed0:	f043 0301 	orr.w	r3, r3, #1
    2ed4:	6023      	str	r3, [r4, #0]
    2ed6:	bd38      	pop	{r3, r4, r5, pc}
    2ed8:	00002cb1 	.word	0x00002cb1
    2edc:	00006d4c 	.word	0x00006d4c
    2ee0:	00001c75 	.word	0x00001c75
    2ee4:	2000008c 	.word	0x2000008c
    2ee8:	e000e100 	.word	0xe000e100

00002eec <_tc_timer_set_irq>:
{
    2eec:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2eee:	68c0      	ldr	r0, [r0, #12]
    2ef0:	4b08      	ldr	r3, [pc, #32]	; (2f14 <_tc_timer_set_irq+0x28>)
    2ef2:	4798      	blx	r3
    2ef4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2ef6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    2efa:	4907      	ldr	r1, [pc, #28]	; (2f18 <_tc_timer_set_irq+0x2c>)
    2efc:	2001      	movs	r0, #1
    2efe:	4b07      	ldr	r3, [pc, #28]	; (2f1c <_tc_timer_set_irq+0x30>)
    2f00:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2f02:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2f06:	4b06      	ldr	r3, [pc, #24]	; (2f20 <_tc_timer_set_irq+0x34>)
    2f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2f0c:	78a0      	ldrb	r0, [r4, #2]
    2f0e:	4b05      	ldr	r3, [pc, #20]	; (2f24 <_tc_timer_set_irq+0x38>)
    2f10:	4798      	blx	r3
    2f12:	bd10      	pop	{r4, pc}
    2f14:	00002cb1 	.word	0x00002cb1
    2f18:	00006d4c 	.word	0x00006d4c
    2f1c:	00001c75 	.word	0x00001c75
    2f20:	2000008c 	.word	0x2000008c
    2f24:	00001f99 	.word	0x00001f99

00002f28 <_pwm_init>:
{
    2f28:	b570      	push	{r4, r5, r6, lr}
    2f2a:	4606      	mov	r6, r0
    2f2c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2f2e:	4608      	mov	r0, r1
    2f30:	4b3f      	ldr	r3, [pc, #252]	; (3030 <_pwm_init+0x108>)
    2f32:	4798      	blx	r3
    2f34:	4605      	mov	r5, r0
	device->hw = hw;
    2f36:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f38:	6923      	ldr	r3, [r4, #16]
    2f3a:	f013 0f01 	tst.w	r3, #1
    2f3e:	d1fb      	bne.n	2f38 <_pwm_init+0x10>
    2f40:	6923      	ldr	r3, [r4, #16]
    2f42:	f013 0f03 	tst.w	r3, #3
    2f46:	d1fb      	bne.n	2f40 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2f48:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2f4a:	f013 0f02 	tst.w	r3, #2
    2f4e:	d165      	bne.n	301c <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f50:	6923      	ldr	r3, [r4, #16]
    2f52:	f013 0f01 	tst.w	r3, #1
    2f56:	d1fb      	bne.n	2f50 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2f58:	6823      	ldr	r3, [r4, #0]
    2f5a:	f043 0301 	orr.w	r3, r3, #1
    2f5e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f60:	6923      	ldr	r3, [r4, #16]
    2f62:	f013 0f01 	tst.w	r3, #1
    2f66:	d1fb      	bne.n	2f60 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2f68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f6c:	4a31      	ldr	r2, [pc, #196]	; (3034 <_pwm_init+0x10c>)
    2f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f72:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2f74:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f76:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2f78:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2f7a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2f7c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2f7e:	2203      	movs	r2, #3
    2f80:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2f82:	685b      	ldr	r3, [r3, #4]
    2f84:	f003 030c 	and.w	r3, r3, #12
    2f88:	2b08      	cmp	r3, #8
    2f8a:	d03d      	beq.n	3008 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d148      	bne.n	3022 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2f90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f94:	4a27      	ldr	r2, [pc, #156]	; (3034 <_pwm_init+0x10c>)
    2f96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f9a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f9c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2f9e:	8a1b      	ldrh	r3, [r3, #16]
    2fa0:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2fa2:	4631      	mov	r1, r6
    2fa4:	4620      	mov	r0, r4
    2fa6:	4b24      	ldr	r3, [pc, #144]	; (3038 <_pwm_init+0x110>)
    2fa8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2faa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fae:	4a21      	ldr	r2, [pc, #132]	; (3034 <_pwm_init+0x10c>)
    2fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2fb8:	2b00      	cmp	r3, #0
    2fba:	db35      	blt.n	3028 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2fbc:	095a      	lsrs	r2, r3, #5
    2fbe:	f003 031f 	and.w	r3, r3, #31
    2fc2:	2101      	movs	r1, #1
    2fc4:	fa01 f303 	lsl.w	r3, r1, r3
    2fc8:	3220      	adds	r2, #32
    2fca:	491c      	ldr	r1, [pc, #112]	; (303c <_pwm_init+0x114>)
    2fcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fd4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2fd8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2fdc:	4b15      	ldr	r3, [pc, #84]	; (3034 <_pwm_init+0x10c>)
    2fde:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2fe2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	db20      	blt.n	302c <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2fea:	0959      	lsrs	r1, r3, #5
    2fec:	f003 031f 	and.w	r3, r3, #31
    2ff0:	2201      	movs	r2, #1
    2ff2:	fa02 f303 	lsl.w	r3, r2, r3
    2ff6:	4a11      	ldr	r2, [pc, #68]	; (303c <_pwm_init+0x114>)
    2ff8:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2ffc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3000:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3004:	2000      	movs	r0, #0
    3006:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3008:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    300c:	4a09      	ldr	r2, [pc, #36]	; (3034 <_pwm_init+0x10c>)
    300e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3012:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3014:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3016:	691b      	ldr	r3, [r3, #16]
    3018:	6223      	str	r3, [r4, #32]
    301a:	e7c2      	b.n	2fa2 <_pwm_init+0x7a>
		return ERR_DENIED;
    301c:	f06f 0010 	mvn.w	r0, #16
    3020:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3022:	f04f 30ff 	mov.w	r0, #4294967295
    3026:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3028:	2000      	movs	r0, #0
    302a:	bd70      	pop	{r4, r5, r6, pc}
    302c:	2000      	movs	r0, #0
}
    302e:	bd70      	pop	{r4, r5, r6, pc}
    3030:	00002cb1 	.word	0x00002cb1
    3034:	2000008c 	.word	0x2000008c
    3038:	00002c4d 	.word	0x00002c4d
    303c:	e000e100 	.word	0xe000e100

00003040 <_tc_get_timer>:
}
    3040:	4800      	ldr	r0, [pc, #0]	; (3044 <_tc_get_timer+0x4>)
    3042:	4770      	bx	lr
    3044:	20000104 	.word	0x20000104

00003048 <_tc_get_pwm>:
}
    3048:	2000      	movs	r0, #0
    304a:	4770      	bx	lr

0000304c <TC0_Handler>:
{
    304c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    304e:	4b02      	ldr	r3, [pc, #8]	; (3058 <TC0_Handler+0xc>)
    3050:	6818      	ldr	r0, [r3, #0]
    3052:	4b02      	ldr	r3, [pc, #8]	; (305c <TC0_Handler+0x10>)
    3054:	4798      	blx	r3
    3056:	bd08      	pop	{r3, pc}
    3058:	20000a68 	.word	0x20000a68
    305c:	00002c1d 	.word	0x00002c1d

00003060 <TC1_Handler>:
{
    3060:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TC1_Handler+0xc>)
    3064:	6858      	ldr	r0, [r3, #4]
    3066:	4b02      	ldr	r3, [pc, #8]	; (3070 <TC1_Handler+0x10>)
    3068:	4798      	blx	r3
    306a:	bd08      	pop	{r3, pc}
    306c:	20000a68 	.word	0x20000a68
    3070:	00002c1d 	.word	0x00002c1d

00003074 <TC2_Handler>:
{
    3074:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TC2_Handler+0xc>)
    3078:	6898      	ldr	r0, [r3, #8]
    307a:	4b02      	ldr	r3, [pc, #8]	; (3084 <TC2_Handler+0x10>)
    307c:	4798      	blx	r3
    307e:	bd08      	pop	{r3, pc}
    3080:	20000a68 	.word	0x20000a68
    3084:	00002c1d 	.word	0x00002c1d

00003088 <TC3_Handler>:
{
    3088:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TC3_Handler+0xc>)
    308c:	68d8      	ldr	r0, [r3, #12]
    308e:	4b02      	ldr	r3, [pc, #8]	; (3098 <TC3_Handler+0x10>)
    3090:	4798      	blx	r3
    3092:	bd08      	pop	{r3, pc}
    3094:	20000a68 	.word	0x20000a68
    3098:	00002c05 	.word	0x00002c05

0000309c <TC4_Handler>:
{
    309c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    309e:	4b02      	ldr	r3, [pc, #8]	; (30a8 <TC4_Handler+0xc>)
    30a0:	6918      	ldr	r0, [r3, #16]
    30a2:	4b02      	ldr	r3, [pc, #8]	; (30ac <TC4_Handler+0x10>)
    30a4:	4798      	blx	r3
    30a6:	bd08      	pop	{r3, pc}
    30a8:	20000a68 	.word	0x20000a68
    30ac:	00002c05 	.word	0x00002c05

000030b0 <TC5_Handler>:
{
    30b0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    30b2:	4b02      	ldr	r3, [pc, #8]	; (30bc <TC5_Handler+0xc>)
    30b4:	6958      	ldr	r0, [r3, #20]
    30b6:	4b02      	ldr	r3, [pc, #8]	; (30c0 <TC5_Handler+0x10>)
    30b8:	4798      	blx	r3
    30ba:	bd08      	pop	{r3, pc}
    30bc:	20000a68 	.word	0x20000a68
    30c0:	00002c05 	.word	0x00002c05

000030c4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    30c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    30c6:	4604      	mov	r4, r0
    30c8:	b330      	cbz	r0, 3118 <_wdt_init+0x54>
    30ca:	6800      	ldr	r0, [r0, #0]
    30cc:	3000      	adds	r0, #0
    30ce:	bf18      	it	ne
    30d0:	2001      	movne	r0, #1
    30d2:	225a      	movs	r2, #90	; 0x5a
    30d4:	4914      	ldr	r1, [pc, #80]	; (3128 <_wdt_init+0x64>)
    30d6:	4b15      	ldr	r3, [pc, #84]	; (312c <_wdt_init+0x68>)
    30d8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    30da:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    30dc:	689a      	ldr	r2, [r3, #8]
    30de:	f012 0f0e 	tst.w	r2, #14
    30e2:	d1fb      	bne.n	30dc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    30e4:	781a      	ldrb	r2, [r3, #0]
    30e6:	09d2      	lsrs	r2, r2, #7
    30e8:	d118      	bne.n	311c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    30ea:	689a      	ldr	r2, [r3, #8]
    30ec:	f012 0f0e 	tst.w	r2, #14
    30f0:	d1fb      	bne.n	30ea <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    30f2:	781a      	ldrb	r2, [r3, #0]
    30f4:	f012 0f02 	tst.w	r2, #2
    30f8:	d113      	bne.n	3122 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    30fa:	689a      	ldr	r2, [r3, #8]
    30fc:	f012 0f0e 	tst.w	r2, #14
    3100:	d1fb      	bne.n	30fa <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3102:	781a      	ldrb	r2, [r3, #0]
    3104:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3108:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    310a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    310c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    310e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    3112:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    3114:	2000      	movs	r0, #0
    3116:	bd10      	pop	{r4, pc}
    3118:	2000      	movs	r0, #0
    311a:	e7da      	b.n	30d2 <_wdt_init+0xe>
		return ERR_DENIED;
    311c:	f06f 0010 	mvn.w	r0, #16
    3120:	bd10      	pop	{r4, pc}
    3122:	f06f 0010 	mvn.w	r0, #16
}
    3126:	bd10      	pop	{r4, pc}
    3128:	00006d60 	.word	0x00006d60
    312c:	00001c75 	.word	0x00001c75

00003130 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3130:	b570      	push	{r4, r5, r6, lr}
    3132:	460d      	mov	r5, r1
    3134:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3136:	4606      	mov	r6, r0
    3138:	2800      	cmp	r0, #0
    313a:	d044      	beq.n	31c6 <_wdt_set_timeout_period+0x96>
    313c:	6800      	ldr	r0, [r0, #0]
    313e:	3000      	adds	r0, #0
    3140:	bf18      	it	ne
    3142:	2001      	movne	r0, #1
    3144:	2284      	movs	r2, #132	; 0x84
    3146:	493f      	ldr	r1, [pc, #252]	; (3244 <_wdt_set_timeout_period+0x114>)
    3148:	4b3f      	ldr	r3, [pc, #252]	; (3248 <_wdt_set_timeout_period+0x118>)
    314a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    314c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    314e:	6893      	ldr	r3, [r2, #8]
    3150:	f013 0f0e 	tst.w	r3, #14
    3154:	d1fb      	bne.n	314e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3156:	7813      	ldrb	r3, [r2, #0]
    3158:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    315c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    315e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3160:	688b      	ldr	r3, [r1, #8]
    3162:	f013 0f0e 	tst.w	r3, #14
    3166:	d1fb      	bne.n	3160 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    3168:	780b      	ldrb	r3, [r1, #0]
    316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    316e:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3170:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3172:	6899      	ldr	r1, [r3, #8]
    3174:	f011 0f0e 	tst.w	r1, #14
    3178:	d1fb      	bne.n	3172 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    317a:	781a      	ldrb	r2, [r3, #0]
    317c:	09d2      	lsrs	r2, r2, #7
    317e:	d158      	bne.n	3232 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3180:	6899      	ldr	r1, [r3, #8]
    3182:	f011 0f0e 	tst.w	r1, #14
    3186:	d1fb      	bne.n	3180 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3188:	781a      	ldrb	r2, [r3, #0]
    318a:	f012 0f02 	tst.w	r2, #2
    318e:	d153      	bne.n	3238 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3190:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3194:	4628      	mov	r0, r5
    3196:	2100      	movs	r1, #0
    3198:	ea50 0201 	orrs.w	r2, r0, r1
    319c:	d14f      	bne.n	323e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    319e:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    31a2:	d038      	beq.n	3216 <_wdt_set_timeout_period+0xe6>
    31a4:	d911      	bls.n	31ca <_wdt_set_timeout_period+0x9a>
    31a6:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    31aa:	d038      	beq.n	321e <_wdt_set_timeout_period+0xee>
    31ac:	d927      	bls.n	31fe <_wdt_set_timeout_period+0xce>
    31ae:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    31b2:	d038      	beq.n	3226 <_wdt_set_timeout_period+0xf6>
    31b4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    31b8:	d037      	beq.n	322a <_wdt_set_timeout_period+0xfa>
    31ba:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    31be:	d030      	beq.n	3222 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    31c0:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    31c4:	bd70      	pop	{r4, r5, r6, pc}
    31c6:	2000      	movs	r0, #0
    31c8:	e7bc      	b.n	3144 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    31ca:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    31ce:	d01e      	beq.n	320e <_wdt_set_timeout_period+0xde>
    31d0:	d80d      	bhi.n	31ee <_wdt_set_timeout_period+0xbe>
    31d2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    31d6:	d02a      	beq.n	322e <_wdt_set_timeout_period+0xfe>
    31d8:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    31dc:	d1f0      	bne.n	31c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    31de:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    31e0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    31e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    31e6:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    31e8:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    31ea:	2000      	movs	r0, #0
    31ec:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    31ee:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    31f2:	d00e      	beq.n	3212 <_wdt_set_timeout_period+0xe2>
    31f4:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    31f8:	d1e2      	bne.n	31c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    31fa:	2104      	movs	r1, #4
			break;
    31fc:	e7f0      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    31fe:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    3202:	d00a      	beq.n	321a <_wdt_set_timeout_period+0xea>
    3204:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    3208:	d1da      	bne.n	31c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    320a:	2107      	movs	r1, #7
			break;
    320c:	e7e8      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    320e:	2102      	movs	r1, #2
			break;
    3210:	e7e6      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3212:	2103      	movs	r1, #3
			break;
    3214:	e7e4      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3216:	2105      	movs	r1, #5
			break;
    3218:	e7e2      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    321a:	2106      	movs	r1, #6
			break;
    321c:	e7e0      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    321e:	2108      	movs	r1, #8
			break;
    3220:	e7de      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3222:	2109      	movs	r1, #9
			break;
    3224:	e7dc      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3226:	210a      	movs	r1, #10
			break;
    3228:	e7da      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    322a:	210b      	movs	r1, #11
			break;
    322c:	e7d8      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    322e:	2100      	movs	r1, #0
    3230:	e7d6      	b.n	31e0 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    3232:	f06f 0010 	mvn.w	r0, #16
    3236:	bd70      	pop	{r4, r5, r6, pc}
    3238:	f06f 0010 	mvn.w	r0, #16
    323c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    323e:	f06f 000c 	mvn.w	r0, #12
    3242:	bd70      	pop	{r4, r5, r6, pc}
    3244:	00006d60 	.word	0x00006d60
    3248:	00001c75 	.word	0x00001c75

0000324c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    324c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    324e:	4604      	mov	r4, r0
    3250:	b198      	cbz	r0, 327a <_wdt_enable+0x2e>
    3252:	6800      	ldr	r0, [r0, #0]
    3254:	3000      	adds	r0, #0
    3256:	bf18      	it	ne
    3258:	2001      	movne	r0, #1
    325a:	f240 1207 	movw	r2, #263	; 0x107
    325e:	4908      	ldr	r1, [pc, #32]	; (3280 <_wdt_enable+0x34>)
    3260:	4b08      	ldr	r3, [pc, #32]	; (3284 <_wdt_enable+0x38>)
    3262:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    3264:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3266:	6893      	ldr	r3, [r2, #8]
    3268:	f013 0f0e 	tst.w	r3, #14
    326c:	d1fb      	bne.n	3266 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    326e:	7813      	ldrb	r3, [r2, #0]
    3270:	f043 0302 	orr.w	r3, r3, #2
    3274:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    3276:	2000      	movs	r0, #0
    3278:	bd10      	pop	{r4, pc}
    327a:	2000      	movs	r0, #0
    327c:	e7ed      	b.n	325a <_wdt_enable+0xe>
    327e:	bf00      	nop
    3280:	00006d60 	.word	0x00006d60
    3284:	00001c75 	.word	0x00001c75

00003288 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3288:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    328a:	4604      	mov	r4, r0
    328c:	b168      	cbz	r0, 32aa <_wdt_feed+0x22>
    328e:	6800      	ldr	r0, [r0, #0]
    3290:	3000      	adds	r0, #0
    3292:	bf18      	it	ne
    3294:	2001      	movne	r0, #1
    3296:	f240 1225 	movw	r2, #293	; 0x125
    329a:	4905      	ldr	r1, [pc, #20]	; (32b0 <_wdt_feed+0x28>)
    329c:	4b05      	ldr	r3, [pc, #20]	; (32b4 <_wdt_feed+0x2c>)
    329e:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    32a0:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    32a2:	22a5      	movs	r2, #165	; 0xa5
    32a4:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    32a6:	2000      	movs	r0, #0
    32a8:	bd10      	pop	{r4, pc}
    32aa:	2000      	movs	r0, #0
    32ac:	e7f3      	b.n	3296 <_wdt_feed+0xe>
    32ae:	bf00      	nop
    32b0:	00006d60 	.word	0x00006d60
    32b4:	00001c75 	.word	0x00001c75

000032b8 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    32b8:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    32ba:	2200      	movs	r2, #0
    32bc:	2101      	movs	r1, #1
    32be:	4608      	mov	r0, r1
    32c0:	4d0d      	ldr	r5, [pc, #52]	; (32f8 <createQueuesAndSemaphores+0x40>)
    32c2:	47a8      	blx	r5
    32c4:	4c0d      	ldr	r4, [pc, #52]	; (32fc <createQueuesAndSemaphores+0x44>)
    32c6:	6020      	str	r0, [r4, #0]
    AtReceiveQueue  = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    32c8:	2200      	movs	r2, #0
    32ca:	2101      	movs	r1, #1
    32cc:	4608      	mov	r0, r1
    32ce:	47a8      	blx	r5
    32d0:	4b0b      	ldr	r3, [pc, #44]	; (3300 <createQueuesAndSemaphores+0x48>)
    32d2:	6018      	str	r0, [r3, #0]

    if((AtTransmitQueue != NULL) &&
    32d4:	6823      	ldr	r3, [r4, #0]
    32d6:	b16b      	cbz	r3, 32f4 <createQueuesAndSemaphores+0x3c>
    32d8:	b160      	cbz	r0, 32f4 <createQueuesAndSemaphores+0x3c>
       (AtReceiveQueue  != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    32da:	480a      	ldr	r0, [pc, #40]	; (3304 <createQueuesAndSemaphores+0x4c>)
    32dc:	4b0a      	ldr	r3, [pc, #40]	; (3308 <createQueuesAndSemaphores+0x50>)
    32de:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    32e0:	2203      	movs	r2, #3
    32e2:	2100      	movs	r1, #0
    32e4:	2001      	movs	r0, #1
    32e6:	47a8      	blx	r5
    32e8:	4b08      	ldr	r3, [pc, #32]	; (330c <createQueuesAndSemaphores+0x54>)
    32ea:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL))
    32ec:	b110      	cbz	r0, 32f4 <createQueuesAndSemaphores+0x3c>
		{
			DEBUG_PRINT("Semaphores are created");
    32ee:	4808      	ldr	r0, [pc, #32]	; (3310 <createQueuesAndSemaphores+0x58>)
    32f0:	4b05      	ldr	r3, [pc, #20]	; (3308 <createQueuesAndSemaphores+0x50>)
    32f2:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    32f4:	bd38      	pop	{r3, r4, r5, pc}
    32f6:	bf00      	nop
    32f8:	00003b49 	.word	0x00003b49
    32fc:	200027f4 	.word	0x200027f4
    3300:	200027fc 	.word	0x200027fc
    3304:	00006d78 	.word	0x00006d78
    3308:	00000f7d 	.word	0x00000f7d
    330c:	200027f8 	.word	0x200027f8
    3310:	00006d94 	.word	0x00006d94

00003314 <main>:
{
    3314:	b580      	push	{r7, lr}
    3316:	b082      	sub	sp, #8
    atmel_start_init();	
    3318:	4b2c      	ldr	r3, [pc, #176]	; (33cc <main+0xb8>)
    331a:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, xDispatchTaskHandle );
    331c:	4b2c      	ldr	r3, [pc, #176]	; (33d0 <main+0xbc>)
    331e:	681b      	ldr	r3, [r3, #0]
    3320:	9301      	str	r3, [sp, #4]
    3322:	2702      	movs	r7, #2
    3324:	9700      	str	r7, [sp, #0]
    3326:	2300      	movs	r3, #0
    3328:	2296      	movs	r2, #150	; 0x96
    332a:	492a      	ldr	r1, [pc, #168]	; (33d4 <main+0xc0>)
    332c:	482a      	ldr	r0, [pc, #168]	; (33d8 <main+0xc4>)
    332e:	4d2b      	ldr	r5, [pc, #172]	; (33dc <main+0xc8>)
    3330:	47a8      	blx	r5
    3332:	4c2b      	ldr	r4, [pc, #172]	; (33e0 <main+0xcc>)
    3334:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, xModemTxTaskHandle );
    3336:	4b2b      	ldr	r3, [pc, #172]	; (33e4 <main+0xd0>)
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	9301      	str	r3, [sp, #4]
    333c:	2601      	movs	r6, #1
    333e:	9600      	str	r6, [sp, #0]
    3340:	2300      	movs	r3, #0
    3342:	2296      	movs	r2, #150	; 0x96
    3344:	4928      	ldr	r1, [pc, #160]	; (33e8 <main+0xd4>)
    3346:	4829      	ldr	r0, [pc, #164]	; (33ec <main+0xd8>)
    3348:	47a8      	blx	r5
    334a:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, xModemRxTaskHandle);
    334c:	4b28      	ldr	r3, [pc, #160]	; (33f0 <main+0xdc>)
    334e:	681b      	ldr	r3, [r3, #0]
    3350:	9301      	str	r3, [sp, #4]
    3352:	9700      	str	r7, [sp, #0]
    3354:	2300      	movs	r3, #0
    3356:	2296      	movs	r2, #150	; 0x96
    3358:	4926      	ldr	r1, [pc, #152]	; (33f4 <main+0xe0>)
    335a:	4827      	ldr	r0, [pc, #156]	; (33f8 <main+0xe4>)
    335c:	47a8      	blx	r5
    335e:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, xModemProcessTaskHandle);
    3360:	4b26      	ldr	r3, [pc, #152]	; (33fc <main+0xe8>)
    3362:	681b      	ldr	r3, [r3, #0]
    3364:	9301      	str	r3, [sp, #4]
    3366:	9600      	str	r6, [sp, #0]
    3368:	2300      	movs	r3, #0
    336a:	2296      	movs	r2, #150	; 0x96
    336c:	4924      	ldr	r1, [pc, #144]	; (3400 <main+0xec>)
    336e:	4825      	ldr	r0, [pc, #148]	; (3404 <main+0xf0>)
    3370:	47a8      	blx	r5
    3372:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, xModemDiagTaskHandle);
    3374:	4b24      	ldr	r3, [pc, #144]	; (3408 <main+0xf4>)
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	9301      	str	r3, [sp, #4]
    337a:	9600      	str	r6, [sp, #0]
    337c:	2300      	movs	r3, #0
    337e:	2296      	movs	r2, #150	; 0x96
    3380:	4922      	ldr	r1, [pc, #136]	; (340c <main+0xf8>)
    3382:	4823      	ldr	r0, [pc, #140]	; (3410 <main+0xfc>)
    3384:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    3386:	6823      	ldr	r3, [r4, #0]
    3388:	42b3      	cmp	r3, r6
    338a:	d006      	beq.n	339a <main+0x86>
    	DEBUG_PRINT("Failed to create tasks");
    338c:	4821      	ldr	r0, [pc, #132]	; (3414 <main+0x100>)
    338e:	4b22      	ldr	r3, [pc, #136]	; (3418 <main+0x104>)
    3390:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    3392:	4822      	ldr	r0, [pc, #136]	; (341c <main+0x108>)
    3394:	4b20      	ldr	r3, [pc, #128]	; (3418 <main+0x104>)
    3396:	4798      	blx	r3
    3398:	e7fe      	b.n	3398 <main+0x84>
    if((DispatchTaskStatus == pdPASS) &&
    339a:	68e3      	ldr	r3, [r4, #12]
    339c:	42b3      	cmp	r3, r6
    339e:	d1f5      	bne.n	338c <main+0x78>
       (ModemProcessTaskStatus == pdPASS) &&
    33a0:	6863      	ldr	r3, [r4, #4]
    33a2:	42b3      	cmp	r3, r6
    33a4:	d1f2      	bne.n	338c <main+0x78>
       (ModemTxTaskStatus == pdPASS) &&
    33a6:	68a3      	ldr	r3, [r4, #8]
    33a8:	42b3      	cmp	r3, r6
    33aa:	d1ef      	bne.n	338c <main+0x78>
       (ModemRxTaskStatus == pdPASS) &&
    33ac:	42b0      	cmp	r0, r6
    33ae:	d1ed      	bne.n	338c <main+0x78>
    	DEBUG_PRINT("Successfully Created the Tasks");
    33b0:	481b      	ldr	r0, [pc, #108]	; (3420 <main+0x10c>)
    33b2:	4b19      	ldr	r3, [pc, #100]	; (3418 <main+0x104>)
    33b4:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    33b6:	4b1b      	ldr	r3, [pc, #108]	; (3424 <main+0x110>)
    33b8:	4798      	blx	r3
    33ba:	b110      	cbz	r0, 33c2 <main+0xae>
    		vTaskStartScheduler();
    33bc:	4b1a      	ldr	r3, [pc, #104]	; (3428 <main+0x114>)
    33be:	4798      	blx	r3
    33c0:	e7e7      	b.n	3392 <main+0x7e>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    33c2:	481a      	ldr	r0, [pc, #104]	; (342c <main+0x118>)
    33c4:	4b14      	ldr	r3, [pc, #80]	; (3418 <main+0x104>)
    33c6:	4798      	blx	r3
    33c8:	e7e3      	b.n	3392 <main+0x7e>
    33ca:	bf00      	nop
    33cc:	00001091 	.word	0x00001091
    33d0:	200027ec 	.word	0x200027ec
    33d4:	00006dac 	.word	0x00006dac
    33d8:	00000339 	.word	0x00000339
    33dc:	0000434d 	.word	0x0000434d
    33e0:	20000a80 	.word	0x20000a80
    33e4:	200027d4 	.word	0x200027d4
    33e8:	00006dbc 	.word	0x00006dbc
    33ec:	00000ddd 	.word	0x00000ddd
    33f0:	200027e8 	.word	0x200027e8
    33f4:	00006dc8 	.word	0x00006dc8
    33f8:	00000dbd 	.word	0x00000dbd
    33fc:	200027dc 	.word	0x200027dc
    3400:	00006dd4 	.word	0x00006dd4
    3404:	00000b49 	.word	0x00000b49
    3408:	200027e0 	.word	0x200027e0
    340c:	00006de8 	.word	0x00006de8
    3410:	00000841 	.word	0x00000841
    3414:	00006e38 	.word	0x00006e38
    3418:	00000f7d 	.word	0x00000f7d
    341c:	00006e50 	.word	0x00006e50
    3420:	00006df8 	.word	0x00006df8
    3424:	000032b9 	.word	0x000032b9
    3428:	00004529 	.word	0x00004529
    342c:	00006e18 	.word	0x00006e18

00003430 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3430:	f100 0308 	add.w	r3, r0, #8
    3434:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3436:	f04f 32ff 	mov.w	r2, #4294967295
    343a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    343c:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    343e:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3440:	2300      	movs	r3, #0
    3442:	6003      	str	r3, [r0, #0]
    3444:	4770      	bx	lr

00003446 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3446:	2300      	movs	r3, #0
    3448:	6103      	str	r3, [r0, #16]
    344a:	4770      	bx	lr

0000344c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    344c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    344e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3450:	689a      	ldr	r2, [r3, #8]
    3452:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3454:	689a      	ldr	r2, [r3, #8]
    3456:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    3458:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    345a:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    345c:	6803      	ldr	r3, [r0, #0]
    345e:	3301      	adds	r3, #1
    3460:	6003      	str	r3, [r0, #0]
    3462:	4770      	bx	lr

00003464 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    3464:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3466:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    3468:	f1b5 3fff 	cmp.w	r5, #4294967295
    346c:	d002      	beq.n	3474 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    346e:	f100 0208 	add.w	r2, r0, #8
    3472:	e002      	b.n	347a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    3474:	6902      	ldr	r2, [r0, #16]
    3476:	e004      	b.n	3482 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    3478:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    347a:	6853      	ldr	r3, [r2, #4]
    347c:	681c      	ldr	r4, [r3, #0]
    347e:	42a5      	cmp	r5, r4
    3480:	d2fa      	bcs.n	3478 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3482:	6853      	ldr	r3, [r2, #4]
    3484:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3486:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    3488:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    348a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    348c:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    348e:	6803      	ldr	r3, [r0, #0]
    3490:	3301      	adds	r3, #1
    3492:	6003      	str	r3, [r0, #0]
}
    3494:	bc30      	pop	{r4, r5}
    3496:	4770      	bx	lr

00003498 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    3498:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    349a:	6842      	ldr	r2, [r0, #4]
    349c:	6881      	ldr	r1, [r0, #8]
    349e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    34a0:	6882      	ldr	r2, [r0, #8]
    34a2:	6841      	ldr	r1, [r0, #4]
    34a4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    34a6:	685a      	ldr	r2, [r3, #4]
    34a8:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    34aa:	bf04      	itt	eq
    34ac:	6882      	ldreq	r2, [r0, #8]
    34ae:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    34b0:	2200      	movs	r2, #0
    34b2:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    34b4:	681a      	ldr	r2, [r3, #0]
    34b6:	3a01      	subs	r2, #1
    34b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    34ba:	6818      	ldr	r0, [r3, #0]
}
    34bc:	4770      	bx	lr
	...

000034c0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    34c0:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    34c2:	2300      	movs	r3, #0
    34c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    34c6:	4b0d      	ldr	r3, [pc, #52]	; (34fc <prvTaskExitError+0x3c>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    34ce:	d008      	beq.n	34e2 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    34d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    34d4:	f383 8811 	msr	BASEPRI, r3
    34d8:	f3bf 8f6f 	isb	sy
    34dc:	f3bf 8f4f 	dsb	sy
    34e0:	e7fe      	b.n	34e0 <prvTaskExitError+0x20>
    34e2:	f04f 0380 	mov.w	r3, #128	; 0x80
    34e6:	f383 8811 	msr	BASEPRI, r3
    34ea:	f3bf 8f6f 	isb	sy
    34ee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    34f2:	9b01      	ldr	r3, [sp, #4]
    34f4:	2b00      	cmp	r3, #0
    34f6:	d0fc      	beq.n	34f2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    34f8:	b002      	add	sp, #8
    34fa:	4770      	bx	lr
    34fc:	20000124 	.word	0x20000124

00003500 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    3500:	4808      	ldr	r0, [pc, #32]	; (3524 <prvPortStartFirstTask+0x24>)
    3502:	6800      	ldr	r0, [r0, #0]
    3504:	6800      	ldr	r0, [r0, #0]
    3506:	f380 8808 	msr	MSP, r0
    350a:	f04f 0000 	mov.w	r0, #0
    350e:	f380 8814 	msr	CONTROL, r0
    3512:	b662      	cpsie	i
    3514:	b661      	cpsie	f
    3516:	f3bf 8f4f 	dsb	sy
    351a:	f3bf 8f6f 	isb	sy
    351e:	df00      	svc	0
    3520:	bf00      	nop
    3522:	0000      	.short	0x0000
    3524:	e000ed08 	.word	0xe000ed08

00003528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    3528:	f8df 000c 	ldr.w	r0, [pc, #12]	; 3538 <vPortEnableVFP+0x10>
    352c:	6801      	ldr	r1, [r0, #0]
    352e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3532:	6001      	str	r1, [r0, #0]
    3534:	4770      	bx	lr
    3536:	0000      	.short	0x0000
    3538:	e000ed88 	.word	0xe000ed88

0000353c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    353c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3540:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3544:	f021 0101 	bic.w	r1, r1, #1
    3548:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <pxPortInitialiseStack+0x28>)
    354e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3552:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    3556:	f06f 0302 	mvn.w	r3, #2
    355a:	f840 3c24 	str.w	r3, [r0, #-36]
}
    355e:	3844      	subs	r0, #68	; 0x44
    3560:	4770      	bx	lr
    3562:	bf00      	nop
    3564:	000034c1 	.word	0x000034c1
	...

00003570 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    3570:	4b07      	ldr	r3, [pc, #28]	; (3590 <pxCurrentTCBConst2>)
    3572:	6819      	ldr	r1, [r3, #0]
    3574:	6808      	ldr	r0, [r1, #0]
    3576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357a:	f380 8809 	msr	PSP, r0
    357e:	f3bf 8f6f 	isb	sy
    3582:	f04f 0000 	mov.w	r0, #0
    3586:	f380 8811 	msr	BASEPRI, r0
    358a:	4770      	bx	lr
    358c:	f3af 8000 	nop.w

00003590 <pxCurrentTCBConst2>:
    3590:	20002738 	.word	0x20002738

00003594 <vPortEnterCritical>:
    3594:	f04f 0380 	mov.w	r3, #128	; 0x80
    3598:	f383 8811 	msr	BASEPRI, r3
    359c:	f3bf 8f6f 	isb	sy
    35a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    35a4:	4a0a      	ldr	r2, [pc, #40]	; (35d0 <vPortEnterCritical+0x3c>)
    35a6:	6813      	ldr	r3, [r2, #0]
    35a8:	3301      	adds	r3, #1
    35aa:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    35ac:	2b01      	cmp	r3, #1
    35ae:	d10d      	bne.n	35cc <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    35b0:	4b08      	ldr	r3, [pc, #32]	; (35d4 <vPortEnterCritical+0x40>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	f013 0fff 	tst.w	r3, #255	; 0xff
    35b8:	d008      	beq.n	35cc <vPortEnterCritical+0x38>
    35ba:	f04f 0380 	mov.w	r3, #128	; 0x80
    35be:	f383 8811 	msr	BASEPRI, r3
    35c2:	f3bf 8f6f 	isb	sy
    35c6:	f3bf 8f4f 	dsb	sy
    35ca:	e7fe      	b.n	35ca <vPortEnterCritical+0x36>
    35cc:	4770      	bx	lr
    35ce:	bf00      	nop
    35d0:	20000124 	.word	0x20000124
    35d4:	e000ed04 	.word	0xe000ed04

000035d8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    35d8:	4b09      	ldr	r3, [pc, #36]	; (3600 <vPortExitCritical+0x28>)
    35da:	681b      	ldr	r3, [r3, #0]
    35dc:	b943      	cbnz	r3, 35f0 <vPortExitCritical+0x18>
    35de:	f04f 0380 	mov.w	r3, #128	; 0x80
    35e2:	f383 8811 	msr	BASEPRI, r3
    35e6:	f3bf 8f6f 	isb	sy
    35ea:	f3bf 8f4f 	dsb	sy
    35ee:	e7fe      	b.n	35ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
    35f0:	3b01      	subs	r3, #1
    35f2:	4a03      	ldr	r2, [pc, #12]	; (3600 <vPortExitCritical+0x28>)
    35f4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    35f6:	b90b      	cbnz	r3, 35fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    35f8:	f383 8811 	msr	BASEPRI, r3
    35fc:	4770      	bx	lr
    35fe:	bf00      	nop
    3600:	20000124 	.word	0x20000124
	...

00003610 <PendSV_Handler>:
	__asm volatile(
    3610:	f3ef 8009 	mrs	r0, PSP
    3614:	f3bf 8f6f 	isb	sy
    3618:	4b15      	ldr	r3, [pc, #84]	; (3670 <pxCurrentTCBConst>)
    361a:	681a      	ldr	r2, [r3, #0]
    361c:	f01e 0f10 	tst.w	lr, #16
    3620:	bf08      	it	eq
    3622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    362a:	6010      	str	r0, [r2, #0]
    362c:	e92d 0009 	stmdb	sp!, {r0, r3}
    3630:	f04f 0080 	mov.w	r0, #128	; 0x80
    3634:	f380 8811 	msr	BASEPRI, r0
    3638:	f3bf 8f4f 	dsb	sy
    363c:	f3bf 8f6f 	isb	sy
    3640:	f001 f962 	bl	4908 <vTaskSwitchContext>
    3644:	f04f 0000 	mov.w	r0, #0
    3648:	f380 8811 	msr	BASEPRI, r0
    364c:	bc09      	pop	{r0, r3}
    364e:	6819      	ldr	r1, [r3, #0]
    3650:	6808      	ldr	r0, [r1, #0]
    3652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3656:	f01e 0f10 	tst.w	lr, #16
    365a:	bf08      	it	eq
    365c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    3660:	f380 8809 	msr	PSP, r0
    3664:	f3bf 8f6f 	isb	sy
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	f3af 8000 	nop.w

00003670 <pxCurrentTCBConst>:
    3670:	20002738 	.word	0x20002738

00003674 <SysTick_Handler>:
{
    3674:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    3676:	f04f 0380 	mov.w	r3, #128	; 0x80
    367a:	f383 8811 	msr	BASEPRI, r3
    367e:	f3bf 8f6f 	isb	sy
    3682:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3686:	4b05      	ldr	r3, [pc, #20]	; (369c <SysTick_Handler+0x28>)
    3688:	4798      	blx	r3
    368a:	b118      	cbz	r0, 3694 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    368c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3690:	4b03      	ldr	r3, [pc, #12]	; (36a0 <SysTick_Handler+0x2c>)
    3692:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3694:	2300      	movs	r3, #0
    3696:	f383 8811 	msr	BASEPRI, r3
    369a:	bd08      	pop	{r3, pc}
    369c:	000045d1 	.word	0x000045d1
    36a0:	e000ed04 	.word	0xe000ed04

000036a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    36a4:	4b05      	ldr	r3, [pc, #20]	; (36bc <vPortSetupTimerInterrupt+0x18>)
    36a6:	2200      	movs	r2, #0
    36a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    36aa:	4905      	ldr	r1, [pc, #20]	; (36c0 <vPortSetupTimerInterrupt+0x1c>)
    36ac:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    36ae:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    36b2:	4a04      	ldr	r2, [pc, #16]	; (36c4 <vPortSetupTimerInterrupt+0x20>)
    36b4:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    36b6:	2207      	movs	r2, #7
    36b8:	601a      	str	r2, [r3, #0]
    36ba:	4770      	bx	lr
    36bc:	e000e010 	.word	0xe000e010
    36c0:	e000e018 	.word	0xe000e018
    36c4:	e000e014 	.word	0xe000e014

000036c8 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    36c8:	4b3b      	ldr	r3, [pc, #236]	; (37b8 <xPortStartScheduler+0xf0>)
    36ca:	681a      	ldr	r2, [r3, #0]
    36cc:	4b3b      	ldr	r3, [pc, #236]	; (37bc <xPortStartScheduler+0xf4>)
    36ce:	429a      	cmp	r2, r3
    36d0:	d108      	bne.n	36e4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    36d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    36d6:	f383 8811 	msr	BASEPRI, r3
    36da:	f3bf 8f6f 	isb	sy
    36de:	f3bf 8f4f 	dsb	sy
    36e2:	e7fe      	b.n	36e2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    36e4:	4b34      	ldr	r3, [pc, #208]	; (37b8 <xPortStartScheduler+0xf0>)
    36e6:	681a      	ldr	r2, [r3, #0]
    36e8:	4b35      	ldr	r3, [pc, #212]	; (37c0 <xPortStartScheduler+0xf8>)
    36ea:	429a      	cmp	r2, r3
    36ec:	d108      	bne.n	3700 <xPortStartScheduler+0x38>
    36ee:	f04f 0380 	mov.w	r3, #128	; 0x80
    36f2:	f383 8811 	msr	BASEPRI, r3
    36f6:	f3bf 8f6f 	isb	sy
    36fa:	f3bf 8f4f 	dsb	sy
    36fe:	e7fe      	b.n	36fe <xPortStartScheduler+0x36>
{
    3700:	b510      	push	{r4, lr}
    3702:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    3704:	4b2f      	ldr	r3, [pc, #188]	; (37c4 <xPortStartScheduler+0xfc>)
    3706:	781a      	ldrb	r2, [r3, #0]
    3708:	b2d2      	uxtb	r2, r2
    370a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    370c:	22ff      	movs	r2, #255	; 0xff
    370e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	b2db      	uxtb	r3, r3
    3714:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3718:	f89d 3003 	ldrb.w	r3, [sp, #3]
    371c:	4a2a      	ldr	r2, [pc, #168]	; (37c8 <xPortStartScheduler+0x100>)
    371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3722:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3724:	2307      	movs	r3, #7
    3726:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3728:	f89d 3003 	ldrb.w	r3, [sp, #3]
    372c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3730:	d012      	beq.n	3758 <xPortStartScheduler+0x90>
    3732:	2306      	movs	r3, #6
    3734:	e000      	b.n	3738 <xPortStartScheduler+0x70>
    3736:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3738:	f89d 2003 	ldrb.w	r2, [sp, #3]
    373c:	0052      	lsls	r2, r2, #1
    373e:	b2d2      	uxtb	r2, r2
    3740:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3744:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3748:	1e59      	subs	r1, r3, #1
    374a:	f012 0f80 	tst.w	r2, #128	; 0x80
    374e:	d1f2      	bne.n	3736 <xPortStartScheduler+0x6e>
    3750:	4a1d      	ldr	r2, [pc, #116]	; (37c8 <xPortStartScheduler+0x100>)
    3752:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3754:	2b04      	cmp	r3, #4
    3756:	d008      	beq.n	376a <xPortStartScheduler+0xa2>
    3758:	f04f 0380 	mov.w	r3, #128	; 0x80
    375c:	f383 8811 	msr	BASEPRI, r3
    3760:	f3bf 8f6f 	isb	sy
    3764:	f3bf 8f4f 	dsb	sy
    3768:	e7fe      	b.n	3768 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    376a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    376c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3770:	4a15      	ldr	r2, [pc, #84]	; (37c8 <xPortStartScheduler+0x100>)
    3772:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    3774:	9b01      	ldr	r3, [sp, #4]
    3776:	b2db      	uxtb	r3, r3
    3778:	4a12      	ldr	r2, [pc, #72]	; (37c4 <xPortStartScheduler+0xfc>)
    377a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    377c:	4b13      	ldr	r3, [pc, #76]	; (37cc <xPortStartScheduler+0x104>)
    377e:	681a      	ldr	r2, [r3, #0]
    3780:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3786:	681a      	ldr	r2, [r3, #0]
    3788:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    378c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    378e:	4b10      	ldr	r3, [pc, #64]	; (37d0 <xPortStartScheduler+0x108>)
    3790:	4798      	blx	r3
	uxCriticalNesting = 0;
    3792:	2400      	movs	r4, #0
    3794:	4b0f      	ldr	r3, [pc, #60]	; (37d4 <xPortStartScheduler+0x10c>)
    3796:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    3798:	4b0f      	ldr	r3, [pc, #60]	; (37d8 <xPortStartScheduler+0x110>)
    379a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    379c:	4a0f      	ldr	r2, [pc, #60]	; (37dc <xPortStartScheduler+0x114>)
    379e:	6813      	ldr	r3, [r2, #0]
    37a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    37a4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    37a6:	4b0e      	ldr	r3, [pc, #56]	; (37e0 <xPortStartScheduler+0x118>)
    37a8:	4798      	blx	r3
	vTaskSwitchContext();
    37aa:	4b0e      	ldr	r3, [pc, #56]	; (37e4 <xPortStartScheduler+0x11c>)
    37ac:	4798      	blx	r3
	prvTaskExitError();
    37ae:	4b0e      	ldr	r3, [pc, #56]	; (37e8 <xPortStartScheduler+0x120>)
    37b0:	4798      	blx	r3
}
    37b2:	4620      	mov	r0, r4
    37b4:	b002      	add	sp, #8
    37b6:	bd10      	pop	{r4, pc}
    37b8:	e000ed00 	.word	0xe000ed00
    37bc:	410fc271 	.word	0x410fc271
    37c0:	410fc270 	.word	0x410fc270
    37c4:	e000e400 	.word	0xe000e400
    37c8:	20000a90 	.word	0x20000a90
    37cc:	e000ed20 	.word	0xe000ed20
    37d0:	000036a5 	.word	0x000036a5
    37d4:	20000124 	.word	0x20000124
    37d8:	00003529 	.word	0x00003529
    37dc:	e000ef34 	.word	0xe000ef34
    37e0:	00003501 	.word	0x00003501
    37e4:	00004909 	.word	0x00004909
    37e8:	000034c1 	.word	0x000034c1

000037ec <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    37ec:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    37f0:	2b0f      	cmp	r3, #15
    37f2:	d90f      	bls.n	3814 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    37f4:	4a10      	ldr	r2, [pc, #64]	; (3838 <vPortValidateInterruptPriority+0x4c>)
    37f6:	5c9b      	ldrb	r3, [r3, r2]
    37f8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    37fa:	4a10      	ldr	r2, [pc, #64]	; (383c <vPortValidateInterruptPriority+0x50>)
    37fc:	7812      	ldrb	r2, [r2, #0]
    37fe:	429a      	cmp	r2, r3
    3800:	d908      	bls.n	3814 <vPortValidateInterruptPriority+0x28>
    3802:	f04f 0380 	mov.w	r3, #128	; 0x80
    3806:	f383 8811 	msr	BASEPRI, r3
    380a:	f3bf 8f6f 	isb	sy
    380e:	f3bf 8f4f 	dsb	sy
    3812:	e7fe      	b.n	3812 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3814:	4b0a      	ldr	r3, [pc, #40]	; (3840 <vPortValidateInterruptPriority+0x54>)
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    381c:	4a07      	ldr	r2, [pc, #28]	; (383c <vPortValidateInterruptPriority+0x50>)
    381e:	6852      	ldr	r2, [r2, #4]
    3820:	4293      	cmp	r3, r2
    3822:	d908      	bls.n	3836 <vPortValidateInterruptPriority+0x4a>
    3824:	f04f 0380 	mov.w	r3, #128	; 0x80
    3828:	f383 8811 	msr	BASEPRI, r3
    382c:	f3bf 8f6f 	isb	sy
    3830:	f3bf 8f4f 	dsb	sy
    3834:	e7fe      	b.n	3834 <vPortValidateInterruptPriority+0x48>
    3836:	4770      	bx	lr
    3838:	e000e3f0 	.word	0xe000e3f0
    383c:	20000a90 	.word	0x20000a90
    3840:	e000ed0c 	.word	0xe000ed0c

00003844 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    3844:	b538      	push	{r3, r4, r5, lr}
    3846:	4604      	mov	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    3848:	f010 0f07 	tst.w	r0, #7
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    384c:	bf1c      	itt	ne
    384e:	f020 0407 	bicne.w	r4, r0, #7
    3852:	3408      	addne	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    3854:	4b11      	ldr	r3, [pc, #68]	; (389c <pvPortMalloc+0x58>)
    3856:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    3858:	4b11      	ldr	r3, [pc, #68]	; (38a0 <pvPortMalloc+0x5c>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	b19b      	cbz	r3, 3886 <pvPortMalloc+0x42>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    385e:	4b11      	ldr	r3, [pc, #68]	; (38a4 <pvPortMalloc+0x60>)
    3860:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
    3864:	441c      	add	r4, r3
    3866:	f641 32f7 	movw	r2, #7159	; 0x1bf7
    386a:	4294      	cmp	r4, r2
    386c:	d812      	bhi.n	3894 <pvPortMalloc+0x50>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    386e:	42a3      	cmp	r3, r4
    3870:	d212      	bcs.n	3898 <pvPortMalloc+0x54>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    3872:	4a0b      	ldr	r2, [pc, #44]	; (38a0 <pvPortMalloc+0x5c>)
    3874:	6815      	ldr	r5, [r2, #0]
    3876:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
    3878:	4b0a      	ldr	r3, [pc, #40]	; (38a4 <pvPortMalloc+0x60>)
    387a:	f8c3 4b0c 	str.w	r4, [r3, #2828]	; 0xb0c
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    387e:	4b0a      	ldr	r3, [pc, #40]	; (38a8 <pvPortMalloc+0x64>)
    3880:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    3882:	4628      	mov	r0, r5
    3884:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    3886:	4a06      	ldr	r2, [pc, #24]	; (38a0 <pvPortMalloc+0x5c>)
    3888:	f102 030c 	add.w	r3, r2, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    388c:	f023 0307 	bic.w	r3, r3, #7
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    3890:	6013      	str	r3, [r2, #0]
    3892:	e7e4      	b.n	385e <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    3894:	2500      	movs	r5, #0
    3896:	e7f2      	b.n	387e <pvPortMalloc+0x3a>
    3898:	2500      	movs	r5, #0
    389a:	e7f0      	b.n	387e <pvPortMalloc+0x3a>
    389c:	000045b1 	.word	0x000045b1
    38a0:	20000a98 	.word	0x20000a98
    38a4:	20001b90 	.word	0x20001b90
    38a8:	000046f9 	.word	0x000046f9

000038ac <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    38ac:	b140      	cbz	r0, 38c0 <vPortFree+0x14>
    38ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    38b2:	f383 8811 	msr	BASEPRI, r3
    38b6:	f3bf 8f6f 	isb	sy
    38ba:	f3bf 8f4f 	dsb	sy
    38be:	e7fe      	b.n	38be <vPortFree+0x12>
    38c0:	4770      	bx	lr
	...

000038c4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    38c4:	b510      	push	{r4, lr}
    38c6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    38c8:	4b04      	ldr	r3, [pc, #16]	; (38dc <prvIsQueueEmpty+0x18>)
    38ca:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    38cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    38ce:	4b04      	ldr	r3, [pc, #16]	; (38e0 <prvIsQueueEmpty+0x1c>)
    38d0:	4798      	blx	r3

	return xReturn;
}
    38d2:	fab4 f084 	clz	r0, r4
    38d6:	0940      	lsrs	r0, r0, #5
    38d8:	bd10      	pop	{r4, pc}
    38da:	bf00      	nop
    38dc:	00003595 	.word	0x00003595
    38e0:	000035d9 	.word	0x000035d9

000038e4 <prvCopyDataToQueue>:
{
    38e4:	b570      	push	{r4, r5, r6, lr}
    38e6:	4604      	mov	r4, r0
    38e8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    38ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    38ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    38ee:	b952      	cbnz	r2, 3906 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    38f0:	6803      	ldr	r3, [r0, #0]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d12a      	bne.n	394c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    38f6:	6840      	ldr	r0, [r0, #4]
    38f8:	4b18      	ldr	r3, [pc, #96]	; (395c <prvCopyDataToQueue+0x78>)
    38fa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    38fc:	2300      	movs	r3, #0
    38fe:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    3900:	3501      	adds	r5, #1
    3902:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3904:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    3906:	b96e      	cbnz	r6, 3924 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    3908:	6880      	ldr	r0, [r0, #8]
    390a:	4b15      	ldr	r3, [pc, #84]	; (3960 <prvCopyDataToQueue+0x7c>)
    390c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    390e:	68a3      	ldr	r3, [r4, #8]
    3910:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3912:	4413      	add	r3, r2
    3914:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    3916:	6862      	ldr	r2, [r4, #4]
    3918:	4293      	cmp	r3, r2
    391a:	d319      	bcc.n	3950 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    391c:	6823      	ldr	r3, [r4, #0]
    391e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3920:	2000      	movs	r0, #0
    3922:	e7ed      	b.n	3900 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3924:	68c0      	ldr	r0, [r0, #12]
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <prvCopyDataToQueue+0x7c>)
    3928:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    392a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    392c:	425b      	negs	r3, r3
    392e:	68e2      	ldr	r2, [r4, #12]
    3930:	441a      	add	r2, r3
    3932:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3934:	6821      	ldr	r1, [r4, #0]
    3936:	428a      	cmp	r2, r1
    3938:	d202      	bcs.n	3940 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    393a:	6862      	ldr	r2, [r4, #4]
    393c:	4413      	add	r3, r2
    393e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3940:	2e02      	cmp	r6, #2
    3942:	d107      	bne.n	3954 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3944:	b145      	cbz	r5, 3958 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3946:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3948:	2000      	movs	r0, #0
    394a:	e7d9      	b.n	3900 <prvCopyDataToQueue+0x1c>
    394c:	2000      	movs	r0, #0
    394e:	e7d7      	b.n	3900 <prvCopyDataToQueue+0x1c>
    3950:	2000      	movs	r0, #0
    3952:	e7d5      	b.n	3900 <prvCopyDataToQueue+0x1c>
    3954:	2000      	movs	r0, #0
    3956:	e7d3      	b.n	3900 <prvCopyDataToQueue+0x1c>
    3958:	2000      	movs	r0, #0
    395a:	e7d1      	b.n	3900 <prvCopyDataToQueue+0x1c>
    395c:	00004c49 	.word	0x00004c49
    3960:	000051df 	.word	0x000051df

00003964 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3964:	b570      	push	{r4, r5, r6, lr}
    3966:	b082      	sub	sp, #8
    3968:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    396a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    396c:	b164      	cbz	r4, 3988 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    396e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3972:	429a      	cmp	r2, r3
    3974:	d311      	bcc.n	399a <prvNotifyQueueSetContainer+0x36>
    3976:	f04f 0380 	mov.w	r3, #128	; 0x80
    397a:	f383 8811 	msr	BASEPRI, r3
    397e:	f3bf 8f6f 	isb	sy
    3982:	f3bf 8f4f 	dsb	sy
    3986:	e7fe      	b.n	3986 <prvNotifyQueueSetContainer+0x22>
    3988:	f04f 0380 	mov.w	r3, #128	; 0x80
    398c:	f383 8811 	msr	BASEPRI, r3
    3990:	f3bf 8f6f 	isb	sy
    3994:	f3bf 8f4f 	dsb	sy
    3998:	e7fe      	b.n	3998 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    399a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    399c:	4293      	cmp	r3, r2
    399e:	d803      	bhi.n	39a8 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    39a0:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    39a2:	4630      	mov	r0, r6
    39a4:	b002      	add	sp, #8
    39a6:	bd70      	pop	{r4, r5, r6, pc}
    39a8:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    39aa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    39ae:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    39b0:	a901      	add	r1, sp, #4
    39b2:	4620      	mov	r0, r4
    39b4:	4b0a      	ldr	r3, [pc, #40]	; (39e0 <prvNotifyQueueSetContainer+0x7c>)
    39b6:	4798      	blx	r3
    39b8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    39ba:	f1b5 3fff 	cmp.w	r5, #4294967295
    39be:	d10a      	bne.n	39d6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    39c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    39c2:	2b00      	cmp	r3, #0
    39c4:	d0ed      	beq.n	39a2 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    39c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    39ca:	4b06      	ldr	r3, [pc, #24]	; (39e4 <prvNotifyQueueSetContainer+0x80>)
    39cc:	4798      	blx	r3
    39ce:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    39d0:	bf18      	it	ne
    39d2:	2601      	movne	r6, #1
    39d4:	e7e5      	b.n	39a2 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    39d6:	1c6b      	adds	r3, r5, #1
    39d8:	b25b      	sxtb	r3, r3
    39da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    39de:	e7e0      	b.n	39a2 <prvNotifyQueueSetContainer+0x3e>
    39e0:	000038e5 	.word	0x000038e5
    39e4:	00004a45 	.word	0x00004a45

000039e8 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    39e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    39ea:	b172      	cbz	r2, 3a0a <prvCopyDataFromQueue+0x22>
{
    39ec:	b510      	push	{r4, lr}
    39ee:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    39f0:	68c4      	ldr	r4, [r0, #12]
    39f2:	4414      	add	r4, r2
    39f4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    39f6:	6840      	ldr	r0, [r0, #4]
    39f8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    39fa:	bf24      	itt	cs
    39fc:	6818      	ldrcs	r0, [r3, #0]
    39fe:	60d8      	strcs	r0, [r3, #12]
    3a00:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    3a02:	68d9      	ldr	r1, [r3, #12]
    3a04:	4b01      	ldr	r3, [pc, #4]	; (3a0c <prvCopyDataFromQueue+0x24>)
    3a06:	4798      	blx	r3
    3a08:	bd10      	pop	{r4, pc}
    3a0a:	4770      	bx	lr
    3a0c:	000051df 	.word	0x000051df

00003a10 <prvUnlockQueue>:
{
    3a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a14:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    3a16:	4b23      	ldr	r3, [pc, #140]	; (3aa4 <prvUnlockQueue+0x94>)
    3a18:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3a1a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    3a1e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3a20:	2c00      	cmp	r4, #0
    3a22:	dd19      	ble.n	3a58 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3a24:	4e20      	ldr	r6, [pc, #128]	; (3aa8 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3a26:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3ab4 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3a2a:	4f20      	ldr	r7, [pc, #128]	; (3aac <prvUnlockQueue+0x9c>)
    3a2c:	e008      	b.n	3a40 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a30:	b193      	cbz	r3, 3a58 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3a32:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3a36:	47b8      	blx	r7
    3a38:	b960      	cbnz	r0, 3a54 <prvUnlockQueue+0x44>
    3a3a:	3c01      	subs	r4, #1
    3a3c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3a3e:	b15c      	cbz	r4, 3a58 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3a40:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3a42:	2b00      	cmp	r3, #0
    3a44:	d0f3      	beq.n	3a2e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3a46:	2100      	movs	r1, #0
    3a48:	4628      	mov	r0, r5
    3a4a:	47b0      	blx	r6
    3a4c:	2800      	cmp	r0, #0
    3a4e:	d0f4      	beq.n	3a3a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3a50:	47c0      	blx	r8
    3a52:	e7f2      	b.n	3a3a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3a54:	47c0      	blx	r8
    3a56:	e7f0      	b.n	3a3a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3a58:	23ff      	movs	r3, #255	; 0xff
    3a5a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    3a5e:	4b14      	ldr	r3, [pc, #80]	; (3ab0 <prvUnlockQueue+0xa0>)
    3a60:	4798      	blx	r3
	taskENTER_CRITICAL();
    3a62:	4b10      	ldr	r3, [pc, #64]	; (3aa4 <prvUnlockQueue+0x94>)
    3a64:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3a66:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    3a6a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3a6c:	2c00      	cmp	r4, #0
    3a6e:	dd12      	ble.n	3a96 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3a70:	692b      	ldr	r3, [r5, #16]
    3a72:	b183      	cbz	r3, 3a96 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3a74:	f105 0710 	add.w	r7, r5, #16
    3a78:	4e0c      	ldr	r6, [pc, #48]	; (3aac <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    3a7a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3ab4 <prvUnlockQueue+0xa4>
    3a7e:	e004      	b.n	3a8a <prvUnlockQueue+0x7a>
    3a80:	3c01      	subs	r4, #1
    3a82:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3a84:	b13c      	cbz	r4, 3a96 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3a86:	692b      	ldr	r3, [r5, #16]
    3a88:	b12b      	cbz	r3, 3a96 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3a8a:	4638      	mov	r0, r7
    3a8c:	47b0      	blx	r6
    3a8e:	2800      	cmp	r0, #0
    3a90:	d0f6      	beq.n	3a80 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3a92:	47c0      	blx	r8
    3a94:	e7f4      	b.n	3a80 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3a96:	23ff      	movs	r3, #255	; 0xff
    3a98:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    3a9c:	4b04      	ldr	r3, [pc, #16]	; (3ab0 <prvUnlockQueue+0xa0>)
    3a9e:	4798      	blx	r3
    3aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3aa4:	00003595 	.word	0x00003595
    3aa8:	00003965 	.word	0x00003965
    3aac:	00004a45 	.word	0x00004a45
    3ab0:	000035d9 	.word	0x000035d9
    3ab4:	00004b75 	.word	0x00004b75

00003ab8 <xQueueGenericReset>:
{
    3ab8:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    3aba:	b330      	cbz	r0, 3b0a <xQueueGenericReset+0x52>
    3abc:	4604      	mov	r4, r0
    3abe:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3ac0:	4b1c      	ldr	r3, [pc, #112]	; (3b34 <xQueueGenericReset+0x7c>)
    3ac2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3ac4:	6822      	ldr	r2, [r4, #0]
    3ac6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3aca:	fb03 f301 	mul.w	r3, r3, r1
    3ace:	18d0      	adds	r0, r2, r3
    3ad0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3ad2:	2000      	movs	r0, #0
    3ad4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3ad6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3ad8:	1a5b      	subs	r3, r3, r1
    3ada:	4413      	add	r3, r2
    3adc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    3ade:	23ff      	movs	r3, #255	; 0xff
    3ae0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3ae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3ae8:	b9c5      	cbnz	r5, 3b1c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3aea:	6923      	ldr	r3, [r4, #16]
    3aec:	b1eb      	cbz	r3, 3b2a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3aee:	f104 0010 	add.w	r0, r4, #16
    3af2:	4b11      	ldr	r3, [pc, #68]	; (3b38 <xQueueGenericReset+0x80>)
    3af4:	4798      	blx	r3
    3af6:	b1c0      	cbz	r0, 3b2a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3afc:	4b0f      	ldr	r3, [pc, #60]	; (3b3c <xQueueGenericReset+0x84>)
    3afe:	601a      	str	r2, [r3, #0]
    3b00:	f3bf 8f4f 	dsb	sy
    3b04:	f3bf 8f6f 	isb	sy
    3b08:	e00f      	b.n	3b2a <xQueueGenericReset+0x72>
    3b0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b0e:	f383 8811 	msr	BASEPRI, r3
    3b12:	f3bf 8f6f 	isb	sy
    3b16:	f3bf 8f4f 	dsb	sy
    3b1a:	e7fe      	b.n	3b1a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    3b1c:	f104 0010 	add.w	r0, r4, #16
    3b20:	4d07      	ldr	r5, [pc, #28]	; (3b40 <xQueueGenericReset+0x88>)
    3b22:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3b24:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3b28:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    3b2a:	4b06      	ldr	r3, [pc, #24]	; (3b44 <xQueueGenericReset+0x8c>)
    3b2c:	4798      	blx	r3
}
    3b2e:	2001      	movs	r0, #1
    3b30:	bd38      	pop	{r3, r4, r5, pc}
    3b32:	bf00      	nop
    3b34:	00003595 	.word	0x00003595
    3b38:	00004a45 	.word	0x00004a45
    3b3c:	e000ed04 	.word	0xe000ed04
    3b40:	00003431 	.word	0x00003431
    3b44:	000035d9 	.word	0x000035d9

00003b48 <xQueueGenericCreate>:
{
    3b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    3b4a:	b940      	cbnz	r0, 3b5e <xQueueGenericCreate+0x16>
    3b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b50:	f383 8811 	msr	BASEPRI, r3
    3b54:	f3bf 8f6f 	isb	sy
    3b58:	f3bf 8f4f 	dsb	sy
    3b5c:	e7fe      	b.n	3b5c <xQueueGenericCreate+0x14>
    3b5e:	4606      	mov	r6, r0
    3b60:	4617      	mov	r7, r2
    3b62:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3b64:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3b68:	3054      	adds	r0, #84	; 0x54
    3b6a:	4b0b      	ldr	r3, [pc, #44]	; (3b98 <xQueueGenericCreate+0x50>)
    3b6c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3b6e:	4604      	mov	r4, r0
    3b70:	b178      	cbz	r0, 3b92 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3b72:	b11d      	cbz	r5, 3b7c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3b74:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3b78:	6003      	str	r3, [r0, #0]
    3b7a:	e000      	b.n	3b7e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    3b7c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    3b7e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3b80:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3b82:	2101      	movs	r1, #1
    3b84:	4620      	mov	r0, r4
    3b86:	4b05      	ldr	r3, [pc, #20]	; (3b9c <xQueueGenericCreate+0x54>)
    3b88:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3b8a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    3b8e:	2300      	movs	r3, #0
    3b90:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3b92:	4620      	mov	r0, r4
    3b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b96:	bf00      	nop
    3b98:	00003845 	.word	0x00003845
    3b9c:	00003ab9 	.word	0x00003ab9

00003ba0 <xQueueGenericSend>:
{
    3ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ba4:	b085      	sub	sp, #20
    3ba6:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3ba8:	b198      	cbz	r0, 3bd2 <xQueueGenericSend+0x32>
    3baa:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3bac:	b1d1      	cbz	r1, 3be4 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3bae:	2b02      	cmp	r3, #2
    3bb0:	d024      	beq.n	3bfc <xQueueGenericSend+0x5c>
    3bb2:	461e      	mov	r6, r3
    3bb4:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3bb6:	4b64      	ldr	r3, [pc, #400]	; (3d48 <xQueueGenericSend+0x1a8>)
    3bb8:	4798      	blx	r3
    3bba:	bb58      	cbnz	r0, 3c14 <xQueueGenericSend+0x74>
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	b38b      	cbz	r3, 3c24 <xQueueGenericSend+0x84>
    3bc0:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bc4:	f383 8811 	msr	BASEPRI, r3
    3bc8:	f3bf 8f6f 	isb	sy
    3bcc:	f3bf 8f4f 	dsb	sy
    3bd0:	e7fe      	b.n	3bd0 <xQueueGenericSend+0x30>
    3bd2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bd6:	f383 8811 	msr	BASEPRI, r3
    3bda:	f3bf 8f6f 	isb	sy
    3bde:	f3bf 8f4f 	dsb	sy
    3be2:	e7fe      	b.n	3be2 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3be4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3be6:	2a00      	cmp	r2, #0
    3be8:	d0e1      	beq.n	3bae <xQueueGenericSend+0xe>
    3bea:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bee:	f383 8811 	msr	BASEPRI, r3
    3bf2:	f3bf 8f6f 	isb	sy
    3bf6:	f3bf 8f4f 	dsb	sy
    3bfa:	e7fe      	b.n	3bfa <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3bfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3bfe:	2a01      	cmp	r2, #1
    3c00:	d0d7      	beq.n	3bb2 <xQueueGenericSend+0x12>
    3c02:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c06:	f383 8811 	msr	BASEPRI, r3
    3c0a:	f3bf 8f6f 	isb	sy
    3c0e:	f3bf 8f4f 	dsb	sy
    3c12:	e7fe      	b.n	3c12 <xQueueGenericSend+0x72>
    3c14:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3c16:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3d74 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3c1a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3d78 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    3c1e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3d54 <xQueueGenericSend+0x1b4>
    3c22:	e041      	b.n	3ca8 <xQueueGenericSend+0x108>
    3c24:	2500      	movs	r5, #0
    3c26:	e7f6      	b.n	3c16 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3c28:	4632      	mov	r2, r6
    3c2a:	4639      	mov	r1, r7
    3c2c:	4620      	mov	r0, r4
    3c2e:	4b47      	ldr	r3, [pc, #284]	; (3d4c <xQueueGenericSend+0x1ac>)
    3c30:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3c32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3c34:	b193      	cbz	r3, 3c5c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3c36:	4631      	mov	r1, r6
    3c38:	4620      	mov	r0, r4
    3c3a:	4b45      	ldr	r3, [pc, #276]	; (3d50 <xQueueGenericSend+0x1b0>)
    3c3c:	4798      	blx	r3
    3c3e:	b138      	cbz	r0, 3c50 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3c44:	4b43      	ldr	r3, [pc, #268]	; (3d54 <xQueueGenericSend+0x1b4>)
    3c46:	601a      	str	r2, [r3, #0]
    3c48:	f3bf 8f4f 	dsb	sy
    3c4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3c50:	4b41      	ldr	r3, [pc, #260]	; (3d58 <xQueueGenericSend+0x1b8>)
    3c52:	4798      	blx	r3
				return pdPASS;
    3c54:	2001      	movs	r0, #1
}
    3c56:	b005      	add	sp, #20
    3c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c5e:	b173      	cbz	r3, 3c7e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3c60:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3c64:	4b3d      	ldr	r3, [pc, #244]	; (3d5c <xQueueGenericSend+0x1bc>)
    3c66:	4798      	blx	r3
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0f1      	beq.n	3c50 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3c70:	4b38      	ldr	r3, [pc, #224]	; (3d54 <xQueueGenericSend+0x1b4>)
    3c72:	601a      	str	r2, [r3, #0]
    3c74:	f3bf 8f4f 	dsb	sy
    3c78:	f3bf 8f6f 	isb	sy
    3c7c:	e7e8      	b.n	3c50 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3c7e:	2800      	cmp	r0, #0
    3c80:	d0e6      	beq.n	3c50 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3c86:	4b33      	ldr	r3, [pc, #204]	; (3d54 <xQueueGenericSend+0x1b4>)
    3c88:	601a      	str	r2, [r3, #0]
    3c8a:	f3bf 8f4f 	dsb	sy
    3c8e:	f3bf 8f6f 	isb	sy
    3c92:	e7dd      	b.n	3c50 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3c94:	4b30      	ldr	r3, [pc, #192]	; (3d58 <xQueueGenericSend+0x1b8>)
    3c96:	4798      	blx	r3
					return errQUEUE_FULL;
    3c98:	2000      	movs	r0, #0
    3c9a:	e7dc      	b.n	3c56 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3c9c:	4620      	mov	r0, r4
    3c9e:	4b30      	ldr	r3, [pc, #192]	; (3d60 <xQueueGenericSend+0x1c0>)
    3ca0:	4798      	blx	r3
				(void)xTaskResumeAll();
    3ca2:	4b30      	ldr	r3, [pc, #192]	; (3d64 <xQueueGenericSend+0x1c4>)
    3ca4:	4798      	blx	r3
    3ca6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3ca8:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3caa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3cae:	429a      	cmp	r2, r3
    3cb0:	d3ba      	bcc.n	3c28 <xQueueGenericSend+0x88>
    3cb2:	2e02      	cmp	r6, #2
    3cb4:	d0b8      	beq.n	3c28 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d0eb      	beq.n	3c94 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3cbc:	b90d      	cbnz	r5, 3cc2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3cbe:	a802      	add	r0, sp, #8
    3cc0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3cc2:	4b25      	ldr	r3, [pc, #148]	; (3d58 <xQueueGenericSend+0x1b8>)
    3cc4:	4798      	blx	r3
		vTaskSuspendAll();
    3cc6:	4b28      	ldr	r3, [pc, #160]	; (3d68 <xQueueGenericSend+0x1c8>)
    3cc8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3cca:	47c0      	blx	r8
    3ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3cd0:	b25b      	sxtb	r3, r3
    3cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3cd6:	bf04      	itt	eq
    3cd8:	2300      	moveq	r3, #0
    3cda:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3cde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3ce2:	b25b      	sxtb	r3, r3
    3ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ce8:	bf04      	itt	eq
    3cea:	2300      	moveq	r3, #0
    3cec:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3cf0:	4b19      	ldr	r3, [pc, #100]	; (3d58 <xQueueGenericSend+0x1b8>)
    3cf2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3cf4:	a901      	add	r1, sp, #4
    3cf6:	a802      	add	r0, sp, #8
    3cf8:	4b1c      	ldr	r3, [pc, #112]	; (3d6c <xQueueGenericSend+0x1cc>)
    3cfa:	4798      	blx	r3
    3cfc:	b9e0      	cbnz	r0, 3d38 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3cfe:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3d00:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3d04:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3d06:	4b14      	ldr	r3, [pc, #80]	; (3d58 <xQueueGenericSend+0x1b8>)
    3d08:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3d0a:	45ab      	cmp	fp, r5
    3d0c:	d1c6      	bne.n	3c9c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3d0e:	9901      	ldr	r1, [sp, #4]
    3d10:	f104 0010 	add.w	r0, r4, #16
    3d14:	4b16      	ldr	r3, [pc, #88]	; (3d70 <xQueueGenericSend+0x1d0>)
    3d16:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3d18:	4620      	mov	r0, r4
    3d1a:	4b11      	ldr	r3, [pc, #68]	; (3d60 <xQueueGenericSend+0x1c0>)
    3d1c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3d1e:	4b11      	ldr	r3, [pc, #68]	; (3d64 <xQueueGenericSend+0x1c4>)
    3d20:	4798      	blx	r3
    3d22:	2800      	cmp	r0, #0
    3d24:	d1bf      	bne.n	3ca6 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d2a:	f8c9 3000 	str.w	r3, [r9]
    3d2e:	f3bf 8f4f 	dsb	sy
    3d32:	f3bf 8f6f 	isb	sy
    3d36:	e7b6      	b.n	3ca6 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3d38:	4620      	mov	r0, r4
    3d3a:	4b09      	ldr	r3, [pc, #36]	; (3d60 <xQueueGenericSend+0x1c0>)
    3d3c:	4798      	blx	r3
			(void)xTaskResumeAll();
    3d3e:	4b09      	ldr	r3, [pc, #36]	; (3d64 <xQueueGenericSend+0x1c4>)
    3d40:	4798      	blx	r3
			return errQUEUE_FULL;
    3d42:	2000      	movs	r0, #0
    3d44:	e787      	b.n	3c56 <xQueueGenericSend+0xb6>
    3d46:	bf00      	nop
    3d48:	00004b85 	.word	0x00004b85
    3d4c:	000038e5 	.word	0x000038e5
    3d50:	00003965 	.word	0x00003965
    3d54:	e000ed04 	.word	0xe000ed04
    3d58:	000035d9 	.word	0x000035d9
    3d5c:	00004a45 	.word	0x00004a45
    3d60:	00003a11 	.word	0x00003a11
    3d64:	000046f9 	.word	0x000046f9
    3d68:	000045b1 	.word	0x000045b1
    3d6c:	00004ae9 	.word	0x00004ae9
    3d70:	000049c5 	.word	0x000049c5
    3d74:	00003595 	.word	0x00003595
    3d78:	00004ad5 	.word	0x00004ad5

00003d7c <xQueueGenericSendFromISR>:
{
    3d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3d80:	2800      	cmp	r0, #0
    3d82:	d036      	beq.n	3df2 <xQueueGenericSendFromISR+0x76>
    3d84:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3d86:	2900      	cmp	r1, #0
    3d88:	d03c      	beq.n	3e04 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3d8a:	2b02      	cmp	r3, #2
    3d8c:	d046      	beq.n	3e1c <xQueueGenericSendFromISR+0xa0>
    3d8e:	461f      	mov	r7, r3
    3d90:	4690      	mov	r8, r2
    3d92:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3d94:	4b37      	ldr	r3, [pc, #220]	; (3e74 <xQueueGenericSendFromISR+0xf8>)
    3d96:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3d98:	f3ef 8611 	mrs	r6, BASEPRI
    3d9c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3da0:	f383 8811 	msr	BASEPRI, r3
    3da4:	f3bf 8f6f 	isb	sy
    3da8:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3dac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3db0:	429a      	cmp	r2, r3
    3db2:	d301      	bcc.n	3db8 <xQueueGenericSendFromISR+0x3c>
    3db4:	2f02      	cmp	r7, #2
    3db6:	d151      	bne.n	3e5c <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3db8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3dbc:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3dbe:	463a      	mov	r2, r7
    3dc0:	4649      	mov	r1, r9
    3dc2:	4620      	mov	r0, r4
    3dc4:	4b2c      	ldr	r3, [pc, #176]	; (3e78 <xQueueGenericSendFromISR+0xfc>)
    3dc6:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3dc8:	f1b5 3fff 	cmp.w	r5, #4294967295
    3dcc:	d140      	bne.n	3e50 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    3dce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3dd0:	b383      	cbz	r3, 3e34 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3dd2:	4639      	mov	r1, r7
    3dd4:	4620      	mov	r0, r4
    3dd6:	4b29      	ldr	r3, [pc, #164]	; (3e7c <xQueueGenericSendFromISR+0x100>)
    3dd8:	4798      	blx	r3
    3dda:	2800      	cmp	r0, #0
    3ddc:	d040      	beq.n	3e60 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    3dde:	f1b8 0f00 	cmp.w	r8, #0
    3de2:	d03f      	beq.n	3e64 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3de4:	2001      	movs	r0, #1
    3de6:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3dea:	f386 8811 	msr	BASEPRI, r6
}
    3dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    3df2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3df6:	f383 8811 	msr	BASEPRI, r3
    3dfa:	f3bf 8f6f 	isb	sy
    3dfe:	f3bf 8f4f 	dsb	sy
    3e02:	e7fe      	b.n	3e02 <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3e04:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3e06:	2800      	cmp	r0, #0
    3e08:	d0bf      	beq.n	3d8a <xQueueGenericSendFromISR+0xe>
    3e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e0e:	f383 8811 	msr	BASEPRI, r3
    3e12:	f3bf 8f6f 	isb	sy
    3e16:	f3bf 8f4f 	dsb	sy
    3e1a:	e7fe      	b.n	3e1a <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3e1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3e1e:	2801      	cmp	r0, #1
    3e20:	d0b5      	beq.n	3d8e <xQueueGenericSendFromISR+0x12>
    3e22:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e26:	f383 8811 	msr	BASEPRI, r3
    3e2a:	f3bf 8f6f 	isb	sy
    3e2e:	f3bf 8f4f 	dsb	sy
    3e32:	e7fe      	b.n	3e32 <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e36:	b1bb      	cbz	r3, 3e68 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3e38:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3e3c:	4b10      	ldr	r3, [pc, #64]	; (3e80 <xQueueGenericSendFromISR+0x104>)
    3e3e:	4798      	blx	r3
    3e40:	b1a0      	cbz	r0, 3e6c <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    3e42:	f1b8 0f00 	cmp.w	r8, #0
    3e46:	d013      	beq.n	3e70 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3e48:	2001      	movs	r0, #1
    3e4a:	f8c8 0000 	str.w	r0, [r8]
    3e4e:	e7cc      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    3e50:	1c6b      	adds	r3, r5, #1
    3e52:	b25b      	sxtb	r3, r3
    3e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    3e58:	2001      	movs	r0, #1
    3e5a:	e7c6      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    3e5c:	2000      	movs	r0, #0
    3e5e:	e7c4      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    3e60:	2001      	movs	r0, #1
    3e62:	e7c2      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
    3e64:	2001      	movs	r0, #1
    3e66:	e7c0      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
    3e68:	2001      	movs	r0, #1
    3e6a:	e7be      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
    3e6c:	2001      	movs	r0, #1
    3e6e:	e7bc      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
    3e70:	2001      	movs	r0, #1
    3e72:	e7ba      	b.n	3dea <xQueueGenericSendFromISR+0x6e>
    3e74:	000037ed 	.word	0x000037ed
    3e78:	000038e5 	.word	0x000038e5
    3e7c:	00003965 	.word	0x00003965
    3e80:	00004a45 	.word	0x00004a45

00003e84 <xQueueReceive>:
{
    3e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e88:	b084      	sub	sp, #16
    3e8a:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    3e8c:	b180      	cbz	r0, 3eb0 <xQueueReceive+0x2c>
    3e8e:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3e90:	b1b9      	cbz	r1, 3ec2 <xQueueReceive+0x3e>
    3e92:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3e94:	4b50      	ldr	r3, [pc, #320]	; (3fd8 <xQueueReceive+0x154>)
    3e96:	4798      	blx	r3
    3e98:	b9f8      	cbnz	r0, 3eda <xQueueReceive+0x56>
    3e9a:	9b01      	ldr	r3, [sp, #4]
    3e9c:	b32b      	cbz	r3, 3eea <xQueueReceive+0x66>
    3e9e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ea2:	f383 8811 	msr	BASEPRI, r3
    3ea6:	f3bf 8f6f 	isb	sy
    3eaa:	f3bf 8f4f 	dsb	sy
    3eae:	e7fe      	b.n	3eae <xQueueReceive+0x2a>
    3eb0:	f04f 0380 	mov.w	r3, #128	; 0x80
    3eb4:	f383 8811 	msr	BASEPRI, r3
    3eb8:	f3bf 8f6f 	isb	sy
    3ebc:	f3bf 8f4f 	dsb	sy
    3ec0:	e7fe      	b.n	3ec0 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3ec2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d0e4      	beq.n	3e92 <xQueueReceive+0xe>
    3ec8:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ecc:	f383 8811 	msr	BASEPRI, r3
    3ed0:	f3bf 8f6f 	isb	sy
    3ed4:	f3bf 8f4f 	dsb	sy
    3ed8:	e7fe      	b.n	3ed8 <xQueueReceive+0x54>
    3eda:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3edc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4004 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3ee0:	f8df a124 	ldr.w	sl, [pc, #292]	; 4008 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    3ee4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3fe4 <xQueueReceive+0x160>
    3ee8:	e029      	b.n	3f3e <xQueueReceive+0xba>
    3eea:	2700      	movs	r7, #0
    3eec:	e7f6      	b.n	3edc <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    3eee:	4631      	mov	r1, r6
    3ef0:	4620      	mov	r0, r4
    3ef2:	4b3a      	ldr	r3, [pc, #232]	; (3fdc <xQueueReceive+0x158>)
    3ef4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    3ef6:	3d01      	subs	r5, #1
    3ef8:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3efa:	6923      	ldr	r3, [r4, #16]
    3efc:	b163      	cbz	r3, 3f18 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3efe:	f104 0010 	add.w	r0, r4, #16
    3f02:	4b37      	ldr	r3, [pc, #220]	; (3fe0 <xQueueReceive+0x15c>)
    3f04:	4798      	blx	r3
    3f06:	b138      	cbz	r0, 3f18 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    3f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f0c:	4b35      	ldr	r3, [pc, #212]	; (3fe4 <xQueueReceive+0x160>)
    3f0e:	601a      	str	r2, [r3, #0]
    3f10:	f3bf 8f4f 	dsb	sy
    3f14:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3f18:	4b33      	ldr	r3, [pc, #204]	; (3fe8 <xQueueReceive+0x164>)
    3f1a:	4798      	blx	r3
				return pdPASS;
    3f1c:	2001      	movs	r0, #1
}
    3f1e:	b004      	add	sp, #16
    3f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    3f24:	4b30      	ldr	r3, [pc, #192]	; (3fe8 <xQueueReceive+0x164>)
    3f26:	4798      	blx	r3
					return errQUEUE_EMPTY;
    3f28:	2000      	movs	r0, #0
    3f2a:	e7f8      	b.n	3f1e <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3f2c:	a802      	add	r0, sp, #8
    3f2e:	47d0      	blx	sl
    3f30:	e00e      	b.n	3f50 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    3f32:	4620      	mov	r0, r4
    3f34:	4b2d      	ldr	r3, [pc, #180]	; (3fec <xQueueReceive+0x168>)
    3f36:	4798      	blx	r3
				(void)xTaskResumeAll();
    3f38:	4b2d      	ldr	r3, [pc, #180]	; (3ff0 <xQueueReceive+0x16c>)
    3f3a:	4798      	blx	r3
    3f3c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3f3e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3f40:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3f42:	2d00      	cmp	r5, #0
    3f44:	d1d3      	bne.n	3eee <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    3f46:	9b01      	ldr	r3, [sp, #4]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d0eb      	beq.n	3f24 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    3f4c:	2f00      	cmp	r7, #0
    3f4e:	d0ed      	beq.n	3f2c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    3f50:	4b25      	ldr	r3, [pc, #148]	; (3fe8 <xQueueReceive+0x164>)
    3f52:	4798      	blx	r3
		vTaskSuspendAll();
    3f54:	4b27      	ldr	r3, [pc, #156]	; (3ff4 <xQueueReceive+0x170>)
    3f56:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3f58:	47c0      	blx	r8
    3f5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3f5e:	b25b      	sxtb	r3, r3
    3f60:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f64:	bf04      	itt	eq
    3f66:	2300      	moveq	r3, #0
    3f68:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3f6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3f70:	b25b      	sxtb	r3, r3
    3f72:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f76:	bf04      	itt	eq
    3f78:	2300      	moveq	r3, #0
    3f7a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3f7e:	4b1a      	ldr	r3, [pc, #104]	; (3fe8 <xQueueReceive+0x164>)
    3f80:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3f82:	a901      	add	r1, sp, #4
    3f84:	a802      	add	r0, sp, #8
    3f86:	4b1c      	ldr	r3, [pc, #112]	; (3ff8 <xQueueReceive+0x174>)
    3f88:	4798      	blx	r3
    3f8a:	b9c8      	cbnz	r0, 3fc0 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3f8c:	4620      	mov	r0, r4
    3f8e:	4b1b      	ldr	r3, [pc, #108]	; (3ffc <xQueueReceive+0x178>)
    3f90:	4798      	blx	r3
    3f92:	2800      	cmp	r0, #0
    3f94:	d0cd      	beq.n	3f32 <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    3f96:	9901      	ldr	r1, [sp, #4]
    3f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3f9c:	4b18      	ldr	r3, [pc, #96]	; (4000 <xQueueReceive+0x17c>)
    3f9e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3fa0:	4620      	mov	r0, r4
    3fa2:	4b12      	ldr	r3, [pc, #72]	; (3fec <xQueueReceive+0x168>)
    3fa4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3fa6:	4b12      	ldr	r3, [pc, #72]	; (3ff0 <xQueueReceive+0x16c>)
    3fa8:	4798      	blx	r3
    3faa:	2800      	cmp	r0, #0
    3fac:	d1c6      	bne.n	3f3c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    3fae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3fb2:	f8c9 3000 	str.w	r3, [r9]
    3fb6:	f3bf 8f4f 	dsb	sy
    3fba:	f3bf 8f6f 	isb	sy
    3fbe:	e7bd      	b.n	3f3c <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    3fc0:	4620      	mov	r0, r4
    3fc2:	4b0a      	ldr	r3, [pc, #40]	; (3fec <xQueueReceive+0x168>)
    3fc4:	4798      	blx	r3
			(void)xTaskResumeAll();
    3fc6:	4b0a      	ldr	r3, [pc, #40]	; (3ff0 <xQueueReceive+0x16c>)
    3fc8:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    3fca:	4620      	mov	r0, r4
    3fcc:	4b0b      	ldr	r3, [pc, #44]	; (3ffc <xQueueReceive+0x178>)
    3fce:	4798      	blx	r3
    3fd0:	2800      	cmp	r0, #0
    3fd2:	d0b3      	beq.n	3f3c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    3fd4:	2000      	movs	r0, #0
    3fd6:	e7a2      	b.n	3f1e <xQueueReceive+0x9a>
    3fd8:	00004b85 	.word	0x00004b85
    3fdc:	000039e9 	.word	0x000039e9
    3fe0:	00004a45 	.word	0x00004a45
    3fe4:	e000ed04 	.word	0xe000ed04
    3fe8:	000035d9 	.word	0x000035d9
    3fec:	00003a11 	.word	0x00003a11
    3ff0:	000046f9 	.word	0x000046f9
    3ff4:	000045b1 	.word	0x000045b1
    3ff8:	00004ae9 	.word	0x00004ae9
    3ffc:	000038c5 	.word	0x000038c5
    4000:	000049c5 	.word	0x000049c5
    4004:	00003595 	.word	0x00003595
    4008:	00004ad5 	.word	0x00004ad5

0000400c <xQueueSemaphoreTake>:
{
    400c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4010:	b085      	sub	sp, #20
    4012:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    4014:	b158      	cbz	r0, 402e <xQueueSemaphoreTake+0x22>
    4016:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    4018:	6c03      	ldr	r3, [r0, #64]	; 0x40
    401a:	b18b      	cbz	r3, 4040 <xQueueSemaphoreTake+0x34>
    401c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4020:	f383 8811 	msr	BASEPRI, r3
    4024:	f3bf 8f6f 	isb	sy
    4028:	f3bf 8f4f 	dsb	sy
    402c:	e7fe      	b.n	402c <xQueueSemaphoreTake+0x20>
    402e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4032:	f383 8811 	msr	BASEPRI, r3
    4036:	f3bf 8f6f 	isb	sy
    403a:	f3bf 8f4f 	dsb	sy
    403e:	e7fe      	b.n	403e <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4040:	4b5b      	ldr	r3, [pc, #364]	; (41b0 <xQueueSemaphoreTake+0x1a4>)
    4042:	4798      	blx	r3
    4044:	b950      	cbnz	r0, 405c <xQueueSemaphoreTake+0x50>
    4046:	9b01      	ldr	r3, [sp, #4]
    4048:	b183      	cbz	r3, 406c <xQueueSemaphoreTake+0x60>
    404a:	f04f 0380 	mov.w	r3, #128	; 0x80
    404e:	f383 8811 	msr	BASEPRI, r3
    4052:	f3bf 8f6f 	isb	sy
    4056:	f3bf 8f4f 	dsb	sy
    405a:	e7fe      	b.n	405a <xQueueSemaphoreTake+0x4e>
    405c:	2500      	movs	r5, #0
    405e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    4060:	4e54      	ldr	r6, [pc, #336]	; (41b4 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    4062:	f8df 9184 	ldr.w	r9, [pc, #388]	; 41e8 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4066:	f8df 8158 	ldr.w	r8, [pc, #344]	; 41c0 <xQueueSemaphoreTake+0x1b4>
    406a:	e048      	b.n	40fe <xQueueSemaphoreTake+0xf2>
    406c:	2500      	movs	r5, #0
    406e:	462f      	mov	r7, r5
    4070:	e7f6      	b.n	4060 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    4072:	3b01      	subs	r3, #1
    4074:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4076:	6823      	ldr	r3, [r4, #0]
    4078:	b913      	cbnz	r3, 4080 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    407a:	4b4f      	ldr	r3, [pc, #316]	; (41b8 <xQueueSemaphoreTake+0x1ac>)
    407c:	4798      	blx	r3
    407e:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4080:	6923      	ldr	r3, [r4, #16]
    4082:	b163      	cbz	r3, 409e <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4084:	f104 0010 	add.w	r0, r4, #16
    4088:	4b4c      	ldr	r3, [pc, #304]	; (41bc <xQueueSemaphoreTake+0x1b0>)
    408a:	4798      	blx	r3
    408c:	b138      	cbz	r0, 409e <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4092:	4b4b      	ldr	r3, [pc, #300]	; (41c0 <xQueueSemaphoreTake+0x1b4>)
    4094:	601a      	str	r2, [r3, #0]
    4096:	f3bf 8f4f 	dsb	sy
    409a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    409e:	4b49      	ldr	r3, [pc, #292]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    40a0:	4798      	blx	r3
				return pdPASS;
    40a2:	2501      	movs	r5, #1
}
    40a4:	4628      	mov	r0, r5
    40a6:	b005      	add	sp, #20
    40a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    40ac:	b145      	cbz	r5, 40c0 <xQueueSemaphoreTake+0xb4>
    40ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    40b2:	f383 8811 	msr	BASEPRI, r3
    40b6:	f3bf 8f6f 	isb	sy
    40ba:	f3bf 8f4f 	dsb	sy
    40be:	e7fe      	b.n	40be <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    40c0:	4b40      	ldr	r3, [pc, #256]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    40c2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    40c4:	e7ee      	b.n	40a4 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    40c6:	a802      	add	r0, sp, #8
    40c8:	47c8      	blx	r9
    40ca:	e021      	b.n	4110 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    40cc:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    40ce:	6860      	ldr	r0, [r4, #4]
    40d0:	4b3d      	ldr	r3, [pc, #244]	; (41c8 <xQueueSemaphoreTake+0x1bc>)
    40d2:	4798      	blx	r3
    40d4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    40d6:	4b3b      	ldr	r3, [pc, #236]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    40d8:	4798      	blx	r3
    40da:	e040      	b.n	415e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    40dc:	4620      	mov	r0, r4
    40de:	4b3b      	ldr	r3, [pc, #236]	; (41cc <xQueueSemaphoreTake+0x1c0>)
    40e0:	4798      	blx	r3
				(void)xTaskResumeAll();
    40e2:	4b3b      	ldr	r3, [pc, #236]	; (41d0 <xQueueSemaphoreTake+0x1c4>)
    40e4:	4798      	blx	r3
    40e6:	e009      	b.n	40fc <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    40e8:	4620      	mov	r0, r4
    40ea:	4b38      	ldr	r3, [pc, #224]	; (41cc <xQueueSemaphoreTake+0x1c0>)
    40ec:	4798      	blx	r3
			(void)xTaskResumeAll();
    40ee:	4b38      	ldr	r3, [pc, #224]	; (41d0 <xQueueSemaphoreTake+0x1c4>)
    40f0:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    40f2:	4620      	mov	r0, r4
    40f4:	4b37      	ldr	r3, [pc, #220]	; (41d4 <xQueueSemaphoreTake+0x1c8>)
    40f6:	4798      	blx	r3
    40f8:	2800      	cmp	r0, #0
    40fa:	d145      	bne.n	4188 <xQueueSemaphoreTake+0x17c>
    40fc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    40fe:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    4100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    4102:	2b00      	cmp	r3, #0
    4104:	d1b5      	bne.n	4072 <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    4106:	9b01      	ldr	r3, [sp, #4]
    4108:	2b00      	cmp	r3, #0
    410a:	d0cf      	beq.n	40ac <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    410c:	2f00      	cmp	r7, #0
    410e:	d0da      	beq.n	40c6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    4110:	4b2c      	ldr	r3, [pc, #176]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    4112:	4798      	blx	r3
		vTaskSuspendAll();
    4114:	4b30      	ldr	r3, [pc, #192]	; (41d8 <xQueueSemaphoreTake+0x1cc>)
    4116:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4118:	47b0      	blx	r6
    411a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    411e:	b25b      	sxtb	r3, r3
    4120:	f1b3 3fff 	cmp.w	r3, #4294967295
    4124:	bf04      	itt	eq
    4126:	2300      	moveq	r3, #0
    4128:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    412c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4130:	b25b      	sxtb	r3, r3
    4132:	f1b3 3fff 	cmp.w	r3, #4294967295
    4136:	bf04      	itt	eq
    4138:	2300      	moveq	r3, #0
    413a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    413e:	4b21      	ldr	r3, [pc, #132]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    4140:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4142:	a901      	add	r1, sp, #4
    4144:	a802      	add	r0, sp, #8
    4146:	4b25      	ldr	r3, [pc, #148]	; (41dc <xQueueSemaphoreTake+0x1d0>)
    4148:	4798      	blx	r3
    414a:	2800      	cmp	r0, #0
    414c:	d1cc      	bne.n	40e8 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    414e:	4620      	mov	r0, r4
    4150:	4b20      	ldr	r3, [pc, #128]	; (41d4 <xQueueSemaphoreTake+0x1c8>)
    4152:	4798      	blx	r3
    4154:	2800      	cmp	r0, #0
    4156:	d0c1      	beq.n	40dc <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4158:	6823      	ldr	r3, [r4, #0]
    415a:	2b00      	cmp	r3, #0
    415c:	d0b6      	beq.n	40cc <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    415e:	9901      	ldr	r1, [sp, #4]
    4160:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4164:	4b1e      	ldr	r3, [pc, #120]	; (41e0 <xQueueSemaphoreTake+0x1d4>)
    4166:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4168:	4620      	mov	r0, r4
    416a:	4b18      	ldr	r3, [pc, #96]	; (41cc <xQueueSemaphoreTake+0x1c0>)
    416c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    416e:	4b18      	ldr	r3, [pc, #96]	; (41d0 <xQueueSemaphoreTake+0x1c4>)
    4170:	4798      	blx	r3
    4172:	2800      	cmp	r0, #0
    4174:	d1c2      	bne.n	40fc <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4176:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    417a:	f8c8 3000 	str.w	r3, [r8]
    417e:	f3bf 8f4f 	dsb	sy
    4182:	f3bf 8f6f 	isb	sy
    4186:	e7b9      	b.n	40fc <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4188:	2d00      	cmp	r5, #0
    418a:	d08b      	beq.n	40a4 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    418c:	4b09      	ldr	r3, [pc, #36]	; (41b4 <xQueueSemaphoreTake+0x1a8>)
    418e:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    4190:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4192:	b153      	cbz	r3, 41aa <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4194:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4196:	6819      	ldr	r1, [r3, #0]
    4198:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    419c:	6860      	ldr	r0, [r4, #4]
    419e:	4b11      	ldr	r3, [pc, #68]	; (41e4 <xQueueSemaphoreTake+0x1d8>)
    41a0:	4798      	blx	r3
						taskEXIT_CRITICAL();
    41a2:	4b08      	ldr	r3, [pc, #32]	; (41c4 <xQueueSemaphoreTake+0x1b8>)
    41a4:	4798      	blx	r3
				return errQUEUE_EMPTY;
    41a6:	2500      	movs	r5, #0
    41a8:	e77c      	b.n	40a4 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    41aa:	2100      	movs	r1, #0
    41ac:	e7f6      	b.n	419c <xQueueSemaphoreTake+0x190>
    41ae:	bf00      	nop
    41b0:	00004b85 	.word	0x00004b85
    41b4:	00003595 	.word	0x00003595
    41b8:	00004d91 	.word	0x00004d91
    41bc:	00004a45 	.word	0x00004a45
    41c0:	e000ed04 	.word	0xe000ed04
    41c4:	000035d9 	.word	0x000035d9
    41c8:	00004ba5 	.word	0x00004ba5
    41cc:	00003a11 	.word	0x00003a11
    41d0:	000046f9 	.word	0x000046f9
    41d4:	000038c5 	.word	0x000038c5
    41d8:	000045b1 	.word	0x000045b1
    41dc:	00004ae9 	.word	0x00004ae9
    41e0:	000049c5 	.word	0x000049c5
    41e4:	00004ce5 	.word	0x00004ce5
    41e8:	00004ad5 	.word	0x00004ad5

000041ec <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    41ec:	b940      	cbnz	r0, 4200 <uxQueueMessagesWaiting+0x14>
    41ee:	f04f 0380 	mov.w	r3, #128	; 0x80
    41f2:	f383 8811 	msr	BASEPRI, r3
    41f6:	f3bf 8f6f 	isb	sy
    41fa:	f3bf 8f4f 	dsb	sy
    41fe:	e7fe      	b.n	41fe <uxQueueMessagesWaiting+0x12>
{
    4200:	b510      	push	{r4, lr}
    4202:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    4204:	4b03      	ldr	r3, [pc, #12]	; (4214 <uxQueueMessagesWaiting+0x28>)
    4206:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    4208:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    420a:	4b03      	ldr	r3, [pc, #12]	; (4218 <uxQueueMessagesWaiting+0x2c>)
    420c:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    420e:	4620      	mov	r0, r4
    4210:	bd10      	pop	{r4, pc}
    4212:	bf00      	nop
    4214:	00003595 	.word	0x00003595
    4218:	000035d9 	.word	0x000035d9

0000421c <vQueueWaitForMessageRestricted>:
{
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	4604      	mov	r4, r0
    4220:	460d      	mov	r5, r1
    4222:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4224:	4b11      	ldr	r3, [pc, #68]	; (426c <vQueueWaitForMessageRestricted+0x50>)
    4226:	4798      	blx	r3
    4228:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    422c:	b25b      	sxtb	r3, r3
    422e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4232:	bf04      	itt	eq
    4234:	2300      	moveq	r3, #0
    4236:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    423a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    423e:	b25b      	sxtb	r3, r3
    4240:	f1b3 3fff 	cmp.w	r3, #4294967295
    4244:	bf04      	itt	eq
    4246:	2300      	moveq	r3, #0
    4248:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    424c:	4b08      	ldr	r3, [pc, #32]	; (4270 <vQueueWaitForMessageRestricted+0x54>)
    424e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    4250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4252:	b11b      	cbz	r3, 425c <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4254:	4620      	mov	r0, r4
    4256:	4b07      	ldr	r3, [pc, #28]	; (4274 <vQueueWaitForMessageRestricted+0x58>)
    4258:	4798      	blx	r3
    425a:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    425c:	4632      	mov	r2, r6
    425e:	4629      	mov	r1, r5
    4260:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4264:	4b04      	ldr	r3, [pc, #16]	; (4278 <vQueueWaitForMessageRestricted+0x5c>)
    4266:	4798      	blx	r3
    4268:	e7f4      	b.n	4254 <vQueueWaitForMessageRestricted+0x38>
    426a:	bf00      	nop
    426c:	00003595 	.word	0x00003595
    4270:	000035d9 	.word	0x000035d9
    4274:	00003a11 	.word	0x00003a11
    4278:	00004a01 	.word	0x00004a01

0000427c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    427c:	4a06      	ldr	r2, [pc, #24]	; (4298 <prvIdleTask+0x1c>)
				taskYIELD();
    427e:	4807      	ldr	r0, [pc, #28]	; (429c <prvIdleTask+0x20>)
    4280:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4284:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4286:	2b01      	cmp	r3, #1
    4288:	d9fc      	bls.n	4284 <prvIdleTask+0x8>
				taskYIELD();
    428a:	6001      	str	r1, [r0, #0]
    428c:	f3bf 8f4f 	dsb	sy
    4290:	f3bf 8f6f 	isb	sy
    4294:	e7f6      	b.n	4284 <prvIdleTask+0x8>
    4296:	bf00      	nop
    4298:	200026a0 	.word	0x200026a0
    429c:	e000ed04 	.word	0xe000ed04

000042a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    42a0:	4b09      	ldr	r3, [pc, #36]	; (42c8 <prvResetNextTaskUnblockTime+0x28>)
    42a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	b143      	cbz	r3, 42bc <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    42aa:	4b07      	ldr	r3, [pc, #28]	; (42c8 <prvResetNextTaskUnblockTime+0x28>)
    42ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    42b0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    42b2:	68d2      	ldr	r2, [r2, #12]
    42b4:	6852      	ldr	r2, [r2, #4]
    42b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    42ba:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    42bc:	f04f 32ff 	mov.w	r2, #4294967295
    42c0:	4b01      	ldr	r3, [pc, #4]	; (42c8 <prvResetNextTaskUnblockTime+0x28>)
    42c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    42c6:	4770      	bx	lr
    42c8:	200026a0 	.word	0x200026a0

000042cc <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    42cc:	b570      	push	{r4, r5, r6, lr}
    42ce:	4604      	mov	r4, r0
    42d0:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    42d2:	4b1a      	ldr	r3, [pc, #104]	; (433c <prvAddCurrentTaskToDelayedList+0x70>)
    42d4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    42d8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    42dc:	3004      	adds	r0, #4
    42de:	4b18      	ldr	r3, [pc, #96]	; (4340 <prvAddCurrentTaskToDelayedList+0x74>)
    42e0:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    42e2:	f1b4 3fff 	cmp.w	r4, #4294967295
    42e6:	d016      	beq.n	4316 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    42e8:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    42ea:	4b14      	ldr	r3, [pc, #80]	; (433c <prvAddCurrentTaskToDelayedList+0x70>)
    42ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    42f0:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    42f2:	42a5      	cmp	r5, r4
    42f4:	d818      	bhi.n	4328 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    42f6:	4d11      	ldr	r5, [pc, #68]	; (433c <prvAddCurrentTaskToDelayedList+0x70>)
    42f8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    42fc:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    4300:	3104      	adds	r1, #4
    4302:	4b10      	ldr	r3, [pc, #64]	; (4344 <prvAddCurrentTaskToDelayedList+0x78>)
    4304:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    4306:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    430a:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    430c:	bf3c      	itt	cc
    430e:	462b      	movcc	r3, r5
    4310:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    4314:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4316:	2e00      	cmp	r6, #0
    4318:	d0e6      	beq.n	42e8 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    431a:	4808      	ldr	r0, [pc, #32]	; (433c <prvAddCurrentTaskToDelayedList+0x70>)
    431c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    4320:	3104      	adds	r1, #4
    4322:	4b09      	ldr	r3, [pc, #36]	; (4348 <prvAddCurrentTaskToDelayedList+0x7c>)
    4324:	4798      	blx	r3
    4326:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4328:	4b04      	ldr	r3, [pc, #16]	; (433c <prvAddCurrentTaskToDelayedList+0x70>)
    432a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    432e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4332:	3104      	adds	r1, #4
    4334:	4b03      	ldr	r3, [pc, #12]	; (4344 <prvAddCurrentTaskToDelayedList+0x78>)
    4336:	4798      	blx	r3
    4338:	bd70      	pop	{r4, r5, r6, pc}
    433a:	bf00      	nop
    433c:	200026a0 	.word	0x200026a0
    4340:	00003499 	.word	0x00003499
    4344:	00003465 	.word	0x00003465
    4348:	0000344d 	.word	0x0000344d

0000434c <xTaskCreate>:
{
    434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4350:	b083      	sub	sp, #12
    4352:	4683      	mov	fp, r0
    4354:	460d      	mov	r5, r1
    4356:	9301      	str	r3, [sp, #4]
    4358:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    435c:	0096      	lsls	r6, r2, #2
    435e:	4630      	mov	r0, r6
    4360:	4b66      	ldr	r3, [pc, #408]	; (44fc <xTaskCreate+0x1b0>)
    4362:	4798      	blx	r3
		if (pxStack != NULL) {
    4364:	2800      	cmp	r0, #0
    4366:	f000 8096 	beq.w	4496 <xTaskCreate+0x14a>
    436a:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    436c:	2054      	movs	r0, #84	; 0x54
    436e:	4b63      	ldr	r3, [pc, #396]	; (44fc <xTaskCreate+0x1b0>)
    4370:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    4372:	4604      	mov	r4, r0
    4374:	2800      	cmp	r0, #0
    4376:	f000 808b 	beq.w	4490 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    437a:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    437c:	4632      	mov	r2, r6
    437e:	21a5      	movs	r1, #165	; 0xa5
    4380:	4638      	mov	r0, r7
    4382:	4b5f      	ldr	r3, [pc, #380]	; (4500 <xTaskCreate+0x1b4>)
    4384:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4386:	3e04      	subs	r6, #4
    4388:	6b23      	ldr	r3, [r4, #48]	; 0x30
    438a:	441e      	add	r6, r3
		                      & (~(
    438c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4390:	782b      	ldrb	r3, [r5, #0]
    4392:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4396:	782b      	ldrb	r3, [r5, #0]
    4398:	b15b      	cbz	r3, 43b2 <xTaskCreate+0x66>
    439a:	462b      	mov	r3, r5
    439c:	f104 0235 	add.w	r2, r4, #53	; 0x35
    43a0:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    43a2:	7858      	ldrb	r0, [r3, #1]
    43a4:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    43a8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    43ac:	b108      	cbz	r0, 43b2 <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    43ae:	4299      	cmp	r1, r3
    43b0:	d1f7      	bne.n	43a2 <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    43b2:	2700      	movs	r7, #0
    43b4:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    43b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    43ba:	2d04      	cmp	r5, #4
    43bc:	bf28      	it	cs
    43be:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    43c0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    43c2:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    43c4:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    43c6:	f104 0804 	add.w	r8, r4, #4
    43ca:	4640      	mov	r0, r8
    43cc:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4524 <xTaskCreate+0x1d8>
    43d0:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    43d2:	f104 0018 	add.w	r0, r4, #24
    43d6:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    43d8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    43da:	f1c5 0505 	rsb	r5, r5, #5
    43de:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    43e0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    43e2:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    43e4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    43e8:	9a01      	ldr	r2, [sp, #4]
    43ea:	4659      	mov	r1, fp
    43ec:	4630      	mov	r0, r6
    43ee:	4b45      	ldr	r3, [pc, #276]	; (4504 <xTaskCreate+0x1b8>)
    43f0:	4798      	blx	r3
    43f2:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    43f4:	f1ba 0f00 	cmp.w	sl, #0
    43f8:	d001      	beq.n	43fe <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    43fa:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    43fe:	4b42      	ldr	r3, [pc, #264]	; (4508 <xTaskCreate+0x1bc>)
    4400:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    4402:	4b42      	ldr	r3, [pc, #264]	; (450c <xTaskCreate+0x1c0>)
    4404:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    4408:	3201      	adds	r2, #1
    440a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4412:	2b00      	cmp	r3, #0
    4414:	d042      	beq.n	449c <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    4416:	4b3d      	ldr	r3, [pc, #244]	; (450c <xTaskCreate+0x1c0>)
    4418:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    441c:	b94b      	cbnz	r3, 4432 <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    441e:	4b3b      	ldr	r3, [pc, #236]	; (450c <xTaskCreate+0x1c0>)
    4420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4428:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    442a:	bf9c      	itt	ls
    442c:	4b37      	ldrls	r3, [pc, #220]	; (450c <xTaskCreate+0x1c0>)
    442e:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    4432:	4a36      	ldr	r2, [pc, #216]	; (450c <xTaskCreate+0x1c0>)
    4434:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4438:	3301      	adds	r3, #1
    443a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    443e:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    4440:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4442:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4446:	4293      	cmp	r3, r2
    4448:	bf84      	itt	hi
    444a:	4a30      	ldrhi	r2, [pc, #192]	; (450c <xTaskCreate+0x1c0>)
    444c:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    4450:	4d2e      	ldr	r5, [pc, #184]	; (450c <xTaskCreate+0x1c0>)
    4452:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    445a:	4641      	mov	r1, r8
    445c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4460:	4b2b      	ldr	r3, [pc, #172]	; (4510 <xTaskCreate+0x1c4>)
    4462:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4464:	4b2b      	ldr	r3, [pc, #172]	; (4514 <xTaskCreate+0x1c8>)
    4466:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4468:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    446c:	2b00      	cmp	r3, #0
    446e:	d03f      	beq.n	44f0 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    4470:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4478:	429a      	cmp	r2, r3
    447a:	d23d      	bcs.n	44f8 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    447c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4480:	4b25      	ldr	r3, [pc, #148]	; (4518 <xTaskCreate+0x1cc>)
    4482:	601a      	str	r2, [r3, #0]
    4484:	f3bf 8f4f 	dsb	sy
    4488:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    448c:	2001      	movs	r0, #1
    448e:	e030      	b.n	44f2 <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    4490:	4638      	mov	r0, r7
    4492:	4b22      	ldr	r3, [pc, #136]	; (451c <xTaskCreate+0x1d0>)
    4494:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4496:	f04f 30ff 	mov.w	r0, #4294967295
    449a:	e02a      	b.n	44f2 <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    449c:	4b1b      	ldr	r3, [pc, #108]	; (450c <xTaskCreate+0x1c0>)
    449e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    44a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    44a6:	2b01      	cmp	r3, #1
    44a8:	d1c3      	bne.n	4432 <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    44aa:	4d18      	ldr	r5, [pc, #96]	; (450c <xTaskCreate+0x1c0>)
    44ac:	f105 0028 	add.w	r0, r5, #40	; 0x28
    44b0:	4e1b      	ldr	r6, [pc, #108]	; (4520 <xTaskCreate+0x1d4>)
    44b2:	47b0      	blx	r6
    44b4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    44b8:	47b0      	blx	r6
    44ba:	f105 0050 	add.w	r0, r5, #80	; 0x50
    44be:	47b0      	blx	r6
    44c0:	f105 0064 	add.w	r0, r5, #100	; 0x64
    44c4:	47b0      	blx	r6
    44c6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    44ca:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    44cc:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    44d0:	4648      	mov	r0, r9
    44d2:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    44d4:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    44d8:	4638      	mov	r0, r7
    44da:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    44dc:	f105 0014 	add.w	r0, r5, #20
    44e0:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    44e2:	4628      	mov	r0, r5
    44e4:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    44e6:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    44ea:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    44ee:	e7a0      	b.n	4432 <xTaskCreate+0xe6>
		xReturn = pdPASS;
    44f0:	2001      	movs	r0, #1
}
    44f2:	b003      	add	sp, #12
    44f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    44f8:	2001      	movs	r0, #1
	return xReturn;
    44fa:	e7fa      	b.n	44f2 <xTaskCreate+0x1a6>
    44fc:	00003845 	.word	0x00003845
    4500:	00005229 	.word	0x00005229
    4504:	0000353d 	.word	0x0000353d
    4508:	00003595 	.word	0x00003595
    450c:	200026a0 	.word	0x200026a0
    4510:	0000344d 	.word	0x0000344d
    4514:	000035d9 	.word	0x000035d9
    4518:	e000ed04 	.word	0xe000ed04
    451c:	000038ad 	.word	0x000038ad
    4520:	00003431 	.word	0x00003431
    4524:	00003447 	.word	0x00003447

00004528 <vTaskStartScheduler>:
{
    4528:	b510      	push	{r4, lr}
    452a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    452c:	4b19      	ldr	r3, [pc, #100]	; (4594 <vTaskStartScheduler+0x6c>)
    452e:	9301      	str	r3, [sp, #4]
    4530:	2300      	movs	r3, #0
    4532:	9300      	str	r3, [sp, #0]
    4534:	2280      	movs	r2, #128	; 0x80
    4536:	4918      	ldr	r1, [pc, #96]	; (4598 <vTaskStartScheduler+0x70>)
    4538:	4818      	ldr	r0, [pc, #96]	; (459c <vTaskStartScheduler+0x74>)
    453a:	4c19      	ldr	r4, [pc, #100]	; (45a0 <vTaskStartScheduler+0x78>)
    453c:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    453e:	2801      	cmp	r0, #1
    4540:	d004      	beq.n	454c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    4542:	f1b0 3fff 	cmp.w	r0, #4294967295
    4546:	d01b      	beq.n	4580 <vTaskStartScheduler+0x58>
}
    4548:	b002      	add	sp, #8
    454a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    454c:	4b15      	ldr	r3, [pc, #84]	; (45a4 <vTaskStartScheduler+0x7c>)
    454e:	4798      	blx	r3
	if (xReturn == pdPASS) {
    4550:	2801      	cmp	r0, #1
    4552:	d1f6      	bne.n	4542 <vTaskStartScheduler+0x1a>
    4554:	f04f 0380 	mov.w	r3, #128	; 0x80
    4558:	f383 8811 	msr	BASEPRI, r3
    455c:	f3bf 8f6f 	isb	sy
    4560:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4564:	4b10      	ldr	r3, [pc, #64]	; (45a8 <vTaskStartScheduler+0x80>)
    4566:	f04f 32ff 	mov.w	r2, #4294967295
    456a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    456e:	2201      	movs	r2, #1
    4570:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4574:	2200      	movs	r2, #0
    4576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    457a:	4b0c      	ldr	r3, [pc, #48]	; (45ac <vTaskStartScheduler+0x84>)
    457c:	4798      	blx	r3
    457e:	e7e3      	b.n	4548 <vTaskStartScheduler+0x20>
    4580:	f04f 0380 	mov.w	r3, #128	; 0x80
    4584:	f383 8811 	msr	BASEPRI, r3
    4588:	f3bf 8f6f 	isb	sy
    458c:	f3bf 8f4f 	dsb	sy
    4590:	e7fe      	b.n	4590 <vTaskStartScheduler+0x68>
    4592:	bf00      	nop
    4594:	2000277c 	.word	0x2000277c
    4598:	00006e68 	.word	0x00006e68
    459c:	0000427d 	.word	0x0000427d
    45a0:	0000434d 	.word	0x0000434d
    45a4:	00004e45 	.word	0x00004e45
    45a8:	200026a0 	.word	0x200026a0
    45ac:	000036c9 	.word	0x000036c9

000045b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    45b0:	4a03      	ldr	r2, [pc, #12]	; (45c0 <vTaskSuspendAll+0x10>)
    45b2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    45b6:	3301      	adds	r3, #1
    45b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    45bc:	4770      	bx	lr
    45be:	bf00      	nop
    45c0:	200026a0 	.word	0x200026a0

000045c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
    45c4:	4b01      	ldr	r3, [pc, #4]	; (45cc <xTaskGetTickCount+0x8>)
    45c6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    45ca:	4770      	bx	lr
    45cc:	200026a0 	.word	0x200026a0

000045d0 <xTaskIncrementTick>:
{
    45d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    45d4:	4b44      	ldr	r3, [pc, #272]	; (46e8 <xTaskIncrementTick+0x118>)
    45d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    45da:	2b00      	cmp	r3, #0
    45dc:	d173      	bne.n	46c6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    45de:	4b42      	ldr	r3, [pc, #264]	; (46e8 <xTaskIncrementTick+0x118>)
    45e0:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    45e4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    45e6:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    45ea:	b9e6      	cbnz	r6, 4626 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    45ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	b143      	cbz	r3, 4606 <xTaskIncrementTick+0x36>
    45f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    45f8:	f383 8811 	msr	BASEPRI, r3
    45fc:	f3bf 8f6f 	isb	sy
    4600:	f3bf 8f4f 	dsb	sy
    4604:	e7fe      	b.n	4604 <xTaskIncrementTick+0x34>
    4606:	4b38      	ldr	r3, [pc, #224]	; (46e8 <xTaskIncrementTick+0x118>)
    4608:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    460c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    4610:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    4614:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4618:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    461c:	3201      	adds	r2, #1
    461e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    4622:	4b32      	ldr	r3, [pc, #200]	; (46ec <xTaskIncrementTick+0x11c>)
    4624:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4626:	4b30      	ldr	r3, [pc, #192]	; (46e8 <xTaskIncrementTick+0x118>)
    4628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    462c:	429e      	cmp	r6, r3
    462e:	d20d      	bcs.n	464c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    4630:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    4632:	4b2d      	ldr	r3, [pc, #180]	; (46e8 <xTaskIncrementTick+0x118>)
    4634:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4638:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    463a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    463e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4644:	2b02      	cmp	r3, #2
    4646:	bf28      	it	cs
    4648:	2401      	movcs	r4, #1
    464a:	e043      	b.n	46d4 <xTaskIncrementTick+0x104>
    464c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    464e:	4d26      	ldr	r5, [pc, #152]	; (46e8 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4650:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 46f4 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4654:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4658:	e021      	b.n	469e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    465a:	f04f 32ff 	mov.w	r2, #4294967295
    465e:	4b22      	ldr	r3, [pc, #136]	; (46e8 <xTaskIncrementTick+0x118>)
    4660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4664:	e7e5      	b.n	4632 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4666:	4a20      	ldr	r2, [pc, #128]	; (46e8 <xTaskIncrementTick+0x118>)
    4668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    466c:	e7e1      	b.n	4632 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    466e:	f107 0018 	add.w	r0, r7, #24
    4672:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4676:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    467a:	4298      	cmp	r0, r3
    467c:	bf88      	it	hi
    467e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    4682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4686:	4649      	mov	r1, r9
    4688:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    468c:	4b18      	ldr	r3, [pc, #96]	; (46f0 <xTaskIncrementTick+0x120>)
    468e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4690:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4698:	429a      	cmp	r2, r3
    469a:	bf28      	it	cs
    469c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    469e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d0d8      	beq.n	465a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    46a8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    46ac:	68db      	ldr	r3, [r3, #12]
    46ae:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    46b0:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    46b2:	429e      	cmp	r6, r3
    46b4:	d3d7      	bcc.n	4666 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    46b6:	f107 0904 	add.w	r9, r7, #4
    46ba:	4648      	mov	r0, r9
    46bc:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    46be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    46c0:	2b00      	cmp	r3, #0
    46c2:	d1d4      	bne.n	466e <xTaskIncrementTick+0x9e>
    46c4:	e7d6      	b.n	4674 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    46c6:	4a08      	ldr	r2, [pc, #32]	; (46e8 <xTaskIncrementTick+0x118>)
    46c8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    46cc:	3301      	adds	r3, #1
    46ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    46d2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    46d4:	4b04      	ldr	r3, [pc, #16]	; (46e8 <xTaskIncrementTick+0x118>)
    46d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    46da:	2b00      	cmp	r3, #0
}
    46dc:	bf0c      	ite	eq
    46de:	4620      	moveq	r0, r4
    46e0:	2001      	movne	r0, #1
    46e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46e6:	bf00      	nop
    46e8:	200026a0 	.word	0x200026a0
    46ec:	000042a1 	.word	0x000042a1
    46f0:	0000344d 	.word	0x0000344d
    46f4:	00003499 	.word	0x00003499

000046f8 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    46f8:	4b3a      	ldr	r3, [pc, #232]	; (47e4 <xTaskResumeAll+0xec>)
    46fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    46fe:	b943      	cbnz	r3, 4712 <xTaskResumeAll+0x1a>
    4700:	f04f 0380 	mov.w	r3, #128	; 0x80
    4704:	f383 8811 	msr	BASEPRI, r3
    4708:	f3bf 8f6f 	isb	sy
    470c:	f3bf 8f4f 	dsb	sy
    4710:	e7fe      	b.n	4710 <xTaskResumeAll+0x18>
{
    4712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    4716:	4b34      	ldr	r3, [pc, #208]	; (47e8 <xTaskResumeAll+0xf0>)
    4718:	4798      	blx	r3
		--uxSchedulerSuspended;
    471a:	4b32      	ldr	r3, [pc, #200]	; (47e4 <xTaskResumeAll+0xec>)
    471c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    4720:	3a01      	subs	r2, #1
    4722:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    472a:	2b00      	cmp	r3, #0
    472c:	d155      	bne.n	47da <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    472e:	4b2d      	ldr	r3, [pc, #180]	; (47e4 <xTaskResumeAll+0xec>)
    4730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4734:	b92b      	cbnz	r3, 4742 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4736:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4738:	4b2c      	ldr	r3, [pc, #176]	; (47ec <xTaskResumeAll+0xf4>)
    473a:	4798      	blx	r3
}
    473c:	4620      	mov	r0, r4
    473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4742:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4744:	4c27      	ldr	r4, [pc, #156]	; (47e4 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4746:	4e2a      	ldr	r6, [pc, #168]	; (47f0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4748:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    474c:	6963      	ldr	r3, [r4, #20]
    474e:	b1fb      	cbz	r3, 4790 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    4750:	6a23      	ldr	r3, [r4, #32]
    4752:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4754:	f105 0018 	add.w	r0, r5, #24
    4758:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    475a:	1d2f      	adds	r7, r5, #4
    475c:	4638      	mov	r0, r7
    475e:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4760:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4762:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4766:	4298      	cmp	r0, r3
    4768:	bf88      	it	hi
    476a:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    476e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4772:	4639      	mov	r1, r7
    4774:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4778:	4b1e      	ldr	r3, [pc, #120]	; (47f4 <xTaskResumeAll+0xfc>)
    477a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    477c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4780:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4784:	429a      	cmp	r2, r3
    4786:	d3e1      	bcc.n	474c <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4788:	2301      	movs	r3, #1
    478a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    478e:	e7dd      	b.n	474c <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    4790:	b10d      	cbz	r5, 4796 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    4792:	4b19      	ldr	r3, [pc, #100]	; (47f8 <xTaskResumeAll+0x100>)
    4794:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4796:	4b13      	ldr	r3, [pc, #76]	; (47e4 <xTaskResumeAll+0xec>)
    4798:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    479c:	b17c      	cbz	r4, 47be <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    479e:	4f17      	ldr	r7, [pc, #92]	; (47fc <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    47a0:	461e      	mov	r6, r3
    47a2:	2501      	movs	r5, #1
    47a4:	e001      	b.n	47aa <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    47a6:	3c01      	subs	r4, #1
    47a8:	d005      	beq.n	47b6 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    47aa:	47b8      	blx	r7
    47ac:	2800      	cmp	r0, #0
    47ae:	d0fa      	beq.n	47a6 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    47b0:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    47b4:	e7f7      	b.n	47a6 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    47b6:	2200      	movs	r2, #0
    47b8:	4b0a      	ldr	r3, [pc, #40]	; (47e4 <xTaskResumeAll+0xec>)
    47ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    47be:	4b09      	ldr	r3, [pc, #36]	; (47e4 <xTaskResumeAll+0xec>)
    47c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    47c4:	b15b      	cbz	r3, 47de <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    47c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    47ca:	4b0d      	ldr	r3, [pc, #52]	; (4800 <xTaskResumeAll+0x108>)
    47cc:	601a      	str	r2, [r3, #0]
    47ce:	f3bf 8f4f 	dsb	sy
    47d2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    47d6:	2401      	movs	r4, #1
    47d8:	e7ae      	b.n	4738 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    47da:	2400      	movs	r4, #0
    47dc:	e7ac      	b.n	4738 <xTaskResumeAll+0x40>
    47de:	2400      	movs	r4, #0
    47e0:	e7aa      	b.n	4738 <xTaskResumeAll+0x40>
    47e2:	bf00      	nop
    47e4:	200026a0 	.word	0x200026a0
    47e8:	00003595 	.word	0x00003595
    47ec:	000035d9 	.word	0x000035d9
    47f0:	00003499 	.word	0x00003499
    47f4:	0000344d 	.word	0x0000344d
    47f8:	000042a1 	.word	0x000042a1
    47fc:	000045d1 	.word	0x000045d1
    4800:	e000ed04 	.word	0xe000ed04

00004804 <vTaskDelayUntil>:
{
    4804:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    4806:	b150      	cbz	r0, 481e <vTaskDelayUntil+0x1a>
    4808:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    480a:	b989      	cbnz	r1, 4830 <vTaskDelayUntil+0x2c>
    480c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4810:	f383 8811 	msr	BASEPRI, r3
    4814:	f3bf 8f6f 	isb	sy
    4818:	f3bf 8f4f 	dsb	sy
    481c:	e7fe      	b.n	481c <vTaskDelayUntil+0x18>
    481e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4822:	f383 8811 	msr	BASEPRI, r3
    4826:	f3bf 8f6f 	isb	sy
    482a:	f3bf 8f4f 	dsb	sy
    482e:	e7fe      	b.n	482e <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4830:	4b1a      	ldr	r3, [pc, #104]	; (489c <vTaskDelayUntil+0x98>)
    4832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4836:	b143      	cbz	r3, 484a <vTaskDelayUntil+0x46>
    4838:	f04f 0380 	mov.w	r3, #128	; 0x80
    483c:	f383 8811 	msr	BASEPRI, r3
    4840:	f3bf 8f6f 	isb	sy
    4844:	f3bf 8f4f 	dsb	sy
    4848:	e7fe      	b.n	4848 <vTaskDelayUntil+0x44>
    484a:	460c      	mov	r4, r1
	vTaskSuspendAll();
    484c:	4b14      	ldr	r3, [pc, #80]	; (48a0 <vTaskDelayUntil+0x9c>)
    484e:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4850:	4b12      	ldr	r3, [pc, #72]	; (489c <vTaskDelayUntil+0x98>)
    4852:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4856:	682a      	ldr	r2, [r5, #0]
    4858:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    485a:	4290      	cmp	r0, r2
    485c:	d214      	bcs.n	4888 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    485e:	42a2      	cmp	r2, r4
    4860:	d916      	bls.n	4890 <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4862:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4864:	42a0      	cmp	r0, r4
    4866:	d203      	bcs.n	4870 <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4868:	2100      	movs	r1, #0
    486a:	1a20      	subs	r0, r4, r0
    486c:	4b0d      	ldr	r3, [pc, #52]	; (48a4 <vTaskDelayUntil+0xa0>)
    486e:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4870:	4b0d      	ldr	r3, [pc, #52]	; (48a8 <vTaskDelayUntil+0xa4>)
    4872:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4874:	b980      	cbnz	r0, 4898 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    487a:	4b0c      	ldr	r3, [pc, #48]	; (48ac <vTaskDelayUntil+0xa8>)
    487c:	601a      	str	r2, [r3, #0]
    487e:	f3bf 8f4f 	dsb	sy
    4882:	f3bf 8f6f 	isb	sy
}
    4886:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4888:	42a2      	cmp	r2, r4
    488a:	d803      	bhi.n	4894 <vTaskDelayUntil+0x90>
    488c:	42a0      	cmp	r0, r4
    488e:	d301      	bcc.n	4894 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4890:	602c      	str	r4, [r5, #0]
    4892:	e7ed      	b.n	4870 <vTaskDelayUntil+0x6c>
    4894:	602c      	str	r4, [r5, #0]
    4896:	e7e7      	b.n	4868 <vTaskDelayUntil+0x64>
    4898:	bd38      	pop	{r3, r4, r5, pc}
    489a:	bf00      	nop
    489c:	200026a0 	.word	0x200026a0
    48a0:	000045b1 	.word	0x000045b1
    48a4:	000042cd 	.word	0x000042cd
    48a8:	000046f9 	.word	0x000046f9
    48ac:	e000ed04 	.word	0xe000ed04

000048b0 <vTaskDelay>:
{
    48b0:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    48b2:	b1b0      	cbz	r0, 48e2 <vTaskDelay+0x32>
    48b4:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    48b6:	4b0f      	ldr	r3, [pc, #60]	; (48f4 <vTaskDelay+0x44>)
    48b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    48bc:	b143      	cbz	r3, 48d0 <vTaskDelay+0x20>
    48be:	f04f 0380 	mov.w	r3, #128	; 0x80
    48c2:	f383 8811 	msr	BASEPRI, r3
    48c6:	f3bf 8f6f 	isb	sy
    48ca:	f3bf 8f4f 	dsb	sy
    48ce:	e7fe      	b.n	48ce <vTaskDelay+0x1e>
		vTaskSuspendAll();
    48d0:	4b09      	ldr	r3, [pc, #36]	; (48f8 <vTaskDelay+0x48>)
    48d2:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    48d4:	2100      	movs	r1, #0
    48d6:	4620      	mov	r0, r4
    48d8:	4b08      	ldr	r3, [pc, #32]	; (48fc <vTaskDelay+0x4c>)
    48da:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    48dc:	4b08      	ldr	r3, [pc, #32]	; (4900 <vTaskDelay+0x50>)
    48de:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    48e0:	b938      	cbnz	r0, 48f2 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    48e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    48e6:	4b07      	ldr	r3, [pc, #28]	; (4904 <vTaskDelay+0x54>)
    48e8:	601a      	str	r2, [r3, #0]
    48ea:	f3bf 8f4f 	dsb	sy
    48ee:	f3bf 8f6f 	isb	sy
    48f2:	bd10      	pop	{r4, pc}
    48f4:	200026a0 	.word	0x200026a0
    48f8:	000045b1 	.word	0x000045b1
    48fc:	000042cd 	.word	0x000042cd
    4900:	000046f9 	.word	0x000046f9
    4904:	e000ed04 	.word	0xe000ed04

00004908 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    4908:	4b2c      	ldr	r3, [pc, #176]	; (49bc <vTaskSwitchContext+0xb4>)
    490a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    490e:	bb8b      	cbnz	r3, 4974 <vTaskSwitchContext+0x6c>
{
    4910:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    4912:	4b2a      	ldr	r3, [pc, #168]	; (49bc <vTaskSwitchContext+0xb4>)
    4914:	2200      	movs	r2, #0
    4916:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    491a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    491e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4922:	6812      	ldr	r2, [r2, #0]
    4924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4926:	429a      	cmp	r2, r3
    4928:	d807      	bhi.n	493a <vTaskSwitchContext+0x32>
    492a:	4b24      	ldr	r3, [pc, #144]	; (49bc <vTaskSwitchContext+0xb4>)
    492c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4930:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4934:	3134      	adds	r1, #52	; 0x34
    4936:	4b22      	ldr	r3, [pc, #136]	; (49c0 <vTaskSwitchContext+0xb8>)
    4938:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    493a:	4a20      	ldr	r2, [pc, #128]	; (49bc <vTaskSwitchContext+0xb4>)
    493c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4940:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4944:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4948:	6a92      	ldr	r2, [r2, #40]	; 0x28
    494a:	b9c2      	cbnz	r2, 497e <vTaskSwitchContext+0x76>
    494c:	b14b      	cbz	r3, 4962 <vTaskSwitchContext+0x5a>
    494e:	491b      	ldr	r1, [pc, #108]	; (49bc <vTaskSwitchContext+0xb4>)
    4950:	3b01      	subs	r3, #1
    4952:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4956:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    495a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    495c:	b97a      	cbnz	r2, 497e <vTaskSwitchContext+0x76>
    495e:	2b00      	cmp	r3, #0
    4960:	d1f6      	bne.n	4950 <vTaskSwitchContext+0x48>
    4962:	f04f 0380 	mov.w	r3, #128	; 0x80
    4966:	f383 8811 	msr	BASEPRI, r3
    496a:	f3bf 8f6f 	isb	sy
    496e:	f3bf 8f4f 	dsb	sy
    4972:	e7fe      	b.n	4972 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4974:	2201      	movs	r2, #1
    4976:	4b11      	ldr	r3, [pc, #68]	; (49bc <vTaskSwitchContext+0xb4>)
    4978:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    497c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    497e:	4a0f      	ldr	r2, [pc, #60]	; (49bc <vTaskSwitchContext+0xb4>)
    4980:	0099      	lsls	r1, r3, #2
    4982:	18c8      	adds	r0, r1, r3
    4984:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4988:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    498a:	6864      	ldr	r4, [r4, #4]
    498c:	62c4      	str	r4, [r0, #44]	; 0x2c
    498e:	4419      	add	r1, r3
    4990:	4602      	mov	r2, r0
    4992:	3230      	adds	r2, #48	; 0x30
    4994:	4294      	cmp	r4, r2
    4996:	d00b      	beq.n	49b0 <vTaskSwitchContext+0xa8>
    4998:	4a08      	ldr	r2, [pc, #32]	; (49bc <vTaskSwitchContext+0xb4>)
    499a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    499e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    49a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    49a4:	68c9      	ldr	r1, [r1, #12]
    49a6:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    49aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    49ae:	bd10      	pop	{r4, pc}
    49b0:	6860      	ldr	r0, [r4, #4]
    49b2:	4a02      	ldr	r2, [pc, #8]	; (49bc <vTaskSwitchContext+0xb4>)
    49b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    49b8:	62d0      	str	r0, [r2, #44]	; 0x2c
    49ba:	e7ed      	b.n	4998 <vTaskSwitchContext+0x90>
    49bc:	200026a0 	.word	0x200026a0
    49c0:	000002d1 	.word	0x000002d1

000049c4 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    49c4:	b940      	cbnz	r0, 49d8 <vTaskPlaceOnEventList+0x14>
    49c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    49ca:	f383 8811 	msr	BASEPRI, r3
    49ce:	f3bf 8f6f 	isb	sy
    49d2:	f3bf 8f4f 	dsb	sy
    49d6:	e7fe      	b.n	49d6 <vTaskPlaceOnEventList+0x12>
{
    49d8:	b510      	push	{r4, lr}
    49da:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    49dc:	4b05      	ldr	r3, [pc, #20]	; (49f4 <vTaskPlaceOnEventList+0x30>)
    49de:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    49e2:	3118      	adds	r1, #24
    49e4:	4b04      	ldr	r3, [pc, #16]	; (49f8 <vTaskPlaceOnEventList+0x34>)
    49e6:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    49e8:	2101      	movs	r1, #1
    49ea:	4620      	mov	r0, r4
    49ec:	4b03      	ldr	r3, [pc, #12]	; (49fc <vTaskPlaceOnEventList+0x38>)
    49ee:	4798      	blx	r3
    49f0:	bd10      	pop	{r4, pc}
    49f2:	bf00      	nop
    49f4:	200026a0 	.word	0x200026a0
    49f8:	00003465 	.word	0x00003465
    49fc:	000042cd 	.word	0x000042cd

00004a00 <vTaskPlaceOnEventListRestricted>:
{
    4a00:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    4a02:	b180      	cbz	r0, 4a26 <vTaskPlaceOnEventListRestricted+0x26>
    4a04:	4614      	mov	r4, r2
    4a06:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    4a08:	4b0b      	ldr	r3, [pc, #44]	; (4a38 <vTaskPlaceOnEventListRestricted+0x38>)
    4a0a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4a0e:	3118      	adds	r1, #24
    4a10:	4b0a      	ldr	r3, [pc, #40]	; (4a3c <vTaskPlaceOnEventListRestricted+0x3c>)
    4a12:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    4a14:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    4a16:	4621      	mov	r1, r4
    4a18:	bf0c      	ite	eq
    4a1a:	4628      	moveq	r0, r5
    4a1c:	f04f 30ff 	movne.w	r0, #4294967295
    4a20:	4b07      	ldr	r3, [pc, #28]	; (4a40 <vTaskPlaceOnEventListRestricted+0x40>)
    4a22:	4798      	blx	r3
    4a24:	bd38      	pop	{r3, r4, r5, pc}
    4a26:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a2a:	f383 8811 	msr	BASEPRI, r3
    4a2e:	f3bf 8f6f 	isb	sy
    4a32:	f3bf 8f4f 	dsb	sy
    4a36:	e7fe      	b.n	4a36 <vTaskPlaceOnEventListRestricted+0x36>
    4a38:	200026a0 	.word	0x200026a0
    4a3c:	0000344d 	.word	0x0000344d
    4a40:	000042cd 	.word	0x000042cd

00004a44 <xTaskRemoveFromEventList>:
{
    4a44:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4a46:	68c3      	ldr	r3, [r0, #12]
    4a48:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    4a4a:	2c00      	cmp	r4, #0
    4a4c:	d02a      	beq.n	4aa4 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    4a4e:	f104 0518 	add.w	r5, r4, #24
    4a52:	4628      	mov	r0, r5
    4a54:	4b1a      	ldr	r3, [pc, #104]	; (4ac0 <xTaskRemoveFromEventList+0x7c>)
    4a56:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4a58:	4b1a      	ldr	r3, [pc, #104]	; (4ac4 <xTaskRemoveFromEventList+0x80>)
    4a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4a5e:	bb53      	cbnz	r3, 4ab6 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4a60:	1d25      	adds	r5, r4, #4
    4a62:	4628      	mov	r0, r5
    4a64:	4b16      	ldr	r3, [pc, #88]	; (4ac0 <xTaskRemoveFromEventList+0x7c>)
    4a66:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4a68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4a6a:	4b16      	ldr	r3, [pc, #88]	; (4ac4 <xTaskRemoveFromEventList+0x80>)
    4a6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4a70:	4298      	cmp	r0, r3
    4a72:	bf84      	itt	hi
    4a74:	4b13      	ldrhi	r3, [pc, #76]	; (4ac4 <xTaskRemoveFromEventList+0x80>)
    4a76:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4a7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4a7e:	4629      	mov	r1, r5
    4a80:	4b11      	ldr	r3, [pc, #68]	; (4ac8 <xTaskRemoveFromEventList+0x84>)
    4a82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a86:	4b11      	ldr	r3, [pc, #68]	; (4acc <xTaskRemoveFromEventList+0x88>)
    4a88:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4a8a:	4b0e      	ldr	r3, [pc, #56]	; (4ac4 <xTaskRemoveFromEventList+0x80>)
    4a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a94:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4a96:	bf83      	ittte	hi
    4a98:	2001      	movhi	r0, #1
    4a9a:	4b0a      	ldrhi	r3, [pc, #40]	; (4ac4 <xTaskRemoveFromEventList+0x80>)
    4a9c:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4aa0:	2000      	movls	r0, #0
}
    4aa2:	bd38      	pop	{r3, r4, r5, pc}
    4aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4aa8:	f383 8811 	msr	BASEPRI, r3
    4aac:	f3bf 8f6f 	isb	sy
    4ab0:	f3bf 8f4f 	dsb	sy
    4ab4:	e7fe      	b.n	4ab4 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4ab6:	4629      	mov	r1, r5
    4ab8:	4805      	ldr	r0, [pc, #20]	; (4ad0 <xTaskRemoveFromEventList+0x8c>)
    4aba:	4b04      	ldr	r3, [pc, #16]	; (4acc <xTaskRemoveFromEventList+0x88>)
    4abc:	4798      	blx	r3
    4abe:	e7e4      	b.n	4a8a <xTaskRemoveFromEventList+0x46>
    4ac0:	00003499 	.word	0x00003499
    4ac4:	200026a0 	.word	0x200026a0
    4ac8:	200026c8 	.word	0x200026c8
    4acc:	0000344d 	.word	0x0000344d
    4ad0:	200026b4 	.word	0x200026b4

00004ad4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    4ad4:	4b03      	ldr	r3, [pc, #12]	; (4ae4 <vTaskInternalSetTimeOutState+0x10>)
    4ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4ada:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4ae0:	6043      	str	r3, [r0, #4]
    4ae2:	4770      	bx	lr
    4ae4:	200026a0 	.word	0x200026a0

00004ae8 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    4ae8:	b1f8      	cbz	r0, 4b2a <xTaskCheckForTimeOut+0x42>
{
    4aea:	b570      	push	{r4, r5, r6, lr}
    4aec:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    4aee:	b329      	cbz	r1, 4b3c <xTaskCheckForTimeOut+0x54>
    4af0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    4af2:	4b1c      	ldr	r3, [pc, #112]	; (4b64 <xTaskCheckForTimeOut+0x7c>)
    4af4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4af6:	4b1c      	ldr	r3, [pc, #112]	; (4b68 <xTaskCheckForTimeOut+0x80>)
    4af8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4afc:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    4afe:	6823      	ldr	r3, [r4, #0]
    4b00:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b04:	d02a      	beq.n	4b5c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    4b06:	4818      	ldr	r0, [pc, #96]	; (4b68 <xTaskCheckForTimeOut+0x80>)
    4b08:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    4b0c:	682e      	ldr	r6, [r5, #0]
    4b0e:	4286      	cmp	r6, r0
    4b10:	d001      	beq.n	4b16 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    4b12:	428a      	cmp	r2, r1
    4b14:	d224      	bcs.n	4b60 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4b16:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    4b18:	429a      	cmp	r2, r3
    4b1a:	d318      	bcc.n	4b4e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    4b1c:	2300      	movs	r3, #0
    4b1e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4b20:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4b22:	4b12      	ldr	r3, [pc, #72]	; (4b6c <xTaskCheckForTimeOut+0x84>)
    4b24:	4798      	blx	r3
}
    4b26:	4620      	mov	r0, r4
    4b28:	bd70      	pop	{r4, r5, r6, pc}
    4b2a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b2e:	f383 8811 	msr	BASEPRI, r3
    4b32:	f3bf 8f6f 	isb	sy
    4b36:	f3bf 8f4f 	dsb	sy
    4b3a:	e7fe      	b.n	4b3a <xTaskCheckForTimeOut+0x52>
    4b3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b40:	f383 8811 	msr	BASEPRI, r3
    4b44:	f3bf 8f6f 	isb	sy
    4b48:	f3bf 8f4f 	dsb	sy
    4b4c:	e7fe      	b.n	4b4c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    4b4e:	1a9b      	subs	r3, r3, r2
    4b50:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4b52:	4628      	mov	r0, r5
    4b54:	4b06      	ldr	r3, [pc, #24]	; (4b70 <xTaskCheckForTimeOut+0x88>)
    4b56:	4798      	blx	r3
			xReturn = pdFALSE;
    4b58:	2400      	movs	r4, #0
    4b5a:	e7e2      	b.n	4b22 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    4b5c:	2400      	movs	r4, #0
    4b5e:	e7e0      	b.n	4b22 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4b60:	2401      	movs	r4, #1
    4b62:	e7de      	b.n	4b22 <xTaskCheckForTimeOut+0x3a>
    4b64:	00003595 	.word	0x00003595
    4b68:	200026a0 	.word	0x200026a0
    4b6c:	000035d9 	.word	0x000035d9
    4b70:	00004ad5 	.word	0x00004ad5

00004b74 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4b74:	2201      	movs	r2, #1
    4b76:	4b02      	ldr	r3, [pc, #8]	; (4b80 <vTaskMissedYield+0xc>)
    4b78:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4b7c:	4770      	bx	lr
    4b7e:	bf00      	nop
    4b80:	200026a0 	.word	0x200026a0

00004b84 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4b84:	4b06      	ldr	r3, [pc, #24]	; (4ba0 <xTaskGetSchedulerState+0x1c>)
    4b86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4b8a:	b13b      	cbz	r3, 4b9c <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4b8c:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <xTaskGetSchedulerState+0x1c>)
    4b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4b92:	2b00      	cmp	r3, #0
    4b94:	bf0c      	ite	eq
    4b96:	2002      	moveq	r0, #2
    4b98:	2000      	movne	r0, #0
    4b9a:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    4b9c:	2001      	movs	r0, #1
}
    4b9e:	4770      	bx	lr
    4ba0:	200026a0 	.word	0x200026a0

00004ba4 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4ba4:	2800      	cmp	r0, #0
    4ba6:	d045      	beq.n	4c34 <xTaskPriorityInherit+0x90>
{
    4ba8:	b538      	push	{r3, r4, r5, lr}
    4baa:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    4bac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4bae:	4922      	ldr	r1, [pc, #136]	; (4c38 <xTaskPriorityInherit+0x94>)
    4bb0:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4bb4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4bb6:	428a      	cmp	r2, r1
    4bb8:	d232      	bcs.n	4c20 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    4bba:	6981      	ldr	r1, [r0, #24]
    4bbc:	2900      	cmp	r1, #0
    4bbe:	db06      	blt.n	4bce <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    4bc0:	491d      	ldr	r1, [pc, #116]	; (4c38 <xTaskPriorityInherit+0x94>)
    4bc2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4bc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4bc8:	f1c1 0105 	rsb	r1, r1, #5
    4bcc:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    4bce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4bd2:	491a      	ldr	r1, [pc, #104]	; (4c3c <xTaskPriorityInherit+0x98>)
    4bd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4bd8:	6969      	ldr	r1, [r5, #20]
    4bda:	4291      	cmp	r1, r2
    4bdc:	d006      	beq.n	4bec <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4bde:	4a16      	ldr	r2, [pc, #88]	; (4c38 <xTaskPriorityInherit+0x94>)
    4be0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4be4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4be6:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    4be8:	2001      	movs	r0, #1
    4bea:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    4bec:	1d2c      	adds	r4, r5, #4
    4bee:	4620      	mov	r0, r4
    4bf0:	4b13      	ldr	r3, [pc, #76]	; (4c40 <xTaskPriorityInherit+0x9c>)
    4bf2:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4bf4:	4b10      	ldr	r3, [pc, #64]	; (4c38 <xTaskPriorityInherit+0x94>)
    4bf6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4bfa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4bfc:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    4bfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4c02:	4298      	cmp	r0, r3
    4c04:	bf84      	itt	hi
    4c06:	4b0c      	ldrhi	r3, [pc, #48]	; (4c38 <xTaskPriorityInherit+0x94>)
    4c08:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4c10:	4621      	mov	r1, r4
    4c12:	4b0a      	ldr	r3, [pc, #40]	; (4c3c <xTaskPriorityInherit+0x98>)
    4c14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4c18:	4b0a      	ldr	r3, [pc, #40]	; (4c44 <xTaskPriorityInherit+0xa0>)
    4c1a:	4798      	blx	r3
			xReturn = pdTRUE;
    4c1c:	2001      	movs	r0, #1
    4c1e:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4c20:	4a05      	ldr	r2, [pc, #20]	; (4c38 <xTaskPriorityInherit+0x94>)
    4c22:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4c26:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4c28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4c2a:	4298      	cmp	r0, r3
    4c2c:	bf2c      	ite	cs
    4c2e:	2000      	movcs	r0, #0
    4c30:	2001      	movcc	r0, #1
    4c32:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4c34:	2000      	movs	r0, #0
	return xReturn;
    4c36:	4770      	bx	lr
    4c38:	200026a0 	.word	0x200026a0
    4c3c:	200026c8 	.word	0x200026c8
    4c40:	00003499 	.word	0x00003499
    4c44:	0000344d 	.word	0x0000344d

00004c48 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4c48:	2800      	cmp	r0, #0
    4c4a:	d03c      	beq.n	4cc6 <xTaskPriorityDisinherit+0x7e>
{
    4c4c:	b538      	push	{r3, r4, r5, lr}
    4c4e:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4c50:	4a20      	ldr	r2, [pc, #128]	; (4cd4 <xTaskPriorityDisinherit+0x8c>)
    4c52:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4c56:	4290      	cmp	r0, r2
    4c58:	d008      	beq.n	4c6c <xTaskPriorityDisinherit+0x24>
    4c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c5e:	f383 8811 	msr	BASEPRI, r3
    4c62:	f3bf 8f6f 	isb	sy
    4c66:	f3bf 8f4f 	dsb	sy
    4c6a:	e7fe      	b.n	4c6a <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4c6c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4c6e:	b942      	cbnz	r2, 4c82 <xTaskPriorityDisinherit+0x3a>
    4c70:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c74:	f383 8811 	msr	BASEPRI, r3
    4c78:	f3bf 8f6f 	isb	sy
    4c7c:	f3bf 8f4f 	dsb	sy
    4c80:	e7fe      	b.n	4c80 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4c82:	3a01      	subs	r2, #1
    4c84:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4c86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4c88:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4c8a:	4288      	cmp	r0, r1
    4c8c:	d01d      	beq.n	4cca <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4c8e:	b9f2      	cbnz	r2, 4cce <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4c90:	1d25      	adds	r5, r4, #4
    4c92:	4628      	mov	r0, r5
    4c94:	4b10      	ldr	r3, [pc, #64]	; (4cd8 <xTaskPriorityDisinherit+0x90>)
    4c96:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4c98:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4c9a:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4c9c:	f1c0 0305 	rsb	r3, r0, #5
    4ca0:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4ca2:	4b0c      	ldr	r3, [pc, #48]	; (4cd4 <xTaskPriorityDisinherit+0x8c>)
    4ca4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4ca8:	4298      	cmp	r0, r3
    4caa:	bf84      	itt	hi
    4cac:	4b09      	ldrhi	r3, [pc, #36]	; (4cd4 <xTaskPriorityDisinherit+0x8c>)
    4cae:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4cb6:	4629      	mov	r1, r5
    4cb8:	4b08      	ldr	r3, [pc, #32]	; (4cdc <xTaskPriorityDisinherit+0x94>)
    4cba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4cbe:	4b08      	ldr	r3, [pc, #32]	; (4ce0 <xTaskPriorityDisinherit+0x98>)
    4cc0:	4798      	blx	r3
				xReturn = pdTRUE;
    4cc2:	2001      	movs	r0, #1
    4cc4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4cc6:	2000      	movs	r0, #0
    4cc8:	4770      	bx	lr
    4cca:	2000      	movs	r0, #0
    4ccc:	bd38      	pop	{r3, r4, r5, pc}
    4cce:	2000      	movs	r0, #0
}
    4cd0:	bd38      	pop	{r3, r4, r5, pc}
    4cd2:	bf00      	nop
    4cd4:	200026a0 	.word	0x200026a0
    4cd8:	00003499 	.word	0x00003499
    4cdc:	200026c8 	.word	0x200026c8
    4ce0:	0000344d 	.word	0x0000344d

00004ce4 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4ce4:	2800      	cmp	r0, #0
    4ce6:	d049      	beq.n	4d7c <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4ce8:	b538      	push	{r3, r4, r5, lr}
    4cea:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4cec:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4cee:	b940      	cbnz	r0, 4d02 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4cf0:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cf4:	f383 8811 	msr	BASEPRI, r3
    4cf8:	f3bf 8f6f 	isb	sy
    4cfc:	f3bf 8f4f 	dsb	sy
    4d00:	e7fe      	b.n	4d00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4d02:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4d04:	428a      	cmp	r2, r1
    4d06:	bf38      	it	cc
    4d08:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4d0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4d0c:	4291      	cmp	r1, r2
    4d0e:	d001      	beq.n	4d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4d10:	2801      	cmp	r0, #1
    4d12:	d000      	beq.n	4d16 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4d14:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4d16:	481a      	ldr	r0, [pc, #104]	; (4d80 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4d18:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4d1c:	4284      	cmp	r4, r0
    4d1e:	d108      	bne.n	4d32 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4d20:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d24:	f383 8811 	msr	BASEPRI, r3
    4d28:	f3bf 8f6f 	isb	sy
    4d2c:	f3bf 8f4f 	dsb	sy
    4d30:	e7fe      	b.n	4d30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4d32:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4d34:	69a0      	ldr	r0, [r4, #24]
    4d36:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4d38:	bfa4      	itt	ge
    4d3a:	f1c2 0205 	rsbge	r2, r2, #5
    4d3e:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4d40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4d44:	4a0f      	ldr	r2, [pc, #60]	; (4d84 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4d46:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4d4a:	6962      	ldr	r2, [r4, #20]
    4d4c:	428a      	cmp	r2, r1
    4d4e:	d1e1      	bne.n	4d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4d50:	1d25      	adds	r5, r4, #4
    4d52:	4628      	mov	r0, r5
    4d54:	4b0c      	ldr	r3, [pc, #48]	; (4d88 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    4d56:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    4d58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4d5a:	4b09      	ldr	r3, [pc, #36]	; (4d80 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4d5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4d60:	4298      	cmp	r0, r3
    4d62:	bf84      	itt	hi
    4d64:	4b06      	ldrhi	r3, [pc, #24]	; (4d80 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4d66:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4d6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4d6e:	4629      	mov	r1, r5
    4d70:	4b04      	ldr	r3, [pc, #16]	; (4d84 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4d72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4d76:	4b05      	ldr	r3, [pc, #20]	; (4d8c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    4d78:	4798      	blx	r3
}
    4d7a:	e7cb      	b.n	4d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	200026a0 	.word	0x200026a0
    4d84:	200026c8 	.word	0x200026c8
    4d88:	00003499 	.word	0x00003499
    4d8c:	0000344d 	.word	0x0000344d

00004d90 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    4d90:	4b06      	ldr	r3, [pc, #24]	; (4dac <pvTaskIncrementMutexHeldCount+0x1c>)
    4d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4d96:	b12b      	cbz	r3, 4da4 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    4d98:	4b04      	ldr	r3, [pc, #16]	; (4dac <pvTaskIncrementMutexHeldCount+0x1c>)
    4d9a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4d9e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4da0:	3301      	adds	r3, #1
    4da2:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    4da4:	4b01      	ldr	r3, [pc, #4]	; (4dac <pvTaskIncrementMutexHeldCount+0x1c>)
    4da6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    4daa:	4770      	bx	lr
    4dac:	200026a0 	.word	0x200026a0

00004db0 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    4db0:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    4db2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    4db4:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    4db6:	4291      	cmp	r1, r2
    4db8:	d80c      	bhi.n	4dd4 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    4dba:	1ad2      	subs	r2, r2, r3
    4dbc:	6983      	ldr	r3, [r0, #24]
    4dbe:	429a      	cmp	r2, r3
    4dc0:	d301      	bcc.n	4dc6 <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4dc2:	2001      	movs	r0, #1
    4dc4:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    4dc6:	1d01      	adds	r1, r0, #4
    4dc8:	4b09      	ldr	r3, [pc, #36]	; (4df0 <prvInsertTimerInActiveList+0x40>)
    4dca:	6818      	ldr	r0, [r3, #0]
    4dcc:	4b09      	ldr	r3, [pc, #36]	; (4df4 <prvInsertTimerInActiveList+0x44>)
    4dce:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    4dd0:	2000      	movs	r0, #0
    4dd2:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    4dd4:	429a      	cmp	r2, r3
    4dd6:	d201      	bcs.n	4ddc <prvInsertTimerInActiveList+0x2c>
    4dd8:	4299      	cmp	r1, r3
    4dda:	d206      	bcs.n	4dea <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    4ddc:	1d01      	adds	r1, r0, #4
    4dde:	4b04      	ldr	r3, [pc, #16]	; (4df0 <prvInsertTimerInActiveList+0x40>)
    4de0:	6858      	ldr	r0, [r3, #4]
    4de2:	4b04      	ldr	r3, [pc, #16]	; (4df4 <prvInsertTimerInActiveList+0x44>)
    4de4:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    4de6:	2000      	movs	r0, #0
    4de8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    4dea:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    4dec:	bd08      	pop	{r3, pc}
    4dee:	bf00      	nop
    4df0:	2000278c 	.word	0x2000278c
    4df4:	00003465 	.word	0x00003465

00004df8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    4df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    4dfa:	4b0d      	ldr	r3, [pc, #52]	; (4e30 <prvCheckForValidListAndQueue+0x38>)
    4dfc:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    4dfe:	4b0d      	ldr	r3, [pc, #52]	; (4e34 <prvCheckForValidListAndQueue+0x3c>)
    4e00:	689b      	ldr	r3, [r3, #8]
    4e02:	b113      	cbz	r3, 4e0a <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4e04:	4b0c      	ldr	r3, [pc, #48]	; (4e38 <prvCheckForValidListAndQueue+0x40>)
    4e06:	4798      	blx	r3
    4e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    4e0a:	4c0a      	ldr	r4, [pc, #40]	; (4e34 <prvCheckForValidListAndQueue+0x3c>)
    4e0c:	f104 060c 	add.w	r6, r4, #12
    4e10:	4630      	mov	r0, r6
    4e12:	4f0a      	ldr	r7, [pc, #40]	; (4e3c <prvCheckForValidListAndQueue+0x44>)
    4e14:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    4e16:	f104 0520 	add.w	r5, r4, #32
    4e1a:	4628      	mov	r0, r5
    4e1c:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    4e1e:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    4e20:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    4e22:	2200      	movs	r2, #0
    4e24:	210c      	movs	r1, #12
    4e26:	2014      	movs	r0, #20
    4e28:	4b05      	ldr	r3, [pc, #20]	; (4e40 <prvCheckForValidListAndQueue+0x48>)
    4e2a:	4798      	blx	r3
    4e2c:	60a0      	str	r0, [r4, #8]
    4e2e:	e7e9      	b.n	4e04 <prvCheckForValidListAndQueue+0xc>
    4e30:	00003595 	.word	0x00003595
    4e34:	2000278c 	.word	0x2000278c
    4e38:	000035d9 	.word	0x000035d9
    4e3c:	00003431 	.word	0x00003431
    4e40:	00003b49 	.word	0x00003b49

00004e44 <xTimerCreateTimerTask>:
{
    4e44:	b510      	push	{r4, lr}
    4e46:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    4e48:	4b0d      	ldr	r3, [pc, #52]	; (4e80 <xTimerCreateTimerTask+0x3c>)
    4e4a:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    4e4c:	4b0d      	ldr	r3, [pc, #52]	; (4e84 <xTimerCreateTimerTask+0x40>)
    4e4e:	689b      	ldr	r3, [r3, #8]
    4e50:	b163      	cbz	r3, 4e6c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    4e52:	4b0d      	ldr	r3, [pc, #52]	; (4e88 <xTimerCreateTimerTask+0x44>)
    4e54:	9301      	str	r3, [sp, #4]
    4e56:	2303      	movs	r3, #3
    4e58:	9300      	str	r3, [sp, #0]
    4e5a:	2300      	movs	r3, #0
    4e5c:	2280      	movs	r2, #128	; 0x80
    4e5e:	490b      	ldr	r1, [pc, #44]	; (4e8c <xTimerCreateTimerTask+0x48>)
    4e60:	480b      	ldr	r0, [pc, #44]	; (4e90 <xTimerCreateTimerTask+0x4c>)
    4e62:	4c0c      	ldr	r4, [pc, #48]	; (4e94 <xTimerCreateTimerTask+0x50>)
    4e64:	47a0      	blx	r4
	configASSERT(xReturn);
    4e66:	b108      	cbz	r0, 4e6c <xTimerCreateTimerTask+0x28>
}
    4e68:	b002      	add	sp, #8
    4e6a:	bd10      	pop	{r4, pc}
    4e6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e70:	f383 8811 	msr	BASEPRI, r3
    4e74:	f3bf 8f6f 	isb	sy
    4e78:	f3bf 8f4f 	dsb	sy
    4e7c:	e7fe      	b.n	4e7c <xTimerCreateTimerTask+0x38>
    4e7e:	bf00      	nop
    4e80:	00004df9 	.word	0x00004df9
    4e84:	2000278c 	.word	0x2000278c
    4e88:	200027c0 	.word	0x200027c0
    4e8c:	00006e80 	.word	0x00006e80
    4e90:	00004fb1 	.word	0x00004fb1
    4e94:	0000434d 	.word	0x0000434d

00004e98 <xTimerGenericCommand>:
	configASSERT(xTimer);
    4e98:	b1d8      	cbz	r0, 4ed2 <xTimerGenericCommand+0x3a>
{
    4e9a:	b530      	push	{r4, r5, lr}
    4e9c:	b085      	sub	sp, #20
    4e9e:	4615      	mov	r5, r2
    4ea0:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    4ea2:	4a14      	ldr	r2, [pc, #80]	; (4ef4 <xTimerGenericCommand+0x5c>)
    4ea4:	6890      	ldr	r0, [r2, #8]
    4ea6:	b310      	cbz	r0, 4eee <xTimerGenericCommand+0x56>
    4ea8:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    4eaa:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4eac:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    4eae:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    4eb0:	2905      	cmp	r1, #5
    4eb2:	dc17      	bgt.n	4ee4 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    4eb4:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <xTimerGenericCommand+0x60>)
    4eb6:	4798      	blx	r3
    4eb8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    4eba:	f04f 0300 	mov.w	r3, #0
    4ebe:	bf0c      	ite	eq
    4ec0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    4ec2:	461a      	movne	r2, r3
    4ec4:	a901      	add	r1, sp, #4
    4ec6:	480b      	ldr	r0, [pc, #44]	; (4ef4 <xTimerGenericCommand+0x5c>)
    4ec8:	6880      	ldr	r0, [r0, #8]
    4eca:	4c0c      	ldr	r4, [pc, #48]	; (4efc <xTimerGenericCommand+0x64>)
    4ecc:	47a0      	blx	r4
}
    4ece:	b005      	add	sp, #20
    4ed0:	bd30      	pop	{r4, r5, pc}
    4ed2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ed6:	f383 8811 	msr	BASEPRI, r3
    4eda:	f3bf 8f6f 	isb	sy
    4ede:	f3bf 8f4f 	dsb	sy
    4ee2:	e7fe      	b.n	4ee2 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    4ee4:	2300      	movs	r3, #0
    4ee6:	a901      	add	r1, sp, #4
    4ee8:	4c05      	ldr	r4, [pc, #20]	; (4f00 <xTimerGenericCommand+0x68>)
    4eea:	47a0      	blx	r4
    4eec:	e7ef      	b.n	4ece <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    4eee:	2000      	movs	r0, #0
	return xReturn;
    4ef0:	e7ed      	b.n	4ece <xTimerGenericCommand+0x36>
    4ef2:	bf00      	nop
    4ef4:	2000278c 	.word	0x2000278c
    4ef8:	00004b85 	.word	0x00004b85
    4efc:	00003ba1 	.word	0x00003ba1
    4f00:	00003d7d 	.word	0x00003d7d

00004f04 <prvSampleTimeNow>:
{
    4f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f08:	b082      	sub	sp, #8
    4f0a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    4f0c:	4b23      	ldr	r3, [pc, #140]	; (4f9c <prvSampleTimeNow+0x98>)
    4f0e:	4798      	blx	r3
    4f10:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    4f12:	4b23      	ldr	r3, [pc, #140]	; (4fa0 <prvSampleTimeNow+0x9c>)
    4f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4f16:	4298      	cmp	r0, r3
    4f18:	d319      	bcc.n	4f4e <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    4f1a:	2300      	movs	r3, #0
    4f1c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    4f20:	4b1f      	ldr	r3, [pc, #124]	; (4fa0 <prvSampleTimeNow+0x9c>)
    4f22:	639f      	str	r7, [r3, #56]	; 0x38
}
    4f24:	4638      	mov	r0, r7
    4f26:	b002      	add	sp, #8
    4f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    4f2c:	2100      	movs	r1, #0
    4f2e:	9100      	str	r1, [sp, #0]
    4f30:	460b      	mov	r3, r1
    4f32:	4652      	mov	r2, sl
    4f34:	4620      	mov	r0, r4
    4f36:	4c1b      	ldr	r4, [pc, #108]	; (4fa4 <prvSampleTimeNow+0xa0>)
    4f38:	47a0      	blx	r4
				configASSERT(xResult);
    4f3a:	b950      	cbnz	r0, 4f52 <prvSampleTimeNow+0x4e>
    4f3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f40:	f383 8811 	msr	BASEPRI, r3
    4f44:	f3bf 8f6f 	isb	sy
    4f48:	f3bf 8f4f 	dsb	sy
    4f4c:	e7fe      	b.n	4f4c <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    4f4e:	4d14      	ldr	r5, [pc, #80]	; (4fa0 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4f50:	4e15      	ldr	r6, [pc, #84]	; (4fa8 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    4f52:	686b      	ldr	r3, [r5, #4]
    4f54:	681a      	ldr	r2, [r3, #0]
    4f56:	b1c2      	cbz	r2, 4f8a <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    4f58:	68db      	ldr	r3, [r3, #12]
    4f5a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    4f5e:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4f60:	f104 0904 	add.w	r9, r4, #4
    4f64:	4648      	mov	r0, r9
    4f66:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    4f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f6a:	4620      	mov	r0, r4
    4f6c:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    4f6e:	69e3      	ldr	r3, [r4, #28]
    4f70:	2b01      	cmp	r3, #1
    4f72:	d1ee      	bne.n	4f52 <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    4f74:	69a3      	ldr	r3, [r4, #24]
    4f76:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    4f78:	459a      	cmp	sl, r3
    4f7a:	d2d7      	bcs.n	4f2c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    4f7c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    4f7e:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    4f80:	4649      	mov	r1, r9
    4f82:	6868      	ldr	r0, [r5, #4]
    4f84:	4b09      	ldr	r3, [pc, #36]	; (4fac <prvSampleTimeNow+0xa8>)
    4f86:	4798      	blx	r3
    4f88:	e7e3      	b.n	4f52 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    4f8a:	4a05      	ldr	r2, [pc, #20]	; (4fa0 <prvSampleTimeNow+0x9c>)
    4f8c:	6811      	ldr	r1, [r2, #0]
    4f8e:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    4f90:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    4f92:	2301      	movs	r3, #1
    4f94:	f8c8 3000 	str.w	r3, [r8]
    4f98:	e7c2      	b.n	4f20 <prvSampleTimeNow+0x1c>
    4f9a:	bf00      	nop
    4f9c:	000045c5 	.word	0x000045c5
    4fa0:	2000278c 	.word	0x2000278c
    4fa4:	00004e99 	.word	0x00004e99
    4fa8:	00003499 	.word	0x00003499
    4fac:	00003465 	.word	0x00003465

00004fb0 <prvTimerTask>:
{
    4fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fb4:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    4fb6:	4c65      	ldr	r4, [pc, #404]	; (514c <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    4fb8:	4f65      	ldr	r7, [pc, #404]	; (5150 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    4fba:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5170 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    4fbe:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5174 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    4fc2:	6863      	ldr	r3, [r4, #4]
    4fc4:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    4fc6:	b172      	cbz	r2, 4fe6 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    4fc8:	68db      	ldr	r3, [r3, #12]
    4fca:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    4fcc:	4b61      	ldr	r3, [pc, #388]	; (5154 <prvTimerTask+0x1a4>)
    4fce:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    4fd0:	a803      	add	r0, sp, #12
    4fd2:	4b61      	ldr	r3, [pc, #388]	; (5158 <prvTimerTask+0x1a8>)
    4fd4:	4798      	blx	r3
    4fd6:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    4fd8:	9b03      	ldr	r3, [sp, #12]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d179      	bne.n	50d2 <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    4fde:	42a8      	cmp	r0, r5
    4fe0:	d24a      	bcs.n	5078 <prvTimerTask+0xc8>
    4fe2:	2200      	movs	r2, #0
    4fe4:	e00e      	b.n	5004 <prvTimerTask+0x54>
	vTaskSuspendAll();
    4fe6:	4b5b      	ldr	r3, [pc, #364]	; (5154 <prvTimerTask+0x1a4>)
    4fe8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    4fea:	a803      	add	r0, sp, #12
    4fec:	4b5a      	ldr	r3, [pc, #360]	; (5158 <prvTimerTask+0x1a8>)
    4fee:	4798      	blx	r3
    4ff0:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    4ff2:	9b03      	ldr	r3, [sp, #12]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d16c      	bne.n	50d2 <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    4ff8:	6823      	ldr	r3, [r4, #0]
    4ffa:	681a      	ldr	r2, [r3, #0]
    4ffc:	fab2 f282 	clz	r2, r2
    5000:	0952      	lsrs	r2, r2, #5
    5002:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    5004:	1ba9      	subs	r1, r5, r6
    5006:	68a0      	ldr	r0, [r4, #8]
    5008:	4b54      	ldr	r3, [pc, #336]	; (515c <prvTimerTask+0x1ac>)
    500a:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    500c:	47b8      	blx	r7
    500e:	b938      	cbnz	r0, 5020 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    5010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5014:	f8c9 3000 	str.w	r3, [r9]
    5018:	f3bf 8f4f 	dsb	sy
    501c:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    5020:	4d4f      	ldr	r5, [pc, #316]	; (5160 <prvTimerTask+0x1b0>)
    5022:	2200      	movs	r2, #0
    5024:	a903      	add	r1, sp, #12
    5026:	68a0      	ldr	r0, [r4, #8]
    5028:	47a8      	blx	r5
    502a:	2800      	cmp	r0, #0
    502c:	d0c9      	beq.n	4fc2 <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    502e:	9b03      	ldr	r3, [sp, #12]
    5030:	2b00      	cmp	r3, #0
    5032:	dbf6      	blt.n	5022 <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5034:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    5036:	6973      	ldr	r3, [r6, #20]
    5038:	b10b      	cbz	r3, 503e <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    503a:	1d30      	adds	r0, r6, #4
    503c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    503e:	a802      	add	r0, sp, #8
    5040:	4b45      	ldr	r3, [pc, #276]	; (5158 <prvTimerTask+0x1a8>)
    5042:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    5044:	9b03      	ldr	r3, [sp, #12]
    5046:	2b09      	cmp	r3, #9
    5048:	d8eb      	bhi.n	5022 <prvTimerTask+0x72>
    504a:	a201      	add	r2, pc, #4	; (adr r2, 5050 <prvTimerTask+0xa0>)
    504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5050:	000050d7 	.word	0x000050d7
    5054:	000050d7 	.word	0x000050d7
    5058:	000050d7 	.word	0x000050d7
    505c:	00005023 	.word	0x00005023
    5060:	0000511f 	.word	0x0000511f
    5064:	00005145 	.word	0x00005145
    5068:	000050d7 	.word	0x000050d7
    506c:	000050d7 	.word	0x000050d7
    5070:	00005023 	.word	0x00005023
    5074:	0000511f 	.word	0x0000511f
				(void)xTaskResumeAll();
    5078:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    507a:	6863      	ldr	r3, [r4, #4]
    507c:	68db      	ldr	r3, [r3, #12]
    507e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5082:	f10a 0004 	add.w	r0, sl, #4
    5086:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5088:	f8da 301c 	ldr.w	r3, [sl, #28]
    508c:	2b01      	cmp	r3, #1
    508e:	d004      	beq.n	509a <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5090:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    5094:	4650      	mov	r0, sl
    5096:	4798      	blx	r3
    5098:	e7c2      	b.n	5020 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    509a:	f8da 1018 	ldr.w	r1, [sl, #24]
    509e:	462b      	mov	r3, r5
    50a0:	4632      	mov	r2, r6
    50a2:	4429      	add	r1, r5
    50a4:	4650      	mov	r0, sl
    50a6:	4e2f      	ldr	r6, [pc, #188]	; (5164 <prvTimerTask+0x1b4>)
    50a8:	47b0      	blx	r6
    50aa:	2800      	cmp	r0, #0
    50ac:	d0f0      	beq.n	5090 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    50ae:	2100      	movs	r1, #0
    50b0:	9100      	str	r1, [sp, #0]
    50b2:	460b      	mov	r3, r1
    50b4:	462a      	mov	r2, r5
    50b6:	4650      	mov	r0, sl
    50b8:	4d2b      	ldr	r5, [pc, #172]	; (5168 <prvTimerTask+0x1b8>)
    50ba:	47a8      	blx	r5
			configASSERT(xResult);
    50bc:	2800      	cmp	r0, #0
    50be:	d1e7      	bne.n	5090 <prvTimerTask+0xe0>
    50c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    50c4:	f383 8811 	msr	BASEPRI, r3
    50c8:	f3bf 8f6f 	isb	sy
    50cc:	f3bf 8f4f 	dsb	sy
    50d0:	e7fe      	b.n	50d0 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    50d2:	47b8      	blx	r7
    50d4:	e7a4      	b.n	5020 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    50d6:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    50d8:	69b1      	ldr	r1, [r6, #24]
    50da:	462b      	mov	r3, r5
    50dc:	4602      	mov	r2, r0
    50de:	4429      	add	r1, r5
    50e0:	4630      	mov	r0, r6
    50e2:	4d20      	ldr	r5, [pc, #128]	; (5164 <prvTimerTask+0x1b4>)
    50e4:	47a8      	blx	r5
    50e6:	2800      	cmp	r0, #0
    50e8:	d09a      	beq.n	5020 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    50ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
    50ec:	4630      	mov	r0, r6
    50ee:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    50f0:	69f3      	ldr	r3, [r6, #28]
    50f2:	2b01      	cmp	r3, #1
    50f4:	d194      	bne.n	5020 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    50f6:	69b2      	ldr	r2, [r6, #24]
    50f8:	2100      	movs	r1, #0
    50fa:	9100      	str	r1, [sp, #0]
    50fc:	460b      	mov	r3, r1
    50fe:	9804      	ldr	r0, [sp, #16]
    5100:	4402      	add	r2, r0
    5102:	4630      	mov	r0, r6
    5104:	4d18      	ldr	r5, [pc, #96]	; (5168 <prvTimerTask+0x1b8>)
    5106:	47a8      	blx	r5
						configASSERT(xResult);
    5108:	2800      	cmp	r0, #0
    510a:	d189      	bne.n	5020 <prvTimerTask+0x70>
    510c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5110:	f383 8811 	msr	BASEPRI, r3
    5114:	f3bf 8f6f 	isb	sy
    5118:	f3bf 8f4f 	dsb	sy
    511c:	e7fe      	b.n	511c <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    511e:	9904      	ldr	r1, [sp, #16]
    5120:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    5122:	b131      	cbz	r1, 5132 <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    5124:	4603      	mov	r3, r0
    5126:	4602      	mov	r2, r0
    5128:	4401      	add	r1, r0
    512a:	4630      	mov	r0, r6
    512c:	4d0d      	ldr	r5, [pc, #52]	; (5164 <prvTimerTask+0x1b4>)
    512e:	47a8      	blx	r5
    5130:	e776      	b.n	5020 <prvTimerTask+0x70>
    5132:	f04f 0380 	mov.w	r3, #128	; 0x80
    5136:	f383 8811 	msr	BASEPRI, r3
    513a:	f3bf 8f6f 	isb	sy
    513e:	f3bf 8f4f 	dsb	sy
    5142:	e7fe      	b.n	5142 <prvTimerTask+0x192>
				vPortFree(pxTimer);
    5144:	4630      	mov	r0, r6
    5146:	4b09      	ldr	r3, [pc, #36]	; (516c <prvTimerTask+0x1bc>)
    5148:	4798      	blx	r3
    514a:	e769      	b.n	5020 <prvTimerTask+0x70>
    514c:	2000278c 	.word	0x2000278c
    5150:	000046f9 	.word	0x000046f9
    5154:	000045b1 	.word	0x000045b1
    5158:	00004f05 	.word	0x00004f05
    515c:	0000421d 	.word	0x0000421d
    5160:	00003e85 	.word	0x00003e85
    5164:	00004db1 	.word	0x00004db1
    5168:	00004e99 	.word	0x00004e99
    516c:	000038ad 	.word	0x000038ad
    5170:	e000ed04 	.word	0xe000ed04
    5174:	00003499 	.word	0x00003499

00005178 <__libc_init_array>:
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	4e0d      	ldr	r6, [pc, #52]	; (51b0 <__libc_init_array+0x38>)
    517c:	4c0d      	ldr	r4, [pc, #52]	; (51b4 <__libc_init_array+0x3c>)
    517e:	1ba4      	subs	r4, r4, r6
    5180:	10a4      	asrs	r4, r4, #2
    5182:	2500      	movs	r5, #0
    5184:	42a5      	cmp	r5, r4
    5186:	d109      	bne.n	519c <__libc_init_array+0x24>
    5188:	4e0b      	ldr	r6, [pc, #44]	; (51b8 <__libc_init_array+0x40>)
    518a:	4c0c      	ldr	r4, [pc, #48]	; (51bc <__libc_init_array+0x44>)
    518c:	f001 fec6 	bl	6f1c <_init>
    5190:	1ba4      	subs	r4, r4, r6
    5192:	10a4      	asrs	r4, r4, #2
    5194:	2500      	movs	r5, #0
    5196:	42a5      	cmp	r5, r4
    5198:	d105      	bne.n	51a6 <__libc_init_array+0x2e>
    519a:	bd70      	pop	{r4, r5, r6, pc}
    519c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    51a0:	4798      	blx	r3
    51a2:	3501      	adds	r5, #1
    51a4:	e7ee      	b.n	5184 <__libc_init_array+0xc>
    51a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    51aa:	4798      	blx	r3
    51ac:	3501      	adds	r5, #1
    51ae:	e7f2      	b.n	5196 <__libc_init_array+0x1e>
    51b0:	00006f28 	.word	0x00006f28
    51b4:	00006f28 	.word	0x00006f28
    51b8:	00006f28 	.word	0x00006f28
    51bc:	00006f2c 	.word	0x00006f2c

000051c0 <memcmp>:
    51c0:	b510      	push	{r4, lr}
    51c2:	3901      	subs	r1, #1
    51c4:	4402      	add	r2, r0
    51c6:	4290      	cmp	r0, r2
    51c8:	d101      	bne.n	51ce <memcmp+0xe>
    51ca:	2000      	movs	r0, #0
    51cc:	bd10      	pop	{r4, pc}
    51ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    51d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    51d6:	42a3      	cmp	r3, r4
    51d8:	d0f5      	beq.n	51c6 <memcmp+0x6>
    51da:	1b18      	subs	r0, r3, r4
    51dc:	bd10      	pop	{r4, pc}

000051de <memcpy>:
    51de:	b510      	push	{r4, lr}
    51e0:	1e43      	subs	r3, r0, #1
    51e2:	440a      	add	r2, r1
    51e4:	4291      	cmp	r1, r2
    51e6:	d100      	bne.n	51ea <memcpy+0xc>
    51e8:	bd10      	pop	{r4, pc}
    51ea:	f811 4b01 	ldrb.w	r4, [r1], #1
    51ee:	f803 4f01 	strb.w	r4, [r3, #1]!
    51f2:	e7f7      	b.n	51e4 <memcpy+0x6>

000051f4 <memmove>:
    51f4:	4288      	cmp	r0, r1
    51f6:	b510      	push	{r4, lr}
    51f8:	eb01 0302 	add.w	r3, r1, r2
    51fc:	d803      	bhi.n	5206 <memmove+0x12>
    51fe:	1e42      	subs	r2, r0, #1
    5200:	4299      	cmp	r1, r3
    5202:	d10c      	bne.n	521e <memmove+0x2a>
    5204:	bd10      	pop	{r4, pc}
    5206:	4298      	cmp	r0, r3
    5208:	d2f9      	bcs.n	51fe <memmove+0xa>
    520a:	1881      	adds	r1, r0, r2
    520c:	1ad2      	subs	r2, r2, r3
    520e:	42d3      	cmn	r3, r2
    5210:	d100      	bne.n	5214 <memmove+0x20>
    5212:	bd10      	pop	{r4, pc}
    5214:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    5218:	f801 4d01 	strb.w	r4, [r1, #-1]!
    521c:	e7f7      	b.n	520e <memmove+0x1a>
    521e:	f811 4b01 	ldrb.w	r4, [r1], #1
    5222:	f802 4f01 	strb.w	r4, [r2, #1]!
    5226:	e7eb      	b.n	5200 <memmove+0xc>

00005228 <memset>:
    5228:	4402      	add	r2, r0
    522a:	4603      	mov	r3, r0
    522c:	4293      	cmp	r3, r2
    522e:	d100      	bne.n	5232 <memset+0xa>
    5230:	4770      	bx	lr
    5232:	f803 1b01 	strb.w	r1, [r3], #1
    5236:	e7f9      	b.n	522c <memset+0x4>

00005238 <_free_r>:
    5238:	b538      	push	{r3, r4, r5, lr}
    523a:	4605      	mov	r5, r0
    523c:	2900      	cmp	r1, #0
    523e:	d045      	beq.n	52cc <_free_r+0x94>
    5240:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5244:	1f0c      	subs	r4, r1, #4
    5246:	2b00      	cmp	r3, #0
    5248:	bfb8      	it	lt
    524a:	18e4      	addlt	r4, r4, r3
    524c:	f000 f90b 	bl	5466 <__malloc_lock>
    5250:	4a1f      	ldr	r2, [pc, #124]	; (52d0 <_free_r+0x98>)
    5252:	6813      	ldr	r3, [r2, #0]
    5254:	4610      	mov	r0, r2
    5256:	b933      	cbnz	r3, 5266 <_free_r+0x2e>
    5258:	6063      	str	r3, [r4, #4]
    525a:	6014      	str	r4, [r2, #0]
    525c:	4628      	mov	r0, r5
    525e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5262:	f000 b901 	b.w	5468 <__malloc_unlock>
    5266:	42a3      	cmp	r3, r4
    5268:	d90c      	bls.n	5284 <_free_r+0x4c>
    526a:	6821      	ldr	r1, [r4, #0]
    526c:	1862      	adds	r2, r4, r1
    526e:	4293      	cmp	r3, r2
    5270:	bf04      	itt	eq
    5272:	681a      	ldreq	r2, [r3, #0]
    5274:	685b      	ldreq	r3, [r3, #4]
    5276:	6063      	str	r3, [r4, #4]
    5278:	bf04      	itt	eq
    527a:	1852      	addeq	r2, r2, r1
    527c:	6022      	streq	r2, [r4, #0]
    527e:	6004      	str	r4, [r0, #0]
    5280:	e7ec      	b.n	525c <_free_r+0x24>
    5282:	4613      	mov	r3, r2
    5284:	685a      	ldr	r2, [r3, #4]
    5286:	b10a      	cbz	r2, 528c <_free_r+0x54>
    5288:	42a2      	cmp	r2, r4
    528a:	d9fa      	bls.n	5282 <_free_r+0x4a>
    528c:	6819      	ldr	r1, [r3, #0]
    528e:	1858      	adds	r0, r3, r1
    5290:	42a0      	cmp	r0, r4
    5292:	d10b      	bne.n	52ac <_free_r+0x74>
    5294:	6820      	ldr	r0, [r4, #0]
    5296:	4401      	add	r1, r0
    5298:	1858      	adds	r0, r3, r1
    529a:	4282      	cmp	r2, r0
    529c:	6019      	str	r1, [r3, #0]
    529e:	d1dd      	bne.n	525c <_free_r+0x24>
    52a0:	6810      	ldr	r0, [r2, #0]
    52a2:	6852      	ldr	r2, [r2, #4]
    52a4:	605a      	str	r2, [r3, #4]
    52a6:	4401      	add	r1, r0
    52a8:	6019      	str	r1, [r3, #0]
    52aa:	e7d7      	b.n	525c <_free_r+0x24>
    52ac:	d902      	bls.n	52b4 <_free_r+0x7c>
    52ae:	230c      	movs	r3, #12
    52b0:	602b      	str	r3, [r5, #0]
    52b2:	e7d3      	b.n	525c <_free_r+0x24>
    52b4:	6820      	ldr	r0, [r4, #0]
    52b6:	1821      	adds	r1, r4, r0
    52b8:	428a      	cmp	r2, r1
    52ba:	bf04      	itt	eq
    52bc:	6811      	ldreq	r1, [r2, #0]
    52be:	6852      	ldreq	r2, [r2, #4]
    52c0:	6062      	str	r2, [r4, #4]
    52c2:	bf04      	itt	eq
    52c4:	1809      	addeq	r1, r1, r0
    52c6:	6021      	streq	r1, [r4, #0]
    52c8:	605c      	str	r4, [r3, #4]
    52ca:	e7c7      	b.n	525c <_free_r+0x24>
    52cc:	bd38      	pop	{r3, r4, r5, pc}
    52ce:	bf00      	nop
    52d0:	200027c8 	.word	0x200027c8

000052d4 <_malloc_r>:
    52d4:	b570      	push	{r4, r5, r6, lr}
    52d6:	1ccd      	adds	r5, r1, #3
    52d8:	f025 0503 	bic.w	r5, r5, #3
    52dc:	3508      	adds	r5, #8
    52de:	2d0c      	cmp	r5, #12
    52e0:	bf38      	it	cc
    52e2:	250c      	movcc	r5, #12
    52e4:	2d00      	cmp	r5, #0
    52e6:	4606      	mov	r6, r0
    52e8:	db01      	blt.n	52ee <_malloc_r+0x1a>
    52ea:	42a9      	cmp	r1, r5
    52ec:	d903      	bls.n	52f6 <_malloc_r+0x22>
    52ee:	230c      	movs	r3, #12
    52f0:	6033      	str	r3, [r6, #0]
    52f2:	2000      	movs	r0, #0
    52f4:	bd70      	pop	{r4, r5, r6, pc}
    52f6:	f000 f8b6 	bl	5466 <__malloc_lock>
    52fa:	4a23      	ldr	r2, [pc, #140]	; (5388 <_malloc_r+0xb4>)
    52fc:	6814      	ldr	r4, [r2, #0]
    52fe:	4621      	mov	r1, r4
    5300:	b991      	cbnz	r1, 5328 <_malloc_r+0x54>
    5302:	4c22      	ldr	r4, [pc, #136]	; (538c <_malloc_r+0xb8>)
    5304:	6823      	ldr	r3, [r4, #0]
    5306:	b91b      	cbnz	r3, 5310 <_malloc_r+0x3c>
    5308:	4630      	mov	r0, r6
    530a:	f000 f841 	bl	5390 <_sbrk_r>
    530e:	6020      	str	r0, [r4, #0]
    5310:	4629      	mov	r1, r5
    5312:	4630      	mov	r0, r6
    5314:	f000 f83c 	bl	5390 <_sbrk_r>
    5318:	1c43      	adds	r3, r0, #1
    531a:	d126      	bne.n	536a <_malloc_r+0x96>
    531c:	230c      	movs	r3, #12
    531e:	6033      	str	r3, [r6, #0]
    5320:	4630      	mov	r0, r6
    5322:	f000 f8a1 	bl	5468 <__malloc_unlock>
    5326:	e7e4      	b.n	52f2 <_malloc_r+0x1e>
    5328:	680b      	ldr	r3, [r1, #0]
    532a:	1b5b      	subs	r3, r3, r5
    532c:	d41a      	bmi.n	5364 <_malloc_r+0x90>
    532e:	2b0b      	cmp	r3, #11
    5330:	d90f      	bls.n	5352 <_malloc_r+0x7e>
    5332:	600b      	str	r3, [r1, #0]
    5334:	50cd      	str	r5, [r1, r3]
    5336:	18cc      	adds	r4, r1, r3
    5338:	4630      	mov	r0, r6
    533a:	f000 f895 	bl	5468 <__malloc_unlock>
    533e:	f104 000b 	add.w	r0, r4, #11
    5342:	1d23      	adds	r3, r4, #4
    5344:	f020 0007 	bic.w	r0, r0, #7
    5348:	1ac3      	subs	r3, r0, r3
    534a:	d01b      	beq.n	5384 <_malloc_r+0xb0>
    534c:	425a      	negs	r2, r3
    534e:	50e2      	str	r2, [r4, r3]
    5350:	bd70      	pop	{r4, r5, r6, pc}
    5352:	428c      	cmp	r4, r1
    5354:	bf0d      	iteet	eq
    5356:	6863      	ldreq	r3, [r4, #4]
    5358:	684b      	ldrne	r3, [r1, #4]
    535a:	6063      	strne	r3, [r4, #4]
    535c:	6013      	streq	r3, [r2, #0]
    535e:	bf18      	it	ne
    5360:	460c      	movne	r4, r1
    5362:	e7e9      	b.n	5338 <_malloc_r+0x64>
    5364:	460c      	mov	r4, r1
    5366:	6849      	ldr	r1, [r1, #4]
    5368:	e7ca      	b.n	5300 <_malloc_r+0x2c>
    536a:	1cc4      	adds	r4, r0, #3
    536c:	f024 0403 	bic.w	r4, r4, #3
    5370:	42a0      	cmp	r0, r4
    5372:	d005      	beq.n	5380 <_malloc_r+0xac>
    5374:	1a21      	subs	r1, r4, r0
    5376:	4630      	mov	r0, r6
    5378:	f000 f80a 	bl	5390 <_sbrk_r>
    537c:	3001      	adds	r0, #1
    537e:	d0cd      	beq.n	531c <_malloc_r+0x48>
    5380:	6025      	str	r5, [r4, #0]
    5382:	e7d9      	b.n	5338 <_malloc_r+0x64>
    5384:	bd70      	pop	{r4, r5, r6, pc}
    5386:	bf00      	nop
    5388:	200027c8 	.word	0x200027c8
    538c:	200027cc 	.word	0x200027cc

00005390 <_sbrk_r>:
    5390:	b538      	push	{r3, r4, r5, lr}
    5392:	4c06      	ldr	r4, [pc, #24]	; (53ac <_sbrk_r+0x1c>)
    5394:	2300      	movs	r3, #0
    5396:	4605      	mov	r5, r0
    5398:	4608      	mov	r0, r1
    539a:	6023      	str	r3, [r4, #0]
    539c:	f7fc fd2c 	bl	1df8 <_sbrk>
    53a0:	1c43      	adds	r3, r0, #1
    53a2:	d102      	bne.n	53aa <_sbrk_r+0x1a>
    53a4:	6823      	ldr	r3, [r4, #0]
    53a6:	b103      	cbz	r3, 53aa <_sbrk_r+0x1a>
    53a8:	602b      	str	r3, [r5, #0]
    53aa:	bd38      	pop	{r3, r4, r5, pc}
    53ac:	200031e0 	.word	0x200031e0

000053b0 <siprintf>:
    53b0:	b40e      	push	{r1, r2, r3}
    53b2:	b500      	push	{lr}
    53b4:	b09c      	sub	sp, #112	; 0x70
    53b6:	f44f 7102 	mov.w	r1, #520	; 0x208
    53ba:	ab1d      	add	r3, sp, #116	; 0x74
    53bc:	f8ad 1014 	strh.w	r1, [sp, #20]
    53c0:	9002      	str	r0, [sp, #8]
    53c2:	9006      	str	r0, [sp, #24]
    53c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    53c8:	480a      	ldr	r0, [pc, #40]	; (53f4 <siprintf+0x44>)
    53ca:	9104      	str	r1, [sp, #16]
    53cc:	9107      	str	r1, [sp, #28]
    53ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    53d2:	f853 2b04 	ldr.w	r2, [r3], #4
    53d6:	f8ad 1016 	strh.w	r1, [sp, #22]
    53da:	6800      	ldr	r0, [r0, #0]
    53dc:	9301      	str	r3, [sp, #4]
    53de:	a902      	add	r1, sp, #8
    53e0:	f000 f89e 	bl	5520 <_svfiprintf_r>
    53e4:	9b02      	ldr	r3, [sp, #8]
    53e6:	2200      	movs	r2, #0
    53e8:	701a      	strb	r2, [r3, #0]
    53ea:	b01c      	add	sp, #112	; 0x70
    53ec:	f85d eb04 	ldr.w	lr, [sp], #4
    53f0:	b003      	add	sp, #12
    53f2:	4770      	bx	lr
    53f4:	20000128 	.word	0x20000128

000053f8 <strcpy>:
    53f8:	4603      	mov	r3, r0
    53fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    53fe:	f803 2b01 	strb.w	r2, [r3], #1
    5402:	2a00      	cmp	r2, #0
    5404:	d1f9      	bne.n	53fa <strcpy+0x2>
    5406:	4770      	bx	lr

00005408 <strlen>:
    5408:	4603      	mov	r3, r0
    540a:	f813 2b01 	ldrb.w	r2, [r3], #1
    540e:	2a00      	cmp	r2, #0
    5410:	d1fb      	bne.n	540a <strlen+0x2>
    5412:	1a18      	subs	r0, r3, r0
    5414:	3801      	subs	r0, #1
    5416:	4770      	bx	lr

00005418 <strncmp>:
    5418:	b510      	push	{r4, lr}
    541a:	b16a      	cbz	r2, 5438 <strncmp+0x20>
    541c:	3901      	subs	r1, #1
    541e:	1884      	adds	r4, r0, r2
    5420:	f810 3b01 	ldrb.w	r3, [r0], #1
    5424:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5428:	4293      	cmp	r3, r2
    542a:	d103      	bne.n	5434 <strncmp+0x1c>
    542c:	42a0      	cmp	r0, r4
    542e:	d001      	beq.n	5434 <strncmp+0x1c>
    5430:	2b00      	cmp	r3, #0
    5432:	d1f5      	bne.n	5420 <strncmp+0x8>
    5434:	1a98      	subs	r0, r3, r2
    5436:	bd10      	pop	{r4, pc}
    5438:	4610      	mov	r0, r2
    543a:	bd10      	pop	{r4, pc}

0000543c <strncpy>:
    543c:	b570      	push	{r4, r5, r6, lr}
    543e:	4604      	mov	r4, r0
    5440:	b902      	cbnz	r2, 5444 <strncpy+0x8>
    5442:	bd70      	pop	{r4, r5, r6, pc}
    5444:	4623      	mov	r3, r4
    5446:	f811 5b01 	ldrb.w	r5, [r1], #1
    544a:	f803 5b01 	strb.w	r5, [r3], #1
    544e:	1e56      	subs	r6, r2, #1
    5450:	b91d      	cbnz	r5, 545a <strncpy+0x1e>
    5452:	4414      	add	r4, r2
    5454:	42a3      	cmp	r3, r4
    5456:	d103      	bne.n	5460 <strncpy+0x24>
    5458:	bd70      	pop	{r4, r5, r6, pc}
    545a:	461c      	mov	r4, r3
    545c:	4632      	mov	r2, r6
    545e:	e7ef      	b.n	5440 <strncpy+0x4>
    5460:	f803 5b01 	strb.w	r5, [r3], #1
    5464:	e7f6      	b.n	5454 <strncpy+0x18>

00005466 <__malloc_lock>:
    5466:	4770      	bx	lr

00005468 <__malloc_unlock>:
    5468:	4770      	bx	lr

0000546a <__ssputs_r>:
    546a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    546e:	688e      	ldr	r6, [r1, #8]
    5470:	429e      	cmp	r6, r3
    5472:	4682      	mov	sl, r0
    5474:	460c      	mov	r4, r1
    5476:	4691      	mov	r9, r2
    5478:	4698      	mov	r8, r3
    547a:	d835      	bhi.n	54e8 <__ssputs_r+0x7e>
    547c:	898a      	ldrh	r2, [r1, #12]
    547e:	f412 6f90 	tst.w	r2, #1152	; 0x480
    5482:	d031      	beq.n	54e8 <__ssputs_r+0x7e>
    5484:	6825      	ldr	r5, [r4, #0]
    5486:	6909      	ldr	r1, [r1, #16]
    5488:	1a6f      	subs	r7, r5, r1
    548a:	6965      	ldr	r5, [r4, #20]
    548c:	2302      	movs	r3, #2
    548e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5492:	fb95 f5f3 	sdiv	r5, r5, r3
    5496:	f108 0301 	add.w	r3, r8, #1
    549a:	443b      	add	r3, r7
    549c:	429d      	cmp	r5, r3
    549e:	bf38      	it	cc
    54a0:	461d      	movcc	r5, r3
    54a2:	0553      	lsls	r3, r2, #21
    54a4:	d531      	bpl.n	550a <__ssputs_r+0xa0>
    54a6:	4629      	mov	r1, r5
    54a8:	f7ff ff14 	bl	52d4 <_malloc_r>
    54ac:	4606      	mov	r6, r0
    54ae:	b950      	cbnz	r0, 54c6 <__ssputs_r+0x5c>
    54b0:	230c      	movs	r3, #12
    54b2:	f8ca 3000 	str.w	r3, [sl]
    54b6:	89a3      	ldrh	r3, [r4, #12]
    54b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    54bc:	81a3      	strh	r3, [r4, #12]
    54be:	f04f 30ff 	mov.w	r0, #4294967295
    54c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54c6:	463a      	mov	r2, r7
    54c8:	6921      	ldr	r1, [r4, #16]
    54ca:	f7ff fe88 	bl	51de <memcpy>
    54ce:	89a3      	ldrh	r3, [r4, #12]
    54d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    54d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    54d8:	81a3      	strh	r3, [r4, #12]
    54da:	6126      	str	r6, [r4, #16]
    54dc:	6165      	str	r5, [r4, #20]
    54de:	443e      	add	r6, r7
    54e0:	1bed      	subs	r5, r5, r7
    54e2:	6026      	str	r6, [r4, #0]
    54e4:	60a5      	str	r5, [r4, #8]
    54e6:	4646      	mov	r6, r8
    54e8:	4546      	cmp	r6, r8
    54ea:	bf28      	it	cs
    54ec:	4646      	movcs	r6, r8
    54ee:	4632      	mov	r2, r6
    54f0:	4649      	mov	r1, r9
    54f2:	6820      	ldr	r0, [r4, #0]
    54f4:	f7ff fe7e 	bl	51f4 <memmove>
    54f8:	68a3      	ldr	r3, [r4, #8]
    54fa:	1b9b      	subs	r3, r3, r6
    54fc:	60a3      	str	r3, [r4, #8]
    54fe:	6823      	ldr	r3, [r4, #0]
    5500:	441e      	add	r6, r3
    5502:	6026      	str	r6, [r4, #0]
    5504:	2000      	movs	r0, #0
    5506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    550a:	462a      	mov	r2, r5
    550c:	f000 fae8 	bl	5ae0 <_realloc_r>
    5510:	4606      	mov	r6, r0
    5512:	2800      	cmp	r0, #0
    5514:	d1e1      	bne.n	54da <__ssputs_r+0x70>
    5516:	6921      	ldr	r1, [r4, #16]
    5518:	4650      	mov	r0, sl
    551a:	f7ff fe8d 	bl	5238 <_free_r>
    551e:	e7c7      	b.n	54b0 <__ssputs_r+0x46>

00005520 <_svfiprintf_r>:
    5520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5524:	b09d      	sub	sp, #116	; 0x74
    5526:	4680      	mov	r8, r0
    5528:	9303      	str	r3, [sp, #12]
    552a:	898b      	ldrh	r3, [r1, #12]
    552c:	061c      	lsls	r4, r3, #24
    552e:	460d      	mov	r5, r1
    5530:	4616      	mov	r6, r2
    5532:	d50f      	bpl.n	5554 <_svfiprintf_r+0x34>
    5534:	690b      	ldr	r3, [r1, #16]
    5536:	b96b      	cbnz	r3, 5554 <_svfiprintf_r+0x34>
    5538:	2140      	movs	r1, #64	; 0x40
    553a:	f7ff fecb 	bl	52d4 <_malloc_r>
    553e:	6028      	str	r0, [r5, #0]
    5540:	6128      	str	r0, [r5, #16]
    5542:	b928      	cbnz	r0, 5550 <_svfiprintf_r+0x30>
    5544:	230c      	movs	r3, #12
    5546:	f8c8 3000 	str.w	r3, [r8]
    554a:	f04f 30ff 	mov.w	r0, #4294967295
    554e:	e0c5      	b.n	56dc <_svfiprintf_r+0x1bc>
    5550:	2340      	movs	r3, #64	; 0x40
    5552:	616b      	str	r3, [r5, #20]
    5554:	2300      	movs	r3, #0
    5556:	9309      	str	r3, [sp, #36]	; 0x24
    5558:	2320      	movs	r3, #32
    555a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    555e:	2330      	movs	r3, #48	; 0x30
    5560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5564:	f04f 0b01 	mov.w	fp, #1
    5568:	4637      	mov	r7, r6
    556a:	463c      	mov	r4, r7
    556c:	f814 3b01 	ldrb.w	r3, [r4], #1
    5570:	2b00      	cmp	r3, #0
    5572:	d13c      	bne.n	55ee <_svfiprintf_r+0xce>
    5574:	ebb7 0a06 	subs.w	sl, r7, r6
    5578:	d00b      	beq.n	5592 <_svfiprintf_r+0x72>
    557a:	4653      	mov	r3, sl
    557c:	4632      	mov	r2, r6
    557e:	4629      	mov	r1, r5
    5580:	4640      	mov	r0, r8
    5582:	f7ff ff72 	bl	546a <__ssputs_r>
    5586:	3001      	adds	r0, #1
    5588:	f000 80a3 	beq.w	56d2 <_svfiprintf_r+0x1b2>
    558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    558e:	4453      	add	r3, sl
    5590:	9309      	str	r3, [sp, #36]	; 0x24
    5592:	783b      	ldrb	r3, [r7, #0]
    5594:	2b00      	cmp	r3, #0
    5596:	f000 809c 	beq.w	56d2 <_svfiprintf_r+0x1b2>
    559a:	2300      	movs	r3, #0
    559c:	f04f 32ff 	mov.w	r2, #4294967295
    55a0:	9304      	str	r3, [sp, #16]
    55a2:	9307      	str	r3, [sp, #28]
    55a4:	9205      	str	r2, [sp, #20]
    55a6:	9306      	str	r3, [sp, #24]
    55a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    55ac:	931a      	str	r3, [sp, #104]	; 0x68
    55ae:	2205      	movs	r2, #5
    55b0:	7821      	ldrb	r1, [r4, #0]
    55b2:	4850      	ldr	r0, [pc, #320]	; (56f4 <_svfiprintf_r+0x1d4>)
    55b4:	f000 fa44 	bl	5a40 <memchr>
    55b8:	1c67      	adds	r7, r4, #1
    55ba:	9b04      	ldr	r3, [sp, #16]
    55bc:	b9d8      	cbnz	r0, 55f6 <_svfiprintf_r+0xd6>
    55be:	06d9      	lsls	r1, r3, #27
    55c0:	bf44      	itt	mi
    55c2:	2220      	movmi	r2, #32
    55c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    55c8:	071a      	lsls	r2, r3, #28
    55ca:	bf44      	itt	mi
    55cc:	222b      	movmi	r2, #43	; 0x2b
    55ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    55d2:	7822      	ldrb	r2, [r4, #0]
    55d4:	2a2a      	cmp	r2, #42	; 0x2a
    55d6:	d016      	beq.n	5606 <_svfiprintf_r+0xe6>
    55d8:	9a07      	ldr	r2, [sp, #28]
    55da:	2100      	movs	r1, #0
    55dc:	200a      	movs	r0, #10
    55de:	4627      	mov	r7, r4
    55e0:	3401      	adds	r4, #1
    55e2:	783b      	ldrb	r3, [r7, #0]
    55e4:	3b30      	subs	r3, #48	; 0x30
    55e6:	2b09      	cmp	r3, #9
    55e8:	d951      	bls.n	568e <_svfiprintf_r+0x16e>
    55ea:	b1c9      	cbz	r1, 5620 <_svfiprintf_r+0x100>
    55ec:	e011      	b.n	5612 <_svfiprintf_r+0xf2>
    55ee:	2b25      	cmp	r3, #37	; 0x25
    55f0:	d0c0      	beq.n	5574 <_svfiprintf_r+0x54>
    55f2:	4627      	mov	r7, r4
    55f4:	e7b9      	b.n	556a <_svfiprintf_r+0x4a>
    55f6:	4a3f      	ldr	r2, [pc, #252]	; (56f4 <_svfiprintf_r+0x1d4>)
    55f8:	1a80      	subs	r0, r0, r2
    55fa:	fa0b f000 	lsl.w	r0, fp, r0
    55fe:	4318      	orrs	r0, r3
    5600:	9004      	str	r0, [sp, #16]
    5602:	463c      	mov	r4, r7
    5604:	e7d3      	b.n	55ae <_svfiprintf_r+0x8e>
    5606:	9a03      	ldr	r2, [sp, #12]
    5608:	1d11      	adds	r1, r2, #4
    560a:	6812      	ldr	r2, [r2, #0]
    560c:	9103      	str	r1, [sp, #12]
    560e:	2a00      	cmp	r2, #0
    5610:	db01      	blt.n	5616 <_svfiprintf_r+0xf6>
    5612:	9207      	str	r2, [sp, #28]
    5614:	e004      	b.n	5620 <_svfiprintf_r+0x100>
    5616:	4252      	negs	r2, r2
    5618:	f043 0302 	orr.w	r3, r3, #2
    561c:	9207      	str	r2, [sp, #28]
    561e:	9304      	str	r3, [sp, #16]
    5620:	783b      	ldrb	r3, [r7, #0]
    5622:	2b2e      	cmp	r3, #46	; 0x2e
    5624:	d10e      	bne.n	5644 <_svfiprintf_r+0x124>
    5626:	787b      	ldrb	r3, [r7, #1]
    5628:	2b2a      	cmp	r3, #42	; 0x2a
    562a:	f107 0101 	add.w	r1, r7, #1
    562e:	d132      	bne.n	5696 <_svfiprintf_r+0x176>
    5630:	9b03      	ldr	r3, [sp, #12]
    5632:	1d1a      	adds	r2, r3, #4
    5634:	681b      	ldr	r3, [r3, #0]
    5636:	9203      	str	r2, [sp, #12]
    5638:	2b00      	cmp	r3, #0
    563a:	bfb8      	it	lt
    563c:	f04f 33ff 	movlt.w	r3, #4294967295
    5640:	3702      	adds	r7, #2
    5642:	9305      	str	r3, [sp, #20]
    5644:	4c2c      	ldr	r4, [pc, #176]	; (56f8 <_svfiprintf_r+0x1d8>)
    5646:	7839      	ldrb	r1, [r7, #0]
    5648:	2203      	movs	r2, #3
    564a:	4620      	mov	r0, r4
    564c:	f000 f9f8 	bl	5a40 <memchr>
    5650:	b138      	cbz	r0, 5662 <_svfiprintf_r+0x142>
    5652:	2340      	movs	r3, #64	; 0x40
    5654:	1b00      	subs	r0, r0, r4
    5656:	fa03 f000 	lsl.w	r0, r3, r0
    565a:	9b04      	ldr	r3, [sp, #16]
    565c:	4303      	orrs	r3, r0
    565e:	9304      	str	r3, [sp, #16]
    5660:	3701      	adds	r7, #1
    5662:	7839      	ldrb	r1, [r7, #0]
    5664:	4825      	ldr	r0, [pc, #148]	; (56fc <_svfiprintf_r+0x1dc>)
    5666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    566a:	2206      	movs	r2, #6
    566c:	1c7e      	adds	r6, r7, #1
    566e:	f000 f9e7 	bl	5a40 <memchr>
    5672:	2800      	cmp	r0, #0
    5674:	d035      	beq.n	56e2 <_svfiprintf_r+0x1c2>
    5676:	4b22      	ldr	r3, [pc, #136]	; (5700 <_svfiprintf_r+0x1e0>)
    5678:	b9fb      	cbnz	r3, 56ba <_svfiprintf_r+0x19a>
    567a:	9b03      	ldr	r3, [sp, #12]
    567c:	3307      	adds	r3, #7
    567e:	f023 0307 	bic.w	r3, r3, #7
    5682:	3308      	adds	r3, #8
    5684:	9303      	str	r3, [sp, #12]
    5686:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5688:	444b      	add	r3, r9
    568a:	9309      	str	r3, [sp, #36]	; 0x24
    568c:	e76c      	b.n	5568 <_svfiprintf_r+0x48>
    568e:	fb00 3202 	mla	r2, r0, r2, r3
    5692:	2101      	movs	r1, #1
    5694:	e7a3      	b.n	55de <_svfiprintf_r+0xbe>
    5696:	2300      	movs	r3, #0
    5698:	9305      	str	r3, [sp, #20]
    569a:	4618      	mov	r0, r3
    569c:	240a      	movs	r4, #10
    569e:	460f      	mov	r7, r1
    56a0:	3101      	adds	r1, #1
    56a2:	783a      	ldrb	r2, [r7, #0]
    56a4:	3a30      	subs	r2, #48	; 0x30
    56a6:	2a09      	cmp	r2, #9
    56a8:	d903      	bls.n	56b2 <_svfiprintf_r+0x192>
    56aa:	2b00      	cmp	r3, #0
    56ac:	d0ca      	beq.n	5644 <_svfiprintf_r+0x124>
    56ae:	9005      	str	r0, [sp, #20]
    56b0:	e7c8      	b.n	5644 <_svfiprintf_r+0x124>
    56b2:	fb04 2000 	mla	r0, r4, r0, r2
    56b6:	2301      	movs	r3, #1
    56b8:	e7f1      	b.n	569e <_svfiprintf_r+0x17e>
    56ba:	ab03      	add	r3, sp, #12
    56bc:	9300      	str	r3, [sp, #0]
    56be:	462a      	mov	r2, r5
    56c0:	4b10      	ldr	r3, [pc, #64]	; (5704 <_svfiprintf_r+0x1e4>)
    56c2:	a904      	add	r1, sp, #16
    56c4:	4640      	mov	r0, r8
    56c6:	f3af 8000 	nop.w
    56ca:	f1b0 3fff 	cmp.w	r0, #4294967295
    56ce:	4681      	mov	r9, r0
    56d0:	d1d9      	bne.n	5686 <_svfiprintf_r+0x166>
    56d2:	89ab      	ldrh	r3, [r5, #12]
    56d4:	065b      	lsls	r3, r3, #25
    56d6:	f53f af38 	bmi.w	554a <_svfiprintf_r+0x2a>
    56da:	9809      	ldr	r0, [sp, #36]	; 0x24
    56dc:	b01d      	add	sp, #116	; 0x74
    56de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56e2:	ab03      	add	r3, sp, #12
    56e4:	9300      	str	r3, [sp, #0]
    56e6:	462a      	mov	r2, r5
    56e8:	4b06      	ldr	r3, [pc, #24]	; (5704 <_svfiprintf_r+0x1e4>)
    56ea:	a904      	add	r1, sp, #16
    56ec:	4640      	mov	r0, r8
    56ee:	f000 f881 	bl	57f4 <_printf_i>
    56f2:	e7ea      	b.n	56ca <_svfiprintf_r+0x1aa>
    56f4:	00006ee8 	.word	0x00006ee8
    56f8:	00006eee 	.word	0x00006eee
    56fc:	00006ef2 	.word	0x00006ef2
    5700:	00000000 	.word	0x00000000
    5704:	0000546b 	.word	0x0000546b

00005708 <_printf_common>:
    5708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    570c:	4691      	mov	r9, r2
    570e:	461f      	mov	r7, r3
    5710:	688a      	ldr	r2, [r1, #8]
    5712:	690b      	ldr	r3, [r1, #16]
    5714:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5718:	4293      	cmp	r3, r2
    571a:	bfb8      	it	lt
    571c:	4613      	movlt	r3, r2
    571e:	f8c9 3000 	str.w	r3, [r9]
    5722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5726:	4606      	mov	r6, r0
    5728:	460c      	mov	r4, r1
    572a:	b112      	cbz	r2, 5732 <_printf_common+0x2a>
    572c:	3301      	adds	r3, #1
    572e:	f8c9 3000 	str.w	r3, [r9]
    5732:	6823      	ldr	r3, [r4, #0]
    5734:	0699      	lsls	r1, r3, #26
    5736:	bf42      	ittt	mi
    5738:	f8d9 3000 	ldrmi.w	r3, [r9]
    573c:	3302      	addmi	r3, #2
    573e:	f8c9 3000 	strmi.w	r3, [r9]
    5742:	6825      	ldr	r5, [r4, #0]
    5744:	f015 0506 	ands.w	r5, r5, #6
    5748:	d107      	bne.n	575a <_printf_common+0x52>
    574a:	f104 0a19 	add.w	sl, r4, #25
    574e:	68e3      	ldr	r3, [r4, #12]
    5750:	f8d9 2000 	ldr.w	r2, [r9]
    5754:	1a9b      	subs	r3, r3, r2
    5756:	429d      	cmp	r5, r3
    5758:	db29      	blt.n	57ae <_printf_common+0xa6>
    575a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    575e:	6822      	ldr	r2, [r4, #0]
    5760:	3300      	adds	r3, #0
    5762:	bf18      	it	ne
    5764:	2301      	movne	r3, #1
    5766:	0692      	lsls	r2, r2, #26
    5768:	d42e      	bmi.n	57c8 <_printf_common+0xc0>
    576a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    576e:	4639      	mov	r1, r7
    5770:	4630      	mov	r0, r6
    5772:	47c0      	blx	r8
    5774:	3001      	adds	r0, #1
    5776:	d021      	beq.n	57bc <_printf_common+0xb4>
    5778:	6823      	ldr	r3, [r4, #0]
    577a:	68e5      	ldr	r5, [r4, #12]
    577c:	f8d9 2000 	ldr.w	r2, [r9]
    5780:	f003 0306 	and.w	r3, r3, #6
    5784:	2b04      	cmp	r3, #4
    5786:	bf08      	it	eq
    5788:	1aad      	subeq	r5, r5, r2
    578a:	68a3      	ldr	r3, [r4, #8]
    578c:	6922      	ldr	r2, [r4, #16]
    578e:	bf0c      	ite	eq
    5790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5794:	2500      	movne	r5, #0
    5796:	4293      	cmp	r3, r2
    5798:	bfc4      	itt	gt
    579a:	1a9b      	subgt	r3, r3, r2
    579c:	18ed      	addgt	r5, r5, r3
    579e:	f04f 0900 	mov.w	r9, #0
    57a2:	341a      	adds	r4, #26
    57a4:	454d      	cmp	r5, r9
    57a6:	d11b      	bne.n	57e0 <_printf_common+0xd8>
    57a8:	2000      	movs	r0, #0
    57aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57ae:	2301      	movs	r3, #1
    57b0:	4652      	mov	r2, sl
    57b2:	4639      	mov	r1, r7
    57b4:	4630      	mov	r0, r6
    57b6:	47c0      	blx	r8
    57b8:	3001      	adds	r0, #1
    57ba:	d103      	bne.n	57c4 <_printf_common+0xbc>
    57bc:	f04f 30ff 	mov.w	r0, #4294967295
    57c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57c4:	3501      	adds	r5, #1
    57c6:	e7c2      	b.n	574e <_printf_common+0x46>
    57c8:	18e1      	adds	r1, r4, r3
    57ca:	1c5a      	adds	r2, r3, #1
    57cc:	2030      	movs	r0, #48	; 0x30
    57ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    57d2:	4422      	add	r2, r4
    57d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    57d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    57dc:	3302      	adds	r3, #2
    57de:	e7c4      	b.n	576a <_printf_common+0x62>
    57e0:	2301      	movs	r3, #1
    57e2:	4622      	mov	r2, r4
    57e4:	4639      	mov	r1, r7
    57e6:	4630      	mov	r0, r6
    57e8:	47c0      	blx	r8
    57ea:	3001      	adds	r0, #1
    57ec:	d0e6      	beq.n	57bc <_printf_common+0xb4>
    57ee:	f109 0901 	add.w	r9, r9, #1
    57f2:	e7d7      	b.n	57a4 <_printf_common+0x9c>

000057f4 <_printf_i>:
    57f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57f8:	4617      	mov	r7, r2
    57fa:	7e0a      	ldrb	r2, [r1, #24]
    57fc:	b085      	sub	sp, #20
    57fe:	2a6e      	cmp	r2, #110	; 0x6e
    5800:	4698      	mov	r8, r3
    5802:	4606      	mov	r6, r0
    5804:	460c      	mov	r4, r1
    5806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5808:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    580c:	f000 80bc 	beq.w	5988 <_printf_i+0x194>
    5810:	d81a      	bhi.n	5848 <_printf_i+0x54>
    5812:	2a63      	cmp	r2, #99	; 0x63
    5814:	d02e      	beq.n	5874 <_printf_i+0x80>
    5816:	d80a      	bhi.n	582e <_printf_i+0x3a>
    5818:	2a00      	cmp	r2, #0
    581a:	f000 80c8 	beq.w	59ae <_printf_i+0x1ba>
    581e:	2a58      	cmp	r2, #88	; 0x58
    5820:	f000 808a 	beq.w	5938 <_printf_i+0x144>
    5824:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5828:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    582c:	e02a      	b.n	5884 <_printf_i+0x90>
    582e:	2a64      	cmp	r2, #100	; 0x64
    5830:	d001      	beq.n	5836 <_printf_i+0x42>
    5832:	2a69      	cmp	r2, #105	; 0x69
    5834:	d1f6      	bne.n	5824 <_printf_i+0x30>
    5836:	6821      	ldr	r1, [r4, #0]
    5838:	681a      	ldr	r2, [r3, #0]
    583a:	f011 0f80 	tst.w	r1, #128	; 0x80
    583e:	d023      	beq.n	5888 <_printf_i+0x94>
    5840:	1d11      	adds	r1, r2, #4
    5842:	6019      	str	r1, [r3, #0]
    5844:	6813      	ldr	r3, [r2, #0]
    5846:	e027      	b.n	5898 <_printf_i+0xa4>
    5848:	2a73      	cmp	r2, #115	; 0x73
    584a:	f000 80b4 	beq.w	59b6 <_printf_i+0x1c2>
    584e:	d808      	bhi.n	5862 <_printf_i+0x6e>
    5850:	2a6f      	cmp	r2, #111	; 0x6f
    5852:	d02a      	beq.n	58aa <_printf_i+0xb6>
    5854:	2a70      	cmp	r2, #112	; 0x70
    5856:	d1e5      	bne.n	5824 <_printf_i+0x30>
    5858:	680a      	ldr	r2, [r1, #0]
    585a:	f042 0220 	orr.w	r2, r2, #32
    585e:	600a      	str	r2, [r1, #0]
    5860:	e003      	b.n	586a <_printf_i+0x76>
    5862:	2a75      	cmp	r2, #117	; 0x75
    5864:	d021      	beq.n	58aa <_printf_i+0xb6>
    5866:	2a78      	cmp	r2, #120	; 0x78
    5868:	d1dc      	bne.n	5824 <_printf_i+0x30>
    586a:	2278      	movs	r2, #120	; 0x78
    586c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5870:	496e      	ldr	r1, [pc, #440]	; (5a2c <_printf_i+0x238>)
    5872:	e064      	b.n	593e <_printf_i+0x14a>
    5874:	681a      	ldr	r2, [r3, #0]
    5876:	f101 0542 	add.w	r5, r1, #66	; 0x42
    587a:	1d11      	adds	r1, r2, #4
    587c:	6019      	str	r1, [r3, #0]
    587e:	6813      	ldr	r3, [r2, #0]
    5880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5884:	2301      	movs	r3, #1
    5886:	e0a3      	b.n	59d0 <_printf_i+0x1dc>
    5888:	f011 0f40 	tst.w	r1, #64	; 0x40
    588c:	f102 0104 	add.w	r1, r2, #4
    5890:	6019      	str	r1, [r3, #0]
    5892:	d0d7      	beq.n	5844 <_printf_i+0x50>
    5894:	f9b2 3000 	ldrsh.w	r3, [r2]
    5898:	2b00      	cmp	r3, #0
    589a:	da03      	bge.n	58a4 <_printf_i+0xb0>
    589c:	222d      	movs	r2, #45	; 0x2d
    589e:	425b      	negs	r3, r3
    58a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    58a4:	4962      	ldr	r1, [pc, #392]	; (5a30 <_printf_i+0x23c>)
    58a6:	220a      	movs	r2, #10
    58a8:	e017      	b.n	58da <_printf_i+0xe6>
    58aa:	6820      	ldr	r0, [r4, #0]
    58ac:	6819      	ldr	r1, [r3, #0]
    58ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    58b2:	d003      	beq.n	58bc <_printf_i+0xc8>
    58b4:	1d08      	adds	r0, r1, #4
    58b6:	6018      	str	r0, [r3, #0]
    58b8:	680b      	ldr	r3, [r1, #0]
    58ba:	e006      	b.n	58ca <_printf_i+0xd6>
    58bc:	f010 0f40 	tst.w	r0, #64	; 0x40
    58c0:	f101 0004 	add.w	r0, r1, #4
    58c4:	6018      	str	r0, [r3, #0]
    58c6:	d0f7      	beq.n	58b8 <_printf_i+0xc4>
    58c8:	880b      	ldrh	r3, [r1, #0]
    58ca:	4959      	ldr	r1, [pc, #356]	; (5a30 <_printf_i+0x23c>)
    58cc:	2a6f      	cmp	r2, #111	; 0x6f
    58ce:	bf14      	ite	ne
    58d0:	220a      	movne	r2, #10
    58d2:	2208      	moveq	r2, #8
    58d4:	2000      	movs	r0, #0
    58d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    58da:	6865      	ldr	r5, [r4, #4]
    58dc:	60a5      	str	r5, [r4, #8]
    58de:	2d00      	cmp	r5, #0
    58e0:	f2c0 809c 	blt.w	5a1c <_printf_i+0x228>
    58e4:	6820      	ldr	r0, [r4, #0]
    58e6:	f020 0004 	bic.w	r0, r0, #4
    58ea:	6020      	str	r0, [r4, #0]
    58ec:	2b00      	cmp	r3, #0
    58ee:	d13f      	bne.n	5970 <_printf_i+0x17c>
    58f0:	2d00      	cmp	r5, #0
    58f2:	f040 8095 	bne.w	5a20 <_printf_i+0x22c>
    58f6:	4675      	mov	r5, lr
    58f8:	2a08      	cmp	r2, #8
    58fa:	d10b      	bne.n	5914 <_printf_i+0x120>
    58fc:	6823      	ldr	r3, [r4, #0]
    58fe:	07da      	lsls	r2, r3, #31
    5900:	d508      	bpl.n	5914 <_printf_i+0x120>
    5902:	6923      	ldr	r3, [r4, #16]
    5904:	6862      	ldr	r2, [r4, #4]
    5906:	429a      	cmp	r2, r3
    5908:	bfde      	ittt	le
    590a:	2330      	movle	r3, #48	; 0x30
    590c:	f805 3c01 	strble.w	r3, [r5, #-1]
    5910:	f105 35ff 	addle.w	r5, r5, #4294967295
    5914:	ebae 0305 	sub.w	r3, lr, r5
    5918:	6123      	str	r3, [r4, #16]
    591a:	f8cd 8000 	str.w	r8, [sp]
    591e:	463b      	mov	r3, r7
    5920:	aa03      	add	r2, sp, #12
    5922:	4621      	mov	r1, r4
    5924:	4630      	mov	r0, r6
    5926:	f7ff feef 	bl	5708 <_printf_common>
    592a:	3001      	adds	r0, #1
    592c:	d155      	bne.n	59da <_printf_i+0x1e6>
    592e:	f04f 30ff 	mov.w	r0, #4294967295
    5932:	b005      	add	sp, #20
    5934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5938:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    593c:	493c      	ldr	r1, [pc, #240]	; (5a30 <_printf_i+0x23c>)
    593e:	6822      	ldr	r2, [r4, #0]
    5940:	6818      	ldr	r0, [r3, #0]
    5942:	f012 0f80 	tst.w	r2, #128	; 0x80
    5946:	f100 0504 	add.w	r5, r0, #4
    594a:	601d      	str	r5, [r3, #0]
    594c:	d001      	beq.n	5952 <_printf_i+0x15e>
    594e:	6803      	ldr	r3, [r0, #0]
    5950:	e002      	b.n	5958 <_printf_i+0x164>
    5952:	0655      	lsls	r5, r2, #25
    5954:	d5fb      	bpl.n	594e <_printf_i+0x15a>
    5956:	8803      	ldrh	r3, [r0, #0]
    5958:	07d0      	lsls	r0, r2, #31
    595a:	bf44      	itt	mi
    595c:	f042 0220 	orrmi.w	r2, r2, #32
    5960:	6022      	strmi	r2, [r4, #0]
    5962:	b91b      	cbnz	r3, 596c <_printf_i+0x178>
    5964:	6822      	ldr	r2, [r4, #0]
    5966:	f022 0220 	bic.w	r2, r2, #32
    596a:	6022      	str	r2, [r4, #0]
    596c:	2210      	movs	r2, #16
    596e:	e7b1      	b.n	58d4 <_printf_i+0xe0>
    5970:	4675      	mov	r5, lr
    5972:	fbb3 f0f2 	udiv	r0, r3, r2
    5976:	fb02 3310 	mls	r3, r2, r0, r3
    597a:	5ccb      	ldrb	r3, [r1, r3]
    597c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5980:	4603      	mov	r3, r0
    5982:	2800      	cmp	r0, #0
    5984:	d1f5      	bne.n	5972 <_printf_i+0x17e>
    5986:	e7b7      	b.n	58f8 <_printf_i+0x104>
    5988:	6808      	ldr	r0, [r1, #0]
    598a:	681a      	ldr	r2, [r3, #0]
    598c:	6949      	ldr	r1, [r1, #20]
    598e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5992:	d004      	beq.n	599e <_printf_i+0x1aa>
    5994:	1d10      	adds	r0, r2, #4
    5996:	6018      	str	r0, [r3, #0]
    5998:	6813      	ldr	r3, [r2, #0]
    599a:	6019      	str	r1, [r3, #0]
    599c:	e007      	b.n	59ae <_printf_i+0x1ba>
    599e:	f010 0f40 	tst.w	r0, #64	; 0x40
    59a2:	f102 0004 	add.w	r0, r2, #4
    59a6:	6018      	str	r0, [r3, #0]
    59a8:	6813      	ldr	r3, [r2, #0]
    59aa:	d0f6      	beq.n	599a <_printf_i+0x1a6>
    59ac:	8019      	strh	r1, [r3, #0]
    59ae:	2300      	movs	r3, #0
    59b0:	6123      	str	r3, [r4, #16]
    59b2:	4675      	mov	r5, lr
    59b4:	e7b1      	b.n	591a <_printf_i+0x126>
    59b6:	681a      	ldr	r2, [r3, #0]
    59b8:	1d11      	adds	r1, r2, #4
    59ba:	6019      	str	r1, [r3, #0]
    59bc:	6815      	ldr	r5, [r2, #0]
    59be:	6862      	ldr	r2, [r4, #4]
    59c0:	2100      	movs	r1, #0
    59c2:	4628      	mov	r0, r5
    59c4:	f000 f83c 	bl	5a40 <memchr>
    59c8:	b108      	cbz	r0, 59ce <_printf_i+0x1da>
    59ca:	1b40      	subs	r0, r0, r5
    59cc:	6060      	str	r0, [r4, #4]
    59ce:	6863      	ldr	r3, [r4, #4]
    59d0:	6123      	str	r3, [r4, #16]
    59d2:	2300      	movs	r3, #0
    59d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    59d8:	e79f      	b.n	591a <_printf_i+0x126>
    59da:	6923      	ldr	r3, [r4, #16]
    59dc:	462a      	mov	r2, r5
    59de:	4639      	mov	r1, r7
    59e0:	4630      	mov	r0, r6
    59e2:	47c0      	blx	r8
    59e4:	3001      	adds	r0, #1
    59e6:	d0a2      	beq.n	592e <_printf_i+0x13a>
    59e8:	6823      	ldr	r3, [r4, #0]
    59ea:	079b      	lsls	r3, r3, #30
    59ec:	d507      	bpl.n	59fe <_printf_i+0x20a>
    59ee:	2500      	movs	r5, #0
    59f0:	f104 0919 	add.w	r9, r4, #25
    59f4:	68e3      	ldr	r3, [r4, #12]
    59f6:	9a03      	ldr	r2, [sp, #12]
    59f8:	1a9b      	subs	r3, r3, r2
    59fa:	429d      	cmp	r5, r3
    59fc:	db05      	blt.n	5a0a <_printf_i+0x216>
    59fe:	68e0      	ldr	r0, [r4, #12]
    5a00:	9b03      	ldr	r3, [sp, #12]
    5a02:	4298      	cmp	r0, r3
    5a04:	bfb8      	it	lt
    5a06:	4618      	movlt	r0, r3
    5a08:	e793      	b.n	5932 <_printf_i+0x13e>
    5a0a:	2301      	movs	r3, #1
    5a0c:	464a      	mov	r2, r9
    5a0e:	4639      	mov	r1, r7
    5a10:	4630      	mov	r0, r6
    5a12:	47c0      	blx	r8
    5a14:	3001      	adds	r0, #1
    5a16:	d08a      	beq.n	592e <_printf_i+0x13a>
    5a18:	3501      	adds	r5, #1
    5a1a:	e7eb      	b.n	59f4 <_printf_i+0x200>
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d1a7      	bne.n	5970 <_printf_i+0x17c>
    5a20:	780b      	ldrb	r3, [r1, #0]
    5a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5a2a:	e765      	b.n	58f8 <_printf_i+0x104>
    5a2c:	00006f0a 	.word	0x00006f0a
    5a30:	00006ef9 	.word	0x00006ef9
	...

00005a40 <memchr>:
    5a40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5a44:	2a10      	cmp	r2, #16
    5a46:	db2b      	blt.n	5aa0 <memchr+0x60>
    5a48:	f010 0f07 	tst.w	r0, #7
    5a4c:	d008      	beq.n	5a60 <memchr+0x20>
    5a4e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5a52:	3a01      	subs	r2, #1
    5a54:	428b      	cmp	r3, r1
    5a56:	d02d      	beq.n	5ab4 <memchr+0x74>
    5a58:	f010 0f07 	tst.w	r0, #7
    5a5c:	b342      	cbz	r2, 5ab0 <memchr+0x70>
    5a5e:	d1f6      	bne.n	5a4e <memchr+0xe>
    5a60:	b4f0      	push	{r4, r5, r6, r7}
    5a62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5a66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5a6a:	f022 0407 	bic.w	r4, r2, #7
    5a6e:	f07f 0700 	mvns.w	r7, #0
    5a72:	2300      	movs	r3, #0
    5a74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5a78:	3c08      	subs	r4, #8
    5a7a:	ea85 0501 	eor.w	r5, r5, r1
    5a7e:	ea86 0601 	eor.w	r6, r6, r1
    5a82:	fa85 f547 	uadd8	r5, r5, r7
    5a86:	faa3 f587 	sel	r5, r3, r7
    5a8a:	fa86 f647 	uadd8	r6, r6, r7
    5a8e:	faa5 f687 	sel	r6, r5, r7
    5a92:	b98e      	cbnz	r6, 5ab8 <memchr+0x78>
    5a94:	d1ee      	bne.n	5a74 <memchr+0x34>
    5a96:	bcf0      	pop	{r4, r5, r6, r7}
    5a98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5a9c:	f002 0207 	and.w	r2, r2, #7
    5aa0:	b132      	cbz	r2, 5ab0 <memchr+0x70>
    5aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
    5aa6:	3a01      	subs	r2, #1
    5aa8:	ea83 0301 	eor.w	r3, r3, r1
    5aac:	b113      	cbz	r3, 5ab4 <memchr+0x74>
    5aae:	d1f8      	bne.n	5aa2 <memchr+0x62>
    5ab0:	2000      	movs	r0, #0
    5ab2:	4770      	bx	lr
    5ab4:	3801      	subs	r0, #1
    5ab6:	4770      	bx	lr
    5ab8:	2d00      	cmp	r5, #0
    5aba:	bf06      	itte	eq
    5abc:	4635      	moveq	r5, r6
    5abe:	3803      	subeq	r0, #3
    5ac0:	3807      	subne	r0, #7
    5ac2:	f015 0f01 	tst.w	r5, #1
    5ac6:	d107      	bne.n	5ad8 <memchr+0x98>
    5ac8:	3001      	adds	r0, #1
    5aca:	f415 7f80 	tst.w	r5, #256	; 0x100
    5ace:	bf02      	ittt	eq
    5ad0:	3001      	addeq	r0, #1
    5ad2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5ad6:	3001      	addeq	r0, #1
    5ad8:	bcf0      	pop	{r4, r5, r6, r7}
    5ada:	3801      	subs	r0, #1
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop

00005ae0 <_realloc_r>:
    5ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ae2:	4607      	mov	r7, r0
    5ae4:	4614      	mov	r4, r2
    5ae6:	460e      	mov	r6, r1
    5ae8:	b921      	cbnz	r1, 5af4 <_realloc_r+0x14>
    5aea:	4611      	mov	r1, r2
    5aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5af0:	f7ff bbf0 	b.w	52d4 <_malloc_r>
    5af4:	b922      	cbnz	r2, 5b00 <_realloc_r+0x20>
    5af6:	f7ff fb9f 	bl	5238 <_free_r>
    5afa:	4625      	mov	r5, r4
    5afc:	4628      	mov	r0, r5
    5afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b00:	f000 f814 	bl	5b2c <_malloc_usable_size_r>
    5b04:	4284      	cmp	r4, r0
    5b06:	d90f      	bls.n	5b28 <_realloc_r+0x48>
    5b08:	4621      	mov	r1, r4
    5b0a:	4638      	mov	r0, r7
    5b0c:	f7ff fbe2 	bl	52d4 <_malloc_r>
    5b10:	4605      	mov	r5, r0
    5b12:	2800      	cmp	r0, #0
    5b14:	d0f2      	beq.n	5afc <_realloc_r+0x1c>
    5b16:	4631      	mov	r1, r6
    5b18:	4622      	mov	r2, r4
    5b1a:	f7ff fb60 	bl	51de <memcpy>
    5b1e:	4631      	mov	r1, r6
    5b20:	4638      	mov	r0, r7
    5b22:	f7ff fb89 	bl	5238 <_free_r>
    5b26:	e7e9      	b.n	5afc <_realloc_r+0x1c>
    5b28:	4635      	mov	r5, r6
    5b2a:	e7e7      	b.n	5afc <_realloc_r+0x1c>

00005b2c <_malloc_usable_size_r>:
    5b2c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5b30:	2800      	cmp	r0, #0
    5b32:	f1a0 0004 	sub.w	r0, r0, #4
    5b36:	bfbc      	itt	lt
    5b38:	580b      	ldrlt	r3, [r1, r0]
    5b3a:	18c0      	addlt	r0, r0, r3
    5b3c:	4770      	bx	lr
    5b3e:	0000      	movs	r0, r0
    5b40:	2a2a2a2a 	.word	0x2a2a2a2a
    5b44:	2a2a2a2a 	.word	0x2a2a2a2a
    5b48:	2a2a2a2a 	.word	0x2a2a2a2a
    5b4c:	2a2a2a2a 	.word	0x2a2a2a2a
    5b50:	2a2a2a2a 	.word	0x2a2a2a2a
    5b54:	2a2a2a2a 	.word	0x2a2a2a2a
    5b58:	2a2a2a2a 	.word	0x2a2a2a2a
    5b5c:	2a2a2a2a 	.word	0x2a2a2a2a
    5b60:	2a2a2a2a 	.word	0x2a2a2a2a
    5b64:	2a2a2a2a 	.word	0x2a2a2a2a
    5b68:	2a2a2a2a 	.word	0x2a2a2a2a
    5b6c:	2a2a2a2a 	.word	0x2a2a2a2a
    5b70:	2a2a2a2a 	.word	0x2a2a2a2a
    5b74:	2a2a2a2a 	.word	0x2a2a2a2a
    5b78:	00002a2a 	.word	0x00002a2a
    5b7c:	2a2a2a2a 	.word	0x2a2a2a2a
    5b80:	2a2a2a2a 	.word	0x2a2a2a2a
    5b84:	2a2a2a2a 	.word	0x2a2a2a2a
    5b88:	532a2a2a 	.word	0x532a2a2a
    5b8c:	4b434154 	.word	0x4b434154
    5b90:	45564f20 	.word	0x45564f20
    5b94:	4f4c4652 	.word	0x4f4c4652
    5b98:	45442057 	.word	0x45442057
    5b9c:	54434554 	.word	0x54434554
    5ba0:	2a2a4445 	.word	0x2a2a4445
    5ba4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ba8:	2a2a2a2a 	.word	0x2a2a2a2a
    5bac:	2a2a2a2a 	.word	0x2a2a2a2a
    5bb0:	2a2a2a2a 	.word	0x2a2a2a2a
    5bb4:	00002a2a 	.word	0x00002a2a
    5bb8:	73615420 	.word	0x73615420
    5bbc:	6148206b 	.word	0x6148206b
    5bc0:	656c646e 	.word	0x656c646e
    5bc4:	25202d20 	.word	0x25202d20
    5bc8:	23232064 	.word	0x23232064
    5bcc:	61542023 	.word	0x61542023
    5bd0:	4e206b73 	.word	0x4e206b73
    5bd4:	20656d61 	.word	0x20656d61
    5bd8:	7325202d 	.word	0x7325202d
    5bdc:	00000000 	.word	0x00000000
    5be0:	6e6e7552 	.word	0x6e6e7552
    5be4:	20676e69 	.word	0x20676e69
    5be8:	70736944 	.word	0x70736944
    5bec:	68637461 	.word	0x68637461
    5bf0:	73615420 	.word	0x73615420
    5bf4:	7573206b 	.word	0x7573206b
    5bf8:	73656363 	.word	0x73656363
    5bfc:	6c756673 	.word	0x6c756673
    5c00:	0000796c 	.word	0x0000796c

00005c04 <ModemCmdData>:
    5c04:	00000000 000061a4 00020003 00000b85     .....a..........
    5c14:	00000009 00000001 000061a8 000f0008     .........a......
    5c24:	00000bb1 0000001b 00000002 000061b4     .............a..
    5c34:	0003000c 00000bad 00000013 00000003     ................
    5c44:	000061c4 000c0008 00000bad 00000018     .a..............
    5c54:	00000004 000061d0 00080005 00000bad     .....a..........
    5c64:	00000011 00000005 000061dc 000b000a     .........a......
    5c74:	00000bad 00000019 00000006 000061e8     .............a..
    5c84:	0015000a 00000bad 00000023 00000007     ........#.......
    5c94:	000061f4 00020005 00000bad 0000000b     .a..............
    5ca4:	00000008 000061fc 000c0027 00000cd9     .....a..'.......
    5cb4:	00000037 00000009 00006224 00020012     7.......$b......
    5cc4:	00000bd9 00000018 0000000a 00006238     ............8b..
    5cd4:	00020012 00000bd9 00000018 0000000b     ................
    5ce4:	0000624c 00020012 00000bd9 00000018     Lb..............
    5cf4:	0000000c 00006260 00020012 00000bd9     ....`b..........
    5d04:	00000018 0000000d 00006274 00020012     ........tb......
    5d14:	00000bd9 00000018 0000000e 00006288     .............b..
    5d24:	00020012 00000bd9 00000018 0000000f     ................
    5d34:	0000629c 00020012 00000bd9 00000018     .b..............
    5d44:	00000010 000062b0 00020012 00000bd9     .....b..........
    5d54:	00000018 00000011 000062c4 00020012     .........b......
    5d64:	00000bd9 00000018 00000012 000062d8     .............b..
    5d74:	00020013 00000bd9 00000019 00000013     ................
    5d84:	000062ec 0002001f 00000c55 00000025     .b......U...%...
    5d94:	00000014 0000630c 00020023 00000c81     .....c..#.......
    5da4:	00000029 00000015 00006330 0002001a     ).......0c......
    5db4:	00000cad 00000020 00000016 20000000     .... .......... 
    5dc4:	00070011 00000d15 0000001c 00000017     ................
    5dd4:	200001ac 00bf003a 00000da1 000000fd     ... :...........
    5de4:	00000018 0000634c 00020010 00000da1     ....Lc..........
    5df4:	00000016 00000019 00006360 00020010     ........`c......
    5e04:	00000bad 00000016 0000001a 00006374     ............tc..
    5e14:	0002000b 00000bad 00000011 0000001b     ................
    5e24:	000061a0 00000000 00000bad 00000000     .a..............
	...
    60b4:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    60c4:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    60d4:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    60e4:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    60f4:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    6104:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    6114:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    6124:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    6134:	73736553 206e6f69 76204449 65756c61     Session ID value
    6144:	63786520 73646565 65687420 78616d20      exceeds the max
    6154:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    6164:	52454441 72745320 20676e69 00207369     ADER String is .
    6174:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    6184:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    6194:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    61a4:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    61b4:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    61c4:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    61d4:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    61e4:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    61f4:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    6204:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    6214:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    6224:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    6234:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6244:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    6254:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    6264:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    6274:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    6284:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6294:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    62a4:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    62b4:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    62c4:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    62d4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    62e4:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    62f4:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    6304:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    6314:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    6324:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    6334:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    6344:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    6354:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    6364:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    6374:	432b5441 54544147 000d303d 65707845     AT+CGATT=0..Expe
    6384:	64657463 646f6d20 72206d65 6f707365     cted modem respo
    6394:	2065736e 6e207369 7220746f 69656365     nse is not recei
    63a4:	00646576 52206f4e 6f707365 2065736e     ved.No Response 
    63b4:	6d6f7266 62655720 76655320 2e2e7265     from Web Sever..
    63c4:	6f502e2e 6e697473 61642067 74206174     ..Posting data t
    63d4:	6573206f 20726576 66207369 656c6961     o sever is faile
    63e4:	00000064 66726550 696d726f 7420676e     d...Performing t
    63f4:	45206568 726f7272 63655220 7265766f     he Error Recover
    6404:	72502079 6465636f 73657275 00002e2e     y Procedures....
    6414:	736f6c43 61206465 5220646e 65706f65     Closed and Reope
    6424:	2064656e 20656874 73736573 2e6e6f69     ned the session.
    6434:	2e2e2e2e 0000002e 6f747541 63657220     ........Auto rec
    6444:	7265766f 6f632079 656c706d 2e646574     overy completed.
    6454:	2e2e2e2e 0000002e 65636552 64657669     ........Received
    6464:	77656e20 73657220 736e6f70 72662065      new response fr
    6474:	73206d6f 65767265 2e2e2e72 00000a0d     om server.......
    6484:	65646f4d 6148206d 6465676e 6144202e     Modem Hanged. Da
    6494:	69206174 6f6e2073 72742074 6d736e61     ta is not transm
    64a4:	65747469 6f742064 72657320 00726576     itted to server.
    64b4:	66726550 696d726f 7420676e 61206568     Performing the a
    64c4:	206f7475 6f636572 79726576 00000000     uto recovery....
    64d4:	45444f4d 4144204d 55204154 20545241     MODEM DATA UART 
    64e4:	52455328 334d4f43 6e692029 61697469     (SERCOM3) initia
    64f4:	657a696c 00000064 6c696146 74206465     lized...Failed t
    6504:	6e69206f 61697469 657a696c 65687420     o initialize the
    6514:	444f4d20 44204d45 20415441 54524155      MODEM DATA UART
    6524:	00000000 746e6553 65687420 61694420     ....Sent the Dia
    6534:	61642067 74206174 7854206f 73615420     g data to Tx Tas
    6544:	0000006b 6c696146 74206465 6573206f     k...Failed to se
    6554:	7420746e 44206568 20676169 61746164     nt the Diag data
    6564:	206f7420 54207854 006b7361 6c756f43      to Tx Task.Coul
    6574:	74276e64 74626f20 206e6961 20656874     dn't obtain the 
    6584:	616d6573 726f6870 00000065 6e6e7552     semaphore...Runn
    6594:	20676e69 67616944 6f725020 73736563     ing Diag Process
    65a4:	73615420 7573206b 73656363 6c756673      Task successful
    65b4:	0000796c 6e6e7552 20676e69 65646f4d     ly..Running Mode
    65c4:	7250206d 7365636f 61542073 73206b73     m Process Task s
    65d4:	65636375 75667373 00796c6c 41206e49     uccessfully.In A
    65e4:	61682054 656c646e 000a0d72 43206e49     T handler...In C
    65f4:	204e5347 646e6168 0d72656c 0000000a     GSN handler.....
    6604:	6c430a0d 6465736f 206e6120 69746361     ..Closed an acti
    6614:	63206576 656e6e6f 6f697463 0000006e     ve connection...
    6624:	72656854 73692065 206f6e20 6e6e6f63     There is no conn
    6634:	69746365 65206e6f 62617473 6873696c     ection establish
    6644:	77206465 20687469 73696874 73657320     ed with this ses
    6654:	6e6f6973 2e444920 00002e2e 63656843     sion ID.....Chec
    6664:	676e696b 726f6620 206e6120 69746361     king for an acti
    6674:	63206576 656e6e6f 6f697463 6977206e     ve connection wi
    6684:	6e206874 20747865 73736573 206e6f69     th next session 
    6694:	2e2e4449 00000a2e 4b206e49 54544150     ID......In KPATT
    66a4:	204e5245 646e6168 0072656c 4b206e49     ERN handler.In K
    66b4:	43584e43 68204746 6c646e61 00007265     CNXCFG handler..
    66c4:	4b206e49 54584e43 52454d49 6e616820     In KCNXTIMER han
    66d4:	72656c64 00000000 4b206e49 50545448     dler....In KHTTP
    66e4:	20474643 646e6168 0072656c 4b206e49     CFG handler.In K
    66f4:	50545448 41454820 20524544 646e6168     HTTP HEADER hand
    6704:	0072656c 4e4e4f43 00544345 64616548     ler.CONNECT.Head
    6714:	52207265 6f707365 2065736e 00006b4f     er Response Ok..
    6724:	64616548 52207265 6f707365 2065736e     Header Response 
    6734:	20746f4e 00006b4f 000a0a0d 54206e49     Not Ok......In T
    6744:	494d5245 4554414e 41454820 20524544     ERMINATE HEADER 
    6754:	646e6168 0072656c 6e6e7552 20676e69     handler.Running 
    6764:	65646f4d 7852206d 73615420 7573206b     Modem Rx Task su
    6774:	73656363 6c756673 0000796c 6e617254     ccessfully..Tran
    6784:	74696d73 20646574 6f632061 6e616d6d     smitted a comman
    6794:	6f742064 646f4d20 00006d65 6e6e7552     d to Modem..Runn
    67a4:	20676e69 65646f4d 7854206d 73615420     ing Modem Tx Tas
    67b4:	7573206b 73656363 6c756673 0000796c     k successfully..
    67c4:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    67d4:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    67e4:	0000000a 25207325 00000073 682f2e2e     ....%s %s...../h
    67f4:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
    6804:	682e7464 00000000 20544457 74696e49     dt.h....WDT Init
    6814:	696c6169 00646573 20544457 6c696146     ialised.WDT Fail
    6824:	74206465 6e69206f 61697469 657a696c     ed to initialize
    6834:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    6844:	615f6c61 79735f63 632e636e 00000000     al_ac_sync.c....
    6854:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    6864:	735f6364 2e636e79 00000063 682f2e2e     dc_sync.c...../h
    6874:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    6884:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    6894:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    68a4:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
    68b4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
    68c4:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    68d4:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    68e4:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    68f4:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    6904:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    6914:	00632e72 682f2e2e 612f6c70 70682f63     r.c.../hpl/ac/hp
    6924:	63615f6c 0000632e                       l_ac.c..

0000692c <_adcs>:
    692c:	00c00000 00830002 00001900 00000000     ................
    693c:	00000000 00010001 00000000 00000000     ................
	...
    6958:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    6968:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    6978:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00006988 <_cfgs>:
	...

00006a88 <user_mux_confs>:
	...

00006acc <channel_confs>:
	...

00006b0c <interrupt_cfg>:
	...
    6b8c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    6b9c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    6bac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    6bbc:	43000000 43000400                       ...C...C

00006bc4 <_usarts>:
    6bc4:	00000003 40200004 00030000 00700002     ...... @......p.
    6bd4:	0000f62b 00000000 00000004 40300184     +.............0@
    6be4:	00030300 00700002 0000ff2e 00000000     ......p.........
    6bf4:	00000005 40300004 00030000 00700002     ......0@......p.
    6c04:	0000f62b 00000000                       +.......

00006c0c <_i2cms>:
	...

00006c24 <sercomspi_regs>:
	...
    6c38:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    6c48:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    6c58:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00006c68 <_tccs>:
    6c68:	00000000 00000300 00000000 00000000     ................
    6c78:	00001770 00000000 00000000 00000000     p...............
    6c88:	00000000 00000001 00000300 00000000     ................
    6c98:	00000000 00001770 00000000 00000000     ....p...........
	...
    6cb0:	00000002 00000300 00000000 00000000     ................
    6cc0:	00001770 00000000 00000000 00000000     p...............
    6cd0:	00000000 00000003 00000300 00000000     ................
    6ce0:	00000000 00001770 00000000 00000000     ....p...........
	...
    6cf8:	00000004 00000300 00000000 00000000     ................
    6d08:	00001770 00000000 00000000 00000000     p...............
    6d18:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    6d28:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    6d38:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    6d48:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    6d58:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    6d68:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    6d78:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    6d88:	63206572 74616572 00006465 616d6553     re created..Sema
    6d98:	726f6870 61207365 63206572 74616572     phores are creat
    6da8:	00006465 70736944 68637461 6b736154     ed..DispatchTask
    6db8:	00000000 65646f4d 7361546d 0000006b     ....ModemTask...
    6dc8:	65646f4d 5478526d 006b7361 65646f4d     ModemRxTask.Mode
    6dd8:	6f72506d 73736563 6b736154 00000000     mProcessTask....
    6de8:	65646f4d 6169446d 73615467 0000006b     ModemDiagTask...
    6df8:	63637553 66737365 796c6c75 65724320     Successfully Cre
    6e08:	64657461 65687420 73615420 0000736b     ated the Tasks..
    6e18:	65657246 4f545220 63532053 75646568     Free RTOS Schedu
    6e28:	2072656c 20746f6e 72617473 00646574     ler not started.
    6e38:	6c696146 74206465 7263206f 65746165     Failed to create
    6e48:	73617420 0000736b 6f727245 53203a72      tasks..Error: S
    6e58:	64656863 72656c75 69786520 00646574     cheduler exited.
    6e68:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
    6e78:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.

00006e88 <__sf_fake_stderr>:
	...

00006ea8 <__sf_fake_stdin>:
	...

00006ec8 <__sf_fake_stdout>:
	...
    6ee8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6ef8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6f08:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6f18:	00006665                                ef..

00006f1c <_init>:
    6f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f1e:	bf00      	nop
    6f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f22:	bc08      	pop	{r3}
    6f24:	469e      	mov	lr, r3
    6f26:	4770      	bx	lr

00006f28 <__init_array_start>:
    6f28:	00000289 	.word	0x00000289

00006f2c <_fini>:
    6f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f2e:	bf00      	nop
    6f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f32:	bc08      	pop	{r3}
    6f34:	469e      	mov	lr, r3
    6f36:	4770      	bx	lr

00006f38 <__fini_array_start>:
    6f38:	00000265 	.word	0x00000265
