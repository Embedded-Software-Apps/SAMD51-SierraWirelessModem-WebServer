
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007948  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  00007948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003cd8  20000190  00007ae0  00020190  2**4
                  ALLOC
  5 .stack        00010000  20003e68  0000b7b8  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005b619  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000937a  00000000  00000000  0007b82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ab2b  00000000  00000000  00084ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b50  00000000  00000000  0009f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021e8  00000000  00000000  000a1221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b172  00000000  00000000  000a3409  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d874  00000000  00000000  000be57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010850e  00000000  00000000  000ebdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048d4  00000000  00000000  001f4300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 3e 01 20 69 17 00 00 65 17 00 00 65 17 00 00     h>. i...e...e...
      10:	65 17 00 00 65 17 00 00 65 17 00 00 00 00 00 00     e...e...e.......
	...
      2c:	21 3c 00 00 65 17 00 00 00 00 00 00 c1 3c 00 00     !<..e........<..
      3c:	25 3d 00 00 65 17 00 00 65 17 00 00 65 17 00 00     %=..e...e...e...
      4c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      5c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      6c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      7c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      8c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      9c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      ac:	65 17 00 00 65 17 00 00 f1 2a 00 00 05 2b 00 00     e...e....*...+..
      bc:	81 28 00 00 8d 28 00 00 99 28 00 00 a5 28 00 00     .(...(...(...(..
      cc:	b1 28 00 00 65 17 00 00 65 17 00 00 65 17 00 00     .(..e...e...e...
      dc:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      ec:	65 17 00 00 00 00 00 00 01 2c 00 00 65 17 00 00     e........,..e...
      fc:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     10c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     11c:	65 17 00 00 65 17 00 00 65 17 00 00 29 0d 00 00     e...e...e...)...
     12c:	35 0d 00 00 41 0d 00 00 65 17 00 00 65 17 00 00     5...A...e...e...
     13c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     14c:	65 17 00 00 4d 16 00 00 65 17 00 00 00 00 00 00     e...M...e.......
	...
     180:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     190:	00 00 00 00 a1 31 00 00 65 17 00 00 65 17 00 00     .....1..e...e...
     1a0:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     1b0:	b5 31 00 00 65 17 00 00 65 17 00 00 65 17 00 00     .1..e...e...e...
     1c0:	65 17 00 00 c9 31 00 00 65 17 00 00 65 17 00 00     e....1..e...e...
     1d0:	65 17 00 00 dd 31 00 00 65 17 00 00 65 17 00 00     e....1..e...e...
     1e0:	f1 31 00 00 65 17 00 00 65 17 00 00 e5 36 00 00     .1..e...e....6..
     1f0:	f9 36 00 00 0d 37 00 00 21 37 00 00 35 37 00 00     .6...7..!7..57..
     200:	49 37 00 00 00 00 00 00 00 00 00 00 65 17 00 00     I7..........e...
     210:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     220:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     230:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     240:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     250:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00007948 	.word	0x00007948

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00007948 	.word	0x00007948
     2c4:	20000194 	.word	0x20000194
     2c8:	00007948 	.word	0x00007948
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b500      	push	{lr}
     2d2:	b089      	sub	sp, #36	; 0x24
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0c      	ldr	r3, [pc, #48]	; (310 <vApplicationStackOverflowHook+0x40>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0c      	ldr	r5, [pc, #48]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0c      	ldr	r4, [pc, #48]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480c      	ldr	r0, [pc, #48]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480b      	ldr	r0, [pc, #44]	; (320 <vApplicationStackOverflowHook+0x50>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490b      	ldr	r1, [pc, #44]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0b      	ldr	r3, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <vApplicationStackOverflowHook+0x5c>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <vApplicationStackOverflowHook+0x60>)
     30a:	4798      	blx	r3
     30c:	e7fe      	b.n	30c <vApplicationStackOverflowHook+0x3c>
     30e:	bf00      	nop
     310:	00005b7d 	.word	0x00005b7d
     314:	00006460 	.word	0x00006460
     318:	00001601 	.word	0x00001601
     31c:	0000649c 	.word	0x0000649c
     320:	000071ec 	.word	0x000071ec
     324:	000064d8 	.word	0x000064d8
     328:	00005d05 	.word	0x00005d05
     32c:	00005d5d 	.word	0x00005d5d
     330:	000015bd 	.word	0x000015bd

00000334 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(700UL);
	const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);
	xLastWakeTime = xTaskGetTickCount();
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <DispatchTask+0x20>)
     33a:	4798      	blx	r3
     33c:	ac02      	add	r4, sp, #8
     33e:	f844 0d04 	str.w	r0, [r4, #-4]!

	while(1)
	{
		kickWatchDog();
     342:	4e05      	ldr	r6, [pc, #20]	; (358 <DispatchTask+0x24>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     344:	4d05      	ldr	r5, [pc, #20]	; (35c <DispatchTask+0x28>)
		kickWatchDog();
     346:	47b0      	blx	r6
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     348:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     34c:	4620      	mov	r0, r4
     34e:	47a8      	blx	r5
     350:	e7f9      	b.n	346 <DispatchTask+0x12>
     352:	bf00      	nop
     354:	00004d41 	.word	0x00004d41
     358:	00001739 	.word	0x00001739
     35c:	00004f81 	.word	0x00004f81

00000360 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     360:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     366:	460d      	mov	r5, r1
     368:	4c04      	ldr	r4, [pc, #16]	; (37c <getModemCommandData+0x1c>)
     36a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     36e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     372:	6823      	ldr	r3, [r4, #0]
     374:	602b      	str	r3, [r5, #0]
}
     376:	bc30      	pop	{r4, r5}
     378:	4770      	bx	lr
     37a:	bf00      	nop
     37c:	000064ec 	.word	0x000064ec

00000380 <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
     380:	7803      	ldrb	r3, [r0, #0]
     382:	3b31      	subs	r3, #49	; 0x31
     384:	2b08      	cmp	r3, #8
     386:	d83b      	bhi.n	400 <buildHttpHeaderWithActiveSessionID+0x80>
     388:	e8df f003 	tbb	[pc, r3]
     38c:	17110b05 	.word	0x17110b05
     390:	2f29231d 	.word	0x2f29231d
     394:	35          	.byte	0x35
     395:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     398:	2231      	movs	r2, #49	; 0x31
     39a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
     39c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3a0:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
     3a2:	4b18      	ldr	r3, [pc, #96]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3a4:	2232      	movs	r2, #50	; 0x32
     3a6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
     3a8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3ac:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
     3ae:	4b15      	ldr	r3, [pc, #84]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3b0:	2233      	movs	r2, #51	; 0x33
     3b2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
     3b4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3b8:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3bc:	2234      	movs	r2, #52	; 0x34
     3be:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
     3c0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3c4:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3c8:	2235      	movs	r2, #53	; 0x35
     3ca:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
     3cc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3d0:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3d4:	2236      	movs	r2, #54	; 0x36
     3d6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
     3d8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3dc:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
     3de:	4b09      	ldr	r3, [pc, #36]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3e0:	2237      	movs	r2, #55	; 0x37
     3e2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
     3e4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3e8:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3ec:	2238      	movs	r2, #56	; 0x38
     3ee:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
     3f0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3f4:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3f8:	2239      	movs	r2, #57	; 0x39
     3fa:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
     3fc:	f883 2020 	strb.w	r2, [r3, #32]
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	20000000 	.word	0x20000000

00000408 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     40c:	a901      	add	r1, sp, #4
     40e:	4b2e      	ldr	r3, [pc, #184]	; (4c8 <mdmParser_solicitedCmdParser+0xc0>)
     410:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     412:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     416:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     41a:	4b2c      	ldr	r3, [pc, #176]	; (4cc <mdmParser_solicitedCmdParser+0xc4>)
     41c:	4798      	blx	r3

	if(responseBuffer != NULL)
     41e:	2800      	cmp	r0, #0
     420:	d04d      	beq.n	4be <mdmParser_solicitedCmdParser+0xb6>
     422:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     424:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     428:	4b29      	ldr	r3, [pc, #164]	; (4d0 <mdmParser_solicitedCmdParser+0xc8>)
     42a:	4798      	blx	r3

		if(readStatus != false)
     42c:	4606      	mov	r6, r0
     42e:	2800      	cmp	r0, #0
     430:	d041      	beq.n	4b6 <mdmParser_solicitedCmdParser+0xae>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     432:	f89d 200c 	ldrb.w	r2, [sp, #12]
     436:	4621      	mov	r1, r4
     438:	9802      	ldr	r0, [sp, #8]
     43a:	4b26      	ldr	r3, [pc, #152]	; (4d4 <mdmParser_solicitedCmdParser+0xcc>)
     43c:	4798      	blx	r3
     43e:	bb70      	cbnz	r0, 49e <mdmParser_solicitedCmdParser+0x96>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     440:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     444:	3001      	adds	r0, #1
     446:	4b21      	ldr	r3, [pc, #132]	; (4cc <mdmParser_solicitedCmdParser+0xc4>)
     448:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     44a:	4605      	mov	r5, r0
     44c:	b310      	cbz	r0, 494 <mdmParser_solicitedCmdParser+0x8c>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     44e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     452:	b1eb      	cbz	r3, 490 <mdmParser_solicitedCmdParser+0x88>
     454:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     456:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     458:	b2c9      	uxtb	r1, r1
     45a:	18e2      	adds	r2, r4, r3
     45c:	5c52      	ldrb	r2, [r2, r1]
     45e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     460:	3301      	adds	r3, #1
     462:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     464:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     468:	429a      	cmp	r2, r3
     46a:	d8f6      	bhi.n	45a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     46c:	2200      	movs	r2, #0
     46e:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     470:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     474:	3201      	adds	r2, #1
     476:	b292      	uxth	r2, r2
     478:	4629      	mov	r1, r5
     47a:	f89d 0004 	ldrb.w	r0, [sp, #4]
     47e:	9b04      	ldr	r3, [sp, #16]
     480:	4798      	blx	r3
					DEBUG_PRINT("\r\n");
     482:	4815      	ldr	r0, [pc, #84]	; (4d8 <mdmParser_solicitedCmdParser+0xd0>)
     484:	4b15      	ldr	r3, [pc, #84]	; (4dc <mdmParser_solicitedCmdParser+0xd4>)
     486:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     488:	4628      	mov	r0, r5
     48a:	4b15      	ldr	r3, [pc, #84]	; (4e0 <mdmParser_solicitedCmdParser+0xd8>)
     48c:	4798      	blx	r3
     48e:	e00a      	b.n	4a6 <mdmParser_solicitedCmdParser+0x9e>
					while(parseCnt < cmdData.validDataCnt)
     490:	2300      	movs	r3, #0
     492:	e7eb      	b.n	46c <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     494:	4813      	ldr	r0, [pc, #76]	; (4e4 <mdmParser_solicitedCmdParser+0xdc>)
     496:	4b11      	ldr	r3, [pc, #68]	; (4dc <mdmParser_solicitedCmdParser+0xd4>)
     498:	4798      	blx	r3
	bool parseStatus = false;
     49a:	2600      	movs	r6, #0
     49c:	e003      	b.n	4a6 <mdmParser_solicitedCmdParser+0x9e>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     49e:	4812      	ldr	r0, [pc, #72]	; (4e8 <mdmParser_solicitedCmdParser+0xe0>)
     4a0:	4b0e      	ldr	r3, [pc, #56]	; (4dc <mdmParser_solicitedCmdParser+0xd4>)
     4a2:	4798      	blx	r3
				parseStatus = false;
     4a4:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     4a6:	4620      	mov	r0, r4
     4a8:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <mdmParser_solicitedCmdParser+0xd8>)
     4aa:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     4ac:	4b0f      	ldr	r3, [pc, #60]	; (4ec <mdmParser_solicitedCmdParser+0xe4>)
     4ae:	4798      	blx	r3

	return parseStatus;
}
     4b0:	4630      	mov	r0, r6
     4b2:	b007      	add	sp, #28
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     4b6:	480e      	ldr	r0, [pc, #56]	; (4f0 <mdmParser_solicitedCmdParser+0xe8>)
     4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <mdmParser_solicitedCmdParser+0xd4>)
     4ba:	4798      	blx	r3
     4bc:	e7f3      	b.n	4a6 <mdmParser_solicitedCmdParser+0x9e>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     4be:	480d      	ldr	r0, [pc, #52]	; (4f4 <mdmParser_solicitedCmdParser+0xec>)
     4c0:	4b06      	ldr	r3, [pc, #24]	; (4dc <mdmParser_solicitedCmdParser+0xd4>)
     4c2:	4798      	blx	r3
	bool parseStatus = false;
     4c4:	2600      	movs	r6, #0
     4c6:	e7f1      	b.n	4ac <mdmParser_solicitedCmdParser+0xa4>
     4c8:	00000361 	.word	0x00000361
     4cc:	00003ef5 	.word	0x00003ef5
     4d0:	00000e09 	.word	0x00000e09
     4d4:	00005d6d 	.word	0x00005d6d
     4d8:	000071ec 	.word	0x000071ec
     4dc:	00001601 	.word	0x00001601
     4e0:	00003fc9 	.word	0x00003fc9
     4e4:	00006b78 	.word	0x00006b78
     4e8:	00006bac 	.word	0x00006bac
     4ec:	00000e5d 	.word	0x00000e5d
     4f0:	00006be8 	.word	0x00006be8
     4f4:	00006c2c 	.word	0x00006c2c

000004f8 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4f8:	4b01      	ldr	r3, [pc, #4]	; (500 <mdmParser_SetLastCmdProcessed+0x8>)
     4fa:	7018      	strb	r0, [r3, #0]
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop
     500:	20000023 	.word	0x20000023

00000504 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     504:	4b01      	ldr	r3, [pc, #4]	; (50c <mdmParser_SetLastSentAtCommand+0x8>)
     506:	7018      	strb	r0, [r3, #0]
     508:	4770      	bx	lr
     50a:	bf00      	nop
     50c:	200001e8 	.word	0x200001e8

00000510 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     510:	4b01      	ldr	r3, [pc, #4]	; (518 <mdmParser_GetLastSentAtCommand+0x8>)
     512:	7818      	ldrb	r0, [r3, #0]
     514:	4770      	bx	lr
     516:	bf00      	nop
     518:	200001e8 	.word	0x200001e8

0000051c <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
	AT_CMD_TYPE sessionCloseCmd;

	switch(sessionID)
     51c:	3801      	subs	r0, #1
     51e:	2809      	cmp	r0, #9
     520:	d81a      	bhi.n	558 <getCloseActiveSessionCmd+0x3c>
     522:	e8df f000 	tbb	[pc, r0]
     526:	0705      	.short	0x0705
     528:	0f0d0b09 	.word	0x0f0d0b09
     52c:	17151311 	.word	0x17151311
	{
		case 1:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     530:	200a      	movs	r0, #10
     532:	4770      	bx	lr
		}
		break;

		case 2:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     534:	200b      	movs	r0, #11
		}
		break;
     536:	4770      	bx	lr

		case 3:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     538:	200c      	movs	r0, #12
		}
		break;
     53a:	4770      	bx	lr

		case 4:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     53c:	200d      	movs	r0, #13
		}
		break;
     53e:	4770      	bx	lr

		case 5:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     540:	200e      	movs	r0, #14
		}
		break;
     542:	4770      	bx	lr

		case 6:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     544:	200f      	movs	r0, #15
		}
		break;
     546:	4770      	bx	lr

		case 7:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     548:	2010      	movs	r0, #16
		}
		break;
     54a:	4770      	bx	lr

		case 8:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     54c:	2011      	movs	r0, #17
		}
		break;
     54e:	4770      	bx	lr

		case 9:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     550:	2012      	movs	r0, #18
		}
		break;
     552:	4770      	bx	lr

		case 10:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     554:	2013      	movs	r0, #19
		}
		break;
     556:	4770      	bx	lr
	switch(sessionID)
     558:	2000      	movs	r0, #0
		default:
		break;
	}
	
	return sessionCloseCmd;
}
     55a:	4770      	bx	lr

0000055c <MdmConnect_HttpConnectionInit>:
	gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     55c:	4b06      	ldr	r3, [pc, #24]	; (578 <MdmConnect_HttpConnectionInit+0x1c>)
     55e:	2200      	movs	r2, #0
     560:	701a      	strb	r2, [r3, #0]
	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     562:	705a      	strb	r2, [r3, #1]
	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     564:	709a      	strb	r2, [r3, #2]
	sessionIdCount = 10;
     566:	210a      	movs	r1, #10
     568:	70d9      	strb	r1, [r3, #3]
	ConnectionResponse.atCmd = CMD_AT_MAX;
     56a:	711a      	strb	r2, [r3, #4]
	ConnectionResponse.length = 0;
     56c:	80da      	strh	r2, [r3, #6]
	ConnectionResponse.response = NULL;
     56e:	609a      	str	r2, [r3, #8]
	currentSessionId = '0';
     570:	2230      	movs	r2, #48	; 0x30
     572:	731a      	strb	r2, [r3, #12]
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	200001ec 	.word	0x200001ec

0000057c <MdmCnct_ConnectInProgressSubStateMachine>:
{
     57c:	b530      	push	{r4, r5, lr}
     57e:	b083      	sub	sp, #12
	switch (gHttpConnectionInProgressSubstate)
     580:	4b8e      	ldr	r3, [pc, #568]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     582:	785b      	ldrb	r3, [r3, #1]
     584:	2b05      	cmp	r3, #5
     586:	f200 80b4 	bhi.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
     58a:	e8df f013 	tbh	[pc, r3, lsl #1]
     58e:	0006      	.short	0x0006
     590:	014700ad 	.word	0x014700ad
     594:	021b01b1 	.word	0x021b01b1
     598:	02ad      	.short	0x02ad
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     59a:	4b88      	ldr	r3, [pc, #544]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     59c:	789b      	ldrb	r3, [r3, #2]
     59e:	2b00      	cmp	r3, #0
     5a0:	d15b      	bne.n	65a <MdmCnct_ConnectInProgressSubStateMachine+0xde>
        		if(sessionIdCount > 0)
     5a2:	4b86      	ldr	r3, [pc, #536]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     5a4:	78db      	ldrb	r3, [r3, #3]
     5a6:	2b00      	cmp	r3, #0
     5a8:	d050      	beq.n	64c <MdmCnct_ConnectInProgressSubStateMachine+0xd0>
        		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     5aa:	4b85      	ldr	r3, [pc, #532]	; (7c0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     5ac:	6818      	ldr	r0, [r3, #0]
     5ae:	4b85      	ldr	r3, [pc, #532]	; (7c4 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     5b0:	4798      	blx	r3
     5b2:	2800      	cmp	r0, #0
     5b4:	d146      	bne.n	644 <MdmCnct_ConnectInProgressSubStateMachine+0xc8>
        		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     5b6:	2100      	movs	r1, #0
     5b8:	4b83      	ldr	r3, [pc, #524]	; (7c8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     5ba:	6818      	ldr	r0, [r3, #0]
     5bc:	4b83      	ldr	r3, [pc, #524]	; (7cc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     5be:	4798      	blx	r3
     5c0:	2801      	cmp	r0, #1
     5c2:	d003      	beq.n	5cc <MdmCnct_ConnectInProgressSubStateMachine+0x50>
        		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     5c4:	4882      	ldr	r0, [pc, #520]	; (7d0 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     5c6:	4b83      	ldr	r3, [pc, #524]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     5c8:	4798      	blx	r3
     5ca:	e092      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     5cc:	2301      	movs	r3, #1
     5ce:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     5d2:	4b7a      	ldr	r3, [pc, #488]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     5d4:	78d8      	ldrb	r0, [r3, #3]
     5d6:	4b80      	ldr	r3, [pc, #512]	; (7d8 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     5d8:	4798      	blx	r3
     5da:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     5de:	2300      	movs	r3, #0
     5e0:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     5e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     5e6:	4669      	mov	r1, sp
     5e8:	4875      	ldr	r0, [pc, #468]	; (7c0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     5ea:	6800      	ldr	r0, [r0, #0]
     5ec:	4c7b      	ldr	r4, [pc, #492]	; (7dc <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     5ee:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     5f0:	2801      	cmp	r0, #1
     5f2:	d007      	beq.n	604 <MdmCnct_ConnectInProgressSubStateMachine+0x88>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     5f4:	487a      	ldr	r0, [pc, #488]	; (7e0 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     5f6:	4b77      	ldr	r3, [pc, #476]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     5f8:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     5fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     5fe:	4b79      	ldr	r3, [pc, #484]	; (7e4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     600:	4798      	blx	r3
     602:	e076      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     604:	2300      	movs	r3, #0
     606:	461a      	mov	r2, r3
     608:	4619      	mov	r1, r3
     60a:	486f      	ldr	r0, [pc, #444]	; (7c8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     60c:	6800      	ldr	r0, [r0, #0]
     60e:	47a0      	blx	r4
                                if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     610:	f04f 31ff 	mov.w	r1, #4294967295
     614:	4b74      	ldr	r3, [pc, #464]	; (7e8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     616:	6818      	ldr	r0, [r3, #0]
     618:	4b6c      	ldr	r3, [pc, #432]	; (7cc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     61a:	4798      	blx	r3
     61c:	2801      	cmp	r0, #1
     61e:	d007      	beq.n	630 <MdmCnct_ConnectInProgressSubStateMachine+0xb4>
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     620:	2201      	movs	r2, #1
     622:	4b66      	ldr	r3, [pc, #408]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     624:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     62a:	4b6e      	ldr	r3, [pc, #440]	; (7e4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     62c:	4798      	blx	r3
     62e:	e060      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                                	DEBUG_PRINT("Sent the Session Close request to Tx Task");
     630:	486e      	ldr	r0, [pc, #440]	; (7ec <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     632:	4b68      	ldr	r3, [pc, #416]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     634:	4798      	blx	r3
                                	xSemaphoreGive(DebugPrintMutex);
     636:	2300      	movs	r3, #0
     638:	461a      	mov	r2, r3
     63a:	4619      	mov	r1, r3
     63c:	486a      	ldr	r0, [pc, #424]	; (7e8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     63e:	6800      	ldr	r0, [r0, #0]
     640:	47a0      	blx	r4
     642:	e7ed      	b.n	620 <MdmCnct_ConnectInProgressSubStateMachine+0xa4>
        		    	DEBUG_PRINT("Transmit Queue is not empty");
     644:	486a      	ldr	r0, [pc, #424]	; (7f0 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     646:	4b63      	ldr	r3, [pc, #396]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     648:	4798      	blx	r3
     64a:	e052      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        			DEBUG_PRINT("No More Active Connections to close");
     64c:	4869      	ldr	r0, [pc, #420]	; (7f4 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     64e:	4b61      	ldr	r3, [pc, #388]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     650:	4798      	blx	r3
        			gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     652:	2201      	movs	r2, #1
     654:	4b59      	ldr	r3, [pc, #356]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     656:	705a      	strb	r2, [r3, #1]
     658:	e04b      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     65a:	2b01      	cmp	r3, #1
     65c:	d149      	bne.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     65e:	f44f 7296 	mov.w	r2, #300	; 0x12c
     662:	4965      	ldr	r1, [pc, #404]	; (7f8 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     664:	4b65      	ldr	r3, [pc, #404]	; (7fc <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
     666:	6818      	ldr	r0, [r3, #0]
     668:	4b65      	ldr	r3, [pc, #404]	; (800 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
     66a:	4798      	blx	r3
     66c:	2801      	cmp	r0, #1
     66e:	d140      	bne.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     670:	4b52      	ldr	r3, [pc, #328]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     672:	791c      	ldrb	r4, [r3, #4]
     674:	78d8      	ldrb	r0, [r3, #3]
     676:	4b58      	ldr	r3, [pc, #352]	; (7d8 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     678:	4798      	blx	r3
     67a:	4284      	cmp	r4, r0
     67c:	d009      	beq.n	692 <MdmCnct_ConnectInProgressSubStateMachine+0x116>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     67e:	4861      	ldr	r0, [pc, #388]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x288>)
     680:	4b54      	ldr	r3, [pc, #336]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     682:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     684:	4b4d      	ldr	r3, [pc, #308]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     686:	2200      	movs	r2, #0
     688:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     68a:	6898      	ldr	r0, [r3, #8]
     68c:	4b5e      	ldr	r3, [pc, #376]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x28c>)
     68e:	4798      	blx	r3
     690:	e02f      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
		        		if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     692:	f04f 31ff 	mov.w	r1, #4294967295
     696:	4b54      	ldr	r3, [pc, #336]	; (7e8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     698:	6818      	ldr	r0, [r3, #0]
     69a:	4b4c      	ldr	r3, [pc, #304]	; (7cc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     69c:	4798      	blx	r3
     69e:	2801      	cmp	r0, #1
     6a0:	d00a      	beq.n	6b8 <MdmCnct_ConnectInProgressSubStateMachine+0x13c>
		        		if(sessionIdCount > 0)
     6a2:	4b46      	ldr	r3, [pc, #280]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     6a4:	78db      	ldrb	r3, [r3, #3]
     6a6:	b993      	cbnz	r3, 6ce <MdmCnct_ConnectInProgressSubStateMachine+0x152>
			        		gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     6a8:	2201      	movs	r2, #1
     6aa:	4b44      	ldr	r3, [pc, #272]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     6ac:	705a      	strb	r2, [r3, #1]
		        		vPortFree(ConnectionResponse.response);
     6ae:	4b43      	ldr	r3, [pc, #268]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     6b0:	6898      	ldr	r0, [r3, #8]
     6b2:	4b55      	ldr	r3, [pc, #340]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x28c>)
     6b4:	4798      	blx	r3
     6b6:	e01c      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
			        		DEBUG_PRINT("Received a connection response in RX Mode");
     6b8:	4854      	ldr	r0, [pc, #336]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x290>)
     6ba:	4b46      	ldr	r3, [pc, #280]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     6bc:	4798      	blx	r3
			        		xSemaphoreGive(DebugPrintMutex);
     6be:	2300      	movs	r3, #0
     6c0:	461a      	mov	r2, r3
     6c2:	4619      	mov	r1, r3
     6c4:	4848      	ldr	r0, [pc, #288]	; (7e8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     6c6:	6800      	ldr	r0, [r0, #0]
     6c8:	4c44      	ldr	r4, [pc, #272]	; (7dc <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     6ca:	47a0      	blx	r4
     6cc:	e7e9      	b.n	6a2 <MdmCnct_ConnectInProgressSubStateMachine+0x126>
			        		sessionIdCount--;
     6ce:	4a3b      	ldr	r2, [pc, #236]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     6d0:	3b01      	subs	r3, #1
     6d2:	70d3      	strb	r3, [r2, #3]
			        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6d4:	2300      	movs	r3, #0
     6d6:	7093      	strb	r3, [r2, #2]
			        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     6d8:	88d1      	ldrh	r1, [r2, #6]
     6da:	6890      	ldr	r0, [r2, #8]
     6dc:	4c4c      	ldr	r4, [pc, #304]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x294>)
     6de:	47a0      	blx	r4
							SerialDebugPrint("\r\n",2);
     6e0:	2102      	movs	r1, #2
     6e2:	484c      	ldr	r0, [pc, #304]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x298>)
     6e4:	47a0      	blx	r4
     6e6:	e7e2      	b.n	6ae <MdmCnct_ConnectInProgressSubStateMachine+0x132>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     6e8:	4b34      	ldr	r3, [pc, #208]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     6ea:	789b      	ldrb	r3, [r3, #2]
     6ec:	b11b      	cbz	r3, 6f6 <MdmCnct_ConnectInProgressSubStateMachine+0x17a>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     6ee:	2b01      	cmp	r3, #1
     6f0:	d03d      	beq.n	76e <MdmCnct_ConnectInProgressSubStateMachine+0x1f2>
}
     6f2:	b003      	add	sp, #12
     6f4:	bd30      	pop	{r4, r5, pc}
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     6f6:	4b32      	ldr	r3, [pc, #200]	; (7c0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     6f8:	6818      	ldr	r0, [r3, #0]
     6fa:	4b32      	ldr	r3, [pc, #200]	; (7c4 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     6fc:	4798      	blx	r3
     6fe:	2800      	cmp	r0, #0
     700:	d131      	bne.n	766 <MdmCnct_ConnectInProgressSubStateMachine+0x1ea>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     702:	2100      	movs	r1, #0
     704:	4b30      	ldr	r3, [pc, #192]	; (7c8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     706:	6818      	ldr	r0, [r3, #0]
     708:	4b30      	ldr	r3, [pc, #192]	; (7cc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     70a:	4798      	blx	r3
     70c:	2801      	cmp	r0, #1
     70e:	d003      	beq.n	718 <MdmCnct_ConnectInProgressSubStateMachine+0x19c>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     710:	482f      	ldr	r0, [pc, #188]	; (7d0 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     712:	4b30      	ldr	r3, [pc, #192]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     714:	4798      	blx	r3
     716:	e7ec      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     718:	2301      	movs	r3, #1
     71a:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
     71e:	2314      	movs	r3, #20
     720:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     724:	2300      	movs	r3, #0
     726:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     728:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     72c:	4669      	mov	r1, sp
     72e:	4824      	ldr	r0, [pc, #144]	; (7c0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     730:	6800      	ldr	r0, [r0, #0]
     732:	4c2a      	ldr	r4, [pc, #168]	; (7dc <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     734:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     736:	2801      	cmp	r0, #1
     738:	d007      	beq.n	74a <MdmCnct_ConnectInProgressSubStateMachine+0x1ce>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
     73a:	4837      	ldr	r0, [pc, #220]	; (818 <MdmCnct_ConnectInProgressSubStateMachine+0x29c>)
     73c:	4b25      	ldr	r3, [pc, #148]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     73e:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     744:	4b27      	ldr	r3, [pc, #156]	; (7e4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     746:	4798      	blx	r3
     748:	e7d3      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     74a:	2300      	movs	r3, #0
     74c:	461a      	mov	r2, r3
     74e:	4619      	mov	r1, r3
     750:	481d      	ldr	r0, [pc, #116]	; (7c8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     752:	6800      	ldr	r0, [r0, #0]
     754:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     756:	2201      	movs	r2, #1
     758:	4b18      	ldr	r3, [pc, #96]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     75a:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     75c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     760:	4b20      	ldr	r3, [pc, #128]	; (7e4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     762:	4798      	blx	r3
     764:	e7c5      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     766:	4822      	ldr	r0, [pc, #136]	; (7f0 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     768:	4b1a      	ldr	r3, [pc, #104]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     76a:	4798      	blx	r3
     76c:	e7c1      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     76e:	f44f 7296 	mov.w	r2, #300	; 0x12c
     772:	4921      	ldr	r1, [pc, #132]	; (7f8 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     774:	4b21      	ldr	r3, [pc, #132]	; (7fc <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
     776:	6818      	ldr	r0, [r3, #0]
     778:	4b21      	ldr	r3, [pc, #132]	; (800 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
     77a:	4798      	blx	r3
     77c:	2801      	cmp	r0, #1
     77e:	d1b8      	bne.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
     780:	4b0e      	ldr	r3, [pc, #56]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     782:	791b      	ldrb	r3, [r3, #4]
     784:	2b14      	cmp	r3, #20
     786:	d009      	beq.n	79c <MdmCnct_ConnectInProgressSubStateMachine+0x220>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     788:	481e      	ldr	r0, [pc, #120]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x288>)
     78a:	4b12      	ldr	r3, [pc, #72]	; (7d4 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     78c:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     78e:	4b0b      	ldr	r3, [pc, #44]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     790:	2200      	movs	r2, #0
     792:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     794:	6898      	ldr	r0, [r3, #8]
     796:	4b1c      	ldr	r3, [pc, #112]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x28c>)
     798:	4798      	blx	r3
     79a:	e7aa      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     79c:	4c07      	ldr	r4, [pc, #28]	; (7bc <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     79e:	88e1      	ldrh	r1, [r4, #6]
     7a0:	68a0      	ldr	r0, [r4, #8]
     7a2:	4d1b      	ldr	r5, [pc, #108]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x294>)
     7a4:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     7a6:	2102      	movs	r1, #2
     7a8:	481a      	ldr	r0, [pc, #104]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x298>)
     7aa:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
     7ac:	2302      	movs	r3, #2
     7ae:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7b0:	2300      	movs	r3, #0
     7b2:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     7b4:	68a0      	ldr	r0, [r4, #8]
     7b6:	4b14      	ldr	r3, [pc, #80]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x28c>)
     7b8:	4798      	blx	r3
     7ba:	e79a      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
     7bc:	200001ec 	.word	0x200001ec
     7c0:	20003474 	.word	0x20003474
     7c4:	00004969 	.word	0x00004969
     7c8:	2000347c 	.word	0x2000347c
     7cc:	00004789 	.word	0x00004789
     7d0:	00006cc4 	.word	0x00006cc4
     7d4:	00001601 	.word	0x00001601
     7d8:	0000051d 	.word	0x0000051d
     7dc:	000042f1 	.word	0x000042f1
     7e0:	00006c90 	.word	0x00006c90
     7e4:	0000502d 	.word	0x0000502d
     7e8:	20003478 	.word	0x20003478
     7ec:	00006c64 	.word	0x00006c64
     7f0:	00006cf0 	.word	0x00006cf0
     7f4:	00006d0c 	.word	0x00006d0c
     7f8:	200001f0 	.word	0x200001f0
     7fc:	20003450 	.word	0x20003450
     800:	00004601 	.word	0x00004601
     804:	00006d5c 	.word	0x00006d5c
     808:	00003fc9 	.word	0x00003fc9
     80c:	00006d30 	.word	0x00006d30
     810:	000015bd 	.word	0x000015bd
     814:	000071ec 	.word	0x000071ec
     818:	00006d90 	.word	0x00006d90
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     81c:	4b96      	ldr	r3, [pc, #600]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     81e:	789b      	ldrb	r3, [r3, #2]
     820:	b1d3      	cbz	r3, 858 <MdmCnct_ConnectInProgressSubStateMachine+0x2dc>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     822:	2b01      	cmp	r3, #1
     824:	f47f af65 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     828:	f44f 7296 	mov.w	r2, #300	; 0x12c
     82c:	4993      	ldr	r1, [pc, #588]	; (a7c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     82e:	4b94      	ldr	r3, [pc, #592]	; (a80 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     830:	6818      	ldr	r0, [r3, #0]
     832:	4b94      	ldr	r3, [pc, #592]	; (a84 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     834:	4798      	blx	r3
     836:	2801      	cmp	r0, #1
     838:	f47f af5b 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
     83c:	4b8e      	ldr	r3, [pc, #568]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     83e:	791b      	ldrb	r3, [r3, #4]
     840:	2b15      	cmp	r3, #21
     842:	d045      	beq.n	8d0 <MdmCnct_ConnectInProgressSubStateMachine+0x354>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     844:	4890      	ldr	r0, [pc, #576]	; (a88 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     846:	4b91      	ldr	r3, [pc, #580]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     848:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     84a:	4b8b      	ldr	r3, [pc, #556]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     84c:	2200      	movs	r2, #0
     84e:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     850:	6898      	ldr	r0, [r3, #8]
     852:	4b8f      	ldr	r3, [pc, #572]	; (a90 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     854:	4798      	blx	r3
     856:	e74c      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     858:	4b8e      	ldr	r3, [pc, #568]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     85a:	6818      	ldr	r0, [r3, #0]
     85c:	4b8e      	ldr	r3, [pc, #568]	; (a98 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     85e:	4798      	blx	r3
     860:	2800      	cmp	r0, #0
     862:	d131      	bne.n	8c8 <MdmCnct_ConnectInProgressSubStateMachine+0x34c>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     864:	2100      	movs	r1, #0
     866:	4b8d      	ldr	r3, [pc, #564]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     868:	6818      	ldr	r0, [r3, #0]
     86a:	4b8d      	ldr	r3, [pc, #564]	; (aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     86c:	4798      	blx	r3
     86e:	2801      	cmp	r0, #1
     870:	d003      	beq.n	87a <MdmCnct_ConnectInProgressSubStateMachine+0x2fe>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     872:	488c      	ldr	r0, [pc, #560]	; (aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     874:	4b85      	ldr	r3, [pc, #532]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     876:	4798      	blx	r3
     878:	e73b      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     87a:	2301      	movs	r3, #1
     87c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
     880:	2315      	movs	r3, #21
     882:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     886:	2300      	movs	r3, #0
     888:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     88a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     88e:	4669      	mov	r1, sp
     890:	4880      	ldr	r0, [pc, #512]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     892:	6800      	ldr	r0, [r0, #0]
     894:	4c84      	ldr	r4, [pc, #528]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     896:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     898:	2801      	cmp	r0, #1
     89a:	d007      	beq.n	8ac <MdmCnct_ConnectInProgressSubStateMachine+0x330>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
     89c:	4883      	ldr	r0, [pc, #524]	; (aac <MdmCnct_ConnectInProgressSubStateMachine+0x530>)
     89e:	4b7b      	ldr	r3, [pc, #492]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     8a0:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     8a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8a6:	4b82      	ldr	r3, [pc, #520]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     8a8:	4798      	blx	r3
     8aa:	e722      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     8ac:	2300      	movs	r3, #0
     8ae:	461a      	mov	r2, r3
     8b0:	4619      	mov	r1, r3
     8b2:	487a      	ldr	r0, [pc, #488]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     8b4:	6800      	ldr	r0, [r0, #0]
     8b6:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     8b8:	2201      	movs	r2, #1
     8ba:	4b6f      	ldr	r3, [pc, #444]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     8bc:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     8be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8c2:	4b7b      	ldr	r3, [pc, #492]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     8c4:	4798      	blx	r3
     8c6:	e714      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     8c8:	487a      	ldr	r0, [pc, #488]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x538>)
     8ca:	4b70      	ldr	r3, [pc, #448]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     8cc:	4798      	blx	r3
     8ce:	e710      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     8d0:	4c69      	ldr	r4, [pc, #420]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     8d2:	88e1      	ldrh	r1, [r4, #6]
     8d4:	68a0      	ldr	r0, [r4, #8]
     8d6:	4d78      	ldr	r5, [pc, #480]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x53c>)
     8d8:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     8da:	2102      	movs	r1, #2
     8dc:	4877      	ldr	r0, [pc, #476]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x540>)
     8de:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
     8e0:	2303      	movs	r3, #3
     8e2:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     8e4:	2300      	movs	r3, #0
     8e6:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     8e8:	68a0      	ldr	r0, [r4, #8]
     8ea:	4b69      	ldr	r3, [pc, #420]	; (a90 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     8ec:	4798      	blx	r3
     8ee:	e700      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     8f0:	4b61      	ldr	r3, [pc, #388]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     8f2:	789b      	ldrb	r3, [r3, #2]
     8f4:	b1d3      	cbz	r3, 92c <MdmCnct_ConnectInProgressSubStateMachine+0x3b0>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     8f6:	2b01      	cmp	r3, #1
     8f8:	f47f aefb 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     8fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
     900:	495e      	ldr	r1, [pc, #376]	; (a7c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     902:	4b5f      	ldr	r3, [pc, #380]	; (a80 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     904:	6818      	ldr	r0, [r3, #0]
     906:	4b5f      	ldr	r3, [pc, #380]	; (a84 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     908:	4798      	blx	r3
     90a:	2801      	cmp	r0, #1
     90c:	f47f aef1 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
     910:	4b59      	ldr	r3, [pc, #356]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     912:	791b      	ldrb	r3, [r3, #4]
     914:	2b16      	cmp	r3, #22
     916:	d045      	beq.n	9a4 <MdmCnct_ConnectInProgressSubStateMachine+0x428>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     918:	485b      	ldr	r0, [pc, #364]	; (a88 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     91a:	4b5c      	ldr	r3, [pc, #368]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     91c:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     91e:	4b56      	ldr	r3, [pc, #344]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     920:	2200      	movs	r2, #0
     922:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     924:	6898      	ldr	r0, [r3, #8]
     926:	4b5a      	ldr	r3, [pc, #360]	; (a90 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     928:	4798      	blx	r3
     92a:	e6e2      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     92c:	4b59      	ldr	r3, [pc, #356]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     92e:	6818      	ldr	r0, [r3, #0]
     930:	4b59      	ldr	r3, [pc, #356]	; (a98 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     932:	4798      	blx	r3
     934:	2800      	cmp	r0, #0
     936:	d131      	bne.n	99c <MdmCnct_ConnectInProgressSubStateMachine+0x420>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     938:	2100      	movs	r1, #0
     93a:	4b58      	ldr	r3, [pc, #352]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     93c:	6818      	ldr	r0, [r3, #0]
     93e:	4b58      	ldr	r3, [pc, #352]	; (aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     940:	4798      	blx	r3
     942:	2801      	cmp	r0, #1
     944:	d003      	beq.n	94e <MdmCnct_ConnectInProgressSubStateMachine+0x3d2>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     946:	4857      	ldr	r0, [pc, #348]	; (aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     948:	4b50      	ldr	r3, [pc, #320]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     94a:	4798      	blx	r3
     94c:	e6d1      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     94e:	2301      	movs	r3, #1
     950:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
     954:	2316      	movs	r3, #22
     956:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     95a:	2300      	movs	r3, #0
     95c:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     95e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     962:	4669      	mov	r1, sp
     964:	484b      	ldr	r0, [pc, #300]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     966:	6800      	ldr	r0, [r0, #0]
     968:	4c4f      	ldr	r4, [pc, #316]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     96a:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     96c:	2801      	cmp	r0, #1
     96e:	d007      	beq.n	980 <MdmCnct_ConnectInProgressSubStateMachine+0x404>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     970:	4853      	ldr	r0, [pc, #332]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x544>)
     972:	4b46      	ldr	r3, [pc, #280]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     974:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     97a:	4b4d      	ldr	r3, [pc, #308]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     97c:	4798      	blx	r3
     97e:	e6b8      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     980:	2300      	movs	r3, #0
     982:	461a      	mov	r2, r3
     984:	4619      	mov	r1, r3
     986:	4845      	ldr	r0, [pc, #276]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     988:	6800      	ldr	r0, [r0, #0]
     98a:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     98c:	2201      	movs	r2, #1
     98e:	4b3a      	ldr	r3, [pc, #232]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     990:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     996:	4b46      	ldr	r3, [pc, #280]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     998:	4798      	blx	r3
     99a:	e6aa      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     99c:	4845      	ldr	r0, [pc, #276]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x538>)
     99e:	4b3b      	ldr	r3, [pc, #236]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     9a0:	4798      	blx	r3
     9a2:	e6a6      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     9a4:	4c34      	ldr	r4, [pc, #208]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     9a6:	88e1      	ldrh	r1, [r4, #6]
     9a8:	68a0      	ldr	r0, [r4, #8]
     9aa:	4d43      	ldr	r5, [pc, #268]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x53c>)
     9ac:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     9ae:	2102      	movs	r1, #2
     9b0:	4842      	ldr	r0, [pc, #264]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x540>)
     9b2:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
     9b4:	2304      	movs	r3, #4
     9b6:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     9b8:	2300      	movs	r3, #0
     9ba:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     9bc:	68a0      	ldr	r0, [r4, #8]
     9be:	4b34      	ldr	r3, [pc, #208]	; (a90 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     9c0:	4798      	blx	r3
     9c2:	e696      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     9c4:	4b2c      	ldr	r3, [pc, #176]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     9c6:	789b      	ldrb	r3, [r3, #2]
     9c8:	b1d3      	cbz	r3, a00 <MdmCnct_ConnectInProgressSubStateMachine+0x484>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     9ca:	2b01      	cmp	r3, #1
     9cc:	f47f ae91 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     9d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
     9d4:	4929      	ldr	r1, [pc, #164]	; (a7c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     9d6:	4b2a      	ldr	r3, [pc, #168]	; (a80 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     9d8:	6818      	ldr	r0, [r3, #0]
     9da:	4b2a      	ldr	r3, [pc, #168]	; (a84 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     9dc:	4798      	blx	r3
     9de:	2801      	cmp	r0, #1
     9e0:	f47f ae87 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
     9e4:	4b24      	ldr	r3, [pc, #144]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     9e6:	791b      	ldrb	r3, [r3, #4]
     9e8:	2b09      	cmp	r3, #9
     9ea:	d06b      	beq.n	ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x548>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     9ec:	4826      	ldr	r0, [pc, #152]	; (a88 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     9ee:	4b27      	ldr	r3, [pc, #156]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     9f0:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     9f2:	4b21      	ldr	r3, [pc, #132]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     9f4:	2200      	movs	r2, #0
     9f6:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     9f8:	6898      	ldr	r0, [r3, #8]
     9fa:	4b25      	ldr	r3, [pc, #148]	; (a90 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     9fc:	4798      	blx	r3
     9fe:	e678      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a00:	4b24      	ldr	r3, [pc, #144]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     a02:	6818      	ldr	r0, [r3, #0]
     a04:	4b24      	ldr	r3, [pc, #144]	; (a98 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     a06:	4798      	blx	r3
     a08:	2800      	cmp	r0, #0
     a0a:	d131      	bne.n	a70 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a0c:	2100      	movs	r1, #0
     a0e:	4b23      	ldr	r3, [pc, #140]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     a10:	6818      	ldr	r0, [r3, #0]
     a12:	4b23      	ldr	r3, [pc, #140]	; (aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     a14:	4798      	blx	r3
     a16:	2801      	cmp	r0, #1
     a18:	d003      	beq.n	a22 <MdmCnct_ConnectInProgressSubStateMachine+0x4a6>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a1a:	4822      	ldr	r0, [pc, #136]	; (aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     a1c:	4b1b      	ldr	r3, [pc, #108]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     a1e:	4798      	blx	r3
     a20:	e667      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     a22:	2301      	movs	r3, #1
     a24:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
     a28:	2309      	movs	r3, #9
     a2a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     a2e:	2300      	movs	r3, #0
     a30:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a36:	4669      	mov	r1, sp
     a38:	4816      	ldr	r0, [pc, #88]	; (a94 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     a3a:	6800      	ldr	r0, [r0, #0]
     a3c:	4c1a      	ldr	r4, [pc, #104]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     a3e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     a40:	2801      	cmp	r0, #1
     a42:	d007      	beq.n	a54 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     a44:	481e      	ldr	r0, [pc, #120]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x544>)
     a46:	4b11      	ldr	r3, [pc, #68]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     a48:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a4e:	4b18      	ldr	r3, [pc, #96]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     a50:	4798      	blx	r3
     a52:	e64e      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     a54:	2300      	movs	r3, #0
     a56:	461a      	mov	r2, r3
     a58:	4619      	mov	r1, r3
     a5a:	4810      	ldr	r0, [pc, #64]	; (a9c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     a5c:	6800      	ldr	r0, [r0, #0]
     a5e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     a60:	2201      	movs	r2, #1
     a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     a64:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a6a:	4b11      	ldr	r3, [pc, #68]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     a6c:	4798      	blx	r3
     a6e:	e640      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     a70:	4810      	ldr	r0, [pc, #64]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x538>)
     a72:	4b06      	ldr	r3, [pc, #24]	; (a8c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     a74:	4798      	blx	r3
     a76:	e63c      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
     a78:	200001ec 	.word	0x200001ec
     a7c:	200001f0 	.word	0x200001f0
     a80:	20003450 	.word	0x20003450
     a84:	00004601 	.word	0x00004601
     a88:	00006d5c 	.word	0x00006d5c
     a8c:	00001601 	.word	0x00001601
     a90:	00003fc9 	.word	0x00003fc9
     a94:	20003474 	.word	0x20003474
     a98:	00004969 	.word	0x00004969
     a9c:	2000347c 	.word	0x2000347c
     aa0:	00004789 	.word	0x00004789
     aa4:	00006cc4 	.word	0x00006cc4
     aa8:	000042f1 	.word	0x000042f1
     aac:	00006dbc 	.word	0x00006dbc
     ab0:	0000502d 	.word	0x0000502d
     ab4:	00006cf0 	.word	0x00006cf0
     ab8:	000015bd 	.word	0x000015bd
     abc:	000071ec 	.word	0x000071ec
     ac0:	00006de8 	.word	0x00006de8
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     ac4:	4c48      	ldr	r4, [pc, #288]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     ac6:	88e1      	ldrh	r1, [r4, #6]
     ac8:	68a0      	ldr	r0, [r4, #8]
     aca:	4d48      	ldr	r5, [pc, #288]	; (bec <MdmCnct_ConnectInProgressSubStateMachine+0x670>)
     acc:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     ace:	2102      	movs	r1, #2
     ad0:	4847      	ldr	r0, [pc, #284]	; (bf0 <MdmCnct_ConnectInProgressSubStateMachine+0x674>)
     ad2:	47a8      	blx	r5
						MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
     ad4:	68a0      	ldr	r0, [r4, #8]
	currentSessionId = cfgResponse[SESSION_ID_POSITION];
     ad6:	7ac3      	ldrb	r3, [r0, #11]
     ad8:	7323      	strb	r3, [r4, #12]
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
     ada:	2305      	movs	r3, #5
     adc:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     ade:	2300      	movs	r3, #0
     ae0:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     ae2:	4b44      	ldr	r3, [pc, #272]	; (bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x678>)
     ae4:	4798      	blx	r3
     ae6:	e604      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     ae8:	4b3f      	ldr	r3, [pc, #252]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     aea:	789b      	ldrb	r3, [r3, #2]
     aec:	b1d3      	cbz	r3, b24 <MdmCnct_ConnectInProgressSubStateMachine+0x5a8>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     aee:	2b01      	cmp	r3, #1
     af0:	f47f adff 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     af4:	f44f 7296 	mov.w	r2, #300	; 0x12c
     af8:	493f      	ldr	r1, [pc, #252]	; (bf8 <MdmCnct_ConnectInProgressSubStateMachine+0x67c>)
     afa:	4b40      	ldr	r3, [pc, #256]	; (bfc <MdmCnct_ConnectInProgressSubStateMachine+0x680>)
     afc:	6818      	ldr	r0, [r3, #0]
     afe:	4b40      	ldr	r3, [pc, #256]	; (c00 <MdmCnct_ConnectInProgressSubStateMachine+0x684>)
     b00:	4798      	blx	r3
     b02:	2801      	cmp	r0, #1
     b04:	f47f adf5 	bne.w	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
	        		if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
     b08:	4b37      	ldr	r3, [pc, #220]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     b0a:	791b      	ldrb	r3, [r3, #4]
     b0c:	2b17      	cmp	r3, #23
     b0e:	d048      	beq.n	ba2 <MdmCnct_ConnectInProgressSubStateMachine+0x626>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     b10:	483c      	ldr	r0, [pc, #240]	; (c04 <MdmCnct_ConnectInProgressSubStateMachine+0x688>)
     b12:	4b3d      	ldr	r3, [pc, #244]	; (c08 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     b14:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     b16:	4b34      	ldr	r3, [pc, #208]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     b18:	2200      	movs	r2, #0
     b1a:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     b1c:	6898      	ldr	r0, [r3, #8]
     b1e:	4b35      	ldr	r3, [pc, #212]	; (bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x678>)
     b20:	4798      	blx	r3
}
     b22:	e5e6      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
        		buildHttpHeaderWithActiveSessionID(&currentSessionId);
     b24:	4839      	ldr	r0, [pc, #228]	; (c0c <MdmCnct_ConnectInProgressSubStateMachine+0x690>)
     b26:	4b3a      	ldr	r3, [pc, #232]	; (c10 <MdmCnct_ConnectInProgressSubStateMachine+0x694>)
     b28:	4798      	blx	r3
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     b2a:	4b3a      	ldr	r3, [pc, #232]	; (c14 <MdmCnct_ConnectInProgressSubStateMachine+0x698>)
     b2c:	6818      	ldr	r0, [r3, #0]
     b2e:	4b3a      	ldr	r3, [pc, #232]	; (c18 <MdmCnct_ConnectInProgressSubStateMachine+0x69c>)
     b30:	4798      	blx	r3
     b32:	2800      	cmp	r0, #0
     b34:	d131      	bne.n	b9a <MdmCnct_ConnectInProgressSubStateMachine+0x61e>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     b36:	2100      	movs	r1, #0
     b38:	4b38      	ldr	r3, [pc, #224]	; (c1c <MdmCnct_ConnectInProgressSubStateMachine+0x6a0>)
     b3a:	6818      	ldr	r0, [r3, #0]
     b3c:	4b38      	ldr	r3, [pc, #224]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x6a4>)
     b3e:	4798      	blx	r3
     b40:	2801      	cmp	r0, #1
     b42:	d003      	beq.n	b4c <MdmCnct_ConnectInProgressSubStateMachine+0x5d0>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     b44:	4837      	ldr	r0, [pc, #220]	; (c24 <MdmCnct_ConnectInProgressSubStateMachine+0x6a8>)
     b46:	4b30      	ldr	r3, [pc, #192]	; (c08 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     b48:	4798      	blx	r3
     b4a:	e5d2      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     b4c:	2301      	movs	r3, #1
     b4e:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
     b52:	2317      	movs	r3, #23
     b54:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     b58:	2300      	movs	r3, #0
     b5a:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     b5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b60:	4669      	mov	r1, sp
     b62:	482c      	ldr	r0, [pc, #176]	; (c14 <MdmCnct_ConnectInProgressSubStateMachine+0x698>)
     b64:	6800      	ldr	r0, [r0, #0]
     b66:	4c30      	ldr	r4, [pc, #192]	; (c28 <MdmCnct_ConnectInProgressSubStateMachine+0x6ac>)
     b68:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     b6a:	2801      	cmp	r0, #1
     b6c:	d007      	beq.n	b7e <MdmCnct_ConnectInProgressSubStateMachine+0x602>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     b6e:	482f      	ldr	r0, [pc, #188]	; (c2c <MdmCnct_ConnectInProgressSubStateMachine+0x6b0>)
     b70:	4b25      	ldr	r3, [pc, #148]	; (c08 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     b72:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b78:	4b2d      	ldr	r3, [pc, #180]	; (c30 <MdmCnct_ConnectInProgressSubStateMachine+0x6b4>)
     b7a:	4798      	blx	r3
     b7c:	e5b9      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     b7e:	2300      	movs	r3, #0
     b80:	461a      	mov	r2, r3
     b82:	4619      	mov	r1, r3
     b84:	4825      	ldr	r0, [pc, #148]	; (c1c <MdmCnct_ConnectInProgressSubStateMachine+0x6a0>)
     b86:	6800      	ldr	r0, [r0, #0]
     b88:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     b8a:	2201      	movs	r2, #1
     b8c:	4b16      	ldr	r3, [pc, #88]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     b8e:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b94:	4b26      	ldr	r3, [pc, #152]	; (c30 <MdmCnct_ConnectInProgressSubStateMachine+0x6b4>)
     b96:	4798      	blx	r3
     b98:	e5ab      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     b9a:	4826      	ldr	r0, [pc, #152]	; (c34 <MdmCnct_ConnectInProgressSubStateMachine+0x6b8>)
     b9c:	4b1a      	ldr	r3, [pc, #104]	; (c08 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     b9e:	4798      	blx	r3
     ba0:	e5a7      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     ba2:	4c11      	ldr	r4, [pc, #68]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     ba4:	88e1      	ldrh	r1, [r4, #6]
     ba6:	68a0      	ldr	r0, [r4, #8]
     ba8:	4d10      	ldr	r5, [pc, #64]	; (bec <MdmCnct_ConnectInProgressSubStateMachine+0x670>)
     baa:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     bac:	2102      	movs	r1, #2
     bae:	4810      	ldr	r0, [pc, #64]	; (bf0 <MdmCnct_ConnectInProgressSubStateMachine+0x674>)
     bb0:	47a8      	blx	r5
    if(0==memcmp(response,"CONNECT",7))
     bb2:	2207      	movs	r2, #7
     bb4:	4920      	ldr	r1, [pc, #128]	; (c38 <MdmCnct_ConnectInProgressSubStateMachine+0x6bc>)
     bb6:	68a0      	ldr	r0, [r4, #8]
     bb8:	4b20      	ldr	r3, [pc, #128]	; (c3c <MdmCnct_ConnectInProgressSubStateMachine+0x6c0>)
     bba:	4798      	blx	r3
     bbc:	b138      	cbz	r0, bce <MdmCnct_ConnectInProgressSubStateMachine+0x652>
							gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bbe:	2200      	movs	r2, #0
     bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     bc2:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     bc4:	4b08      	ldr	r3, [pc, #32]	; (be8 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     bc6:	6898      	ldr	r0, [r3, #8]
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x678>)
     bca:	4798      	blx	r3
     bcc:	e591      	b.n	6f2 <MdmCnct_ConnectInProgressSubStateMachine+0x176>
    	mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     bce:	2110      	movs	r1, #16
     bd0:	481b      	ldr	r0, [pc, #108]	; (c40 <MdmCnct_ConnectInProgressSubStateMachine+0x6c4>)
     bd2:	4b1c      	ldr	r3, [pc, #112]	; (c44 <MdmCnct_ConnectInProgressSubStateMachine+0x6c8>)
     bd4:	4798      	blx	r3
    	mdmCtrlr_FlushRxBuffer();
     bd6:	4b1c      	ldr	r3, [pc, #112]	; (c48 <MdmCnct_ConnectInProgressSubStateMachine+0x6cc>)
     bd8:	4798      	blx	r3
							gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     bda:	2200      	movs	r2, #0
     bdc:	7062      	strb	r2, [r4, #1]
							gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bde:	70a2      	strb	r2, [r4, #2]
							gHttpConnectionState = MDM_HTTP_CONNECTED;
     be0:	2202      	movs	r2, #2
     be2:	7022      	strb	r2, [r4, #0]
     be4:	e7ee      	b.n	bc4 <MdmCnct_ConnectInProgressSubStateMachine+0x648>
     be6:	bf00      	nop
     be8:	200001ec 	.word	0x200001ec
     bec:	000015bd 	.word	0x000015bd
     bf0:	000071ec 	.word	0x000071ec
     bf4:	00003fc9 	.word	0x00003fc9
     bf8:	200001f0 	.word	0x200001f0
     bfc:	20003450 	.word	0x20003450
     c00:	00004601 	.word	0x00004601
     c04:	00006d5c 	.word	0x00006d5c
     c08:	00001601 	.word	0x00001601
     c0c:	200001f8 	.word	0x200001f8
     c10:	00000381 	.word	0x00000381
     c14:	20003474 	.word	0x20003474
     c18:	00004969 	.word	0x00004969
     c1c:	2000347c 	.word	0x2000347c
     c20:	00004789 	.word	0x00004789
     c24:	00006cc4 	.word	0x00006cc4
     c28:	000042f1 	.word	0x000042f1
     c2c:	00006de8 	.word	0x00006de8
     c30:	0000502d 	.word	0x0000502d
     c34:	00006cf0 	.word	0x00006cf0
     c38:	00006e18 	.word	0x00006e18
     c3c:	00005b15 	.word	0x00005b15
     c40:	00006b44 	.word	0x00006b44
     c44:	00000de1 	.word	0x00000de1
     c48:	00000e5d 	.word	0x00000e5d

00000c4c <MdmConnect_HttpConnectionSchedule>:
{
     c4c:	b508      	push	{r3, lr}
	switch (gHttpConnectionState)
     c4e:	4b0f      	ldr	r3, [pc, #60]	; (c8c <MdmConnect_HttpConnectionSchedule+0x40>)
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b01      	cmp	r3, #1
     c54:	d00d      	beq.n	c72 <MdmConnect_HttpConnectionSchedule+0x26>
     c56:	b113      	cbz	r3, c5e <MdmConnect_HttpConnectionSchedule+0x12>
     c58:	2b02      	cmp	r3, #2
     c5a:	d00d      	beq.n	c78 <MdmConnect_HttpConnectionSchedule+0x2c>
     c5c:	bd08      	pop	{r3, pc}
			if(isModemDiagDataBaseUpdated() != false)
     c5e:	4b0c      	ldr	r3, [pc, #48]	; (c90 <MdmConnect_HttpConnectionSchedule+0x44>)
     c60:	4798      	blx	r3
     c62:	b190      	cbz	r0, c8a <MdmConnect_HttpConnectionSchedule+0x3e>
	        	gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
     c64:	4b09      	ldr	r3, [pc, #36]	; (c8c <MdmConnect_HttpConnectionSchedule+0x40>)
     c66:	2201      	movs	r2, #1
     c68:	701a      	strb	r2, [r3, #0]
	        	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     c6a:	2200      	movs	r2, #0
     c6c:	705a      	strb	r2, [r3, #1]
	        	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     c6e:	709a      	strb	r2, [r3, #2]
     c70:	bd08      	pop	{r3, pc}
        	MdmCnct_ConnectInProgressSubStateMachine();
     c72:	4b08      	ldr	r3, [pc, #32]	; (c94 <MdmConnect_HttpConnectionSchedule+0x48>)
     c74:	4798      	blx	r3
        break;
     c76:	bd08      	pop	{r3, pc}
			mdmCtrlr_FlushRxBuffer();
     c78:	4b07      	ldr	r3, [pc, #28]	; (c98 <MdmConnect_HttpConnectionSchedule+0x4c>)
     c7a:	4798      	blx	r3
        	SerialDebugPrint("HTTP CONNECTED",14);
     c7c:	210e      	movs	r1, #14
     c7e:	4807      	ldr	r0, [pc, #28]	; (c9c <MdmConnect_HttpConnectionSchedule+0x50>)
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <MdmConnect_HttpConnectionSchedule+0x54>)
     c82:	4798      	blx	r3
        	gHttpConnectionState = MDM_HTTP_DISCONNECTION_IN_PROGRESS;
     c84:	2203      	movs	r2, #3
     c86:	4b01      	ldr	r3, [pc, #4]	; (c8c <MdmConnect_HttpConnectionSchedule+0x40>)
     c88:	701a      	strb	r2, [r3, #0]
     c8a:	bd08      	pop	{r3, pc}
     c8c:	200001ec 	.word	0x200001ec
     c90:	00001115 	.word	0x00001115
     c94:	0000057d 	.word	0x0000057d
     c98:	00000e5d 	.word	0x00000e5d
     c9c:	00006e20 	.word	0x00006e20
     ca0:	000015bd 	.word	0x000015bd

00000ca4 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     ca4:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     ca6:	4912      	ldr	r1, [pc, #72]	; (cf0 <mdmCtrlr_DataCommInit+0x4c>)
     ca8:	4812      	ldr	r0, [pc, #72]	; (cf4 <mdmCtrlr_DataCommInit+0x50>)
     caa:	4b13      	ldr	r3, [pc, #76]	; (cf8 <mdmCtrlr_DataCommInit+0x54>)
     cac:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     cae:	b118      	cbz	r0, cb8 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     cb0:	4812      	ldr	r0, [pc, #72]	; (cfc <mdmCtrlr_DataCommInit+0x58>)
     cb2:	4b13      	ldr	r3, [pc, #76]	; (d00 <mdmCtrlr_DataCommInit+0x5c>)
     cb4:	4798      	blx	r3
     cb6:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
     cbc:	4911      	ldr	r1, [pc, #68]	; (d04 <mdmCtrlr_DataCommInit+0x60>)
     cbe:	4812      	ldr	r0, [pc, #72]	; (d08 <mdmCtrlr_DataCommInit+0x64>)
     cc0:	4b12      	ldr	r3, [pc, #72]	; (d0c <mdmCtrlr_DataCommInit+0x68>)
     cc2:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     cc4:	2800      	cmp	r0, #0
     cc6:	d1f3      	bne.n	cb0 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     cc8:	4c0a      	ldr	r4, [pc, #40]	; (cf4 <mdmCtrlr_DataCommInit+0x50>)
     cca:	2201      	movs	r2, #1
     ccc:	4611      	mov	r1, r2
     cce:	4620      	mov	r0, r4
     cd0:	4b0f      	ldr	r3, [pc, #60]	; (d10 <mdmCtrlr_DataCommInit+0x6c>)
     cd2:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     cd4:	4620      	mov	r0, r4
     cd6:	4b0f      	ldr	r3, [pc, #60]	; (d14 <mdmCtrlr_DataCommInit+0x70>)
     cd8:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     cda:	480f      	ldr	r0, [pc, #60]	; (d18 <mdmCtrlr_DataCommInit+0x74>)
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <mdmCtrlr_DataCommInit+0x5c>)
     cde:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     ce0:	4b0e      	ldr	r3, [pc, #56]	; (d1c <mdmCtrlr_DataCommInit+0x78>)
     ce2:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     ce6:	0949      	lsrs	r1, r1, #5
     ce8:	480d      	ldr	r0, [pc, #52]	; (d20 <mdmCtrlr_DataCommInit+0x7c>)
     cea:	4b0e      	ldr	r3, [pc, #56]	; (d24 <mdmCtrlr_DataCommInit+0x80>)
     cec:	4798      	blx	r3
     cee:	bd10      	pop	{r4, pc}
     cf0:	41014000 	.word	0x41014000
     cf4:	20000024 	.word	0x20000024
     cf8:	00002d7d 	.word	0x00002d7d
     cfc:	00006e6c 	.word	0x00006e6c
     d00:	00001601 	.word	0x00001601
     d04:	20003488 	.word	0x20003488
     d08:	20003c88 	.word	0x20003c88
     d0c:	00002365 	.word	0x00002365
     d10:	00002e29 	.word	0x00002e29
     d14:	00002df1 	.word	0x00002df1
     d18:	00006e30 	.word	0x00006e30
     d1c:	e000e100 	.word	0xe000e100
     d20:	00006e58 	.word	0x00006e58
     d24:	00001605 	.word	0x00001605

00000d28 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     d28:	2201      	movs	r2, #1
     d2a:	4b01      	ldr	r3, [pc, #4]	; (d30 <SERCOM3_0_Handler+0x8>)
     d2c:	761a      	strb	r2, [r3, #24]
     d2e:	4770      	bx	lr
     d30:	41014000 	.word	0x41014000

00000d34 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     d34:	2202      	movs	r2, #2
     d36:	4b01      	ldr	r3, [pc, #4]	; (d3c <SERCOM3_1_Handler+0x8>)
     d38:	761a      	strb	r2, [r3, #24]
     d3a:	4770      	bx	lr
     d3c:	41014000 	.word	0x41014000

00000d40 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     d40:	b530      	push	{r4, r5, lr}
     d42:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     d44:	4d1a      	ldr	r5, [pc, #104]	; (db0 <SERCOM3_2_Handler+0x70>)
     d46:	4c1b      	ldr	r4, [pc, #108]	; (db4 <SERCOM3_2_Handler+0x74>)
     d48:	4628      	mov	r0, r5
     d4a:	47a0      	blx	r4
     d4c:	2800      	cmp	r0, #0
     d4e:	d0fb      	beq.n	d48 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     d50:	4817      	ldr	r0, [pc, #92]	; (db0 <SERCOM3_2_Handler+0x70>)
     d52:	4b19      	ldr	r3, [pc, #100]	; (db8 <SERCOM3_2_Handler+0x78>)
     d54:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     d56:	4601      	mov	r1, r0
     d58:	4818      	ldr	r0, [pc, #96]	; (dbc <SERCOM3_2_Handler+0x7c>)
     d5a:	4b19      	ldr	r3, [pc, #100]	; (dc0 <SERCOM3_2_Handler+0x80>)
     d5c:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     d5e:	4b19      	ldr	r3, [pc, #100]	; (dc4 <SERCOM3_2_Handler+0x84>)
     d60:	4798      	blx	r3
     d62:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     d64:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     d68:	d101      	bne.n	d6e <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     d6a:	b009      	add	sp, #36	; 0x24
     d6c:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     d6e:	a902      	add	r1, sp, #8
     d70:	4b15      	ldr	r3, [pc, #84]	; (dc8 <SERCOM3_2_Handler+0x88>)
     d72:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     d74:	4811      	ldr	r0, [pc, #68]	; (dbc <SERCOM3_2_Handler+0x7c>)
     d76:	4b15      	ldr	r3, [pc, #84]	; (dcc <SERCOM3_2_Handler+0x8c>)
     d78:	4798      	blx	r3
     d7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     d7e:	4298      	cmp	r0, r3
     d80:	d3f3      	bcc.n	d6a <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     d82:	4b13      	ldr	r3, [pc, #76]	; (dd0 <SERCOM3_2_Handler+0x90>)
     d84:	6818      	ldr	r0, [r3, #0]
     d86:	ab07      	add	r3, sp, #28
     d88:	9300      	str	r3, [sp, #0]
     d8a:	2300      	movs	r3, #0
     d8c:	2203      	movs	r2, #3
     d8e:	b2e1      	uxtb	r1, r4
     d90:	4c10      	ldr	r4, [pc, #64]	; (dd4 <SERCOM3_2_Handler+0x94>)
     d92:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     d94:	9b07      	ldr	r3, [sp, #28]
     d96:	b13b      	cbz	r3, da8 <SERCOM3_2_Handler+0x68>
     d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     d9c:	4b0e      	ldr	r3, [pc, #56]	; (dd8 <SERCOM3_2_Handler+0x98>)
     d9e:	601a      	str	r2, [r3, #0]
     da0:	f3bf 8f4f 	dsb	sy
     da4:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     da8:	2000      	movs	r0, #0
     daa:	4b0c      	ldr	r3, [pc, #48]	; (ddc <SERCOM3_2_Handler+0x9c>)
     dac:	4798      	blx	r3
}
     dae:	e7dc      	b.n	d6a <SERCOM3_2_Handler+0x2a>
     db0:	20000024 	.word	0x20000024
     db4:	00002e1d 	.word	0x00002e1d
     db8:	00002e0b 	.word	0x00002e0b
     dbc:	20003c88 	.word	0x20003c88
     dc0:	000023f9 	.word	0x000023f9
     dc4:	00000511 	.word	0x00000511
     dc8:	00000361 	.word	0x00000361
     dcc:	00002439 	.word	0x00002439
     dd0:	20003468 	.word	0x20003468
     dd4:	000055e1 	.word	0x000055e1
     dd8:	e000ed04 	.word	0xe000ed04
     ddc:	00000505 	.word	0x00000505

00000de0 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     de0:	b570      	push	{r4, r5, r6, lr}
     de2:	4605      	mov	r5, r0
     de4:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     de6:	4c05      	ldr	r4, [pc, #20]	; (dfc <mdmCtrlr_SendDataToModem+0x1c>)
     de8:	4620      	mov	r0, r4
     dea:	4b05      	ldr	r3, [pc, #20]	; (e00 <mdmCtrlr_SendDataToModem+0x20>)
     dec:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     dee:	4632      	mov	r2, r6
     df0:	4629      	mov	r1, r5
     df2:	4620      	mov	r0, r4
     df4:	4b03      	ldr	r3, [pc, #12]	; (e04 <mdmCtrlr_SendDataToModem+0x24>)
     df6:	4798      	blx	r3
}
     df8:	bd70      	pop	{r4, r5, r6, pc}
     dfa:	bf00      	nop
     dfc:	20000024 	.word	0x20000024
     e00:	00002df1 	.word	0x00002df1
     e04:	00001539 	.word	0x00001539

00000e08 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     e08:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0a:	b083      	sub	sp, #12
     e0c:	4605      	mov	r5, r0
     e0e:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     e10:	480d      	ldr	r0, [pc, #52]	; (e48 <mdmCtrlr_ReadResponseFromModem+0x40>)
     e12:	4b0e      	ldr	r3, [pc, #56]	; (e4c <mdmCtrlr_ReadResponseFromModem+0x44>)
     e14:	4798      	blx	r3
     e16:	42b0      	cmp	r0, r6
     e18:	d201      	bcs.n	e1e <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     e1a:	b003      	add	sp, #12
     e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     e1e:	a801      	add	r0, sp, #4
     e20:	4b0b      	ldr	r3, [pc, #44]	; (e50 <mdmCtrlr_ReadResponseFromModem+0x48>)
     e22:	4798      	blx	r3
		while (readCnt < length)
     e24:	b166      	cbz	r6, e40 <mdmCtrlr_ReadResponseFromModem+0x38>
     e26:	462c      	mov	r4, r5
     e28:	3e01      	subs	r6, #1
     e2a:	b2b6      	uxth	r6, r6
     e2c:	3601      	adds	r6, #1
     e2e:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     e30:	4f05      	ldr	r7, [pc, #20]	; (e48 <mdmCtrlr_ReadResponseFromModem+0x40>)
     e32:	4e08      	ldr	r6, [pc, #32]	; (e54 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     e34:	4621      	mov	r1, r4
     e36:	4638      	mov	r0, r7
     e38:	47b0      	blx	r6
     e3a:	3401      	adds	r4, #1
		while (readCnt < length)
     e3c:	42ac      	cmp	r4, r5
     e3e:	d1f9      	bne.n	e34 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     e40:	a801      	add	r0, sp, #4
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <mdmCtrlr_ReadResponseFromModem+0x50>)
     e44:	4798      	blx	r3
     e46:	e7e8      	b.n	e1a <mdmCtrlr_ReadResponseFromModem+0x12>
     e48:	20003c88 	.word	0x20003c88
     e4c:	00002439 	.word	0x00002439
     e50:	00002035 	.word	0x00002035
     e54:	000023b5 	.word	0x000023b5
     e58:	00002043 	.word	0x00002043

00000e5c <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     e5c:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     e5e:	4802      	ldr	r0, [pc, #8]	; (e68 <mdmCtrlr_FlushRxBuffer+0xc>)
     e60:	4b02      	ldr	r3, [pc, #8]	; (e6c <mdmCtrlr_FlushRxBuffer+0x10>)
     e62:	4798      	blx	r3
     e64:	bd08      	pop	{r3, pc}
     e66:	bf00      	nop
     e68:	20003c88 	.word	0x20003c88
     e6c:	0000245d 	.word	0x0000245d

00000e70 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     e70:	b5f0      	push	{r4, r5, r6, r7, lr}
     e72:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
     e74:	2300      	movs	r3, #0
     e76:	4a6c      	ldr	r2, [pc, #432]	; (1028 <ModemDiagTask+0x1b8>)
     e78:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
     e7a:	4a6c      	ldr	r2, [pc, #432]	; (102c <ModemDiagTask+0x1bc>)
     e7c:	4611      	mov	r1, r2
     e7e:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
     e82:	8093      	strh	r3, [r2, #4]
     e84:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
     e86:	6093      	str	r3, [r2, #8]
     e88:	60d3      	str	r3, [r2, #12]
     e8a:	6113      	str	r3, [r2, #16]
     e8c:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
     e8e:	6193      	str	r3, [r2, #24]
     e90:	61d3      	str	r3, [r2, #28]
     e92:	6213      	str	r3, [r2, #32]
     e94:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
     e98:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     e9a:	4c65      	ldr	r4, [pc, #404]	; (1030 <ModemDiagTask+0x1c0>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     e9c:	4e65      	ldr	r6, [pc, #404]	; (1034 <ModemDiagTask+0x1c4>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
     e9e:	4d66      	ldr	r5, [pc, #408]	; (1038 <ModemDiagTask+0x1c8>)
     ea0:	e0a3      	b.n	fea <ModemDiagTask+0x17a>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     ea2:	2304      	movs	r3, #4
     ea4:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
     ea8:	2301      	movs	r3, #1
     eaa:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     eae:	2300      	movs	r3, #0
     eb0:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     eb2:	2264      	movs	r2, #100	; 0x64
     eb4:	4669      	mov	r1, sp
     eb6:	6830      	ldr	r0, [r6, #0]
     eb8:	4f60      	ldr	r7, [pc, #384]	; (103c <ModemDiagTask+0x1cc>)
     eba:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     ebc:	2801      	cmp	r0, #1
     ebe:	d006      	beq.n	ece <ModemDiagTask+0x5e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     ec0:	485f      	ldr	r0, [pc, #380]	; (1040 <ModemDiagTask+0x1d0>)
     ec2:	4b60      	ldr	r3, [pc, #384]	; (1044 <ModemDiagTask+0x1d4>)
     ec4:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     eca:	47a8      	blx	r5
     ecc:	e088      	b.n	fe0 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     ece:	485e      	ldr	r0, [pc, #376]	; (1048 <ModemDiagTask+0x1d8>)
     ed0:	4b5c      	ldr	r3, [pc, #368]	; (1044 <ModemDiagTask+0x1d4>)
     ed2:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     ed4:	2300      	movs	r3, #0
     ed6:	461a      	mov	r2, r3
     ed8:	4619      	mov	r1, r3
     eda:	485c      	ldr	r0, [pc, #368]	; (104c <ModemDiagTask+0x1dc>)
     edc:	6800      	ldr	r0, [r0, #0]
     ede:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     ee0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     ee4:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
     ee6:	2201      	movs	r2, #1
     ee8:	4b4f      	ldr	r3, [pc, #316]	; (1028 <ModemDiagTask+0x1b8>)
     eea:	701a      	strb	r2, [r3, #0]
     eec:	e078      	b.n	fe0 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     eee:	2304      	movs	r3, #4
     ef0:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
     ef4:	2302      	movs	r3, #2
     ef6:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     efa:	2300      	movs	r3, #0
     efc:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     efe:	2264      	movs	r2, #100	; 0x64
     f00:	4669      	mov	r1, sp
     f02:	6830      	ldr	r0, [r6, #0]
     f04:	4f4d      	ldr	r7, [pc, #308]	; (103c <ModemDiagTask+0x1cc>)
     f06:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     f08:	2801      	cmp	r0, #1
     f0a:	d006      	beq.n	f1a <ModemDiagTask+0xaa>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     f0c:	484c      	ldr	r0, [pc, #304]	; (1040 <ModemDiagTask+0x1d0>)
     f0e:	4b4d      	ldr	r3, [pc, #308]	; (1044 <ModemDiagTask+0x1d4>)
     f10:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     f12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f16:	47a8      	blx	r5
     f18:	e062      	b.n	fe0 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     f1a:	484b      	ldr	r0, [pc, #300]	; (1048 <ModemDiagTask+0x1d8>)
     f1c:	4b49      	ldr	r3, [pc, #292]	; (1044 <ModemDiagTask+0x1d4>)
     f1e:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     f20:	2300      	movs	r3, #0
     f22:	461a      	mov	r2, r3
     f24:	4619      	mov	r1, r3
     f26:	4849      	ldr	r0, [pc, #292]	; (104c <ModemDiagTask+0x1dc>)
     f28:	6800      	ldr	r0, [r0, #0]
     f2a:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     f2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f30:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
     f32:	2202      	movs	r2, #2
     f34:	4b3c      	ldr	r3, [pc, #240]	; (1028 <ModemDiagTask+0x1b8>)
     f36:	701a      	strb	r2, [r3, #0]
     f38:	e052      	b.n	fe0 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     f3a:	2304      	movs	r3, #4
     f3c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
     f40:	2307      	movs	r3, #7
     f42:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     f46:	2300      	movs	r3, #0
     f48:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     f4a:	2264      	movs	r2, #100	; 0x64
     f4c:	4669      	mov	r1, sp
     f4e:	6830      	ldr	r0, [r6, #0]
     f50:	4f3a      	ldr	r7, [pc, #232]	; (103c <ModemDiagTask+0x1cc>)
     f52:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     f54:	2801      	cmp	r0, #1
     f56:	d006      	beq.n	f66 <ModemDiagTask+0xf6>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     f58:	4839      	ldr	r0, [pc, #228]	; (1040 <ModemDiagTask+0x1d0>)
     f5a:	4b3a      	ldr	r3, [pc, #232]	; (1044 <ModemDiagTask+0x1d4>)
     f5c:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     f5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f62:	47a8      	blx	r5
     f64:	e03c      	b.n	fe0 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     f66:	4838      	ldr	r0, [pc, #224]	; (1048 <ModemDiagTask+0x1d8>)
     f68:	4b36      	ldr	r3, [pc, #216]	; (1044 <ModemDiagTask+0x1d4>)
     f6a:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     f6c:	2300      	movs	r3, #0
     f6e:	461a      	mov	r2, r3
     f70:	4619      	mov	r1, r3
     f72:	4836      	ldr	r0, [pc, #216]	; (104c <ModemDiagTask+0x1dc>)
     f74:	6800      	ldr	r0, [r0, #0]
     f76:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     f78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f7c:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
     f7e:	2204      	movs	r2, #4
     f80:	4b29      	ldr	r3, [pc, #164]	; (1028 <ModemDiagTask+0x1b8>)
     f82:	701a      	strb	r2, [r3, #0]
     f84:	e02c      	b.n	fe0 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     f86:	2304      	movs	r3, #4
     f88:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
     f8c:	2303      	movs	r3, #3
     f8e:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     f92:	2300      	movs	r3, #0
     f94:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     f96:	2264      	movs	r2, #100	; 0x64
     f98:	4669      	mov	r1, sp
     f9a:	6830      	ldr	r0, [r6, #0]
     f9c:	4f27      	ldr	r7, [pc, #156]	; (103c <ModemDiagTask+0x1cc>)
     f9e:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     fa0:	2801      	cmp	r0, #1
     fa2:	d006      	beq.n	fb2 <ModemDiagTask+0x142>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     fa4:	4826      	ldr	r0, [pc, #152]	; (1040 <ModemDiagTask+0x1d0>)
     fa6:	4b27      	ldr	r3, [pc, #156]	; (1044 <ModemDiagTask+0x1d4>)
     fa8:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     faa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     fae:	47a8      	blx	r5
     fb0:	e016      	b.n	fe0 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     fb2:	4825      	ldr	r0, [pc, #148]	; (1048 <ModemDiagTask+0x1d8>)
     fb4:	4b23      	ldr	r3, [pc, #140]	; (1044 <ModemDiagTask+0x1d4>)
     fb6:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     fb8:	2300      	movs	r3, #0
     fba:	461a      	mov	r2, r3
     fbc:	4619      	mov	r1, r3
     fbe:	4823      	ldr	r0, [pc, #140]	; (104c <ModemDiagTask+0x1dc>)
     fc0:	6800      	ldr	r0, [r0, #0]
     fc2:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     fc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     fc8:	47a8      	blx	r5
                        ModemDiagState = 100;
     fca:	2264      	movs	r2, #100	; 0x64
     fcc:	4b16      	ldr	r3, [pc, #88]	; (1028 <ModemDiagTask+0x1b8>)
     fce:	701a      	strb	r2, [r3, #0]
     fd0:	e006      	b.n	fe0 <ModemDiagTask+0x170>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
     fd2:	2300      	movs	r3, #0
     fd4:	461a      	mov	r2, r3
     fd6:	4619      	mov	r1, r3
     fd8:	481c      	ldr	r0, [pc, #112]	; (104c <ModemDiagTask+0x1dc>)
     fda:	6800      	ldr	r0, [r0, #0]
     fdc:	4f17      	ldr	r7, [pc, #92]	; (103c <ModemDiagTask+0x1cc>)
     fde:	47b8      	blx	r7
            kickWatchDog();
     fe0:	4b1b      	ldr	r3, [pc, #108]	; (1050 <ModemDiagTask+0x1e0>)
     fe2:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     fe4:	f44f 7016 	mov.w	r0, #600	; 0x258
     fe8:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     fea:	47a0      	blx	r4
     fec:	2804      	cmp	r0, #4
     fee:	d1fc      	bne.n	fea <ModemDiagTask+0x17a>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     ff0:	6830      	ldr	r0, [r6, #0]
     ff2:	4b18      	ldr	r3, [pc, #96]	; (1054 <ModemDiagTask+0x1e4>)
     ff4:	4798      	blx	r3
     ff6:	2800      	cmp	r0, #0
     ff8:	d1f2      	bne.n	fe0 <ModemDiagTask+0x170>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ffa:	2100      	movs	r1, #0
     ffc:	4b13      	ldr	r3, [pc, #76]	; (104c <ModemDiagTask+0x1dc>)
     ffe:	6818      	ldr	r0, [r3, #0]
    1000:	4b15      	ldr	r3, [pc, #84]	; (1058 <ModemDiagTask+0x1e8>)
    1002:	4798      	blx	r3
    1004:	2801      	cmp	r0, #1
    1006:	d1eb      	bne.n	fe0 <ModemDiagTask+0x170>
            switch(ModemDiagState)
    1008:	4b07      	ldr	r3, [pc, #28]	; (1028 <ModemDiagTask+0x1b8>)
    100a:	781b      	ldrb	r3, [r3, #0]
    100c:	2b03      	cmp	r3, #3
    100e:	d8e0      	bhi.n	fd2 <ModemDiagTask+0x162>
    1010:	a201      	add	r2, pc, #4	; (adr r2, 1018 <ModemDiagTask+0x1a8>)
    1012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1016:	bf00      	nop
    1018:	00000ea3 	.word	0x00000ea3
    101c:	00000eef 	.word	0x00000eef
    1020:	00000f3b 	.word	0x00000f3b
    1024:	00000f87 	.word	0x00000f87
    1028:	20003c98 	.word	0x20003c98
    102c:	200001fc 	.word	0x200001fc
    1030:	00001121 	.word	0x00001121
    1034:	20003474 	.word	0x20003474
    1038:	0000502d 	.word	0x0000502d
    103c:	000042f1 	.word	0x000042f1
    1040:	00006eb8 	.word	0x00006eb8
    1044:	00001601 	.word	0x00001601
    1048:	00006e98 	.word	0x00006e98
    104c:	2000347c 	.word	0x2000347c
    1050:	00001739 	.word	0x00001739
    1054:	00004969 	.word	0x00004969
    1058:	00004789 	.word	0x00004789

0000105c <ModemDiagUpdateDataBase>:
{
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	4604      	mov	r4, r0
    switch(cmd)
    1060:	780b      	ldrb	r3, [r1, #0]
    1062:	3b01      	subs	r3, #1
    1064:	2b06      	cmp	r3, #6
    1066:	d827      	bhi.n	10b8 <ModemDiagUpdateDataBase+0x5c>
    1068:	e8df f003 	tbb	[pc, r3]
    106c:	26253326 	.word	0x26253326
    1070:	2626      	.short	0x2626
    1072:	04          	.byte	0x04
    1073:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    1074:	884b      	ldrh	r3, [r1, #2]
    1076:	2b07      	cmp	r3, #7
    1078:	d40d      	bmi.n	1096 <ModemDiagUpdateDataBase+0x3a>
    107a:	2200      	movs	r2, #0
    107c:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    107e:	4d1f      	ldr	r5, [pc, #124]	; (10fc <ModemDiagUpdateDataBase+0xa0>)
    1080:	18a0      	adds	r0, r4, r2
    1082:	79c0      	ldrb	r0, [r0, #7]
    1084:	442a      	add	r2, r5
    1086:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    1088:	3301      	adds	r3, #1
    108a:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    108c:	461a      	mov	r2, r3
    108e:	8848      	ldrh	r0, [r1, #2]
    1090:	3807      	subs	r0, #7
    1092:	4283      	cmp	r3, r0
    1094:	ddf4      	ble.n	1080 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    1096:	4d19      	ldr	r5, [pc, #100]	; (10fc <ModemDiagUpdateDataBase+0xa0>)
    1098:	2601      	movs	r6, #1
    109a:	462c      	mov	r4, r5
    109c:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    10a0:	4817      	ldr	r0, [pc, #92]	; (1100 <ModemDiagUpdateDataBase+0xa4>)
    10a2:	4b18      	ldr	r3, [pc, #96]	; (1104 <ModemDiagUpdateDataBase+0xa8>)
    10a4:	4798      	blx	r3
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    10a6:	210f      	movs	r1, #15
    10a8:	4620      	mov	r0, r4
    10aa:	4c17      	ldr	r4, [pc, #92]	; (1108 <ModemDiagUpdateDataBase+0xac>)
    10ac:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    10ae:	2102      	movs	r1, #2
    10b0:	4816      	ldr	r0, [pc, #88]	; (110c <ModemDiagUpdateDataBase+0xb0>)
    10b2:	47a0      	blx	r4
			bModemDiagDataBaseUpdated = true;
    10b4:	702e      	strb	r6, [r5, #0]
    10b6:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    10b8:	4b10      	ldr	r3, [pc, #64]	; (10fc <ModemDiagUpdateDataBase+0xa0>)
    10ba:	1d18      	adds	r0, r3, #4
    10bc:	8821      	ldrh	r1, [r4, #0]
    10be:	78a2      	ldrb	r2, [r4, #2]
    10c0:	8099      	strh	r1, [r3, #4]
    10c2:	7082      	strb	r2, [r0, #2]
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    10c4:	2103      	movs	r1, #3
    10c6:	4c10      	ldr	r4, [pc, #64]	; (1108 <ModemDiagUpdateDataBase+0xac>)
    10c8:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    10ca:	2102      	movs	r1, #2
    10cc:	480f      	ldr	r0, [pc, #60]	; (110c <ModemDiagUpdateDataBase+0xb0>)
    10ce:	47a0      	blx	r4
        break;
    10d0:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    10d2:	4e0a      	ldr	r6, [pc, #40]	; (10fc <ModemDiagUpdateDataBase+0xa0>)
    10d4:	f106 0508 	add.w	r5, r6, #8
    10d8:	6800      	ldr	r0, [r0, #0]
    10da:	6861      	ldr	r1, [r4, #4]
    10dc:	68a2      	ldr	r2, [r4, #8]
    10de:	68e3      	ldr	r3, [r4, #12]
    10e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    10e2:	480b      	ldr	r0, [pc, #44]	; (1110 <ModemDiagUpdateDataBase+0xb4>)
    10e4:	4b07      	ldr	r3, [pc, #28]	; (1104 <ModemDiagUpdateDataBase+0xa8>)
    10e6:	4798      	blx	r3
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    10e8:	2110      	movs	r1, #16
    10ea:	f106 0008 	add.w	r0, r6, #8
    10ee:	4c06      	ldr	r4, [pc, #24]	; (1108 <ModemDiagUpdateDataBase+0xac>)
    10f0:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    10f2:	2102      	movs	r1, #2
    10f4:	4805      	ldr	r0, [pc, #20]	; (110c <ModemDiagUpdateDataBase+0xb0>)
    10f6:	47a0      	blx	r4
        break;
    10f8:	bd70      	pop	{r4, r5, r6, pc}
    10fa:	bf00      	nop
    10fc:	200001fc 	.word	0x200001fc
    1100:	00006f00 	.word	0x00006f00
    1104:	00001601 	.word	0x00001601
    1108:	000015bd 	.word	0x000015bd
    110c:	000071ec 	.word	0x000071ec
    1110:	00006ee0 	.word	0x00006ee0

00001114 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    1114:	4b01      	ldr	r3, [pc, #4]	; (111c <isModemDiagDataBaseUpdated+0x8>)
    1116:	7818      	ldrb	r0, [r3, #0]
    1118:	4770      	bx	lr
    111a:	bf00      	nop
    111c:	200001fc 	.word	0x200001fc

00001120 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    1120:	4b01      	ldr	r3, [pc, #4]	; (1128 <getModemPowerStatus+0x8>)
    1122:	7818      	ldrb	r0, [r3, #0]
    1124:	4770      	bx	lr
    1126:	bf00      	nop
    1128:	20000228 	.word	0x20000228

0000112c <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
    112c:	4b03      	ldr	r3, [pc, #12]	; (113c <modemPowerStateInit+0x10>)
    112e:	2200      	movs	r2, #0
    1130:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    1132:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    1134:	2201      	movs	r2, #1
    1136:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    1138:	70da      	strb	r2, [r3, #3]
    113a:	4770      	bx	lr
    113c:	20000228 	.word	0x20000228

00001140 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    1140:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
    1142:	4b5d      	ldr	r3, [pc, #372]	; (12b8 <modemPowerSchedule+0x178>)
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	2b06      	cmp	r3, #6
    1148:	f000 8089 	beq.w	125e <modemPowerSchedule+0x11e>
    114c:	2b07      	cmp	r3, #7
    114e:	d054      	beq.n	11fa <modemPowerSchedule+0xba>
    1150:	b103      	cbz	r3, 1154 <modemPowerSchedule+0x14>
    1152:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    1154:	4b58      	ldr	r3, [pc, #352]	; (12b8 <modemPowerSchedule+0x178>)
    1156:	785b      	ldrb	r3, [r3, #1]
    1158:	2b03      	cmp	r3, #3
    115a:	d8fa      	bhi.n	1152 <modemPowerSchedule+0x12>
    115c:	e8df f003 	tbb	[pc, r3]
    1160:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1164:	4b55      	ldr	r3, [pc, #340]	; (12bc <modemPowerSchedule+0x17c>)
    1166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    116a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    116e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1172:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1176:	4c52      	ldr	r4, [pc, #328]	; (12c0 <modemPowerSchedule+0x180>)
    1178:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    117c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1180:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1184:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1188:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    118c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    1190:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1192:	6299      	str	r1, [r3, #40]	; 0x28
    1194:	484b      	ldr	r0, [pc, #300]	; (12c4 <modemPowerSchedule+0x184>)
    1196:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1198:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    119c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11a0:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11a4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11a6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11a8:	6299      	str	r1, [r3, #40]	; 0x28
    11aa:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11ac:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    11b0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11b4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11b8:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    11ba:	2201      	movs	r2, #1
    11bc:	4b3e      	ldr	r3, [pc, #248]	; (12b8 <modemPowerSchedule+0x178>)
    11be:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    11c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    11c4:	4b40      	ldr	r3, [pc, #256]	; (12c8 <modemPowerSchedule+0x188>)
    11c6:	4798      	blx	r3
                }
                break;
    11c8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    11ce:	4b3b      	ldr	r3, [pc, #236]	; (12bc <modemPowerSchedule+0x17c>)
    11d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    11d4:	2202      	movs	r2, #2
    11d6:	4b38      	ldr	r3, [pc, #224]	; (12b8 <modemPowerSchedule+0x178>)
    11d8:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    11da:	2032      	movs	r0, #50	; 0x32
    11dc:	4b3a      	ldr	r3, [pc, #232]	; (12c8 <modemPowerSchedule+0x188>)
    11de:	4798      	blx	r3
                }
                break;
    11e0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    11e2:	2203      	movs	r2, #3
    11e4:	4b34      	ldr	r3, [pc, #208]	; (12b8 <modemPowerSchedule+0x178>)
    11e6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    11e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    11ec:	4b36      	ldr	r3, [pc, #216]	; (12c8 <modemPowerSchedule+0x188>)
    11ee:	4798      	blx	r3
                }
                break;
    11f0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    11f2:	2204      	movs	r2, #4
    11f4:	4b30      	ldr	r3, [pc, #192]	; (12b8 <modemPowerSchedule+0x178>)
    11f6:	701a      	strb	r2, [r3, #0]
                }
                break;
    11f8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    11fa:	4b2f      	ldr	r3, [pc, #188]	; (12b8 <modemPowerSchedule+0x178>)
    11fc:	789b      	ldrb	r3, [r3, #2]
    11fe:	b113      	cbz	r3, 1206 <modemPowerSchedule+0xc6>
    1200:	2b01      	cmp	r3, #1
    1202:	d017      	beq.n	1234 <modemPowerSchedule+0xf4>
    1204:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1206:	4b2d      	ldr	r3, [pc, #180]	; (12bc <modemPowerSchedule+0x17c>)
    1208:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    120c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1212:	629a      	str	r2, [r3, #40]	; 0x28
    1214:	4a2b      	ldr	r2, [pc, #172]	; (12c4 <modemPowerSchedule+0x184>)
    1216:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1218:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    121c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1220:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1224:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    1226:	2201      	movs	r2, #1
    1228:	4b23      	ldr	r3, [pc, #140]	; (12b8 <modemPowerSchedule+0x178>)
    122a:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    122c:	2019      	movs	r0, #25
    122e:	4b26      	ldr	r3, [pc, #152]	; (12c8 <modemPowerSchedule+0x188>)
    1230:	4798      	blx	r3
                }
                break;
    1232:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1234:	4b21      	ldr	r3, [pc, #132]	; (12bc <modemPowerSchedule+0x17c>)
    1236:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    123a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    123c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1240:	629a      	str	r2, [r3, #40]	; 0x28
    1242:	4a20      	ldr	r2, [pc, #128]	; (12c4 <modemPowerSchedule+0x184>)
    1244:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1246:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    124a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    124e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1252:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    1254:	4b18      	ldr	r3, [pc, #96]	; (12b8 <modemPowerSchedule+0x178>)
    1256:	2200      	movs	r2, #0
    1258:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    125a:	705a      	strb	r2, [r3, #1]
                }
                break;
    125c:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    125e:	4b16      	ldr	r3, [pc, #88]	; (12b8 <modemPowerSchedule+0x178>)
    1260:	78db      	ldrb	r3, [r3, #3]
    1262:	2b00      	cmp	r3, #0
    1264:	f47f af75 	bne.w	1152 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1268:	4b14      	ldr	r3, [pc, #80]	; (12bc <modemPowerSchedule+0x17c>)
    126a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    126e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1276:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    127a:	4a11      	ldr	r2, [pc, #68]	; (12c0 <modemPowerSchedule+0x180>)
    127c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1280:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1288:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    128c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1290:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1294:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1296:	6298      	str	r0, [r3, #40]	; 0x28
    1298:	4a0a      	ldr	r2, [pc, #40]	; (12c4 <modemPowerSchedule+0x184>)
    129a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    129c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    12a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12a8:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    12aa:	2201      	movs	r2, #1
    12ac:	4b02      	ldr	r3, [pc, #8]	; (12b8 <modemPowerSchedule+0x178>)
    12ae:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    12b0:	2019      	movs	r0, #25
    12b2:	4b05      	ldr	r3, [pc, #20]	; (12c8 <modemPowerSchedule+0x188>)
    12b4:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    12b6:	e74c      	b.n	1152 <modemPowerSchedule+0x12>
    12b8:	20000228 	.word	0x20000228
    12bc:	41008000 	.word	0x41008000
    12c0:	c0000001 	.word	0xc0000001
    12c4:	c0000008 	.word	0xc0000008
    12c8:	0000502d 	.word	0x0000502d

000012cc <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
    12cc:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(400UL);
    const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);

    modemPowerStateInit();
    12ce:	4b09      	ldr	r3, [pc, #36]	; (12f4 <ModemProcessTask+0x28>)
    12d0:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    12d2:	4b09      	ldr	r3, [pc, #36]	; (12f8 <ModemProcessTask+0x2c>)
    12d4:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
    12d6:	4d09      	ldr	r5, [pc, #36]	; (12fc <ModemProcessTask+0x30>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    12d8:	4c09      	ldr	r4, [pc, #36]	; (1300 <ModemProcessTask+0x34>)
        {
            MdmConnect_HttpConnectionSchedule();
    12da:	4e0a      	ldr	r6, [pc, #40]	; (1304 <ModemProcessTask+0x38>)
        modemPowerSchedule();
    12dc:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    12de:	47a0      	blx	r4
    12e0:	2804      	cmp	r0, #4
    12e2:	d1fb      	bne.n	12dc <ModemProcessTask+0x10>
            MdmConnect_HttpConnectionSchedule();
    12e4:	47b0      	blx	r6
			kickWatchDog();
    12e6:	4b08      	ldr	r3, [pc, #32]	; (1308 <ModemProcessTask+0x3c>)
    12e8:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    12ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
    12ee:	4b07      	ldr	r3, [pc, #28]	; (130c <ModemProcessTask+0x40>)
    12f0:	4798      	blx	r3
    12f2:	e7f3      	b.n	12dc <ModemProcessTask+0x10>
    12f4:	0000112d 	.word	0x0000112d
    12f8:	0000055d 	.word	0x0000055d
    12fc:	00001141 	.word	0x00001141
    1300:	00001121 	.word	0x00001121
    1304:	00000c4d 	.word	0x00000c4d
    1308:	00001739 	.word	0x00001739
    130c:	0000502d 	.word	0x0000502d

00001310 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    1310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1312:	4607      	mov	r7, r0
    1314:	460c      	mov	r4, r1
    1316:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    1318:	492d      	ldr	r1, [pc, #180]	; (13d0 <modemResponseHandler+0xc0>)
    131a:	4b2e      	ldr	r3, [pc, #184]	; (13d4 <modemResponseHandler+0xc4>)
    131c:	4798      	blx	r3

    if(response != NULL)
    131e:	2c00      	cmp	r4, #0
    1320:	d052      	beq.n	13c8 <modemResponseHandler+0xb8>
    {
        switch (cmdData.cmdSet)
    1322:	4b2b      	ldr	r3, [pc, #172]	; (13d0 <modemResponseHandler+0xc0>)
    1324:	785b      	ldrb	r3, [r3, #1]
    1326:	b113      	cbz	r3, 132e <modemResponseHandler+0x1e>
    1328:	2b01      	cmp	r3, #1
    132a:	d016      	beq.n	135a <modemResponseHandler+0x4a>
    132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    132e:	4e28      	ldr	r6, [pc, #160]	; (13d0 <modemResponseHandler+0xc0>)
    1330:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
    1332:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
    1334:	f106 071c 	add.w	r7, r6, #28
    1338:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    133c:	2100      	movs	r1, #0
    133e:	4638      	mov	r0, r7
    1340:	4b25      	ldr	r3, [pc, #148]	; (13d8 <modemResponseHandler+0xc8>)
    1342:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    1344:	462a      	mov	r2, r5
    1346:	4621      	mov	r1, r4
    1348:	4638      	mov	r0, r7
    134a:	4b24      	ldr	r3, [pc, #144]	; (13dc <modemResponseHandler+0xcc>)
    134c:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    134e:	f106 0114 	add.w	r1, r6, #20
    1352:	4638      	mov	r0, r7
    1354:	4b22      	ldr	r3, [pc, #136]	; (13e0 <modemResponseHandler+0xd0>)
    1356:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    1358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
    135a:	f04f 31ff 	mov.w	r1, #4294967295
    135e:	4b21      	ldr	r3, [pc, #132]	; (13e4 <modemResponseHandler+0xd4>)
    1360:	6818      	ldr	r0, [r3, #0]
    1362:	4b21      	ldr	r3, [pc, #132]	; (13e8 <modemResponseHandler+0xd8>)
    1364:	4798      	blx	r3
    1366:	2801      	cmp	r0, #1
    1368:	d01f      	beq.n	13aa <modemResponseHandler+0x9a>
                {
                	DEBUG_PRINT("Received Connection response in handle");
                	xSemaphoreGive(DebugPrintMutex);
                }

                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    136a:	4b20      	ldr	r3, [pc, #128]	; (13ec <modemResponseHandler+0xdc>)
    136c:	6818      	ldr	r0, [r3, #0]
    136e:	4b20      	ldr	r3, [pc, #128]	; (13f0 <modemResponseHandler+0xe0>)
    1370:	4798      	blx	r3
    1372:	bb28      	cbnz	r0, 13c0 <modemResponseHandler+0xb0>
                {
                	cmdResponse.atCmd = cmd;
    1374:	4e16      	ldr	r6, [pc, #88]	; (13d0 <modemResponseHandler+0xc0>)
    1376:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
    1378:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    137a:	4628      	mov	r0, r5
    137c:	4b1d      	ldr	r3, [pc, #116]	; (13f4 <modemResponseHandler+0xe4>)
    137e:	4798      	blx	r3
    1380:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
    1382:	b320      	cbz	r0, 13ce <modemResponseHandler+0xbe>
                	{
                		memcpy(cmdResponse.response,response,length);
    1384:	462a      	mov	r2, r5
    1386:	4621      	mov	r1, r4
    1388:	4b14      	ldr	r3, [pc, #80]	; (13dc <modemResponseHandler+0xcc>)
    138a:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    138c:	2300      	movs	r3, #0
    138e:	2264      	movs	r2, #100	; 0x64
    1390:	f106 0114 	add.w	r1, r6, #20
    1394:	4815      	ldr	r0, [pc, #84]	; (13ec <modemResponseHandler+0xdc>)
    1396:	6800      	ldr	r0, [r0, #0]
    1398:	4c17      	ldr	r4, [pc, #92]	; (13f8 <modemResponseHandler+0xe8>)
    139a:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    139c:	2801      	cmp	r0, #1
                		{
                			DEBUG_PRINT("Successfully posted connection Response to Queue");
    139e:	bf0c      	ite	eq
    13a0:	4816      	ldreq	r0, [pc, #88]	; (13fc <modemResponseHandler+0xec>)
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    13a2:	4817      	ldrne	r0, [pc, #92]	; (1400 <modemResponseHandler+0xf0>)
    13a4:	4b17      	ldr	r3, [pc, #92]	; (1404 <modemResponseHandler+0xf4>)
    13a6:	4798      	blx	r3
    13a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                	DEBUG_PRINT("Received Connection response in handle");
    13aa:	4817      	ldr	r0, [pc, #92]	; (1408 <modemResponseHandler+0xf8>)
    13ac:	4b15      	ldr	r3, [pc, #84]	; (1404 <modemResponseHandler+0xf4>)
    13ae:	4798      	blx	r3
                	xSemaphoreGive(DebugPrintMutex);
    13b0:	2300      	movs	r3, #0
    13b2:	461a      	mov	r2, r3
    13b4:	4619      	mov	r1, r3
    13b6:	480b      	ldr	r0, [pc, #44]	; (13e4 <modemResponseHandler+0xd4>)
    13b8:	6800      	ldr	r0, [r0, #0]
    13ba:	4e0f      	ldr	r6, [pc, #60]	; (13f8 <modemResponseHandler+0xe8>)
    13bc:	47b0      	blx	r6
    13be:	e7d4      	b.n	136a <modemResponseHandler+0x5a>
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    13c0:	4812      	ldr	r0, [pc, #72]	; (140c <modemResponseHandler+0xfc>)
    13c2:	4b10      	ldr	r3, [pc, #64]	; (1404 <modemResponseHandler+0xf4>)
    13c4:	4798      	blx	r3
    13c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    13c8:	4811      	ldr	r0, [pc, #68]	; (1410 <modemResponseHandler+0x100>)
    13ca:	4b0e      	ldr	r3, [pc, #56]	; (1404 <modemResponseHandler+0xf4>)
    13cc:	4798      	blx	r3
    13ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d0:	2000022c 	.word	0x2000022c
    13d4:	00000361 	.word	0x00000361
    13d8:	00005b7d 	.word	0x00005b7d
    13dc:	00005b33 	.word	0x00005b33
    13e0:	0000105d 	.word	0x0000105d
    13e4:	20003478 	.word	0x20003478
    13e8:	00004789 	.word	0x00004789
    13ec:	20003450 	.word	0x20003450
    13f0:	00004969 	.word	0x00004969
    13f4:	00003ef5 	.word	0x00003ef5
    13f8:	000042f1 	.word	0x000042f1
    13fc:	00006f4c 	.word	0x00006f4c
    1400:	00006f80 	.word	0x00006f80
    1404:	00001601 	.word	0x00001601
    1408:	00006f24 	.word	0x00006f24
    140c:	00006fb0 	.word	0x00006fb0
    1410:	00006fdc 	.word	0x00006fdc

00001414 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    1414:	b570      	push	{r4, r5, r6, lr}
    1416:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1418:	4c0f      	ldr	r4, [pc, #60]	; (1458 <ModemRxTask+0x44>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    141a:	4e10      	ldr	r6, [pc, #64]	; (145c <ModemRxTask+0x48>)
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
    141c:	4d10      	ldr	r5, [pc, #64]	; (1460 <ModemRxTask+0x4c>)
    141e:	e001      	b.n	1424 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    1420:	4b10      	ldr	r3, [pc, #64]	; (1464 <ModemRxTask+0x50>)
    1422:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1424:	f04f 33ff 	mov.w	r3, #4294967295
    1428:	f10d 0217 	add.w	r2, sp, #23
    142c:	4619      	mov	r1, r3
    142e:	2000      	movs	r0, #0
    1430:	47a0      	blx	r4
		if(xResult == pdPASS)
    1432:	2801      	cmp	r0, #1
    1434:	d1f4      	bne.n	1420 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    1436:	4669      	mov	r1, sp
    1438:	f89d 0017 	ldrb.w	r0, [sp, #23]
    143c:	47b0      	blx	r6
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
    143e:	4628      	mov	r0, r5
    1440:	4b09      	ldr	r3, [pc, #36]	; (1468 <ModemRxTask+0x54>)
    1442:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    1444:	f89d 0000 	ldrb.w	r0, [sp]
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <ModemRxTask+0x58>)
    144a:	4798      	blx	r3
    144c:	2800      	cmp	r0, #0
    144e:	d1e7      	bne.n	1420 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    1450:	4807      	ldr	r0, [pc, #28]	; (1470 <ModemRxTask+0x5c>)
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <ModemRxTask+0x54>)
    1454:	4798      	blx	r3
    1456:	e7e3      	b.n	1420 <ModemRxTask+0xc>
    1458:	0000552d 	.word	0x0000552d
    145c:	00000361 	.word	0x00000361
    1460:	00007174 	.word	0x00007174
    1464:	00001739 	.word	0x00001739
    1468:	00001601 	.word	0x00001601
    146c:	00000409 	.word	0x00000409
    1470:	000071a0 	.word	0x000071a0

00001474 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    1474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    1476:	2300      	movs	r3, #0
    1478:	461a      	mov	r2, r3
    147a:	4619      	mov	r1, r3
    147c:	481f      	ldr	r0, [pc, #124]	; (14fc <ModemTxTask+0x88>)
    147e:	6800      	ldr	r0, [r0, #0]
    1480:	4c1f      	ldr	r4, [pc, #124]	; (1500 <ModemTxTask+0x8c>)
    1482:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1484:	4c1f      	ldr	r4, [pc, #124]	; (1504 <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    1486:	4d20      	ldr	r5, [pc, #128]	; (1508 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    1488:	f105 0608 	add.w	r6, r5, #8
    148c:	e004      	b.n	1498 <ModemTxTask+0x24>
			kickWatchDog();
    148e:	4b1f      	ldr	r3, [pc, #124]	; (150c <ModemTxTask+0x98>)
    1490:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    1492:	2064      	movs	r0, #100	; 0x64
    1494:	4b1e      	ldr	r3, [pc, #120]	; (1510 <ModemTxTask+0x9c>)
    1496:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1498:	47a0      	blx	r4
    149a:	2804      	cmp	r0, #4
    149c:	d1fc      	bne.n	1498 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    149e:	4b1d      	ldr	r3, [pc, #116]	; (1514 <ModemTxTask+0xa0>)
    14a0:	6818      	ldr	r0, [r3, #0]
    14a2:	4b1d      	ldr	r3, [pc, #116]	; (1518 <ModemTxTask+0xa4>)
    14a4:	4798      	blx	r3
    14a6:	2800      	cmp	r0, #0
    14a8:	d0f1      	beq.n	148e <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    14aa:	2100      	movs	r1, #0
    14ac:	4b13      	ldr	r3, [pc, #76]	; (14fc <ModemTxTask+0x88>)
    14ae:	6818      	ldr	r0, [r3, #0]
    14b0:	4b1a      	ldr	r3, [pc, #104]	; (151c <ModemTxTask+0xa8>)
    14b2:	4798      	blx	r3
    14b4:	2801      	cmp	r0, #1
    14b6:	d1ea      	bne.n	148e <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    14b8:	2264      	movs	r2, #100	; 0x64
    14ba:	4629      	mov	r1, r5
    14bc:	4b15      	ldr	r3, [pc, #84]	; (1514 <ModemTxTask+0xa0>)
    14be:	6818      	ldr	r0, [r3, #0]
    14c0:	4b17      	ldr	r3, [pc, #92]	; (1520 <ModemTxTask+0xac>)
    14c2:	4798      	blx	r3
			if(xResult == pdPASS)
    14c4:	2801      	cmp	r0, #1
    14c6:	d1e2      	bne.n	148e <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    14c8:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    14ca:	4631      	mov	r1, r6
    14cc:	4638      	mov	r0, r7
    14ce:	4b15      	ldr	r3, [pc, #84]	; (1524 <ModemTxTask+0xb0>)
    14d0:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    14d2:	4b15      	ldr	r3, [pc, #84]	; (1528 <ModemTxTask+0xb4>)
    14d4:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    14d6:	7c29      	ldrb	r1, [r5, #16]
    14d8:	68e8      	ldr	r0, [r5, #12]
    14da:	4b14      	ldr	r3, [pc, #80]	; (152c <ModemTxTask+0xb8>)
    14dc:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    14de:	4638      	mov	r0, r7
    14e0:	4b13      	ldr	r3, [pc, #76]	; (1530 <ModemTxTask+0xbc>)
    14e2:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    14e4:	2000      	movs	r0, #0
    14e6:	4b13      	ldr	r3, [pc, #76]	; (1534 <ModemTxTask+0xc0>)
    14e8:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    14ea:	2300      	movs	r3, #0
    14ec:	461a      	mov	r2, r3
    14ee:	4619      	mov	r1, r3
    14f0:	4802      	ldr	r0, [pc, #8]	; (14fc <ModemTxTask+0x88>)
    14f2:	6800      	ldr	r0, [r0, #0]
    14f4:	4f02      	ldr	r7, [pc, #8]	; (1500 <ModemTxTask+0x8c>)
    14f6:	47b8      	blx	r7
    14f8:	e7c9      	b.n	148e <ModemTxTask+0x1a>
    14fa:	bf00      	nop
    14fc:	2000347c 	.word	0x2000347c
    1500:	000042f1 	.word	0x000042f1
    1504:	00001121 	.word	0x00001121
    1508:	20000508 	.word	0x20000508
    150c:	00001739 	.word	0x00001739
    1510:	0000502d 	.word	0x0000502d
    1514:	20003474 	.word	0x20003474
    1518:	00004969 	.word	0x00004969
    151c:	00004789 	.word	0x00004789
    1520:	00004601 	.word	0x00004601
    1524:	00000361 	.word	0x00000361
    1528:	00000e5d 	.word	0x00000e5d
    152c:	00000de1 	.word	0x00000de1
    1530:	00000505 	.word	0x00000505
    1534:	000004f9 	.word	0x000004f9

00001538 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    1538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    153c:	4604      	mov	r4, r0
    153e:	460e      	mov	r6, r1
    1540:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    1542:	4d0e      	ldr	r5, [pc, #56]	; (157c <usart_async_write+0x44>)
    1544:	4620      	mov	r0, r4
    1546:	47a8      	blx	r5
    1548:	2800      	cmp	r0, #0
    154a:	d0fb      	beq.n	1544 <usart_async_write+0xc>
    154c:	3e01      	subs	r6, #1
    154e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1580 <usart_async_write+0x48>
    1552:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    1554:	f8df a02c 	ldr.w	sl, [pc, #44]	; 1584 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    1558:	4d08      	ldr	r5, [pc, #32]	; (157c <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    155a:	7873      	ldrb	r3, [r6, #1]
    155c:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    1560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1564:	4620      	mov	r0, r4
    1566:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    1568:	4620      	mov	r0, r4
    156a:	47a8      	blx	r5
    156c:	2800      	cmp	r0, #0
    156e:	d0fb      	beq.n	1568 <usart_async_write+0x30>
		;
	} while (++offset < length);
    1570:	3701      	adds	r7, #1
    1572:	454f      	cmp	r7, r9
    1574:	d3f1      	bcc.n	155a <usart_async_write+0x22>

	return (int32_t)offset;
}
    1576:	4638      	mov	r0, r7
    1578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    157c:	00002e13 	.word	0x00002e13
    1580:	20000524 	.word	0x20000524
    1584:	00002e05 	.word	0x00002e05

00001588 <SerialDebugTxByteSentCallBack>:
    1588:	2302      	movs	r3, #2
    158a:	7603      	strb	r3, [r0, #24]
    158c:	4770      	bx	lr

0000158e <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    158e:	2380      	movs	r3, #128	; 0x80
    1590:	7603      	strb	r3, [r0, #24]
    1592:	4770      	bx	lr

00001594 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    1594:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    1596:	4c05      	ldr	r4, [pc, #20]	; (15ac <SerialDebugPrintInit+0x18>)
    1598:	4905      	ldr	r1, [pc, #20]	; (15b0 <SerialDebugPrintInit+0x1c>)
    159a:	4620      	mov	r0, r4
    159c:	4b05      	ldr	r3, [pc, #20]	; (15b4 <SerialDebugPrintInit+0x20>)
    159e:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    15a0:	2201      	movs	r2, #1
    15a2:	4611      	mov	r1, r2
    15a4:	4620      	mov	r0, r4
    15a6:	4b04      	ldr	r3, [pc, #16]	; (15b8 <SerialDebugPrintInit+0x24>)
    15a8:	4798      	blx	r3
    15aa:	bd10      	pop	{r4, pc}
    15ac:	20000040 	.word	0x20000040
    15b0:	43000400 	.word	0x43000400
    15b4:	00002d7d 	.word	0x00002d7d
    15b8:	00002e29 	.word	0x00002e29

000015bc <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	4605      	mov	r5, r0
    15c0:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    15c2:	4c05      	ldr	r4, [pc, #20]	; (15d8 <SerialDebugPrint+0x1c>)
    15c4:	4620      	mov	r0, r4
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <SerialDebugPrint+0x20>)
    15c8:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    15ca:	4632      	mov	r2, r6
    15cc:	4629      	mov	r1, r5
    15ce:	4620      	mov	r0, r4
    15d0:	4b03      	ldr	r3, [pc, #12]	; (15e0 <SerialDebugPrint+0x24>)
    15d2:	4798      	blx	r3
    15d4:	bd70      	pop	{r4, r5, r6, pc}
    15d6:	bf00      	nop
    15d8:	20000040 	.word	0x20000040
    15dc:	00002df1 	.word	0x00002df1
    15e0:	00001539 	.word	0x00001539

000015e4 <SerialDebugTxDoneCallBack>:
{
    15e4:	b510      	push	{r4, lr}
    15e6:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    15e8:	2116      	movs	r1, #22
    15ea:	4803      	ldr	r0, [pc, #12]	; (15f8 <SerialDebugTxDoneCallBack+0x14>)
    15ec:	4b03      	ldr	r3, [pc, #12]	; (15fc <SerialDebugTxDoneCallBack+0x18>)
    15ee:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    15f0:	2301      	movs	r3, #1
    15f2:	7623      	strb	r3, [r4, #24]
    15f4:	bd10      	pop	{r4, pc}
    15f6:	bf00      	nop
    15f8:	000071c0 	.word	0x000071c0
    15fc:	000015bd 	.word	0x000015bd

00001600 <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    1600:	4770      	bx	lr
	...

00001604 <ConsoleDebugPrint>:
	
	#endif
}

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    1604:	b530      	push	{r4, r5, lr}
    1606:	b09b      	sub	sp, #108	; 0x6c
    1608:	4605      	mov	r5, r0
    160a:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    160c:	2264      	movs	r2, #100	; 0x64
    160e:	2100      	movs	r1, #0
    1610:	a801      	add	r0, sp, #4
    1612:	4b09      	ldr	r3, [pc, #36]	; (1638 <ConsoleDebugPrint+0x34>)
    1614:	4798      	blx	r3

	if(intData != 0)
    1616:	b90c      	cbnz	r4, 161c <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1618:	b01b      	add	sp, #108	; 0x6c
    161a:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    161c:	4623      	mov	r3, r4
    161e:	462a      	mov	r2, r5
    1620:	4906      	ldr	r1, [pc, #24]	; (163c <ConsoleDebugPrint+0x38>)
    1622:	a801      	add	r0, sp, #4
    1624:	4c06      	ldr	r4, [pc, #24]	; (1640 <ConsoleDebugPrint+0x3c>)
    1626:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1628:	a801      	add	r0, sp, #4
    162a:	4b06      	ldr	r3, [pc, #24]	; (1644 <ConsoleDebugPrint+0x40>)
    162c:	4798      	blx	r3
    162e:	b281      	uxth	r1, r0
    1630:	a801      	add	r0, sp, #4
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <ConsoleDebugPrint+0x44>)
    1634:	4798      	blx	r3
}
    1636:	e7ef      	b.n	1618 <ConsoleDebugPrint+0x14>
    1638:	00005b7d 	.word	0x00005b7d
    163c:	000071e4 	.word	0x000071e4
    1640:	00005d05 	.word	0x00005d05
    1644:	00005d5d 	.word	0x00005d5d
    1648:	000015bd 	.word	0x000015bd

0000164c <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    164c:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    164e:	2204      	movs	r2, #4
    1650:	4b0b      	ldr	r3, [pc, #44]	; (1680 <SERCOM5_2_Handler+0x34>)
    1652:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    1654:	4d0b      	ldr	r5, [pc, #44]	; (1684 <SERCOM5_2_Handler+0x38>)
    1656:	4c0c      	ldr	r4, [pc, #48]	; (1688 <SERCOM5_2_Handler+0x3c>)
    1658:	4628      	mov	r0, r5
    165a:	47a0      	blx	r4
    165c:	2800      	cmp	r0, #0
    165e:	d0fb      	beq.n	1658 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    1660:	4808      	ldr	r0, [pc, #32]	; (1684 <SERCOM5_2_Handler+0x38>)
    1662:	4b0a      	ldr	r3, [pc, #40]	; (168c <SERCOM5_2_Handler+0x40>)
    1664:	4798      	blx	r3
    1666:	490a      	ldr	r1, [pc, #40]	; (1690 <SERCOM5_2_Handler+0x44>)
    1668:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    166a:	2300      	movs	r3, #0
    166c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    166e:	4c09      	ldr	r4, [pc, #36]	; (1694 <SERCOM5_2_Handler+0x48>)
    1670:	4620      	mov	r0, r4
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <SERCOM5_2_Handler+0x4c>)
    1674:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    1676:	2105      	movs	r1, #5
    1678:	4620      	mov	r0, r4
    167a:	4b08      	ldr	r3, [pc, #32]	; (169c <SERCOM5_2_Handler+0x50>)
    167c:	4798      	blx	r3
    167e:	bd38      	pop	{r3, r4, r5, pc}
    1680:	43000400 	.word	0x43000400
    1684:	20000040 	.word	0x20000040
    1688:	00002e1d 	.word	0x00002e1d
    168c:	00002e0b 	.word	0x00002e0b
    1690:	20003c9c 	.word	0x20003c9c
    1694:	20003ca0 	.word	0x20003ca0
    1698:	00005d4d 	.word	0x00005d4d
    169c:	000015bd 	.word	0x000015bd

000016a0 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    16a0:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <configureWatchDogTimeOut+0x2c>)
    16a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    16a8:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    16aa:	4c09      	ldr	r4, [pc, #36]	; (16d0 <configureWatchDogTimeOut+0x30>)
    16ac:	6820      	ldr	r0, [r4, #0]
    16ae:	2279      	movs	r2, #121	; 0x79
    16b0:	4908      	ldr	r1, [pc, #32]	; (16d4 <configureWatchDogTimeOut+0x34>)
    16b2:	3000      	adds	r0, #0
    16b4:	bf18      	it	ne
    16b6:	2001      	movne	r0, #1
    16b8:	4b07      	ldr	r3, [pc, #28]	; (16d8 <configureWatchDogTimeOut+0x38>)
    16ba:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    16bc:	462a      	mov	r2, r5
    16be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    16c2:	4620      	mov	r0, r4
    16c4:	4b05      	ldr	r3, [pc, #20]	; (16dc <configureWatchDogTimeOut+0x3c>)
    16c6:	4798      	blx	r3
    16c8:	bd38      	pop	{r3, r4, r5, pc}
    16ca:	bf00      	nop
    16cc:	2000005c 	.word	0x2000005c
    16d0:	20003d7c 	.word	0x20003d7c
    16d4:	000071f0 	.word	0x000071f0
    16d8:	000022fd 	.word	0x000022fd
    16dc:	000037c9 	.word	0x000037c9

000016e0 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    16e0:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    16e2:	2002      	movs	r0, #2
    16e4:	4b07      	ldr	r3, [pc, #28]	; (1704 <enableWatchDogTimer+0x24>)
    16e6:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    16e8:	4c07      	ldr	r4, [pc, #28]	; (1708 <enableWatchDogTimer+0x28>)
    16ea:	6820      	ldr	r0, [r4, #0]
    16ec:	2296      	movs	r2, #150	; 0x96
    16ee:	4907      	ldr	r1, [pc, #28]	; (170c <enableWatchDogTimer+0x2c>)
    16f0:	3000      	adds	r0, #0
    16f2:	bf18      	it	ne
    16f4:	2001      	movne	r0, #1
    16f6:	4b06      	ldr	r3, [pc, #24]	; (1710 <enableWatchDogTimer+0x30>)
    16f8:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    16fa:	4620      	mov	r0, r4
    16fc:	4b05      	ldr	r3, [pc, #20]	; (1714 <enableWatchDogTimer+0x34>)
    16fe:	4798      	blx	r3
    1700:	bd10      	pop	{r4, pc}
    1702:	bf00      	nop
    1704:	000016a1 	.word	0x000016a1
    1708:	20003d7c 	.word	0x20003d7c
    170c:	000071f0 	.word	0x000071f0
    1710:	000022fd 	.word	0x000022fd
    1714:	000038e5 	.word	0x000038e5

00001718 <atmel_start_init>:
{
    1718:	b508      	push	{r3, lr}
    system_init();
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <atmel_start_init+0x14>)
    171c:	4798      	blx	r3
    delay_ms(1000);
    171e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1722:	4b03      	ldr	r3, [pc, #12]	; (1730 <atmel_start_init+0x18>)
    1724:	4798      	blx	r3
    enableWatchDogTimer();
    1726:	4b03      	ldr	r3, [pc, #12]	; (1734 <atmel_start_init+0x1c>)
    1728:	4798      	blx	r3
    172a:	bd08      	pop	{r3, pc}
    172c:	00001eb5 	.word	0x00001eb5
    1730:	000020a5 	.word	0x000020a5
    1734:	000016e1 	.word	0x000016e1

00001738 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    1738:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    173a:	4c06      	ldr	r4, [pc, #24]	; (1754 <kickWatchDog+0x1c>)
    173c:	6820      	ldr	r0, [r4, #0]
    173e:	22b3      	movs	r2, #179	; 0xb3
    1740:	4905      	ldr	r1, [pc, #20]	; (1758 <kickWatchDog+0x20>)
    1742:	3000      	adds	r0, #0
    1744:	bf18      	it	ne
    1746:	2001      	movne	r0, #1
    1748:	4b04      	ldr	r3, [pc, #16]	; (175c <kickWatchDog+0x24>)
    174a:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    174c:	4620      	mov	r0, r4
    174e:	4b04      	ldr	r3, [pc, #16]	; (1760 <kickWatchDog+0x28>)
    1750:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    1752:	bd10      	pop	{r4, pc}
    1754:	20003d7c 	.word	0x20003d7c
    1758:	000071f0 	.word	0x000071f0
    175c:	000022fd 	.word	0x000022fd
    1760:	00003921 	.word	0x00003921

00001764 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1764:	e7fe      	b.n	1764 <Dummy_Handler>
	...

00001768 <Reset_Handler>:
{
    1768:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    176a:	4b1c      	ldr	r3, [pc, #112]	; (17dc <Reset_Handler+0x74>)
    176c:	4a1c      	ldr	r2, [pc, #112]	; (17e0 <Reset_Handler+0x78>)
    176e:	429a      	cmp	r2, r3
    1770:	d010      	beq.n	1794 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    1772:	4b1c      	ldr	r3, [pc, #112]	; (17e4 <Reset_Handler+0x7c>)
    1774:	4a19      	ldr	r2, [pc, #100]	; (17dc <Reset_Handler+0x74>)
    1776:	429a      	cmp	r2, r3
    1778:	d20c      	bcs.n	1794 <Reset_Handler+0x2c>
    177a:	3b01      	subs	r3, #1
    177c:	1a9b      	subs	r3, r3, r2
    177e:	f023 0303 	bic.w	r3, r3, #3
    1782:	3304      	adds	r3, #4
    1784:	4413      	add	r3, r2
    1786:	4916      	ldr	r1, [pc, #88]	; (17e0 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    1788:	f851 0b04 	ldr.w	r0, [r1], #4
    178c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1790:	429a      	cmp	r2, r3
    1792:	d1f9      	bne.n	1788 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    1794:	4b14      	ldr	r3, [pc, #80]	; (17e8 <Reset_Handler+0x80>)
    1796:	4a15      	ldr	r2, [pc, #84]	; (17ec <Reset_Handler+0x84>)
    1798:	429a      	cmp	r2, r3
    179a:	d20a      	bcs.n	17b2 <Reset_Handler+0x4a>
    179c:	3b01      	subs	r3, #1
    179e:	1a9b      	subs	r3, r3, r2
    17a0:	f023 0303 	bic.w	r3, r3, #3
    17a4:	3304      	adds	r3, #4
    17a6:	4413      	add	r3, r2
                *pDest++ = 0;
    17a8:	2100      	movs	r1, #0
    17aa:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    17ae:	4293      	cmp	r3, r2
    17b0:	d1fb      	bne.n	17aa <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17b2:	4b0f      	ldr	r3, [pc, #60]	; (17f0 <Reset_Handler+0x88>)
    17b4:	4a0f      	ldr	r2, [pc, #60]	; (17f4 <Reset_Handler+0x8c>)
    17b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    17ba:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    17bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    17c0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    17c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    17c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17cc:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    17d0:	4b09      	ldr	r3, [pc, #36]	; (17f8 <Reset_Handler+0x90>)
    17d2:	4798      	blx	r3
        main();
    17d4:	4b09      	ldr	r3, [pc, #36]	; (17fc <Reset_Handler+0x94>)
    17d6:	4798      	blx	r3
    17d8:	e7fe      	b.n	17d8 <Reset_Handler+0x70>
    17da:	bf00      	nop
    17dc:	20000000 	.word	0x20000000
    17e0:	00007948 	.word	0x00007948
    17e4:	2000018c 	.word	0x2000018c
    17e8:	20003e68 	.word	0x20003e68
    17ec:	20000190 	.word	0x20000190
    17f0:	e000ed00 	.word	0xe000ed00
    17f4:	00000000 	.word	0x00000000
    17f8:	00005acd 	.word	0x00005acd
    17fc:	000039d9 	.word	0x000039d9

00001800 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    1800:	4a04      	ldr	r2, [pc, #16]	; (1814 <AC_0_CLOCK_init+0x14>)
    1802:	69d3      	ldr	r3, [r2, #28]
    1804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1808:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    180a:	2240      	movs	r2, #64	; 0x40
    180c:	4b02      	ldr	r3, [pc, #8]	; (1818 <AC_0_CLOCK_init+0x18>)
    180e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1812:	4770      	bx	lr
    1814:	40000800 	.word	0x40000800
    1818:	40001c00 	.word	0x40001c00

0000181c <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    181c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    181e:	4b03      	ldr	r3, [pc, #12]	; (182c <AC_0_init+0x10>)
    1820:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    1822:	4903      	ldr	r1, [pc, #12]	; (1830 <AC_0_init+0x14>)
    1824:	4803      	ldr	r0, [pc, #12]	; (1834 <AC_0_init+0x18>)
    1826:	4b04      	ldr	r3, [pc, #16]	; (1838 <AC_0_init+0x1c>)
    1828:	4798      	blx	r3
    182a:	bd08      	pop	{r3, pc}
    182c:	00001801 	.word	0x00001801
    1830:	42002000 	.word	0x42002000
    1834:	20003d48 	.word	0x20003d48
    1838:	00001fd5 	.word	0x00001fd5

0000183c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    183c:	4b5d      	ldr	r3, [pc, #372]	; (19b4 <ADC_0_PORT_init+0x178>)
    183e:	2204      	movs	r2, #4
    1840:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1842:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1846:	629a      	str	r2, [r3, #40]	; 0x28
    1848:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    184c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    184e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    1852:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1856:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    185a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    185e:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1862:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1866:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    186a:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    186e:	2108      	movs	r1, #8
    1870:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1872:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1876:	6299      	str	r1, [r3, #40]	; 0x28
    1878:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    187a:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    187e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1882:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1886:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    188a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    188e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1892:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1896:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    189a:	f44f 7180 	mov.w	r1, #256	; 0x100
    189e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18a2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    18a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    18aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18ae:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    18b2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18b6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18ba:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18be:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    18c2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    18c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18ca:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18ce:	f44f 7100 	mov.w	r1, #512	; 0x200
    18d2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18d6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    18da:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    18de:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18e2:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    18e6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18ea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18ee:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18f2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    18f6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    18fa:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18fe:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1902:	2110      	movs	r1, #16
    1904:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1906:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    190a:	6299      	str	r1, [r3, #40]	; 0x28
    190c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    190e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    1912:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1916:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    191a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    191e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1922:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1926:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    192a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    192e:	2120      	movs	r1, #32
    1930:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1932:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1936:	6299      	str	r1, [r3, #40]	; 0x28
    1938:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    193a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    193e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1942:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1946:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    194a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    194e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1952:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1956:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    195a:	2140      	movs	r1, #64	; 0x40
    195c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    195e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1962:	6299      	str	r1, [r3, #40]	; 0x28
    1964:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1966:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    196a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    196e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1972:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1976:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    197a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    197e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1982:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1986:	2180      	movs	r1, #128	; 0x80
    1988:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    198a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    198e:	6299      	str	r1, [r3, #40]	; 0x28
    1990:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1992:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    1996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    199a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    199e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    19a2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    19a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    19aa:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    19ae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    19b2:	4770      	bx	lr
    19b4:	41008000 	.word	0x41008000

000019b8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    19b8:	4a04      	ldr	r2, [pc, #16]	; (19cc <ADC_0_CLOCK_init+0x14>)
    19ba:	6a13      	ldr	r3, [r2, #32]
    19bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19c0:	6213      	str	r3, [r2, #32]
    19c2:	2241      	movs	r2, #65	; 0x41
    19c4:	4b02      	ldr	r3, [pc, #8]	; (19d0 <ADC_0_CLOCK_init+0x18>)
    19c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    19ca:	4770      	bx	lr
    19cc:	40000800 	.word	0x40000800
    19d0:	40001c00 	.word	0x40001c00

000019d4 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    19d4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <ADC_0_init+0x18>)
    19d8:	4798      	blx	r3
	ADC_0_PORT_init();
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <ADC_0_init+0x1c>)
    19dc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    19de:	2200      	movs	r2, #0
    19e0:	4904      	ldr	r1, [pc, #16]	; (19f4 <ADC_0_init+0x20>)
    19e2:	4805      	ldr	r0, [pc, #20]	; (19f8 <ADC_0_init+0x24>)
    19e4:	4b05      	ldr	r3, [pc, #20]	; (19fc <ADC_0_init+0x28>)
    19e6:	4798      	blx	r3
    19e8:	bd08      	pop	{r3, pc}
    19ea:	bf00      	nop
    19ec:	000019b9 	.word	0x000019b9
    19f0:	0000183d 	.word	0x0000183d
    19f4:	43001c00 	.word	0x43001c00
    19f8:	20003d58 	.word	0x20003d58
    19fc:	00002005 	.word	0x00002005

00001a00 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    1a00:	4a04      	ldr	r2, [pc, #16]	; (1a14 <ADC_1_CLOCK_init+0x14>)
    1a02:	6a13      	ldr	r3, [r2, #32]
    1a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1a08:	6213      	str	r3, [r2, #32]
    1a0a:	2240      	movs	r2, #64	; 0x40
    1a0c:	4b02      	ldr	r3, [pc, #8]	; (1a18 <ADC_1_CLOCK_init+0x18>)
    1a0e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1a12:	4770      	bx	lr
    1a14:	40000800 	.word	0x40000800
    1a18:	40001c00 	.word	0x40001c00

00001a1c <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1a1c:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1a1e:	4b04      	ldr	r3, [pc, #16]	; (1a30 <ADC_1_init+0x14>)
    1a20:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    1a22:	2200      	movs	r2, #0
    1a24:	4903      	ldr	r1, [pc, #12]	; (1a34 <ADC_1_init+0x18>)
    1a26:	4804      	ldr	r0, [pc, #16]	; (1a38 <ADC_1_init+0x1c>)
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <ADC_1_init+0x20>)
    1a2a:	4798      	blx	r3
    1a2c:	bd08      	pop	{r3, pc}
    1a2e:	bf00      	nop
    1a30:	00001a01 	.word	0x00001a01
    1a34:	43002000 	.word	0x43002000
    1a38:	20003e10 	.word	0x20003e10
    1a3c:	00002005 	.word	0x00002005

00001a40 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    1a40:	4a04      	ldr	r2, [pc, #16]	; (1a54 <DAC_0_CLOCK_init+0x14>)
    1a42:	6a13      	ldr	r3, [r2, #32]
    1a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1a48:	6213      	str	r3, [r2, #32]
    1a4a:	2240      	movs	r2, #64	; 0x40
    1a4c:	4b02      	ldr	r3, [pc, #8]	; (1a58 <DAC_0_CLOCK_init+0x18>)
    1a4e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1a52:	4770      	bx	lr
    1a54:	40000800 	.word	0x40000800
    1a58:	40001c00 	.word	0x40001c00

00001a5c <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    1a5c:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    1a5e:	4b03      	ldr	r3, [pc, #12]	; (1a6c <DAC_0_init+0x10>)
    1a60:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    1a62:	4903      	ldr	r1, [pc, #12]	; (1a70 <DAC_0_init+0x14>)
    1a64:	4803      	ldr	r0, [pc, #12]	; (1a74 <DAC_0_init+0x18>)
    1a66:	4b04      	ldr	r3, [pc, #16]	; (1a78 <DAC_0_init+0x1c>)
    1a68:	4798      	blx	r3
    1a6a:	bd08      	pop	{r3, pc}
    1a6c:	00001a41 	.word	0x00001a41
    1a70:	43002400 	.word	0x43002400
    1a74:	20003d80 	.word	0x20003d80
    1a78:	00002051 	.word	0x00002051

00001a7c <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    1a7c:	b508      	push	{r3, lr}
    1a7e:	2240      	movs	r2, #64	; 0x40
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <EXTERNAL_IRQ_0_init+0x1c>)
    1a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1a86:	4a05      	ldr	r2, [pc, #20]	; (1a9c <EXTERNAL_IRQ_0_init+0x20>)
    1a88:	6953      	ldr	r3, [r2, #20]
    1a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1a8e:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    1a90:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <EXTERNAL_IRQ_0_init+0x24>)
    1a92:	4798      	blx	r3
    1a94:	bd08      	pop	{r3, pc}
    1a96:	bf00      	nop
    1a98:	40001c00 	.word	0x40001c00
    1a9c:	40000800 	.word	0x40000800
    1aa0:	00002109 	.word	0x00002109

00001aa4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    1aa4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1aa6:	4a04      	ldr	r2, [pc, #16]	; (1ab8 <EVENT_SYSTEM_0_init+0x14>)
    1aa8:	6993      	ldr	r3, [r2, #24]
    1aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1aae:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    1ab0:	4b02      	ldr	r3, [pc, #8]	; (1abc <EVENT_SYSTEM_0_init+0x18>)
    1ab2:	4798      	blx	r3
    1ab4:	bd08      	pop	{r3, pc}
    1ab6:	bf00      	nop
    1ab8:	40000800 	.word	0x40000800
    1abc:	000020c5 	.word	0x000020c5

00001ac0 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1ac0:	4a02      	ldr	r2, [pc, #8]	; (1acc <FLASH_0_CLOCK_init+0xc>)
    1ac2:	6913      	ldr	r3, [r2, #16]
    1ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ac8:	6113      	str	r3, [r2, #16]
    1aca:	4770      	bx	lr
    1acc:	40000800 	.word	0x40000800

00001ad0 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    1ad0:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    1ad2:	4b03      	ldr	r3, [pc, #12]	; (1ae0 <FLASH_0_init+0x10>)
    1ad4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    1ad6:	4903      	ldr	r1, [pc, #12]	; (1ae4 <FLASH_0_init+0x14>)
    1ad8:	4803      	ldr	r0, [pc, #12]	; (1ae8 <FLASH_0_init+0x18>)
    1ada:	4b04      	ldr	r3, [pc, #16]	; (1aec <FLASH_0_init+0x1c>)
    1adc:	4798      	blx	r3
    1ade:	bd08      	pop	{r3, pc}
    1ae0:	00001ac1 	.word	0x00001ac1
    1ae4:	41004000 	.word	0x41004000
    1ae8:	20003d0c 	.word	0x20003d0c
    1aec:	00002141 	.word	0x00002141

00001af0 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1af0:	4b10      	ldr	r3, [pc, #64]	; (1b34 <ModemData_PORT_init+0x44>)
    1af2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    1af6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1afa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b02:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b06:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b0a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b12:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b1a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b22:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1b26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1b2a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    1b32:	4770      	bx	lr
    1b34:	41008000 	.word	0x41008000

00001b38 <ModemData_CLOCK_init>:
    1b38:	4b06      	ldr	r3, [pc, #24]	; (1b54 <ModemData_CLOCK_init+0x1c>)
    1b3a:	2240      	movs	r2, #64	; 0x40
    1b3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1b40:	224a      	movs	r2, #74	; 0x4a
    1b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    1b46:	4a04      	ldr	r2, [pc, #16]	; (1b58 <ModemData_CLOCK_init+0x20>)
    1b48:	6993      	ldr	r3, [r2, #24]
    1b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1b4e:	6193      	str	r3, [r2, #24]
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop
    1b54:	40001c00 	.word	0x40001c00
    1b58:	40000800 	.word	0x40000800

00001b5c <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    1b5c:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    1b5e:	4b03      	ldr	r3, [pc, #12]	; (1b6c <ModemData_init+0x10>)
    1b60:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    1b62:	4b03      	ldr	r3, [pc, #12]	; (1b70 <ModemData_init+0x14>)
    1b64:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    1b66:	4b03      	ldr	r3, [pc, #12]	; (1b74 <ModemData_init+0x18>)
    1b68:	4798      	blx	r3
    1b6a:	bd08      	pop	{r3, pc}
    1b6c:	00001b39 	.word	0x00001b39
    1b70:	00000ca5 	.word	0x00000ca5
    1b74:	00001af1 	.word	0x00001af1

00001b78 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b78:	4b10      	ldr	r3, [pc, #64]	; (1bbc <SerialDebug_PORT_init+0x44>)
    1b7a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b86:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b8a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b8e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1b92:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b96:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b9a:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ba2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ba6:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1baa:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1bae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1bb2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1bb6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    1bba:	4770      	bx	lr
    1bbc:	41008000 	.word	0x41008000

00001bc0 <SerialDebug_CLOCK_init>:
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <SerialDebug_CLOCK_init+0x1c>)
    1bc2:	2240      	movs	r2, #64	; 0x40
    1bc4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1bc8:	224a      	movs	r2, #74	; 0x4a
    1bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1bce:	4a04      	ldr	r2, [pc, #16]	; (1be0 <SerialDebug_CLOCK_init+0x20>)
    1bd0:	6a13      	ldr	r3, [r2, #32]
    1bd2:	f043 0302 	orr.w	r3, r3, #2
    1bd6:	6213      	str	r3, [r2, #32]
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop
    1bdc:	40001c00 	.word	0x40001c00
    1be0:	40000800 	.word	0x40000800

00001be4 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    1be4:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    1be6:	4b03      	ldr	r3, [pc, #12]	; (1bf4 <SerialDebug_init+0x10>)
    1be8:	4798      	blx	r3
	SerialDebugPrintInit();
    1bea:	4b03      	ldr	r3, [pc, #12]	; (1bf8 <SerialDebug_init+0x14>)
    1bec:	4798      	blx	r3
	SerialDebug_PORT_init();
    1bee:	4b03      	ldr	r3, [pc, #12]	; (1bfc <SerialDebug_init+0x18>)
    1bf0:	4798      	blx	r3
    1bf2:	bd08      	pop	{r3, pc}
    1bf4:	00001bc1 	.word	0x00001bc1
    1bf8:	00001595 	.word	0x00001595
    1bfc:	00001b79 	.word	0x00001b79

00001c00 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1c00:	b508      	push	{r3, lr}
	delay_init(SysTick);
    1c02:	4802      	ldr	r0, [pc, #8]	; (1c0c <delay_driver_init+0xc>)
    1c04:	4b02      	ldr	r3, [pc, #8]	; (1c10 <delay_driver_init+0x10>)
    1c06:	4798      	blx	r3
    1c08:	bd08      	pop	{r3, pc}
    1c0a:	bf00      	nop
    1c0c:	e000e010 	.word	0xe000e010
    1c10:	00002091 	.word	0x00002091

00001c14 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1c14:	4a04      	ldr	r2, [pc, #16]	; (1c28 <PWM_0_CLOCK_init+0x14>)
    1c16:	6953      	ldr	r3, [r2, #20]
    1c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1c1c:	6153      	str	r3, [r2, #20]
    1c1e:	2240      	movs	r2, #64	; 0x40
    1c20:	4b02      	ldr	r3, [pc, #8]	; (1c2c <PWM_0_CLOCK_init+0x18>)
    1c22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1c26:	4770      	bx	lr
    1c28:	40000800 	.word	0x40000800
    1c2c:	40001c00 	.word	0x40001c00

00001c30 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    1c30:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    1c32:	4b05      	ldr	r3, [pc, #20]	; (1c48 <PWM_0_init+0x18>)
    1c34:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <PWM_0_init+0x1c>)
    1c38:	4798      	blx	r3
    1c3a:	4602      	mov	r2, r0
    1c3c:	4904      	ldr	r1, [pc, #16]	; (1c50 <PWM_0_init+0x20>)
    1c3e:	4805      	ldr	r0, [pc, #20]	; (1c54 <PWM_0_init+0x24>)
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <PWM_0_init+0x28>)
    1c42:	4798      	blx	r3
    1c44:	bd08      	pop	{r3, pc}
    1c46:	bf00      	nop
    1c48:	00001c15 	.word	0x00001c15
    1c4c:	000036e1 	.word	0x000036e1
    1c50:	40003800 	.word	0x40003800
    1c54:	20003cd4 	.word	0x20003cd4
    1c58:	0000219d 	.word	0x0000219d

00001c5c <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1c5c:	4a04      	ldr	r2, [pc, #16]	; (1c70 <PWM_1_CLOCK_init+0x14>)
    1c5e:	6953      	ldr	r3, [r2, #20]
    1c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1c64:	6153      	str	r3, [r2, #20]
    1c66:	2240      	movs	r2, #64	; 0x40
    1c68:	4b02      	ldr	r3, [pc, #8]	; (1c74 <PWM_1_CLOCK_init+0x18>)
    1c6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1c6e:	4770      	bx	lr
    1c70:	40000800 	.word	0x40000800
    1c74:	40001c00 	.word	0x40001c00

00001c78 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    1c78:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    1c7a:	4b05      	ldr	r3, [pc, #20]	; (1c90 <PWM_1_init+0x18>)
    1c7c:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <PWM_1_init+0x1c>)
    1c80:	4798      	blx	r3
    1c82:	4602      	mov	r2, r0
    1c84:	4904      	ldr	r1, [pc, #16]	; (1c98 <PWM_1_init+0x20>)
    1c86:	4805      	ldr	r0, [pc, #20]	; (1c9c <PWM_1_init+0x24>)
    1c88:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <PWM_1_init+0x28>)
    1c8a:	4798      	blx	r3
    1c8c:	bd08      	pop	{r3, pc}
    1c8e:	bf00      	nop
    1c90:	00001c5d 	.word	0x00001c5d
    1c94:	000036e1 	.word	0x000036e1
    1c98:	40003c00 	.word	0x40003c00
    1c9c:	20003df4 	.word	0x20003df4
    1ca0:	0000219d 	.word	0x0000219d

00001ca4 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1ca4:	4a04      	ldr	r2, [pc, #16]	; (1cb8 <PWM_2_CLOCK_init+0x14>)
    1ca6:	6993      	ldr	r3, [r2, #24]
    1ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1cac:	6193      	str	r3, [r2, #24]
    1cae:	2240      	movs	r2, #64	; 0x40
    1cb0:	4b02      	ldr	r3, [pc, #8]	; (1cbc <PWM_2_CLOCK_init+0x18>)
    1cb2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    1cb6:	4770      	bx	lr
    1cb8:	40000800 	.word	0x40000800
    1cbc:	40001c00 	.word	0x40001c00

00001cc0 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    1cc0:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <PWM_2_init+0x18>)
    1cc4:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    1cc6:	4b05      	ldr	r3, [pc, #20]	; (1cdc <PWM_2_init+0x1c>)
    1cc8:	4798      	blx	r3
    1cca:	4602      	mov	r2, r0
    1ccc:	4904      	ldr	r1, [pc, #16]	; (1ce0 <PWM_2_init+0x20>)
    1cce:	4805      	ldr	r0, [pc, #20]	; (1ce4 <PWM_2_init+0x24>)
    1cd0:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <PWM_2_init+0x28>)
    1cd2:	4798      	blx	r3
    1cd4:	bd08      	pop	{r3, pc}
    1cd6:	bf00      	nop
    1cd8:	00001ca5 	.word	0x00001ca5
    1cdc:	000036e1 	.word	0x000036e1
    1ce0:	4101a000 	.word	0x4101a000
    1ce4:	20003cf0 	.word	0x20003cf0
    1ce8:	0000219d 	.word	0x0000219d

00001cec <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1cec:	4a04      	ldr	r2, [pc, #16]	; (1d00 <TIMER_3_CLOCK_init+0x14>)
    1cee:	6993      	ldr	r3, [r2, #24]
    1cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1cf4:	6193      	str	r3, [r2, #24]
    1cf6:	2240      	movs	r2, #64	; 0x40
    1cf8:	4b02      	ldr	r3, [pc, #8]	; (1d04 <TIMER_3_CLOCK_init+0x18>)
    1cfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1cfe:	4770      	bx	lr
    1d00:	40000800 	.word	0x40000800
    1d04:	40001c00 	.word	0x40001c00

00001d08 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1d08:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1d0a:	4b05      	ldr	r3, [pc, #20]	; (1d20 <TIMER_3_init+0x18>)
    1d0c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1d0e:	4b05      	ldr	r3, [pc, #20]	; (1d24 <TIMER_3_init+0x1c>)
    1d10:	4798      	blx	r3
    1d12:	4602      	mov	r2, r0
    1d14:	4904      	ldr	r1, [pc, #16]	; (1d28 <TIMER_3_init+0x20>)
    1d16:	4805      	ldr	r0, [pc, #20]	; (1d2c <TIMER_3_init+0x24>)
    1d18:	4b05      	ldr	r3, [pc, #20]	; (1d30 <TIMER_3_init+0x28>)
    1d1a:	4798      	blx	r3
    1d1c:	bd08      	pop	{r3, pc}
    1d1e:	bf00      	nop
    1d20:	00001ced 	.word	0x00001ced
    1d24:	00003199 	.word	0x00003199
    1d28:	41016000 	.word	0x41016000
    1d2c:	20003e14 	.word	0x20003e14
    1d30:	000022b9 	.word	0x000022b9

00001d34 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1d34:	4a04      	ldr	r2, [pc, #16]	; (1d48 <TIMER_4_CLOCK_init+0x14>)
    1d36:	6993      	ldr	r3, [r2, #24]
    1d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1d3c:	6193      	str	r3, [r2, #24]
    1d3e:	2240      	movs	r2, #64	; 0x40
    1d40:	4b02      	ldr	r3, [pc, #8]	; (1d4c <TIMER_4_CLOCK_init+0x18>)
    1d42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1d46:	4770      	bx	lr
    1d48:	40000800 	.word	0x40000800
    1d4c:	40001c00 	.word	0x40001c00

00001d50 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    1d50:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <TIMER_4_init+0x18>)
    1d54:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <TIMER_4_init+0x1c>)
    1d58:	4798      	blx	r3
    1d5a:	4602      	mov	r2, r0
    1d5c:	4904      	ldr	r1, [pc, #16]	; (1d70 <TIMER_4_init+0x20>)
    1d5e:	4805      	ldr	r0, [pc, #20]	; (1d74 <TIMER_4_init+0x24>)
    1d60:	4b05      	ldr	r3, [pc, #20]	; (1d78 <TIMER_4_init+0x28>)
    1d62:	4798      	blx	r3
    1d64:	bd08      	pop	{r3, pc}
    1d66:	bf00      	nop
    1d68:	00001d35 	.word	0x00001d35
    1d6c:	00003199 	.word	0x00003199
    1d70:	41018000 	.word	0x41018000
    1d74:	20003d5c 	.word	0x20003d5c
    1d78:	000022b9 	.word	0x000022b9

00001d7c <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1d7c:	4a04      	ldr	r2, [pc, #16]	; (1d90 <TIMER_5_CLOCK_init+0x14>)
    1d7e:	69d3      	ldr	r3, [r2, #28]
    1d80:	f043 0308 	orr.w	r3, r3, #8
    1d84:	61d3      	str	r3, [r2, #28]
    1d86:	2240      	movs	r2, #64	; 0x40
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <TIMER_5_CLOCK_init+0x18>)
    1d8a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1d8e:	4770      	bx	lr
    1d90:	40000800 	.word	0x40000800
    1d94:	40001c00 	.word	0x40001c00

00001d98 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    1d98:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    1d9a:	4b05      	ldr	r3, [pc, #20]	; (1db0 <TIMER_5_init+0x18>)
    1d9c:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    1d9e:	4b05      	ldr	r3, [pc, #20]	; (1db4 <TIMER_5_init+0x1c>)
    1da0:	4798      	blx	r3
    1da2:	4602      	mov	r2, r0
    1da4:	4904      	ldr	r1, [pc, #16]	; (1db8 <TIMER_5_init+0x20>)
    1da6:	4805      	ldr	r0, [pc, #20]	; (1dbc <TIMER_5_init+0x24>)
    1da8:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <TIMER_5_init+0x28>)
    1daa:	4798      	blx	r3
    1dac:	bd08      	pop	{r3, pc}
    1dae:	bf00      	nop
    1db0:	00001d7d 	.word	0x00001d7d
    1db4:	00003199 	.word	0x00003199
    1db8:	42000c00 	.word	0x42000c00
    1dbc:	20003db4 	.word	0x20003db4
    1dc0:	000022b9 	.word	0x000022b9

00001dc4 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    1dc4:	4a04      	ldr	r2, [pc, #16]	; (1dd8 <TIMER_6_CLOCK_init+0x14>)
    1dc6:	69d3      	ldr	r3, [r2, #28]
    1dc8:	f043 0310 	orr.w	r3, r3, #16
    1dcc:	61d3      	str	r3, [r2, #28]
    1dce:	2240      	movs	r2, #64	; 0x40
    1dd0:	4b02      	ldr	r3, [pc, #8]	; (1ddc <TIMER_6_CLOCK_init+0x18>)
    1dd2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1dd6:	4770      	bx	lr
    1dd8:	40000800 	.word	0x40000800
    1ddc:	40001c00 	.word	0x40001c00

00001de0 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    1de0:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <TIMER_6_init+0x18>)
    1de4:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <TIMER_6_init+0x1c>)
    1de8:	4798      	blx	r3
    1dea:	4602      	mov	r2, r0
    1dec:	4904      	ldr	r1, [pc, #16]	; (1e00 <TIMER_6_init+0x20>)
    1dee:	4805      	ldr	r0, [pc, #20]	; (1e04 <TIMER_6_init+0x24>)
    1df0:	4b05      	ldr	r3, [pc, #20]	; (1e08 <TIMER_6_init+0x28>)
    1df2:	4798      	blx	r3
    1df4:	bd08      	pop	{r3, pc}
    1df6:	bf00      	nop
    1df8:	00001dc5 	.word	0x00001dc5
    1dfc:	00003199 	.word	0x00003199
    1e00:	42001000 	.word	0x42001000
    1e04:	20003dd4 	.word	0x20003dd4
    1e08:	000022b9 	.word	0x000022b9

00001e0c <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1e0c:	4a04      	ldr	r2, [pc, #16]	; (1e20 <TIMER_7_CLOCK_init+0x14>)
    1e0e:	6a13      	ldr	r3, [r2, #32]
    1e10:	f043 0310 	orr.w	r3, r3, #16
    1e14:	6213      	str	r3, [r2, #32]
    1e16:	2240      	movs	r2, #64	; 0x40
    1e18:	4b02      	ldr	r3, [pc, #8]	; (1e24 <TIMER_7_CLOCK_init+0x18>)
    1e1a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1e1e:	4770      	bx	lr
    1e20:	40000800 	.word	0x40000800
    1e24:	40001c00 	.word	0x40001c00

00001e28 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1e28:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1e2a:	4b05      	ldr	r3, [pc, #20]	; (1e40 <TIMER_7_init+0x18>)
    1e2c:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    1e2e:	4b05      	ldr	r3, [pc, #20]	; (1e44 <TIMER_7_init+0x1c>)
    1e30:	4798      	blx	r3
    1e32:	4602      	mov	r2, r0
    1e34:	4904      	ldr	r1, [pc, #16]	; (1e48 <TIMER_7_init+0x20>)
    1e36:	4805      	ldr	r0, [pc, #20]	; (1e4c <TIMER_7_init+0x24>)
    1e38:	4b05      	ldr	r3, [pc, #20]	; (1e50 <TIMER_7_init+0x28>)
    1e3a:	4798      	blx	r3
    1e3c:	bd08      	pop	{r3, pc}
    1e3e:	bf00      	nop
    1e40:	00001e0d 	.word	0x00001e0d
    1e44:	00003199 	.word	0x00003199
    1e48:	43001000 	.word	0x43001000
    1e4c:	20003d28 	.word	0x20003d28
    1e50:	000022b9 	.word	0x000022b9

00001e54 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1e54:	4a02      	ldr	r2, [pc, #8]	; (1e60 <WDT_0_CLOCK_init+0xc>)
    1e56:	6953      	ldr	r3, [r2, #20]
    1e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e5c:	6153      	str	r3, [r2, #20]
    1e5e:	4770      	bx	lr
    1e60:	40000800 	.word	0x40000800

00001e64 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    1e64:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    1e66:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <WDT_0_init+0x2c>)
    1e68:	4798      	blx	r3
	ASSERT(wdt && hw);
    1e6a:	2252      	movs	r2, #82	; 0x52
    1e6c:	4909      	ldr	r1, [pc, #36]	; (1e94 <WDT_0_init+0x30>)
    1e6e:	2001      	movs	r0, #1
    1e70:	4b09      	ldr	r3, [pc, #36]	; (1e98 <WDT_0_init+0x34>)
    1e72:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    1e74:	4809      	ldr	r0, [pc, #36]	; (1e9c <WDT_0_init+0x38>)
    1e76:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <WDT_0_init+0x3c>)
    1e78:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    1e7a:	4b0a      	ldr	r3, [pc, #40]	; (1ea4 <WDT_0_init+0x40>)
    1e7c:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    1e7e:	b118      	cbz	r0, 1e88 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    1e80:	4809      	ldr	r0, [pc, #36]	; (1ea8 <WDT_0_init+0x44>)
    1e82:	4b0a      	ldr	r3, [pc, #40]	; (1eac <WDT_0_init+0x48>)
    1e84:	4798      	blx	r3
    1e86:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    1e88:	4809      	ldr	r0, [pc, #36]	; (1eb0 <WDT_0_init+0x4c>)
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <WDT_0_init+0x48>)
    1e8c:	4798      	blx	r3
    1e8e:	bd08      	pop	{r3, pc}
    1e90:	00001e55 	.word	0x00001e55
    1e94:	000071f0 	.word	0x000071f0
    1e98:	000022fd 	.word	0x000022fd
    1e9c:	20003d7c 	.word	0x20003d7c
    1ea0:	40002000 	.word	0x40002000
    1ea4:	0000375d 	.word	0x0000375d
    1ea8:	0000721c 	.word	0x0000721c
    1eac:	00001601 	.word	0x00001601
    1eb0:	0000720c 	.word	0x0000720c

00001eb4 <system_init>:
	}
}

void system_init(void)
{
    1eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1eb8:	4b28      	ldr	r3, [pc, #160]	; (1f5c <system_init+0xa8>)
    1eba:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    1ebc:	4b28      	ldr	r3, [pc, #160]	; (1f60 <system_init+0xac>)
    1ebe:	4798      	blx	r3

	AC_0_init();
    1ec0:	4b28      	ldr	r3, [pc, #160]	; (1f64 <system_init+0xb0>)
    1ec2:	4798      	blx	r3

	ADC_0_init();
    1ec4:	4b28      	ldr	r3, [pc, #160]	; (1f68 <system_init+0xb4>)
    1ec6:	4798      	blx	r3

	ADC_1_init();
    1ec8:	4b28      	ldr	r3, [pc, #160]	; (1f6c <system_init+0xb8>)
    1eca:	4798      	blx	r3

	DAC_0_init();
    1ecc:	4b28      	ldr	r3, [pc, #160]	; (1f70 <system_init+0xbc>)
    1ece:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1ed0:	4b28      	ldr	r3, [pc, #160]	; (1f74 <system_init+0xc0>)
    1ed2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1ed4:	4b28      	ldr	r3, [pc, #160]	; (1f78 <system_init+0xc4>)
    1ed6:	4798      	blx	r3

	FLASH_0_init();
    1ed8:	4b28      	ldr	r3, [pc, #160]	; (1f7c <system_init+0xc8>)
    1eda:	4798      	blx	r3

	SerialDebug_init();
    1edc:	4b28      	ldr	r3, [pc, #160]	; (1f80 <system_init+0xcc>)
    1ede:	4798      	blx	r3
	
	ModemData_init();
    1ee0:	4b28      	ldr	r3, [pc, #160]	; (1f84 <system_init+0xd0>)
    1ee2:	4798      	blx	r3

	PWM_0_init();
    1ee4:	4b28      	ldr	r3, [pc, #160]	; (1f88 <system_init+0xd4>)
    1ee6:	4798      	blx	r3

	PWM_1_init();
    1ee8:	4b28      	ldr	r3, [pc, #160]	; (1f8c <system_init+0xd8>)
    1eea:	4798      	blx	r3

	PWM_2_init();
    1eec:	4b28      	ldr	r3, [pc, #160]	; (1f90 <system_init+0xdc>)
    1eee:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1ef0:	4c28      	ldr	r4, [pc, #160]	; (1f94 <system_init+0xe0>)
    1ef2:	69a3      	ldr	r3, [r4, #24]
    1ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1ef8:	61a3      	str	r3, [r4, #24]
    1efa:	4f27      	ldr	r7, [pc, #156]	; (1f98 <system_init+0xe4>)
    1efc:	f04f 0840 	mov.w	r8, #64	; 0x40
    1f00:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    1f04:	4e25      	ldr	r6, [pc, #148]	; (1f9c <system_init+0xe8>)
    1f06:	47b0      	blx	r6
    1f08:	4602      	mov	r2, r0
    1f0a:	4925      	ldr	r1, [pc, #148]	; (1fa0 <system_init+0xec>)
    1f0c:	4825      	ldr	r0, [pc, #148]	; (1fa4 <system_init+0xf0>)
    1f0e:	4d26      	ldr	r5, [pc, #152]	; (1fa8 <system_init+0xf4>)
    1f10:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1f12:	69e3      	ldr	r3, [r4, #28]
    1f14:	f043 0320 	orr.w	r3, r3, #32
    1f18:	61e3      	str	r3, [r4, #28]
    1f1a:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1f1e:	47b0      	blx	r6
    1f20:	4602      	mov	r2, r0
    1f22:	4922      	ldr	r1, [pc, #136]	; (1fac <system_init+0xf8>)
    1f24:	4822      	ldr	r0, [pc, #136]	; (1fb0 <system_init+0xfc>)
    1f26:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1f28:	69e3      	ldr	r3, [r4, #28]
    1f2a:	ea43 0308 	orr.w	r3, r3, r8
    1f2e:	61e3      	str	r3, [r4, #28]
    1f30:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1f34:	47b0      	blx	r6
    1f36:	4602      	mov	r2, r0
    1f38:	491e      	ldr	r1, [pc, #120]	; (1fb4 <system_init+0x100>)
    1f3a:	481f      	ldr	r0, [pc, #124]	; (1fb8 <system_init+0x104>)
    1f3c:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    1f3e:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <system_init+0x108>)
    1f40:	4798      	blx	r3

	TIMER_4_init();
    1f42:	4b1f      	ldr	r3, [pc, #124]	; (1fc0 <system_init+0x10c>)
    1f44:	4798      	blx	r3

	TIMER_5_init();
    1f46:	4b1f      	ldr	r3, [pc, #124]	; (1fc4 <system_init+0x110>)
    1f48:	4798      	blx	r3

	TIMER_6_init();
    1f4a:	4b1f      	ldr	r3, [pc, #124]	; (1fc8 <system_init+0x114>)
    1f4c:	4798      	blx	r3

	TIMER_7_init();
    1f4e:	4b1f      	ldr	r3, [pc, #124]	; (1fcc <system_init+0x118>)
    1f50:	4798      	blx	r3
	
	WDT_0_init();
    1f52:	4b1f      	ldr	r3, [pc, #124]	; (1fd0 <system_init+0x11c>)
    1f54:	4798      	blx	r3
    1f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f5a:	bf00      	nop
    1f5c:	00002649 	.word	0x00002649
    1f60:	00001c01 	.word	0x00001c01
    1f64:	0000181d 	.word	0x0000181d
    1f68:	000019d5 	.word	0x000019d5
    1f6c:	00001a1d 	.word	0x00001a1d
    1f70:	00001a5d 	.word	0x00001a5d
    1f74:	00001a7d 	.word	0x00001a7d
    1f78:	00001aa5 	.word	0x00001aa5
    1f7c:	00001ad1 	.word	0x00001ad1
    1f80:	00001be5 	.word	0x00001be5
    1f84:	00001b5d 	.word	0x00001b5d
    1f88:	00001c31 	.word	0x00001c31
    1f8c:	00001c79 	.word	0x00001c79
    1f90:	00001cc1 	.word	0x00001cc1
    1f94:	40000800 	.word	0x40000800
    1f98:	40001c00 	.word	0x40001c00
    1f9c:	000036d9 	.word	0x000036d9
    1fa0:	4101c000 	.word	0x4101c000
    1fa4:	20003e34 	.word	0x20003e34
    1fa8:	000022b9 	.word	0x000022b9
    1fac:	42001400 	.word	0x42001400
    1fb0:	20003d94 	.word	0x20003d94
    1fb4:	42001800 	.word	0x42001800
    1fb8:	20003cb4 	.word	0x20003cb4
    1fbc:	00001d09 	.word	0x00001d09
    1fc0:	00001d51 	.word	0x00001d51
    1fc4:	00001d99 	.word	0x00001d99
    1fc8:	00001de1 	.word	0x00001de1
    1fcc:	00001e29 	.word	0x00001e29
    1fd0:	00001e65 	.word	0x00001e65

00001fd4 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1fd4:	b538      	push	{r3, r4, r5, lr}
    1fd6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1fd8:	4605      	mov	r5, r0
    1fda:	b158      	cbz	r0, 1ff4 <ac_sync_init+0x20>
    1fdc:	1c08      	adds	r0, r1, #0
    1fde:	bf18      	it	ne
    1fe0:	2001      	movne	r0, #1
    1fe2:	223b      	movs	r2, #59	; 0x3b
    1fe4:	4904      	ldr	r1, [pc, #16]	; (1ff8 <ac_sync_init+0x24>)
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <ac_sync_init+0x28>)
    1fe8:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1fea:	4621      	mov	r1, r4
    1fec:	4628      	mov	r0, r5
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <ac_sync_init+0x2c>)
    1ff0:	4798      	blx	r3
}
    1ff2:	bd38      	pop	{r3, r4, r5, pc}
    1ff4:	2000      	movs	r0, #0
    1ff6:	e7f4      	b.n	1fe2 <ac_sync_init+0xe>
    1ff8:	00007238 	.word	0x00007238
    1ffc:	000022fd 	.word	0x000022fd
    2000:	00002511 	.word	0x00002511

00002004 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    2004:	b538      	push	{r3, r4, r5, lr}
    2006:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    2008:	4605      	mov	r5, r0
    200a:	b158      	cbz	r0, 2024 <adc_sync_init+0x20>
    200c:	1c08      	adds	r0, r1, #0
    200e:	bf18      	it	ne
    2010:	2001      	movne	r0, #1
    2012:	2243      	movs	r2, #67	; 0x43
    2014:	4904      	ldr	r1, [pc, #16]	; (2028 <adc_sync_init+0x24>)
    2016:	4b05      	ldr	r3, [pc, #20]	; (202c <adc_sync_init+0x28>)
    2018:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    201a:	4621      	mov	r1, r4
    201c:	4628      	mov	r0, r5
    201e:	4b04      	ldr	r3, [pc, #16]	; (2030 <adc_sync_init+0x2c>)
    2020:	4798      	blx	r3
}
    2022:	bd38      	pop	{r3, r4, r5, pc}
    2024:	2000      	movs	r0, #0
    2026:	e7f4      	b.n	2012 <adc_sync_init+0xe>
    2028:	00007254 	.word	0x00007254
    202c:	000022fd 	.word	0x000022fd
    2030:	000025e9 	.word	0x000025e9

00002034 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2034:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2038:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    203a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    203c:	f3bf 8f5f 	dmb	sy
    2040:	4770      	bx	lr

00002042 <atomic_leave_critical>:
    2042:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2046:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2048:	f383 8810 	msr	PRIMASK, r3
    204c:	4770      	bx	lr
	...

00002050 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    2050:	b538      	push	{r3, r4, r5, lr}
    2052:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    2054:	4604      	mov	r4, r0
    2056:	b198      	cbz	r0, 2080 <dac_sync_init+0x30>
    2058:	1c08      	adds	r0, r1, #0
    205a:	bf18      	it	ne
    205c:	2001      	movne	r0, #1
    205e:	223c      	movs	r2, #60	; 0x3c
    2060:	4908      	ldr	r1, [pc, #32]	; (2084 <dac_sync_init+0x34>)
    2062:	4b09      	ldr	r3, [pc, #36]	; (2088 <dac_sync_init+0x38>)
    2064:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    2066:	4629      	mov	r1, r5
    2068:	4620      	mov	r0, r4
    206a:	4b08      	ldr	r3, [pc, #32]	; (208c <dac_sync_init+0x3c>)
    206c:	4798      	blx	r3
	if (rc) {
    206e:	4602      	mov	r2, r0
    2070:	b920      	cbnz	r0, 207c <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    2072:	2300      	movs	r3, #0
    2074:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    2076:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    2078:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    207a:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    207c:	4610      	mov	r0, r2
    207e:	bd38      	pop	{r3, r4, r5, pc}
    2080:	2000      	movs	r0, #0
    2082:	e7ec      	b.n	205e <dac_sync_init+0xe>
    2084:	00007270 	.word	0x00007270
    2088:	000022fd 	.word	0x000022fd
    208c:	00002701 	.word	0x00002701

00002090 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2090:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    2092:	4b02      	ldr	r3, [pc, #8]	; (209c <delay_init+0xc>)
    2094:	6018      	str	r0, [r3, #0]
    2096:	4b02      	ldr	r3, [pc, #8]	; (20a0 <delay_init+0x10>)
    2098:	4798      	blx	r3
    209a:	bd08      	pop	{r3, pc}
    209c:	20000530 	.word	0x20000530
    20a0:	00002e95 	.word	0x00002e95

000020a4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    20a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    20a6:	4b04      	ldr	r3, [pc, #16]	; (20b8 <delay_ms+0x14>)
    20a8:	681c      	ldr	r4, [r3, #0]
    20aa:	4b04      	ldr	r3, [pc, #16]	; (20bc <delay_ms+0x18>)
    20ac:	4798      	blx	r3
    20ae:	4601      	mov	r1, r0
    20b0:	4620      	mov	r0, r4
    20b2:	4b03      	ldr	r3, [pc, #12]	; (20c0 <delay_ms+0x1c>)
    20b4:	4798      	blx	r3
    20b6:	bd10      	pop	{r4, pc}
    20b8:	20000530 	.word	0x20000530
    20bc:	0000263d 	.word	0x0000263d
    20c0:	00002ea9 	.word	0x00002ea9

000020c4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    20c4:	b508      	push	{r3, lr}
	return _event_system_init();
    20c6:	4b01      	ldr	r3, [pc, #4]	; (20cc <event_system_init+0x8>)
    20c8:	4798      	blx	r3
}
    20ca:	bd08      	pop	{r3, pc}
    20cc:	0000293d 	.word	0x0000293d

000020d0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    20d0:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    20d2:	4b0c      	ldr	r3, [pc, #48]	; (2104 <process_ext_irq+0x34>)
    20d4:	685c      	ldr	r4, [r3, #4]
    20d6:	42a0      	cmp	r0, r4
    20d8:	d00e      	beq.n	20f8 <process_ext_irq+0x28>
    20da:	2301      	movs	r3, #1
    20dc:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    20de:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    20e0:	25ff      	movs	r5, #255	; 0xff
    20e2:	e003      	b.n	20ec <process_ext_irq+0x1c>
    20e4:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    20e6:	185a      	adds	r2, r3, r1
    20e8:	0852      	lsrs	r2, r2, #1
    20ea:	d104      	bne.n	20f6 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    20ec:	42a0      	cmp	r0, r4
    20ee:	d9f9      	bls.n	20e4 <process_ext_irq+0x14>
	while (upper >= lower) {
    20f0:	b13b      	cbz	r3, 2102 <process_ext_irq+0x32>
			lower = middle + 1;
    20f2:	4631      	mov	r1, r6
    20f4:	e7f7      	b.n	20e6 <process_ext_irq+0x16>
    20f6:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    20f8:	4b02      	ldr	r3, [pc, #8]	; (2104 <process_ext_irq+0x34>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	b10b      	cbz	r3, 2102 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    20fe:	4798      	blx	r3
    2100:	bd70      	pop	{r4, r5, r6, pc}
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	20000534 	.word	0x20000534

00002108 <ext_irq_init>:
{
    2108:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <ext_irq_init+0x18>)
    210c:	f04f 32ff 	mov.w	r2, #4294967295
    2110:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    2116:	4803      	ldr	r0, [pc, #12]	; (2124 <ext_irq_init+0x1c>)
    2118:	4b03      	ldr	r3, [pc, #12]	; (2128 <ext_irq_init+0x20>)
    211a:	4798      	blx	r3
}
    211c:	bd08      	pop	{r3, pc}
    211e:	bf00      	nop
    2120:	20000534 	.word	0x20000534
    2124:	000020d1 	.word	0x000020d1
    2128:	000028bd 	.word	0x000028bd

0000212c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    212c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    212e:	6943      	ldr	r3, [r0, #20]
    2130:	b103      	cbz	r3, 2134 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    2132:	4798      	blx	r3
    2134:	bd08      	pop	{r3, pc}

00002136 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    2136:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    2138:	6983      	ldr	r3, [r0, #24]
    213a:	b103      	cbz	r3, 213e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    213c:	4798      	blx	r3
    213e:	bd08      	pop	{r3, pc}

00002140 <flash_init>:
{
    2140:	b538      	push	{r3, r4, r5, lr}
    2142:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    2144:	4604      	mov	r4, r0
    2146:	b190      	cbz	r0, 216e <flash_init+0x2e>
    2148:	1c08      	adds	r0, r1, #0
    214a:	bf18      	it	ne
    214c:	2001      	movne	r0, #1
    214e:	2242      	movs	r2, #66	; 0x42
    2150:	4908      	ldr	r1, [pc, #32]	; (2174 <flash_init+0x34>)
    2152:	4b09      	ldr	r3, [pc, #36]	; (2178 <flash_init+0x38>)
    2154:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    2156:	4629      	mov	r1, r5
    2158:	4620      	mov	r0, r4
    215a:	4b08      	ldr	r3, [pc, #32]	; (217c <flash_init+0x3c>)
    215c:	4798      	blx	r3
	if (rc) {
    215e:	4603      	mov	r3, r0
    2160:	b918      	cbnz	r0, 216a <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    2162:	4a07      	ldr	r2, [pc, #28]	; (2180 <flash_init+0x40>)
    2164:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    2166:	4a07      	ldr	r2, [pc, #28]	; (2184 <flash_init+0x44>)
    2168:	6062      	str	r2, [r4, #4]
}
    216a:	4618      	mov	r0, r3
    216c:	bd38      	pop	{r3, r4, r5, pc}
    216e:	2000      	movs	r0, #0
    2170:	e7ed      	b.n	214e <flash_init+0xe>
    2172:	bf00      	nop
    2174:	0000728c 	.word	0x0000728c
    2178:	000022fd 	.word	0x000022fd
    217c:	00002a79 	.word	0x00002a79
    2180:	0000212d 	.word	0x0000212d
    2184:	00002137 	.word	0x00002137

00002188 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2188:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    218a:	6943      	ldr	r3, [r0, #20]
    218c:	b103      	cbz	r3, 2190 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    218e:	4798      	blx	r3
    2190:	bd08      	pop	{r3, pc}

00002192 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2192:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    2194:	6983      	ldr	r3, [r0, #24]
    2196:	b103      	cbz	r3, 219a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    2198:	4798      	blx	r3
    219a:	bd08      	pop	{r3, pc}

0000219c <pwm_init>:
{
    219c:	b538      	push	{r3, r4, r5, lr}
    219e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    21a0:	4604      	mov	r4, r0
    21a2:	b180      	cbz	r0, 21c6 <pwm_init+0x2a>
    21a4:	1c08      	adds	r0, r1, #0
    21a6:	bf18      	it	ne
    21a8:	2001      	movne	r0, #1
    21aa:	223d      	movs	r2, #61	; 0x3d
    21ac:	4907      	ldr	r1, [pc, #28]	; (21cc <pwm_init+0x30>)
    21ae:	4b08      	ldr	r3, [pc, #32]	; (21d0 <pwm_init+0x34>)
    21b0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    21b2:	4629      	mov	r1, r5
    21b4:	4620      	mov	r0, r4
    21b6:	4b07      	ldr	r3, [pc, #28]	; (21d4 <pwm_init+0x38>)
    21b8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    21ba:	4b07      	ldr	r3, [pc, #28]	; (21d8 <pwm_init+0x3c>)
    21bc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    21be:	4b07      	ldr	r3, [pc, #28]	; (21dc <pwm_init+0x40>)
    21c0:	6063      	str	r3, [r4, #4]
}
    21c2:	2000      	movs	r0, #0
    21c4:	bd38      	pop	{r3, r4, r5, pc}
    21c6:	2000      	movs	r0, #0
    21c8:	e7ef      	b.n	21aa <pwm_init+0xe>
    21ca:	bf00      	nop
    21cc:	000072a4 	.word	0x000072a4
    21d0:	000022fd 	.word	0x000022fd
    21d4:	000035c1 	.word	0x000035c1
    21d8:	00002189 	.word	0x00002189
    21dc:	00002193 	.word	0x00002193

000021e0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    21e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21e2:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    21e4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    21e6:	b12f      	cbz	r7, 21f4 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    21e8:	688d      	ldr	r5, [r1, #8]
    21ea:	463c      	mov	r4, r7
    21ec:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    21ee:	f1c2 0e01 	rsb	lr, r2, #1
    21f2:	e00b      	b.n	220c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    21f4:	4b0e      	ldr	r3, [pc, #56]	; (2230 <timer_add_timer_task+0x50>)
    21f6:	4798      	blx	r3
		return;
    21f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    21fa:	4473      	add	r3, lr
    21fc:	68a0      	ldr	r0, [r4, #8]
    21fe:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    2200:	42ab      	cmp	r3, r5
    2202:	d20a      	bcs.n	221a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    2204:	6823      	ldr	r3, [r4, #0]
    2206:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2208:	b153      	cbz	r3, 2220 <timer_add_timer_task+0x40>
    220a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    220c:	6863      	ldr	r3, [r4, #4]
    220e:	4293      	cmp	r3, r2
    2210:	d8f3      	bhi.n	21fa <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    2212:	68a0      	ldr	r0, [r4, #8]
    2214:	4403      	add	r3, r0
    2216:	1a9b      	subs	r3, r3, r2
    2218:	e7f2      	b.n	2200 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    221a:	42a7      	cmp	r7, r4
    221c:	d004      	beq.n	2228 <timer_add_timer_task+0x48>
    221e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2220:	4620      	mov	r0, r4
    2222:	4b04      	ldr	r3, [pc, #16]	; (2234 <timer_add_timer_task+0x54>)
    2224:	4798      	blx	r3
    2226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2228:	4660      	mov	r0, ip
    222a:	4b01      	ldr	r3, [pc, #4]	; (2230 <timer_add_timer_task+0x50>)
    222c:	4798      	blx	r3
    222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2230:	00002325 	.word	0x00002325
    2234:	00002351 	.word	0x00002351

00002238 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    223c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    223e:	6907      	ldr	r7, [r0, #16]
    2240:	3701      	adds	r7, #1
    2242:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2244:	7e03      	ldrb	r3, [r0, #24]
    2246:	f013 0f01 	tst.w	r3, #1
    224a:	d113      	bne.n	2274 <timer_process_counted+0x3c>
    224c:	7e03      	ldrb	r3, [r0, #24]
    224e:	f013 0f02 	tst.w	r3, #2
    2252:	d10f      	bne.n	2274 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    2254:	b354      	cbz	r4, 22ac <timer_process_counted+0x74>
    2256:	6863      	ldr	r3, [r4, #4]
    2258:	1afb      	subs	r3, r7, r3
    225a:	68a2      	ldr	r2, [r4, #8]
    225c:	4293      	cmp	r3, r2
    225e:	d307      	bcc.n	2270 <timer_process_counted+0x38>
    2260:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    2262:	f100 0814 	add.w	r8, r0, #20
    2266:	f8df 9048 	ldr.w	r9, [pc, #72]	; 22b0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    226a:	f8df a048 	ldr.w	sl, [pc, #72]	; 22b4 <timer_process_counted+0x7c>
    226e:	e012      	b.n	2296 <timer_process_counted+0x5e>
    2270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2274:	7e03      	ldrb	r3, [r0, #24]
    2276:	f043 0302 	orr.w	r3, r3, #2
    227a:	7603      	strb	r3, [r0, #24]
		return;
    227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2280:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    2282:	68e3      	ldr	r3, [r4, #12]
    2284:	4620      	mov	r0, r4
    2286:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2288:	b185      	cbz	r5, 22ac <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    228a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    228c:	686b      	ldr	r3, [r5, #4]
    228e:	1afb      	subs	r3, r7, r3
    2290:	68aa      	ldr	r2, [r5, #8]
    2292:	4293      	cmp	r3, r2
    2294:	d30a      	bcc.n	22ac <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    2296:	4640      	mov	r0, r8
    2298:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    229a:	7c23      	ldrb	r3, [r4, #16]
    229c:	2b01      	cmp	r3, #1
    229e:	d1ef      	bne.n	2280 <timer_process_counted+0x48>
			tmp->time_label = time;
    22a0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    22a2:	463a      	mov	r2, r7
    22a4:	4621      	mov	r1, r4
    22a6:	4640      	mov	r0, r8
    22a8:	47d0      	blx	sl
    22aa:	e7e9      	b.n	2280 <timer_process_counted+0x48>
    22ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22b0:	00002359 	.word	0x00002359
    22b4:	000021e1 	.word	0x000021e1

000022b8 <timer_init>:
{
    22b8:	b570      	push	{r4, r5, r6, lr}
    22ba:	460e      	mov	r6, r1
    22bc:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    22be:	4604      	mov	r4, r0
    22c0:	b190      	cbz	r0, 22e8 <timer_init+0x30>
    22c2:	b199      	cbz	r1, 22ec <timer_init+0x34>
    22c4:	1c10      	adds	r0, r2, #0
    22c6:	bf18      	it	ne
    22c8:	2001      	movne	r0, #1
    22ca:	2245      	movs	r2, #69	; 0x45
    22cc:	4908      	ldr	r1, [pc, #32]	; (22f0 <timer_init+0x38>)
    22ce:	4b09      	ldr	r3, [pc, #36]	; (22f4 <timer_init+0x3c>)
    22d0:	4798      	blx	r3
	descr->func = func;
    22d2:	4620      	mov	r0, r4
    22d4:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    22d8:	682b      	ldr	r3, [r5, #0]
    22da:	4631      	mov	r1, r6
    22dc:	4798      	blx	r3
	descr->time                           = 0;
    22de:	2000      	movs	r0, #0
    22e0:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    22e2:	4b05      	ldr	r3, [pc, #20]	; (22f8 <timer_init+0x40>)
    22e4:	6063      	str	r3, [r4, #4]
}
    22e6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    22e8:	2000      	movs	r0, #0
    22ea:	e7ee      	b.n	22ca <timer_init+0x12>
    22ec:	2000      	movs	r0, #0
    22ee:	e7ec      	b.n	22ca <timer_init+0x12>
    22f0:	000072bc 	.word	0x000072bc
    22f4:	000022fd 	.word	0x000022fd
    22f8:	00002239 	.word	0x00002239

000022fc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    22fc:	b900      	cbnz	r0, 2300 <assert+0x4>
		__asm("BKPT #0");
    22fe:	be00      	bkpt	0x0000
    2300:	4770      	bx	lr

00002302 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2302:	6803      	ldr	r3, [r0, #0]
    2304:	b14b      	cbz	r3, 231a <is_list_element+0x18>
		if (it == element) {
    2306:	428b      	cmp	r3, r1
    2308:	d009      	beq.n	231e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	b11b      	cbz	r3, 2316 <is_list_element+0x14>
		if (it == element) {
    230e:	4299      	cmp	r1, r3
    2310:	d1fb      	bne.n	230a <is_list_element+0x8>
			return true;
    2312:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2314:	4770      	bx	lr
	return false;
    2316:	2000      	movs	r0, #0
    2318:	4770      	bx	lr
    231a:	2000      	movs	r0, #0
    231c:	4770      	bx	lr
			return true;
    231e:	2001      	movs	r0, #1
    2320:	4770      	bx	lr
	...

00002324 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2324:	b538      	push	{r3, r4, r5, lr}
    2326:	4604      	mov	r4, r0
    2328:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    232a:	4b06      	ldr	r3, [pc, #24]	; (2344 <list_insert_as_head+0x20>)
    232c:	4798      	blx	r3
    232e:	f080 0001 	eor.w	r0, r0, #1
    2332:	2243      	movs	r2, #67	; 0x43
    2334:	4904      	ldr	r1, [pc, #16]	; (2348 <list_insert_as_head+0x24>)
    2336:	b2c0      	uxtb	r0, r0
    2338:	4b04      	ldr	r3, [pc, #16]	; (234c <list_insert_as_head+0x28>)
    233a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    233c:	6823      	ldr	r3, [r4, #0]
    233e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2340:	6025      	str	r5, [r4, #0]
    2342:	bd38      	pop	{r3, r4, r5, pc}
    2344:	00002303 	.word	0x00002303
    2348:	000072d4 	.word	0x000072d4
    234c:	000022fd 	.word	0x000022fd

00002350 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2350:	6803      	ldr	r3, [r0, #0]
    2352:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2354:	6001      	str	r1, [r0, #0]
    2356:	4770      	bx	lr

00002358 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2358:	6803      	ldr	r3, [r0, #0]
    235a:	b10b      	cbz	r3, 2360 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    235c:	681a      	ldr	r2, [r3, #0]
    235e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2360:	4618      	mov	r0, r3
    2362:	4770      	bx	lr

00002364 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2364:	b570      	push	{r4, r5, r6, lr}
    2366:	460e      	mov	r6, r1
    2368:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    236a:	4604      	mov	r4, r0
    236c:	b178      	cbz	r0, 238e <ringbuffer_init+0x2a>
    236e:	b181      	cbz	r1, 2392 <ringbuffer_init+0x2e>
    2370:	b1a2      	cbz	r2, 239c <ringbuffer_init+0x38>
    2372:	2001      	movs	r0, #1
    2374:	2232      	movs	r2, #50	; 0x32
    2376:	490d      	ldr	r1, [pc, #52]	; (23ac <ringbuffer_init+0x48>)
    2378:	4b0d      	ldr	r3, [pc, #52]	; (23b0 <ringbuffer_init+0x4c>)
    237a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    237c:	1e6b      	subs	r3, r5, #1
    237e:	421d      	tst	r5, r3
    2380:	d109      	bne.n	2396 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2382:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2384:	2000      	movs	r0, #0
    2386:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    2388:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    238a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    238c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    238e:	2000      	movs	r0, #0
    2390:	e7f0      	b.n	2374 <ringbuffer_init+0x10>
    2392:	2000      	movs	r0, #0
    2394:	e7ee      	b.n	2374 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    2396:	f06f 000c 	mvn.w	r0, #12
    239a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    239c:	2232      	movs	r2, #50	; 0x32
    239e:	4903      	ldr	r1, [pc, #12]	; (23ac <ringbuffer_init+0x48>)
    23a0:	2000      	movs	r0, #0
    23a2:	4b03      	ldr	r3, [pc, #12]	; (23b0 <ringbuffer_init+0x4c>)
    23a4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    23a6:	1e6b      	subs	r3, r5, #1
    23a8:	e7eb      	b.n	2382 <ringbuffer_init+0x1e>
    23aa:	bf00      	nop
    23ac:	000072f4 	.word	0x000072f4
    23b0:	000022fd 	.word	0x000022fd

000023b4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    23b4:	b538      	push	{r3, r4, r5, lr}
    23b6:	460d      	mov	r5, r1
	ASSERT(rb && data);
    23b8:	4604      	mov	r4, r0
    23ba:	b1a0      	cbz	r0, 23e6 <ringbuffer_get+0x32>
    23bc:	1c08      	adds	r0, r1, #0
    23be:	bf18      	it	ne
    23c0:	2001      	movne	r0, #1
    23c2:	224a      	movs	r2, #74	; 0x4a
    23c4:	490a      	ldr	r1, [pc, #40]	; (23f0 <ringbuffer_get+0x3c>)
    23c6:	4b0b      	ldr	r3, [pc, #44]	; (23f4 <ringbuffer_get+0x40>)
    23c8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    23ca:	68a3      	ldr	r3, [r4, #8]
    23cc:	68e2      	ldr	r2, [r4, #12]
    23ce:	429a      	cmp	r2, r3
    23d0:	d00b      	beq.n	23ea <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    23d2:	6862      	ldr	r2, [r4, #4]
    23d4:	4013      	ands	r3, r2
    23d6:	6822      	ldr	r2, [r4, #0]
    23d8:	5cd3      	ldrb	r3, [r2, r3]
    23da:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    23dc:	68a3      	ldr	r3, [r4, #8]
    23de:	3301      	adds	r3, #1
    23e0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    23e2:	2000      	movs	r0, #0
    23e4:	bd38      	pop	{r3, r4, r5, pc}
    23e6:	2000      	movs	r0, #0
    23e8:	e7eb      	b.n	23c2 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    23ea:	f06f 0009 	mvn.w	r0, #9
}
    23ee:	bd38      	pop	{r3, r4, r5, pc}
    23f0:	000072f4 	.word	0x000072f4
    23f4:	000022fd 	.word	0x000022fd

000023f8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    23f8:	b538      	push	{r3, r4, r5, lr}
    23fa:	460d      	mov	r5, r1
	ASSERT(rb);
    23fc:	4604      	mov	r4, r0
    23fe:	225b      	movs	r2, #91	; 0x5b
    2400:	490b      	ldr	r1, [pc, #44]	; (2430 <ringbuffer_put+0x38>)
    2402:	3000      	adds	r0, #0
    2404:	bf18      	it	ne
    2406:	2001      	movne	r0, #1
    2408:	4b0a      	ldr	r3, [pc, #40]	; (2434 <ringbuffer_put+0x3c>)
    240a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    240c:	68e3      	ldr	r3, [r4, #12]
    240e:	6862      	ldr	r2, [r4, #4]
    2410:	4013      	ands	r3, r2
    2412:	6822      	ldr	r2, [r4, #0]
    2414:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2416:	68e3      	ldr	r3, [r4, #12]
    2418:	6861      	ldr	r1, [r4, #4]
    241a:	68a2      	ldr	r2, [r4, #8]
    241c:	1a9a      	subs	r2, r3, r2
    241e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2420:	bf84      	itt	hi
    2422:	1a59      	subhi	r1, r3, r1
    2424:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2426:	3301      	adds	r3, #1
    2428:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    242a:	2000      	movs	r0, #0
    242c:	bd38      	pop	{r3, r4, r5, pc}
    242e:	bf00      	nop
    2430:	000072f4 	.word	0x000072f4
    2434:	000022fd 	.word	0x000022fd

00002438 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2438:	b510      	push	{r4, lr}
	ASSERT(rb);
    243a:	4604      	mov	r4, r0
    243c:	2271      	movs	r2, #113	; 0x71
    243e:	4905      	ldr	r1, [pc, #20]	; (2454 <ringbuffer_num+0x1c>)
    2440:	3000      	adds	r0, #0
    2442:	bf18      	it	ne
    2444:	2001      	movne	r0, #1
    2446:	4b04      	ldr	r3, [pc, #16]	; (2458 <ringbuffer_num+0x20>)
    2448:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    244a:	68e0      	ldr	r0, [r4, #12]
    244c:	68a3      	ldr	r3, [r4, #8]
}
    244e:	1ac0      	subs	r0, r0, r3
    2450:	bd10      	pop	{r4, pc}
    2452:	bf00      	nop
    2454:	000072f4 	.word	0x000072f4
    2458:	000022fd 	.word	0x000022fd

0000245c <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    245c:	b510      	push	{r4, lr}
	ASSERT(rb);
    245e:	4604      	mov	r4, r0
    2460:	227b      	movs	r2, #123	; 0x7b
    2462:	4905      	ldr	r1, [pc, #20]	; (2478 <ringbuffer_flush+0x1c>)
    2464:	3000      	adds	r0, #0
    2466:	bf18      	it	ne
    2468:	2001      	movne	r0, #1
    246a:	4b04      	ldr	r3, [pc, #16]	; (247c <ringbuffer_flush+0x20>)
    246c:	4798      	blx	r3

	rb->read_index = rb->write_index;
    246e:	68e3      	ldr	r3, [r4, #12]
    2470:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    2472:	2000      	movs	r0, #0
    2474:	bd10      	pop	{r4, pc}
    2476:	bf00      	nop
    2478:	000072f4 	.word	0x000072f4
    247c:	000022fd 	.word	0x000022fd

00002480 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2480:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2482:	4a06      	ldr	r2, [pc, #24]	; (249c <_sbrk+0x1c>)
    2484:	6812      	ldr	r2, [r2, #0]
    2486:	b122      	cbz	r2, 2492 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2488:	4a04      	ldr	r2, [pc, #16]	; (249c <_sbrk+0x1c>)
    248a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    248c:	4403      	add	r3, r0
    248e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2490:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2492:	4903      	ldr	r1, [pc, #12]	; (24a0 <_sbrk+0x20>)
    2494:	4a01      	ldr	r2, [pc, #4]	; (249c <_sbrk+0x1c>)
    2496:	6011      	str	r1, [r2, #0]
    2498:	e7f6      	b.n	2488 <_sbrk+0x8>
    249a:	bf00      	nop
    249c:	2000053c 	.word	0x2000053c
    24a0:	20013e68 	.word	0x20013e68

000024a4 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    24a4:	b510      	push	{r4, lr}
    24a6:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    24a8:	f44f 7281 	mov.w	r2, #258	; 0x102
    24ac:	4915      	ldr	r1, [pc, #84]	; (2504 <_ac_init+0x60>)
    24ae:	4816      	ldr	r0, [pc, #88]	; (2508 <_ac_init+0x64>)
    24b0:	4284      	cmp	r4, r0
    24b2:	bf14      	ite	ne
    24b4:	2000      	movne	r0, #0
    24b6:	2001      	moveq	r0, #1
    24b8:	4b14      	ldr	r3, [pc, #80]	; (250c <_ac_init+0x68>)
    24ba:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    24bc:	6a23      	ldr	r3, [r4, #32]
    24be:	f013 0f01 	tst.w	r3, #1
    24c2:	d1fb      	bne.n	24bc <_ac_init+0x18>
    24c4:	6a23      	ldr	r3, [r4, #32]
    24c6:	f013 0f03 	tst.w	r3, #3
    24ca:	d1fb      	bne.n	24c4 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    24cc:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    24ce:	f013 0f02 	tst.w	r3, #2
    24d2:	d114      	bne.n	24fe <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    24d4:	6a23      	ldr	r3, [r4, #32]
    24d6:	f013 0f01 	tst.w	r3, #1
    24da:	d1fb      	bne.n	24d4 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    24dc:	7823      	ldrb	r3, [r4, #0]
    24de:	f043 0301 	orr.w	r3, r3, #1
    24e2:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    24e4:	6a23      	ldr	r3, [r4, #32]
    24e6:	f013 0f01 	tst.w	r3, #1
    24ea:	d1fb      	bne.n	24e4 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    24ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    24f0:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    24f2:	2000      	movs	r0, #0
    24f4:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    24f6:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    24f8:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    24fa:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    24fc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    24fe:	f06f 0010 	mvn.w	r0, #16
}
    2502:	bd10      	pop	{r4, pc}
    2504:	00007318 	.word	0x00007318
    2508:	42002000 	.word	0x42002000
    250c:	000022fd 	.word	0x000022fd

00002510 <_ac_sync_init>:
{
    2510:	b538      	push	{r3, r4, r5, lr}
    2512:	460c      	mov	r4, r1
	ASSERT(device);
    2514:	4605      	mov	r5, r0
    2516:	226c      	movs	r2, #108	; 0x6c
    2518:	4905      	ldr	r1, [pc, #20]	; (2530 <_ac_sync_init+0x20>)
    251a:	3000      	adds	r0, #0
    251c:	bf18      	it	ne
    251e:	2001      	movne	r0, #1
    2520:	4b04      	ldr	r3, [pc, #16]	; (2534 <_ac_sync_init+0x24>)
    2522:	4798      	blx	r3
	device->hw = hw;
    2524:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    2526:	4620      	mov	r0, r4
    2528:	4b03      	ldr	r3, [pc, #12]	; (2538 <_ac_sync_init+0x28>)
    252a:	4798      	blx	r3
}
    252c:	bd38      	pop	{r3, r4, r5, pc}
    252e:	bf00      	nop
    2530:	00007318 	.word	0x00007318
    2534:	000022fd 	.word	0x000022fd
    2538:	000024a5 	.word	0x000024a5

0000253c <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    253c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    253e:	f013 0f01 	tst.w	r3, #1
    2542:	d1fb      	bne.n	253c <_adc_init>
    2544:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2546:	f013 0f03 	tst.w	r3, #3
    254a:	d1fb      	bne.n	2544 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    254c:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    254e:	f013 0f02 	tst.w	r3, #2
    2552:	d12a      	bne.n	25aa <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2554:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2556:	f013 0f01 	tst.w	r3, #1
    255a:	d1fb      	bne.n	2554 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    255c:	8803      	ldrh	r3, [r0, #0]
    255e:	b29b      	uxth	r3, r3
    2560:	f043 0301 	orr.w	r3, r3, #1
    2564:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2566:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2568:	f013 0f01 	tst.w	r3, #1
    256c:	d1fb      	bne.n	2566 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    256e:	2216      	movs	r2, #22
    2570:	4b0f      	ldr	r3, [pc, #60]	; (25b0 <_adc_init+0x74>)
    2572:	fb02 3101 	mla	r1, r2, r1, r3
    2576:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2578:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    257a:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    257c:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    257e:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2580:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2582:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2584:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2586:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2588:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    258a:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    258c:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    258e:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2590:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2592:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2594:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2596:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2598:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    259a:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    259c:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    259e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    25a0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    25a2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    25a4:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    25a6:	2000      	movs	r0, #0
    25a8:	4770      	bx	lr
		return ERR_DENIED;
    25aa:	f06f 0010 	mvn.w	r0, #16
}
    25ae:	4770      	bx	lr
    25b0:	0000732c 	.word	0x0000732c

000025b4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    25b4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    25b8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    25bc:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    25c0:	b148      	cbz	r0, 25d6 <_adc_get_regs+0x22>
    25c2:	2801      	cmp	r0, #1
    25c4:	d009      	beq.n	25da <_adc_get_regs+0x26>
{
    25c6:	b508      	push	{r3, lr}
	ASSERT(false);
    25c8:	2291      	movs	r2, #145	; 0x91
    25ca:	4905      	ldr	r1, [pc, #20]	; (25e0 <_adc_get_regs+0x2c>)
    25cc:	2000      	movs	r0, #0
    25ce:	4b05      	ldr	r3, [pc, #20]	; (25e4 <_adc_get_regs+0x30>)
    25d0:	4798      	blx	r3
	return 0;
    25d2:	2000      	movs	r0, #0
    25d4:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    25d6:	2000      	movs	r0, #0
    25d8:	4770      	bx	lr
    25da:	2001      	movs	r0, #1
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	00007358 	.word	0x00007358
    25e4:	000022fd 	.word	0x000022fd

000025e8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    25e8:	b538      	push	{r3, r4, r5, lr}
    25ea:	460c      	mov	r4, r1
	ASSERT(device);
    25ec:	4605      	mov	r5, r0
    25ee:	22d5      	movs	r2, #213	; 0xd5
    25f0:	4907      	ldr	r1, [pc, #28]	; (2610 <_adc_sync_init+0x28>)
    25f2:	3000      	adds	r0, #0
    25f4:	bf18      	it	ne
    25f6:	2001      	movne	r0, #1
    25f8:	4b06      	ldr	r3, [pc, #24]	; (2614 <_adc_sync_init+0x2c>)
    25fa:	4798      	blx	r3

	device->hw = hw;
    25fc:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    25fe:	4620      	mov	r0, r4
    2600:	4b05      	ldr	r3, [pc, #20]	; (2618 <_adc_sync_init+0x30>)
    2602:	4798      	blx	r3
    2604:	4601      	mov	r1, r0
    2606:	4620      	mov	r0, r4
    2608:	4b04      	ldr	r3, [pc, #16]	; (261c <_adc_sync_init+0x34>)
    260a:	4798      	blx	r3
}
    260c:	bd38      	pop	{r3, r4, r5, pc}
    260e:	bf00      	nop
    2610:	00007358 	.word	0x00007358
    2614:	000022fd 	.word	0x000022fd
    2618:	000025b5 	.word	0x000025b5
    261c:	0000253d 	.word	0x0000253d

00002620 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2620:	0943      	lsrs	r3, r0, #5
    2622:	f000 001f 	and.w	r0, r0, #31
    2626:	2201      	movs	r2, #1
    2628:	fa02 f000 	lsl.w	r0, r2, r0
    262c:	3340      	adds	r3, #64	; 0x40
    262e:	4a02      	ldr	r2, [pc, #8]	; (2638 <_irq_set+0x18>)
    2630:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2634:	4770      	bx	lr
    2636:	bf00      	nop
    2638:	e000e100 	.word	0xe000e100

0000263c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    263c:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2640:	fb03 f000 	mul.w	r0, r3, r0
    2644:	4770      	bx	lr
	...

00002648 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2648:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    264a:	4a0c      	ldr	r2, [pc, #48]	; (267c <_init_chip+0x34>)
    264c:	8813      	ldrh	r3, [r2, #0]
    264e:	b29b      	uxth	r3, r3
    2650:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2652:	4b0b      	ldr	r3, [pc, #44]	; (2680 <_init_chip+0x38>)
    2654:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    2656:	4b0b      	ldr	r3, [pc, #44]	; (2684 <_init_chip+0x3c>)
    2658:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    265a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    265e:	4c0a      	ldr	r4, [pc, #40]	; (2688 <_init_chip+0x40>)
    2660:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2662:	4b0a      	ldr	r3, [pc, #40]	; (268c <_init_chip+0x44>)
    2664:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2666:	f240 70ff 	movw	r0, #2047	; 0x7ff
    266a:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    266c:	4a08      	ldr	r2, [pc, #32]	; (2690 <_init_chip+0x48>)
    266e:	6913      	ldr	r3, [r2, #16]
    2670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2674:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2676:	4b07      	ldr	r3, [pc, #28]	; (2694 <_init_chip+0x4c>)
    2678:	4798      	blx	r3
    267a:	bd10      	pop	{r4, pc}
    267c:	41004000 	.word	0x41004000
    2680:	00002b19 	.word	0x00002b19
    2684:	00002a41 	.word	0x00002a41
    2688:	00002999 	.word	0x00002999
    268c:	00002b45 	.word	0x00002b45
    2690:	40000800 	.word	0x40000800
    2694:	000027a1 	.word	0x000027a1

00002698 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    2698:	b510      	push	{r4, lr}
    269a:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    269c:	22f3      	movs	r2, #243	; 0xf3
    269e:	4915      	ldr	r1, [pc, #84]	; (26f4 <_dac_init+0x5c>)
    26a0:	4815      	ldr	r0, [pc, #84]	; (26f8 <_dac_init+0x60>)
    26a2:	4284      	cmp	r4, r0
    26a4:	bf14      	ite	ne
    26a6:	2000      	movne	r0, #0
    26a8:	2001      	moveq	r0, #1
    26aa:	4b14      	ldr	r3, [pc, #80]	; (26fc <_dac_init+0x64>)
    26ac:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    26ae:	68a3      	ldr	r3, [r4, #8]
    26b0:	f013 0f01 	tst.w	r3, #1
    26b4:	d1fb      	bne.n	26ae <_dac_init+0x16>
    26b6:	68a3      	ldr	r3, [r4, #8]
    26b8:	f013 0f03 	tst.w	r3, #3
    26bc:	d1fb      	bne.n	26b6 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    26be:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    26c0:	f013 0f02 	tst.w	r3, #2
    26c4:	d113      	bne.n	26ee <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    26c6:	68a3      	ldr	r3, [r4, #8]
    26c8:	f013 0f01 	tst.w	r3, #1
    26cc:	d1fb      	bne.n	26c6 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    26ce:	7823      	ldrb	r3, [r4, #0]
    26d0:	f043 0301 	orr.w	r3, r3, #1
    26d4:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    26d6:	68a3      	ldr	r3, [r4, #8]
    26d8:	f013 0f01 	tst.w	r3, #1
    26dc:	d1fb      	bne.n	26d6 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    26de:	2000      	movs	r0, #0
    26e0:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    26e2:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    26e4:	81a0      	strh	r0, [r4, #12]
    26e6:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    26e8:	2301      	movs	r3, #1
    26ea:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    26ec:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    26ee:	f06f 0003 	mvn.w	r0, #3
}
    26f2:	bd10      	pop	{r4, pc}
    26f4:	00007370 	.word	0x00007370
    26f8:	43002400 	.word	0x43002400
    26fc:	000022fd 	.word	0x000022fd

00002700 <_dac_sync_init>:
{
    2700:	b538      	push	{r3, r4, r5, lr}
    2702:	460c      	mov	r4, r1
	ASSERT(device);
    2704:	4605      	mov	r5, r0
    2706:	2261      	movs	r2, #97	; 0x61
    2708:	4905      	ldr	r1, [pc, #20]	; (2720 <_dac_sync_init+0x20>)
    270a:	3000      	adds	r0, #0
    270c:	bf18      	it	ne
    270e:	2001      	movne	r0, #1
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <_dac_sync_init+0x24>)
    2712:	4798      	blx	r3
	device->hw = hw;
    2714:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    2716:	4620      	mov	r0, r4
    2718:	4b03      	ldr	r3, [pc, #12]	; (2728 <_dac_sync_init+0x28>)
    271a:	4798      	blx	r3
}
    271c:	bd38      	pop	{r3, r4, r5, pc}
    271e:	bf00      	nop
    2720:	00007370 	.word	0x00007370
    2724:	000022fd 	.word	0x000022fd
    2728:	00002699 	.word	0x00002699

0000272c <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    272c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    272e:	4a1a      	ldr	r2, [pc, #104]	; (2798 <_dmac_handler+0x6c>)
    2730:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2732:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2736:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    273a:	4818      	ldr	r0, [pc, #96]	; (279c <_dmac_handler+0x70>)
    273c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2740:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2744:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2748:	f012 0f01 	tst.w	r2, #1
    274c:	d10a      	bne.n	2764 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    274e:	011a      	lsls	r2, r3, #4
    2750:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2754:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2758:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    275c:	f012 0f02 	tst.w	r2, #2
    2760:	d10b      	bne.n	277a <_dmac_handler+0x4e>
    2762:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2764:	011a      	lsls	r2, r3, #4
    2766:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    276a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    276e:	2101      	movs	r1, #1
    2770:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2774:	6843      	ldr	r3, [r0, #4]
    2776:	4798      	blx	r3
    2778:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    277a:	011a      	lsls	r2, r3, #4
    277c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2780:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2784:	2102      	movs	r1, #2
    2786:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    278a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    278e:	4a03      	ldr	r2, [pc, #12]	; (279c <_dmac_handler+0x70>)
    2790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2794:	4798      	blx	r3
	}
}
    2796:	e7e4      	b.n	2762 <_dmac_handler+0x36>
    2798:	4100a000 	.word	0x4100a000
    279c:	20000540 	.word	0x20000540

000027a0 <_dma_init>:
{
    27a0:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    27a2:	4a33      	ldr	r2, [pc, #204]	; (2870 <_dma_init+0xd0>)
    27a4:	8813      	ldrh	r3, [r2, #0]
    27a6:	f023 0302 	bic.w	r3, r3, #2
    27aa:	041b      	lsls	r3, r3, #16
    27ac:	0c1b      	lsrs	r3, r3, #16
    27ae:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    27b0:	8853      	ldrh	r3, [r2, #2]
    27b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    27b6:	041b      	lsls	r3, r3, #16
    27b8:	0c1b      	lsrs	r3, r3, #16
    27ba:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    27bc:	8813      	ldrh	r3, [r2, #0]
    27be:	b29b      	uxth	r3, r3
    27c0:	f043 0301 	orr.w	r3, r3, #1
    27c4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    27c6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    27c8:	f013 0f01 	tst.w	r3, #1
    27cc:	d1fb      	bne.n	27c6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    27ce:	4b28      	ldr	r3, [pc, #160]	; (2870 <_dma_init+0xd0>)
    27d0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    27d4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    27d6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    27d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    27dc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    27de:	2000      	movs	r0, #0
    27e0:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    27e2:	4a24      	ldr	r2, [pc, #144]	; (2874 <_dma_init+0xd4>)
    27e4:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    27e8:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    27ea:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    27ee:	639a      	str	r2, [r3, #56]	; 0x38
    27f0:	4b21      	ldr	r3, [pc, #132]	; (2878 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    27f2:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    27f6:	681c      	ldr	r4, [r3, #0]
    27f8:	0101      	lsls	r1, r0, #4
    27fa:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    27fe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2802:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2804:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2806:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    280a:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    280c:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2810:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2812:	4429      	add	r1, r5
    2814:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2818:	3001      	adds	r0, #1
    281a:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    281c:	2820      	cmp	r0, #32
    281e:	d1ea      	bne.n	27f6 <_dma_init+0x56>
    2820:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2822:	2001      	movs	r0, #1
    2824:	4915      	ldr	r1, [pc, #84]	; (287c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2826:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2828:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    282c:	d00b      	beq.n	2846 <_dma_init+0xa6>
    282e:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2830:	2b24      	cmp	r3, #36	; 0x24
    2832:	d1f8      	bne.n	2826 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2834:	4a0e      	ldr	r2, [pc, #56]	; (2870 <_dma_init+0xd0>)
    2836:	8813      	ldrh	r3, [r2, #0]
    2838:	b29b      	uxth	r3, r3
    283a:	f043 0302 	orr.w	r3, r3, #2
    283e:	8013      	strh	r3, [r2, #0]
}
    2840:	2000      	movs	r0, #0
    2842:	bc30      	pop	{r4, r5}
    2844:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2846:	095c      	lsrs	r4, r3, #5
    2848:	f002 021f 	and.w	r2, r2, #31
    284c:	fa00 f202 	lsl.w	r2, r0, r2
    2850:	f104 0520 	add.w	r5, r4, #32
    2854:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    285c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2860:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2864:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2868:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    286c:	e7df      	b.n	282e <_dma_init+0x8e>
    286e:	bf00      	nop
    2870:	4100a000 	.word	0x4100a000
    2874:	20000540 	.word	0x20000540
    2878:	00007388 	.word	0x00007388
    287c:	e000e100 	.word	0xe000e100

00002880 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    2880:	b508      	push	{r3, lr}
	_dmac_handler();
    2882:	4b01      	ldr	r3, [pc, #4]	; (2888 <DMAC_0_Handler+0x8>)
    2884:	4798      	blx	r3
    2886:	bd08      	pop	{r3, pc}
    2888:	0000272d 	.word	0x0000272d

0000288c <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    288c:	b508      	push	{r3, lr}
	_dmac_handler();
    288e:	4b01      	ldr	r3, [pc, #4]	; (2894 <DMAC_1_Handler+0x8>)
    2890:	4798      	blx	r3
    2892:	bd08      	pop	{r3, pc}
    2894:	0000272d 	.word	0x0000272d

00002898 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    2898:	b508      	push	{r3, lr}
	_dmac_handler();
    289a:	4b01      	ldr	r3, [pc, #4]	; (28a0 <DMAC_2_Handler+0x8>)
    289c:	4798      	blx	r3
    289e:	bd08      	pop	{r3, pc}
    28a0:	0000272d 	.word	0x0000272d

000028a4 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    28a4:	b508      	push	{r3, lr}
	_dmac_handler();
    28a6:	4b01      	ldr	r3, [pc, #4]	; (28ac <DMAC_3_Handler+0x8>)
    28a8:	4798      	blx	r3
    28aa:	bd08      	pop	{r3, pc}
    28ac:	0000272d 	.word	0x0000272d

000028b0 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    28b0:	b508      	push	{r3, lr}
	_dmac_handler();
    28b2:	4b01      	ldr	r3, [pc, #4]	; (28b8 <DMAC_4_Handler+0x8>)
    28b4:	4798      	blx	r3
    28b6:	bd08      	pop	{r3, pc}
    28b8:	0000272d 	.word	0x0000272d

000028bc <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    28bc:	4a1e      	ldr	r2, [pc, #120]	; (2938 <_ext_irq_init+0x7c>)
    28be:	6853      	ldr	r3, [r2, #4]
    28c0:	f013 0f01 	tst.w	r3, #1
    28c4:	d1fb      	bne.n	28be <_ext_irq_init+0x2>
    28c6:	4a1c      	ldr	r2, [pc, #112]	; (2938 <_ext_irq_init+0x7c>)
    28c8:	6853      	ldr	r3, [r2, #4]
    28ca:	f013 0f03 	tst.w	r3, #3
    28ce:	d1fb      	bne.n	28c8 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    28d0:	4b19      	ldr	r3, [pc, #100]	; (2938 <_ext_irq_init+0x7c>)
    28d2:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    28d4:	f013 0f02 	tst.w	r3, #2
    28d8:	d12b      	bne.n	2932 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    28da:	4a17      	ldr	r2, [pc, #92]	; (2938 <_ext_irq_init+0x7c>)
    28dc:	6853      	ldr	r3, [r2, #4]
    28de:	f013 0f01 	tst.w	r3, #1
    28e2:	d1fb      	bne.n	28dc <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    28e4:	4a14      	ldr	r2, [pc, #80]	; (2938 <_ext_irq_init+0x7c>)
    28e6:	7813      	ldrb	r3, [r2, #0]
    28e8:	f043 0301 	orr.w	r3, r3, #1
    28ec:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    28ee:	6853      	ldr	r3, [r2, #4]
    28f0:	f013 0f01 	tst.w	r3, #1
    28f4:	d1fb      	bne.n	28ee <_ext_irq_init+0x32>
    28f6:	4a10      	ldr	r2, [pc, #64]	; (2938 <_ext_irq_init+0x7c>)
    28f8:	6853      	ldr	r3, [r2, #4]
    28fa:	f013 0f03 	tst.w	r3, #3
    28fe:	d1fb      	bne.n	28f8 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2900:	4b0d      	ldr	r3, [pc, #52]	; (2938 <_ext_irq_init+0x7c>)
    2902:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    2904:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2908:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    290a:	2200      	movs	r2, #0
    290c:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    290e:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2910:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    2912:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    2914:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    2916:	61da      	str	r2, [r3, #28]
    2918:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    291a:	461a      	mov	r2, r3
    291c:	6853      	ldr	r3, [r2, #4]
    291e:	f013 0f03 	tst.w	r3, #3
    2922:	d1fb      	bne.n	291c <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2924:	4a04      	ldr	r2, [pc, #16]	; (2938 <_ext_irq_init+0x7c>)
    2926:	7813      	ldrb	r3, [r2, #0]
    2928:	f043 0302 	orr.w	r3, r3, #2
    292c:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    292e:	2000      	movs	r0, #0
    2930:	4770      	bx	lr
		return ERR_DENIED;
    2932:	f06f 0010 	mvn.w	r0, #16
}
    2936:	4770      	bx	lr
    2938:	40002800 	.word	0x40002800

0000293c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    293c:	b430      	push	{r4, r5}
    293e:	4814      	ldr	r0, [pc, #80]	; (2990 <_event_system_init+0x54>)
    2940:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2944:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2946:	4c13      	ldr	r4, [pc, #76]	; (2994 <_event_system_init+0x58>)
    2948:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    294a:	f813 1b01 	ldrb.w	r1, [r3], #1
    294e:	3248      	adds	r2, #72	; 0x48
    2950:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2954:	42ab      	cmp	r3, r5
    2956:	d1f7      	bne.n	2948 <_event_system_init+0xc>
    2958:	480d      	ldr	r0, [pc, #52]	; (2990 <_event_system_init+0x54>)
    295a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    295e:	3080      	adds	r0, #128	; 0x80
    2960:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2962:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2966:	00ca      	lsls	r2, r1, #3
    2968:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    296c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2970:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2972:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2976:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2978:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    297c:	43db      	mvns	r3, r3
    297e:	b2db      	uxtb	r3, r3
    2980:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2984:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2986:	2920      	cmp	r1, #32
    2988:	d1eb      	bne.n	2962 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    298a:	2000      	movs	r0, #0
    298c:	bc30      	pop	{r4, r5}
    298e:	4770      	bx	lr
    2990:	00007488 	.word	0x00007488
    2994:	4100e000 	.word	0x4100e000

00002998 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2998:	f010 0f01 	tst.w	r0, #1
    299c:	d002      	beq.n	29a4 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    299e:	4a23      	ldr	r2, [pc, #140]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29a0:	4b23      	ldr	r3, [pc, #140]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29a2:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    29a4:	f010 0f02 	tst.w	r0, #2
    29a8:	d002      	beq.n	29b0 <_gclk_init_generators_by_fref+0x18>
    29aa:	4a22      	ldr	r2, [pc, #136]	; (2a34 <_gclk_init_generators_by_fref+0x9c>)
    29ac:	4b20      	ldr	r3, [pc, #128]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29ae:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    29b0:	f010 0f04 	tst.w	r0, #4
    29b4:	d002      	beq.n	29bc <_gclk_init_generators_by_fref+0x24>
    29b6:	4a1d      	ldr	r2, [pc, #116]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29b8:	4b1d      	ldr	r3, [pc, #116]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29ba:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    29bc:	f010 0f08 	tst.w	r0, #8
    29c0:	d002      	beq.n	29c8 <_gclk_init_generators_by_fref+0x30>
    29c2:	4a1a      	ldr	r2, [pc, #104]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29c4:	4b1a      	ldr	r3, [pc, #104]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29c6:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    29c8:	f010 0f10 	tst.w	r0, #16
    29cc:	d002      	beq.n	29d4 <_gclk_init_generators_by_fref+0x3c>
    29ce:	4a17      	ldr	r2, [pc, #92]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29d0:	4b17      	ldr	r3, [pc, #92]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29d2:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    29d4:	f010 0f20 	tst.w	r0, #32
    29d8:	d002      	beq.n	29e0 <_gclk_init_generators_by_fref+0x48>
    29da:	4a14      	ldr	r2, [pc, #80]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29dc:	4b14      	ldr	r3, [pc, #80]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29de:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    29e0:	f010 0f40 	tst.w	r0, #64	; 0x40
    29e4:	d002      	beq.n	29ec <_gclk_init_generators_by_fref+0x54>
    29e6:	4a11      	ldr	r2, [pc, #68]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29e8:	4b11      	ldr	r3, [pc, #68]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29ea:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    29ec:	f010 0f80 	tst.w	r0, #128	; 0x80
    29f0:	d002      	beq.n	29f8 <_gclk_init_generators_by_fref+0x60>
    29f2:	4a0e      	ldr	r2, [pc, #56]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    29f4:	4b0e      	ldr	r3, [pc, #56]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    29f6:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    29f8:	f410 7f80 	tst.w	r0, #256	; 0x100
    29fc:	d002      	beq.n	2a04 <_gclk_init_generators_by_fref+0x6c>
    29fe:	4a0b      	ldr	r2, [pc, #44]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    2a00:	4b0b      	ldr	r3, [pc, #44]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    2a02:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    2a04:	f410 7f00 	tst.w	r0, #512	; 0x200
    2a08:	d002      	beq.n	2a10 <_gclk_init_generators_by_fref+0x78>
    2a0a:	4a08      	ldr	r2, [pc, #32]	; (2a2c <_gclk_init_generators_by_fref+0x94>)
    2a0c:	4b08      	ldr	r3, [pc, #32]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    2a0e:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    2a10:	f410 6f80 	tst.w	r0, #1024	; 0x400
    2a14:	d002      	beq.n	2a1c <_gclk_init_generators_by_fref+0x84>
    2a16:	4a08      	ldr	r2, [pc, #32]	; (2a38 <_gclk_init_generators_by_fref+0xa0>)
    2a18:	4b05      	ldr	r3, [pc, #20]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    2a1a:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2a1c:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2a20:	d002      	beq.n	2a28 <_gclk_init_generators_by_fref+0x90>
    2a22:	4a06      	ldr	r2, [pc, #24]	; (2a3c <_gclk_init_generators_by_fref+0xa4>)
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <_gclk_init_generators_by_fref+0x98>)
    2a26:	64da      	str	r2, [r3, #76]	; 0x4c
    2a28:	4770      	bx	lr
    2a2a:	bf00      	nop
    2a2c:	00012b06 	.word	0x00012b06
    2a30:	40001c00 	.word	0x40001c00
    2a34:	00012306 	.word	0x00012306
    2a38:	00012b05 	.word	0x00012b05
    2a3c:	00013b05 	.word	0x00013b05

00002a40 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2a40:	2201      	movs	r2, #1
    2a42:	4b01      	ldr	r3, [pc, #4]	; (2a48 <_mclk_init+0x8>)
    2a44:	715a      	strb	r2, [r3, #5]
    2a46:	4770      	bx	lr
    2a48:	40000800 	.word	0x40000800

00002a4c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2a4c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2a4e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2a50:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2a52:	f012 0f01 	tst.w	r2, #1
    2a56:	d005      	beq.n	2a64 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2a58:	2201      	movs	r2, #1
    2a5a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2a5c:	6803      	ldr	r3, [r0, #0]
    2a5e:	b153      	cbz	r3, 2a76 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2a60:	4798      	blx	r3
    2a62:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2a64:	8a1a      	ldrh	r2, [r3, #16]
    2a66:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2a68:	b12a      	cbz	r2, 2a76 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2a6a:	f240 225e 	movw	r2, #606	; 0x25e
    2a6e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2a70:	6843      	ldr	r3, [r0, #4]
    2a72:	b103      	cbz	r3, 2a76 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2a74:	4798      	blx	r3
    2a76:	bd08      	pop	{r3, pc}

00002a78 <_flash_init>:
{
    2a78:	b538      	push	{r3, r4, r5, lr}
    2a7a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2a7c:	4605      	mov	r5, r0
    2a7e:	b350      	cbz	r0, 2ad6 <_flash_init+0x5e>
    2a80:	4816      	ldr	r0, [pc, #88]	; (2adc <_flash_init+0x64>)
    2a82:	4281      	cmp	r1, r0
    2a84:	bf14      	ite	ne
    2a86:	2000      	movne	r0, #0
    2a88:	2001      	moveq	r0, #1
    2a8a:	2256      	movs	r2, #86	; 0x56
    2a8c:	4914      	ldr	r1, [pc, #80]	; (2ae0 <_flash_init+0x68>)
    2a8e:	4b15      	ldr	r3, [pc, #84]	; (2ae4 <_flash_init+0x6c>)
    2a90:	4798      	blx	r3
	device->hw = hw;
    2a92:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2a94:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2a96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2a9a:	049b      	lsls	r3, r3, #18
    2a9c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2a9e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2aa0:	4b11      	ldr	r3, [pc, #68]	; (2ae8 <_flash_init+0x70>)
    2aa2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2aa4:	4b11      	ldr	r3, [pc, #68]	; (2aec <_flash_init+0x74>)
    2aa6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2aaa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ab2:	f3bf 8f6f 	isb	sy
    2ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ac2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ac6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2aca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ace:	6019      	str	r1, [r3, #0]
    2ad0:	601a      	str	r2, [r3, #0]
}
    2ad2:	2000      	movs	r0, #0
    2ad4:	bd38      	pop	{r3, r4, r5, pc}
    2ad6:	2000      	movs	r0, #0
    2ad8:	e7d7      	b.n	2a8a <_flash_init+0x12>
    2ada:	bf00      	nop
    2adc:	41004000 	.word	0x41004000
    2ae0:	0000758c 	.word	0x0000758c
    2ae4:	000022fd 	.word	0x000022fd
    2ae8:	20000ac0 	.word	0x20000ac0
    2aec:	e000e100 	.word	0xe000e100

00002af0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2af0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2af2:	4b02      	ldr	r3, [pc, #8]	; (2afc <NVMCTRL_0_Handler+0xc>)
    2af4:	6818      	ldr	r0, [r3, #0]
    2af6:	4b02      	ldr	r3, [pc, #8]	; (2b00 <NVMCTRL_0_Handler+0x10>)
    2af8:	4798      	blx	r3
    2afa:	bd08      	pop	{r3, pc}
    2afc:	20000ac0 	.word	0x20000ac0
    2b00:	00002a4d 	.word	0x00002a4d

00002b04 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2b04:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2b06:	4b02      	ldr	r3, [pc, #8]	; (2b10 <NVMCTRL_1_Handler+0xc>)
    2b08:	6818      	ldr	r0, [r3, #0]
    2b0a:	4b02      	ldr	r3, [pc, #8]	; (2b14 <NVMCTRL_1_Handler+0x10>)
    2b0c:	4798      	blx	r3
    2b0e:	bd08      	pop	{r3, pc}
    2b10:	20000ac0 	.word	0x20000ac0
    2b14:	00002a4d 	.word	0x00002a4d

00002b18 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2b18:	4b09      	ldr	r3, [pc, #36]	; (2b40 <_osc32kctrl_init_sources+0x28>)
    2b1a:	f242 024e 	movw	r2, #8270	; 0x204e
    2b1e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2b20:	2201      	movs	r2, #1
    2b22:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2b24:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2b26:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2b28:	2200      	movs	r2, #0
    2b2a:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2b2c:	461a      	mov	r2, r3
    2b2e:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2b30:	f013 0f01 	tst.w	r3, #1
    2b34:	d0fb      	beq.n	2b2e <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2b36:	2204      	movs	r2, #4
    2b38:	4b01      	ldr	r3, [pc, #4]	; (2b40 <_osc32kctrl_init_sources+0x28>)
    2b3a:	741a      	strb	r2, [r3, #16]
    2b3c:	4770      	bx	lr
    2b3e:	bf00      	nop
    2b40:	40001400 	.word	0x40001400

00002b44 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2b44:	4a2b      	ldr	r2, [pc, #172]	; (2bf4 <_oscctrl_init_referenced_generators+0xb0>)
    2b46:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2b48:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2b4c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2b50:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2b52:	4b29      	ldr	r3, [pc, #164]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2b54:	2200      	movs	r2, #0
    2b56:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2b58:	4a28      	ldr	r2, [pc, #160]	; (2bfc <_oscctrl_init_referenced_generators+0xb8>)
    2b5a:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2b5c:	461a      	mov	r2, r3
    2b5e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2b62:	f013 0f10 	tst.w	r3, #16
    2b66:	d1fa      	bne.n	2b5e <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2b68:	2200      	movs	r2, #0
    2b6a:	4b23      	ldr	r3, [pc, #140]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2b6c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2b70:	461a      	mov	r2, r3
    2b72:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2b76:	f013 0f04 	tst.w	r3, #4
    2b7a:	d1fa      	bne.n	2b72 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2b7c:	2242      	movs	r2, #66	; 0x42
    2b7e:	4b1e      	ldr	r3, [pc, #120]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2b80:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2b82:	461a      	mov	r2, r3
    2b84:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2b88:	f013 0f02 	tst.w	r3, #2
    2b8c:	d1fa      	bne.n	2b84 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2b8e:	4b1a      	ldr	r3, [pc, #104]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2b92:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2b94:	461a      	mov	r2, r3
    2b96:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2b9a:	f013 0f08 	tst.w	r3, #8
    2b9e:	d1fa      	bne.n	2b96 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2ba0:	2282      	movs	r2, #130	; 0x82
    2ba2:	4b15      	ldr	r3, [pc, #84]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2ba4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2ba8:	461a      	mov	r2, r3
    2baa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2bae:	f013 0f04 	tst.w	r3, #4
    2bb2:	d1fa      	bne.n	2baa <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2bb4:	4b10      	ldr	r3, [pc, #64]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2bba:	f013 0f01 	tst.w	r3, #1
    2bbe:	d012      	beq.n	2be6 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2bc0:	4a0d      	ldr	r2, [pc, #52]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2bc2:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2bc4:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2bc8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2bcc:	d1f9      	bne.n	2bc2 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2bce:	4a09      	ldr	r2, [pc, #36]	; (2bf4 <_oscctrl_init_referenced_generators+0xb0>)
    2bd0:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d1fc      	bne.n	2bd0 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2bd6:	4a07      	ldr	r2, [pc, #28]	; (2bf4 <_oscctrl_init_referenced_generators+0xb0>)
    2bd8:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2bda:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2bde:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2be2:	6213      	str	r3, [r2, #32]
    2be4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2be6:	4a04      	ldr	r2, [pc, #16]	; (2bf8 <_oscctrl_init_referenced_generators+0xb4>)
    2be8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2bea:	f413 7f80 	tst.w	r3, #256	; 0x100
    2bee:	d0fb      	beq.n	2be8 <_oscctrl_init_referenced_generators+0xa4>
    2bf0:	e7ed      	b.n	2bce <_oscctrl_init_referenced_generators+0x8a>
    2bf2:	bf00      	nop
    2bf4:	40001c00 	.word	0x40001c00
    2bf8:	40001000 	.word	0x40001000
    2bfc:	04010000 	.word	0x04010000

00002c00 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2c00:	b500      	push	{lr}
    2c02:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2c04:	4b0d      	ldr	r3, [pc, #52]	; (2c3c <RAMECC_Handler+0x3c>)
    2c06:	789b      	ldrb	r3, [r3, #2]
    2c08:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2c0a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2c0c:	9b01      	ldr	r3, [sp, #4]
    2c0e:	f013 0f02 	tst.w	r3, #2
    2c12:	d006      	beq.n	2c22 <RAMECC_Handler+0x22>
    2c14:	4b0a      	ldr	r3, [pc, #40]	; (2c40 <RAMECC_Handler+0x40>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	b11b      	cbz	r3, 2c22 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2c1a:	4a08      	ldr	r2, [pc, #32]	; (2c3c <RAMECC_Handler+0x3c>)
    2c1c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2c1e:	4798      	blx	r3
    2c20:	e009      	b.n	2c36 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2c22:	9b01      	ldr	r3, [sp, #4]
    2c24:	f013 0f01 	tst.w	r3, #1
    2c28:	d005      	beq.n	2c36 <RAMECC_Handler+0x36>
    2c2a:	4b05      	ldr	r3, [pc, #20]	; (2c40 <RAMECC_Handler+0x40>)
    2c2c:	685b      	ldr	r3, [r3, #4]
    2c2e:	b113      	cbz	r3, 2c36 <RAMECC_Handler+0x36>
    2c30:	4a02      	ldr	r2, [pc, #8]	; (2c3c <RAMECC_Handler+0x3c>)
    2c32:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2c34:	4798      	blx	r3
	} else {
		return;
	}
}
    2c36:	b003      	add	sp, #12
    2c38:	f85d fb04 	ldr.w	pc, [sp], #4
    2c3c:	41020000 	.word	0x41020000
    2c40:	20003e54 	.word	0x20003e54

00002c44 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2c44:	b470      	push	{r4, r5, r6}
    2c46:	b087      	sub	sp, #28
    2c48:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2c4a:	466c      	mov	r4, sp
    2c4c:	4d0c      	ldr	r5, [pc, #48]	; (2c80 <_sercom_get_hardware_index+0x3c>)
    2c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c52:	e895 0003 	ldmia.w	r5, {r0, r1}
    2c56:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2c5a:	9b00      	ldr	r3, [sp, #0]
    2c5c:	42b3      	cmp	r3, r6
    2c5e:	d00c      	beq.n	2c7a <_sercom_get_hardware_index+0x36>
    2c60:	4632      	mov	r2, r6
    2c62:	2001      	movs	r0, #1
    2c64:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2c68:	4293      	cmp	r3, r2
    2c6a:	d007      	beq.n	2c7c <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c6c:	3001      	adds	r0, #1
    2c6e:	2806      	cmp	r0, #6
    2c70:	d1f8      	bne.n	2c64 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    2c72:	2000      	movs	r0, #0
}
    2c74:	b007      	add	sp, #28
    2c76:	bc70      	pop	{r4, r5, r6}
    2c78:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2c7a:	2000      	movs	r0, #0
			return i;
    2c7c:	b2c0      	uxtb	r0, r0
    2c7e:	e7f9      	b.n	2c74 <_sercom_get_hardware_index+0x30>
    2c80:	000075ac 	.word	0x000075ac

00002c84 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2c84:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2c86:	4b03      	ldr	r3, [pc, #12]	; (2c94 <_sercom_get_irq_num+0x10>)
    2c88:	4798      	blx	r3
    2c8a:	0080      	lsls	r0, r0, #2
    2c8c:	302e      	adds	r0, #46	; 0x2e
}
    2c8e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2c92:	bd08      	pop	{r3, pc}
    2c94:	00002c45 	.word	0x00002c45

00002c98 <_usart_init>:
{
    2c98:	b538      	push	{r3, r4, r5, lr}
    2c9a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2c9c:	4b33      	ldr	r3, [pc, #204]	; (2d6c <_usart_init+0xd4>)
    2c9e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2ca0:	2803      	cmp	r0, #3
    2ca2:	d056      	beq.n	2d52 <_usart_init+0xba>
    2ca4:	2804      	cmp	r0, #4
    2ca6:	d052      	beq.n	2d4e <_usart_init+0xb6>
    2ca8:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2caa:	bf08      	it	eq
    2cac:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    2cae:	d006      	beq.n	2cbe <_usart_init+0x26>
	ASSERT(false);
    2cb0:	f240 2263 	movw	r2, #611	; 0x263
    2cb4:	492e      	ldr	r1, [pc, #184]	; (2d70 <_usart_init+0xd8>)
    2cb6:	2000      	movs	r0, #0
    2cb8:	4b2e      	ldr	r3, [pc, #184]	; (2d74 <_usart_init+0xdc>)
    2cba:	4798      	blx	r3
	return 0;
    2cbc:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2cbe:	69e3      	ldr	r3, [r4, #28]
    2cc0:	f013 0f01 	tst.w	r3, #1
    2cc4:	d1fb      	bne.n	2cbe <_usart_init+0x26>
    2cc6:	69e3      	ldr	r3, [r4, #28]
    2cc8:	f013 0f03 	tst.w	r3, #3
    2ccc:	d1fb      	bne.n	2cc6 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2cce:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    2cd0:	f013 0f02 	tst.w	r3, #2
    2cd4:	d147      	bne.n	2d66 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2cd6:	69e3      	ldr	r3, [r4, #28]
    2cd8:	f013 0f01 	tst.w	r3, #1
    2cdc:	d1fb      	bne.n	2cd6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    2cde:	6823      	ldr	r3, [r4, #0]
    2ce0:	f043 0301 	orr.w	r3, r3, #1
    2ce4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ce6:	69e3      	ldr	r3, [r4, #28]
    2ce8:	f013 0f01 	tst.w	r3, #1
    2cec:	d1fb      	bne.n	2ce6 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2cee:	4610      	mov	r0, r2
    2cf0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2cf4:	4920      	ldr	r1, [pc, #128]	; (2d78 <_usart_init+0xe0>)
    2cf6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2cfa:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2cfc:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2cfe:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2d00:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2d04:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2d06:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2d0a:	d024      	beq.n	2d56 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2d0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2d10:	4b19      	ldr	r3, [pc, #100]	; (2d78 <_usart_init+0xe0>)
    2d12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2d16:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2d18:	89a3      	ldrh	r3, [r4, #12]
    2d1a:	f361 030c 	bfi	r3, r1, #0, #13
    2d1e:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2d20:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    2d24:	89a3      	ldrh	r3, [r4, #12]
    2d26:	f362 334f 	bfi	r3, r2, #13, #3
    2d2a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2d2c:	4b12      	ldr	r3, [pc, #72]	; (2d78 <_usart_init+0xe0>)
    2d2e:	0042      	lsls	r2, r0, #1
    2d30:	1811      	adds	r1, r2, r0
    2d32:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2d36:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2d3a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2d3c:	4402      	add	r2, r0
    2d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2d42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2d46:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    2d4a:	2000      	movs	r0, #0
    2d4c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2d4e:	2201      	movs	r2, #1
    2d50:	e7b5      	b.n	2cbe <_usart_init+0x26>
    2d52:	2200      	movs	r2, #0
    2d54:	e7b3      	b.n	2cbe <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2d56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2d5a:	4b07      	ldr	r3, [pc, #28]	; (2d78 <_usart_init+0xe0>)
    2d5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2d60:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2d62:	81a3      	strh	r3, [r4, #12]
    2d64:	e7e2      	b.n	2d2c <_usart_init+0x94>
		return ERR_DENIED;
    2d66:	f06f 0010 	mvn.w	r0, #16
}
    2d6a:	bd38      	pop	{r3, r4, r5, pc}
    2d6c:	00002c45 	.word	0x00002c45
    2d70:	00007638 	.word	0x00007638
    2d74:	000022fd 	.word	0x000022fd
    2d78:	000075ac 	.word	0x000075ac

00002d7c <_usart_async_init>:
{
    2d7c:	b570      	push	{r4, r5, r6, lr}
    2d7e:	460d      	mov	r5, r1
	ASSERT(device);
    2d80:	4606      	mov	r6, r0
    2d82:	22da      	movs	r2, #218	; 0xda
    2d84:	4916      	ldr	r1, [pc, #88]	; (2de0 <_usart_async_init+0x64>)
    2d86:	3000      	adds	r0, #0
    2d88:	bf18      	it	ne
    2d8a:	2001      	movne	r0, #1
    2d8c:	4b15      	ldr	r3, [pc, #84]	; (2de4 <_usart_async_init+0x68>)
    2d8e:	4798      	blx	r3
	init_status = _usart_init(hw);
    2d90:	4628      	mov	r0, r5
    2d92:	4b15      	ldr	r3, [pc, #84]	; (2de8 <_usart_async_init+0x6c>)
    2d94:	4798      	blx	r3
	if (init_status) {
    2d96:	4604      	mov	r4, r0
    2d98:	b9f8      	cbnz	r0, 2dda <_usart_async_init+0x5e>
	device->hw = hw;
    2d9a:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    2d9c:	4628      	mov	r0, r5
    2d9e:	4b13      	ldr	r3, [pc, #76]	; (2dec <_usart_async_init+0x70>)
    2da0:	4798      	blx	r3
		irq = irq +2;
    2da2:	3002      	adds	r0, #2
    2da4:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2da6:	f000 031f 	and.w	r3, r0, #31
    2daa:	2201      	movs	r2, #1
    2dac:	409a      	lsls	r2, r3
    2dae:	0943      	lsrs	r3, r0, #5
    2db0:	009b      	lsls	r3, r3, #2
    2db2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2db6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dc2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2dca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2dce:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2dd2:	21e0      	movs	r1, #224	; 0xe0
    2dd4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2dd8:	601a      	str	r2, [r3, #0]
}
    2dda:	4620      	mov	r0, r4
    2ddc:	bd70      	pop	{r4, r5, r6, pc}
    2dde:	bf00      	nop
    2de0:	00007638 	.word	0x00007638
    2de4:	000022fd 	.word	0x000022fd
    2de8:	00002c99 	.word	0x00002c99
    2dec:	00002c85 	.word	0x00002c85

00002df0 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2df0:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2df2:	69d3      	ldr	r3, [r2, #28]
    2df4:	f013 0f03 	tst.w	r3, #3
    2df8:	d1fb      	bne.n	2df2 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2dfa:	6813      	ldr	r3, [r2, #0]
    2dfc:	f043 0302 	orr.w	r3, r3, #2
    2e00:	6013      	str	r3, [r2, #0]
    2e02:	4770      	bx	lr

00002e04 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2e04:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2e06:	6299      	str	r1, [r3, #40]	; 0x28
    2e08:	4770      	bx	lr

00002e0a <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2e0a:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2e0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2e0e:	b2c0      	uxtb	r0, r0
    2e10:	4770      	bx	lr

00002e12 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2e12:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2e14:	7e18      	ldrb	r0, [r3, #24]
}
    2e16:	f000 0001 	and.w	r0, r0, #1
    2e1a:	4770      	bx	lr

00002e1c <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2e1c:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2e1e:	7e18      	ldrb	r0, [r3, #24]
}
    2e20:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2e24:	4770      	bx	lr
	...

00002e28 <_usart_async_set_irq_state>:
{
    2e28:	b570      	push	{r4, r5, r6, lr}
    2e2a:	460c      	mov	r4, r1
    2e2c:	4616      	mov	r6, r2
	ASSERT(device);
    2e2e:	4605      	mov	r5, r0
    2e30:	f240 2245 	movw	r2, #581	; 0x245
    2e34:	4915      	ldr	r1, [pc, #84]	; (2e8c <_usart_async_set_irq_state+0x64>)
    2e36:	3000      	adds	r0, #0
    2e38:	bf18      	it	ne
    2e3a:	2001      	movne	r0, #1
    2e3c:	4b14      	ldr	r3, [pc, #80]	; (2e90 <_usart_async_set_irq_state+0x68>)
    2e3e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2e40:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    2e44:	d10d      	bne.n	2e62 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2e46:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2e48:	b92e      	cbnz	r6, 2e56 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2e4a:	2201      	movs	r2, #1
    2e4c:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2e4e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2e50:	2202      	movs	r2, #2
    2e52:	751a      	strb	r2, [r3, #20]
    2e54:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2e56:	2201      	movs	r2, #1
    2e58:	759a      	strb	r2, [r3, #22]
    2e5a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2e5c:	2202      	movs	r2, #2
    2e5e:	759a      	strb	r2, [r3, #22]
    2e60:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    2e62:	2c01      	cmp	r4, #1
    2e64:	d002      	beq.n	2e6c <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    2e66:	2c03      	cmp	r4, #3
    2e68:	d008      	beq.n	2e7c <_usart_async_set_irq_state+0x54>
    2e6a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2e6c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2e6e:	b916      	cbnz	r6, 2e76 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2e70:	2204      	movs	r2, #4
    2e72:	751a      	strb	r2, [r3, #20]
    2e74:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    2e76:	2204      	movs	r2, #4
    2e78:	759a      	strb	r2, [r3, #22]
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2e7c:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2e7e:	b116      	cbz	r6, 2e86 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2e80:	2280      	movs	r2, #128	; 0x80
    2e82:	759a      	strb	r2, [r3, #22]
}
    2e84:	e7f1      	b.n	2e6a <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2e86:	2280      	movs	r2, #128	; 0x80
    2e88:	751a      	strb	r2, [r3, #20]
    2e8a:	bd70      	pop	{r4, r5, r6, pc}
    2e8c:	00007638 	.word	0x00007638
    2e90:	000022fd 	.word	0x000022fd

00002e94 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2e94:	4b03      	ldr	r3, [pc, #12]	; (2ea4 <_delay_init+0x10>)
    2e96:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2e9a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2e9c:	2205      	movs	r2, #5
    2e9e:	601a      	str	r2, [r3, #0]
    2ea0:	4770      	bx	lr
    2ea2:	bf00      	nop
    2ea4:	e000e010 	.word	0xe000e010

00002ea8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2ea8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2eaa:	b303      	cbz	r3, 2eee <_delay_cycles+0x46>
{
    2eac:	b430      	push	{r4, r5}
    2eae:	1e5d      	subs	r5, r3, #1
    2eb0:	b2ed      	uxtb	r5, r5
	while (n--) {
    2eb2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2eb4:	4a12      	ldr	r2, [pc, #72]	; (2f00 <_delay_cycles+0x58>)
    2eb6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2eba:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2ebc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ebe:	6813      	ldr	r3, [r2, #0]
    2ec0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ec4:	d0fb      	beq.n	2ebe <_delay_cycles+0x16>
	while (n--) {
    2ec6:	3801      	subs	r0, #1
    2ec8:	b2c0      	uxtb	r0, r0
    2eca:	28ff      	cmp	r0, #255	; 0xff
    2ecc:	d1f5      	bne.n	2eba <_delay_cycles+0x12>
    2ece:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2ed2:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2ed6:	3101      	adds	r1, #1
    2ed8:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2eda:	4b09      	ldr	r3, [pc, #36]	; (2f00 <_delay_cycles+0x58>)
    2edc:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ede:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ee0:	461a      	mov	r2, r3
    2ee2:	6813      	ldr	r3, [r2, #0]
    2ee4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2ee8:	d0fb      	beq.n	2ee2 <_delay_cycles+0x3a>
		;
}
    2eea:	bc30      	pop	{r4, r5}
    2eec:	4770      	bx	lr
	SysTick->LOAD = buf;
    2eee:	4b04      	ldr	r3, [pc, #16]	; (2f00 <_delay_cycles+0x58>)
    2ef0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2ef2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2ef4:	461a      	mov	r2, r3
    2ef6:	6813      	ldr	r3, [r2, #0]
    2ef8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2efc:	d0fb      	beq.n	2ef6 <_delay_cycles+0x4e>
    2efe:	4770      	bx	lr
    2f00:	e000e010 	.word	0xe000e010

00002f04 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    2f04:	b470      	push	{r4, r5, r6}
    2f06:	b087      	sub	sp, #28
    2f08:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2f0a:	ac01      	add	r4, sp, #4
    2f0c:	4d14      	ldr	r5, [pc, #80]	; (2f60 <_get_irq_num+0x5c>)
    2f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f12:	682b      	ldr	r3, [r5, #0]
    2f14:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2f16:	42b0      	cmp	r0, r6
    2f18:	d017      	beq.n	2f4a <_get_irq_num+0x46>
    2f1a:	4631      	mov	r1, r6
    2f1c:	2301      	movs	r3, #1
    2f1e:	a801      	add	r0, sp, #4
    2f20:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2f24:	428a      	cmp	r2, r1
    2f26:	d006      	beq.n	2f36 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2f28:	3301      	adds	r3, #1
    2f2a:	2b05      	cmp	r3, #5
    2f2c:	d1f8      	bne.n	2f20 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2f2e:	2055      	movs	r0, #85	; 0x55
}
    2f30:	b007      	add	sp, #28
    2f32:	bc70      	pop	{r4, r5, r6}
    2f34:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    2f36:	b2db      	uxtb	r3, r3
    2f38:	2b04      	cmp	r3, #4
    2f3a:	d80c      	bhi.n	2f56 <_get_irq_num+0x52>
    2f3c:	e8df f003 	tbb	[pc, r3]
    2f40:	070d0305 	.word	0x070d0305
    2f44:	09          	.byte	0x09
    2f45:	00          	.byte	0x00
		return TCC1_0_IRQn;
    2f46:	205c      	movs	r0, #92	; 0x5c
    2f48:	e7f2      	b.n	2f30 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    2f4a:	2055      	movs	r0, #85	; 0x55
    2f4c:	e7f0      	b.n	2f30 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    2f4e:	2065      	movs	r0, #101	; 0x65
    2f50:	e7ee      	b.n	2f30 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    2f52:	2068      	movs	r0, #104	; 0x68
    2f54:	e7ec      	b.n	2f30 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    2f56:	2089      	movs	r0, #137	; 0x89
    2f58:	e7ea      	b.n	2f30 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    2f5a:	2061      	movs	r0, #97	; 0x61
    2f5c:	e7e8      	b.n	2f30 <_get_irq_num+0x2c>
    2f5e:	bf00      	nop
    2f60:	00007654 	.word	0x00007654

00002f64 <_tcc_timer_deinit>:
{
    2f64:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2f66:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2f68:	4620      	mov	r0, r4
    2f6a:	4b10      	ldr	r3, [pc, #64]	; (2fac <_tcc_timer_deinit+0x48>)
    2f6c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f6e:	0943      	lsrs	r3, r0, #5
    2f70:	f000 001f 	and.w	r0, r0, #31
    2f74:	2201      	movs	r2, #1
    2f76:	fa02 f000 	lsl.w	r0, r2, r0
    2f7a:	3320      	adds	r3, #32
    2f7c:	4a0c      	ldr	r2, [pc, #48]	; (2fb0 <_tcc_timer_deinit+0x4c>)
    2f7e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f86:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2f8a:	68a3      	ldr	r3, [r4, #8]
    2f8c:	f013 0f03 	tst.w	r3, #3
    2f90:	d1fb      	bne.n	2f8a <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2f92:	6823      	ldr	r3, [r4, #0]
    2f94:	f023 0302 	bic.w	r3, r3, #2
    2f98:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2f9a:	68a3      	ldr	r3, [r4, #8]
    2f9c:	f013 0f01 	tst.w	r3, #1
    2fa0:	d1fb      	bne.n	2f9a <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2fa2:	6823      	ldr	r3, [r4, #0]
    2fa4:	f043 0301 	orr.w	r3, r3, #1
    2fa8:	6023      	str	r3, [r4, #0]
    2faa:	bd10      	pop	{r4, pc}
    2fac:	00002f05 	.word	0x00002f05
    2fb0:	e000e100 	.word	0xe000e100

00002fb4 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2fb4:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2fb6:	6893      	ldr	r3, [r2, #8]
    2fb8:	f013 0f03 	tst.w	r3, #3
    2fbc:	d1fb      	bne.n	2fb6 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2fbe:	6813      	ldr	r3, [r2, #0]
    2fc0:	f043 0302 	orr.w	r3, r3, #2
    2fc4:	6013      	str	r3, [r2, #0]
    2fc6:	4770      	bx	lr

00002fc8 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2fc8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2fca:	6893      	ldr	r3, [r2, #8]
    2fcc:	f013 0f03 	tst.w	r3, #3
    2fd0:	d1fb      	bne.n	2fca <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2fd2:	6813      	ldr	r3, [r2, #0]
    2fd4:	f023 0302 	bic.w	r3, r3, #2
    2fd8:	6013      	str	r3, [r2, #0]
    2fda:	4770      	bx	lr

00002fdc <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2fdc:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2fde:	6419      	str	r1, [r3, #64]	; 0x40
    2fe0:	4770      	bx	lr

00002fe2 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2fe2:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2fe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2fe6:	4770      	bx	lr

00002fe8 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2fe8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2fea:	6893      	ldr	r3, [r2, #8]
    2fec:	f013 0f03 	tst.w	r3, #3
    2ff0:	d1fb      	bne.n	2fea <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2ff2:	6810      	ldr	r0, [r2, #0]
}
    2ff4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2ff8:	4770      	bx	lr

00002ffa <tcc_interrupt_handler>:
{
    2ffa:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2ffc:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    3000:	f012 0f01 	tst.w	r2, #1
    3004:	d100      	bne.n	3008 <tcc_interrupt_handler+0xe>
    3006:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    3008:	2201      	movs	r2, #1
    300a:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    300c:	6803      	ldr	r3, [r0, #0]
    300e:	4798      	blx	r3
}
    3010:	e7f9      	b.n	3006 <tcc_interrupt_handler+0xc>
	...

00003014 <_tcc_timer_init>:
{
    3014:	b5f0      	push	{r4, r5, r6, r7, lr}
    3016:	b087      	sub	sp, #28
    3018:	4605      	mov	r5, r0
    301a:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    301c:	ae01      	add	r6, sp, #4
    301e:	4f4e      	ldr	r7, [pc, #312]	; (3158 <_tcc_timer_init+0x144>)
    3020:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3022:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    3028:	42a0      	cmp	r0, r4
    302a:	d00c      	beq.n	3046 <_tcc_timer_init+0x32>
    302c:	4621      	mov	r1, r4
    302e:	2301      	movs	r3, #1
    3030:	a801      	add	r0, sp, #4
    3032:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    3036:	428a      	cmp	r2, r1
    3038:	d006      	beq.n	3048 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    303a:	3301      	adds	r3, #1
    303c:	2b05      	cmp	r3, #5
    303e:	d1f8      	bne.n	3032 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    3040:	2600      	movs	r6, #0
			return i;
    3042:	b276      	sxtb	r6, r6
    3044:	e015      	b.n	3072 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    3046:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    3048:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    304c:	d073      	beq.n	3136 <_tcc_timer_init+0x122>
    304e:	2b01      	cmp	r3, #1
    3050:	d06b      	beq.n	312a <_tcc_timer_init+0x116>
    3052:	2b02      	cmp	r3, #2
    3054:	d06b      	beq.n	312e <_tcc_timer_init+0x11a>
    3056:	2b03      	cmp	r3, #3
    3058:	d06b      	beq.n	3132 <_tcc_timer_init+0x11e>
    305a:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    305c:	bf08      	it	eq
    305e:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    3060:	d0ef      	beq.n	3042 <_tcc_timer_init+0x2e>
	ASSERT(false);
    3062:	f240 128b 	movw	r2, #395	; 0x18b
    3066:	493d      	ldr	r1, [pc, #244]	; (315c <_tcc_timer_init+0x148>)
    3068:	2000      	movs	r0, #0
    306a:	4b3d      	ldr	r3, [pc, #244]	; (3160 <_tcc_timer_init+0x14c>)
    306c:	4798      	blx	r3
	return -1;
    306e:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    3072:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    3074:	22e4      	movs	r2, #228	; 0xe4
    3076:	4939      	ldr	r1, [pc, #228]	; (315c <_tcc_timer_init+0x148>)
    3078:	2001      	movs	r0, #1
    307a:	4b39      	ldr	r3, [pc, #228]	; (3160 <_tcc_timer_init+0x14c>)
    307c:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    307e:	68a3      	ldr	r3, [r4, #8]
    3080:	f013 0f01 	tst.w	r3, #1
    3084:	d1fb      	bne.n	307e <_tcc_timer_init+0x6a>
    3086:	68a3      	ldr	r3, [r4, #8]
    3088:	f013 0f03 	tst.w	r3, #3
    308c:	d1fb      	bne.n	3086 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    308e:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    3090:	f013 0f02 	tst.w	r3, #2
    3094:	d15d      	bne.n	3152 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3096:	68a3      	ldr	r3, [r4, #8]
    3098:	f013 0f01 	tst.w	r3, #1
    309c:	d1fb      	bne.n	3096 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    309e:	6823      	ldr	r3, [r4, #0]
    30a0:	f043 0301 	orr.w	r3, r3, #1
    30a4:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    30a6:	68a3      	ldr	r3, [r4, #8]
    30a8:	f013 0f01 	tst.w	r3, #1
    30ac:	d1fb      	bne.n	30a6 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    30ae:	4a2a      	ldr	r2, [pc, #168]	; (3158 <_tcc_timer_init+0x144>)
    30b0:	00f1      	lsls	r1, r6, #3
    30b2:	198b      	adds	r3, r1, r6
    30b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30b8:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    30ba:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    30bc:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    30be:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    30c0:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    30c2:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    30c4:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    30c6:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    30c8:	440e      	add	r6, r1
    30ca:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    30ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    30d0:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    30d2:	2301      	movs	r3, #1
    30d4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    30d6:	4b23      	ldr	r3, [pc, #140]	; (3164 <_tcc_timer_init+0x150>)
    30d8:	429c      	cmp	r4, r3
    30da:	d02e      	beq.n	313a <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    30dc:	4b22      	ldr	r3, [pc, #136]	; (3168 <_tcc_timer_init+0x154>)
    30de:	429c      	cmp	r4, r3
    30e0:	d02e      	beq.n	3140 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    30e2:	4b22      	ldr	r3, [pc, #136]	; (316c <_tcc_timer_init+0x158>)
    30e4:	429c      	cmp	r4, r3
    30e6:	d02e      	beq.n	3146 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    30e8:	4b21      	ldr	r3, [pc, #132]	; (3170 <_tcc_timer_init+0x15c>)
    30ea:	429c      	cmp	r4, r3
    30ec:	d02e      	beq.n	314c <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    30ee:	4b21      	ldr	r3, [pc, #132]	; (3174 <_tcc_timer_init+0x160>)
    30f0:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    30f2:	bf04      	itt	eq
    30f4:	4b20      	ldreq	r3, [pc, #128]	; (3178 <_tcc_timer_init+0x164>)
    30f6:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    30f8:	4620      	mov	r0, r4
    30fa:	4b20      	ldr	r3, [pc, #128]	; (317c <_tcc_timer_init+0x168>)
    30fc:	4798      	blx	r3
    30fe:	f000 031f 	and.w	r3, r0, #31
    3102:	2201      	movs	r2, #1
    3104:	409a      	lsls	r2, r3
    3106:	0943      	lsrs	r3, r0, #5
    3108:	009b      	lsls	r3, r3, #2
    310a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    310e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    311a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    311e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3122:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3124:	2000      	movs	r0, #0
}
    3126:	b007      	add	sp, #28
    3128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    312a:	2601      	movs	r6, #1
    312c:	e789      	b.n	3042 <_tcc_timer_init+0x2e>
    312e:	2602      	movs	r6, #2
    3130:	e787      	b.n	3042 <_tcc_timer_init+0x2e>
    3132:	2603      	movs	r6, #3
    3134:	e785      	b.n	3042 <_tcc_timer_init+0x2e>
    3136:	2600      	movs	r6, #0
    3138:	e783      	b.n	3042 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    313a:	4b0f      	ldr	r3, [pc, #60]	; (3178 <_tcc_timer_init+0x164>)
    313c:	601d      	str	r5, [r3, #0]
    313e:	e7d3      	b.n	30e8 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    3140:	4b0d      	ldr	r3, [pc, #52]	; (3178 <_tcc_timer_init+0x164>)
    3142:	605d      	str	r5, [r3, #4]
    3144:	e7d3      	b.n	30ee <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    3146:	4b0c      	ldr	r3, [pc, #48]	; (3178 <_tcc_timer_init+0x164>)
    3148:	609d      	str	r5, [r3, #8]
    314a:	e7d5      	b.n	30f8 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    314c:	4b0a      	ldr	r3, [pc, #40]	; (3178 <_tcc_timer_init+0x164>)
    314e:	60dd      	str	r5, [r3, #12]
    3150:	e7d2      	b.n	30f8 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    3152:	f06f 0010 	mvn.w	r0, #16
    3156:	e7e6      	b.n	3126 <_tcc_timer_init+0x112>
    3158:	00007654 	.word	0x00007654
    315c:	0000771c 	.word	0x0000771c
    3160:	000022fd 	.word	0x000022fd
    3164:	41016000 	.word	0x41016000
    3168:	41018000 	.word	0x41018000
    316c:	42000c00 	.word	0x42000c00
    3170:	42001000 	.word	0x42001000
    3174:	43001000 	.word	0x43001000
    3178:	20000ac4 	.word	0x20000ac4
    317c:	00002f05 	.word	0x00002f05

00003180 <_tcc_timer_set_irq>:
{
    3180:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    3182:	68c0      	ldr	r0, [r0, #12]
    3184:	4b02      	ldr	r3, [pc, #8]	; (3190 <_tcc_timer_set_irq+0x10>)
    3186:	4798      	blx	r3
    3188:	4b02      	ldr	r3, [pc, #8]	; (3194 <_tcc_timer_set_irq+0x14>)
    318a:	4798      	blx	r3
    318c:	bd08      	pop	{r3, pc}
    318e:	bf00      	nop
    3190:	00002f05 	.word	0x00002f05
    3194:	00002621 	.word	0x00002621

00003198 <_tcc_get_timer>:
}
    3198:	4800      	ldr	r0, [pc, #0]	; (319c <_tcc_get_timer+0x4>)
    319a:	4770      	bx	lr
    319c:	20000068 	.word	0x20000068

000031a0 <TCC0_0_Handler>:
{
    31a0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    31a2:	4b02      	ldr	r3, [pc, #8]	; (31ac <TCC0_0_Handler+0xc>)
    31a4:	6818      	ldr	r0, [r3, #0]
    31a6:	4b02      	ldr	r3, [pc, #8]	; (31b0 <TCC0_0_Handler+0x10>)
    31a8:	4798      	blx	r3
    31aa:	bd08      	pop	{r3, pc}
    31ac:	20000ac4 	.word	0x20000ac4
    31b0:	00002ffb 	.word	0x00002ffb

000031b4 <TCC1_0_Handler>:
{
    31b4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    31b6:	4b02      	ldr	r3, [pc, #8]	; (31c0 <TCC1_0_Handler+0xc>)
    31b8:	6858      	ldr	r0, [r3, #4]
    31ba:	4b02      	ldr	r3, [pc, #8]	; (31c4 <TCC1_0_Handler+0x10>)
    31bc:	4798      	blx	r3
    31be:	bd08      	pop	{r3, pc}
    31c0:	20000ac4 	.word	0x20000ac4
    31c4:	00002ffb 	.word	0x00002ffb

000031c8 <TCC2_0_Handler>:
{
    31c8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    31ca:	4b02      	ldr	r3, [pc, #8]	; (31d4 <TCC2_0_Handler+0xc>)
    31cc:	6898      	ldr	r0, [r3, #8]
    31ce:	4b02      	ldr	r3, [pc, #8]	; (31d8 <TCC2_0_Handler+0x10>)
    31d0:	4798      	blx	r3
    31d2:	bd08      	pop	{r3, pc}
    31d4:	20000ac4 	.word	0x20000ac4
    31d8:	00002ffb 	.word	0x00002ffb

000031dc <TCC3_0_Handler>:
{
    31dc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    31de:	4b02      	ldr	r3, [pc, #8]	; (31e8 <TCC3_0_Handler+0xc>)
    31e0:	68d8      	ldr	r0, [r3, #12]
    31e2:	4b02      	ldr	r3, [pc, #8]	; (31ec <TCC3_0_Handler+0x10>)
    31e4:	4798      	blx	r3
    31e6:	bd08      	pop	{r3, pc}
    31e8:	20000ac4 	.word	0x20000ac4
    31ec:	00002ffb 	.word	0x00002ffb

000031f0 <TCC4_0_Handler>:
{
    31f0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    31f2:	4b02      	ldr	r3, [pc, #8]	; (31fc <TCC4_0_Handler+0xc>)
    31f4:	6918      	ldr	r0, [r3, #16]
    31f6:	4b02      	ldr	r3, [pc, #8]	; (3200 <TCC4_0_Handler+0x10>)
    31f8:	4798      	blx	r3
    31fa:	bd08      	pop	{r3, pc}
    31fc:	20000ac4 	.word	0x20000ac4
    3200:	00002ffb 	.word	0x00002ffb

00003204 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3204:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3206:	6913      	ldr	r3, [r2, #16]
    3208:	f013 0f03 	tst.w	r3, #3
    320c:	d1fb      	bne.n	3206 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    320e:	6813      	ldr	r3, [r2, #0]
    3210:	f043 0302 	orr.w	r3, r3, #2
    3214:	6013      	str	r3, [r2, #0]
    3216:	4770      	bx	lr

00003218 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    3218:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    321a:	6913      	ldr	r3, [r2, #16]
    321c:	f013 0f03 	tst.w	r3, #3
    3220:	d1fb      	bne.n	321a <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3222:	6813      	ldr	r3, [r2, #0]
    3224:	f023 0302 	bic.w	r3, r3, #2
    3228:	6013      	str	r3, [r2, #0]
    322a:	4770      	bx	lr

0000322c <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    322c:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    322e:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3230:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3234:	2b02      	cmp	r3, #2
    3236:	d00b      	beq.n	3250 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3238:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    323a:	f013 0f0c 	tst.w	r3, #12
    323e:	d009      	beq.n	3254 <_tc_timer_set_period+0x28>
    3240:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3242:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3246:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    3248:	bf04      	itt	eq
    324a:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    324c:	76d1      	strbeq	r1, [r2, #27]
    324e:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3250:	61d1      	str	r1, [r2, #28]
    3252:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    3254:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3256:	8391      	strh	r1, [r2, #28]
    3258:	4770      	bx	lr

0000325a <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    325a:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    325c:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    325e:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3262:	2b02      	cmp	r3, #2
    3264:	d00c      	beq.n	3280 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3266:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3268:	f013 0f0c 	tst.w	r3, #12
    326c:	d00a      	beq.n	3284 <_tc_timer_get_period+0x2a>
    326e:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3270:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3274:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    3276:	bf06      	itte	eq
    3278:	7ed0      	ldrbeq	r0, [r2, #27]
    327a:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    327c:	2000      	movne	r0, #0
}
    327e:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    3280:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    3282:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    3284:	8b90      	ldrh	r0, [r2, #28]
    3286:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    3288:	4770      	bx	lr

0000328a <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    328a:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    328c:	6913      	ldr	r3, [r2, #16]
    328e:	f013 0f03 	tst.w	r3, #3
    3292:	d1fb      	bne.n	328c <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3294:	6810      	ldr	r0, [r2, #0]
}
    3296:	f3c0 0040 	ubfx	r0, r0, #1, #1
    329a:	4770      	bx	lr

0000329c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    329c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    329e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    32a0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    32a2:	f012 0f01 	tst.w	r2, #1
    32a6:	d100      	bne.n	32aa <tc_interrupt_handler+0xe>
    32a8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    32aa:	2201      	movs	r2, #1
    32ac:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    32ae:	6803      	ldr	r3, [r0, #0]
    32b0:	4798      	blx	r3
	}
}
    32b2:	e7f9      	b.n	32a8 <tc_interrupt_handler+0xc>

000032b4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    32b4:	b538      	push	{r3, r4, r5, lr}
    32b6:	4605      	mov	r5, r0
	void *const hw = device->hw;
    32b8:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    32ba:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    32bc:	f013 0f01 	tst.w	r3, #1
    32c0:	d004      	beq.n	32cc <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    32c2:	2301      	movs	r3, #1
    32c4:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    32c6:	6803      	ldr	r3, [r0, #0]
    32c8:	b103      	cbz	r3, 32cc <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    32ca:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    32cc:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    32ce:	f013 0f02 	tst.w	r3, #2
    32d2:	d005      	beq.n	32e0 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    32d4:	2302      	movs	r3, #2
    32d6:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    32d8:	686b      	ldr	r3, [r5, #4]
    32da:	b10b      	cbz	r3, 32e0 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    32dc:	4628      	mov	r0, r5
    32de:	4798      	blx	r3
    32e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000032e4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    32e4:	4b11      	ldr	r3, [pc, #68]	; (332c <_tc_init_irq_param+0x48>)
    32e6:	4298      	cmp	r0, r3
    32e8:	d011      	beq.n	330e <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    32ea:	4b11      	ldr	r3, [pc, #68]	; (3330 <_tc_init_irq_param+0x4c>)
    32ec:	4298      	cmp	r0, r3
    32ee:	d011      	beq.n	3314 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    32f0:	4b10      	ldr	r3, [pc, #64]	; (3334 <_tc_init_irq_param+0x50>)
    32f2:	4298      	cmp	r0, r3
    32f4:	d011      	beq.n	331a <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    32f6:	4b10      	ldr	r3, [pc, #64]	; (3338 <_tc_init_irq_param+0x54>)
    32f8:	4298      	cmp	r0, r3
    32fa:	d011      	beq.n	3320 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    32fc:	4b0f      	ldr	r3, [pc, #60]	; (333c <_tc_init_irq_param+0x58>)
    32fe:	4298      	cmp	r0, r3
    3300:	d011      	beq.n	3326 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    3302:	4b0f      	ldr	r3, [pc, #60]	; (3340 <_tc_init_irq_param+0x5c>)
    3304:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    3306:	bf04      	itt	eq
    3308:	4b0e      	ldreq	r3, [pc, #56]	; (3344 <_tc_init_irq_param+0x60>)
    330a:	6159      	streq	r1, [r3, #20]
    330c:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    330e:	4b0d      	ldr	r3, [pc, #52]	; (3344 <_tc_init_irq_param+0x60>)
    3310:	6019      	str	r1, [r3, #0]
    3312:	e7f0      	b.n	32f6 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    3314:	4b0b      	ldr	r3, [pc, #44]	; (3344 <_tc_init_irq_param+0x60>)
    3316:	6059      	str	r1, [r3, #4]
    3318:	e7f0      	b.n	32fc <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    331a:	4b0a      	ldr	r3, [pc, #40]	; (3344 <_tc_init_irq_param+0x60>)
    331c:	6099      	str	r1, [r3, #8]
    331e:	e7f0      	b.n	3302 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    3320:	4b08      	ldr	r3, [pc, #32]	; (3344 <_tc_init_irq_param+0x60>)
    3322:	60d9      	str	r1, [r3, #12]
    3324:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    3326:	4b07      	ldr	r3, [pc, #28]	; (3344 <_tc_init_irq_param+0x60>)
    3328:	6119      	str	r1, [r3, #16]
    332a:	4770      	bx	lr
    332c:	40003800 	.word	0x40003800
    3330:	40003c00 	.word	0x40003c00
    3334:	4101a000 	.word	0x4101a000
    3338:	4101c000 	.word	0x4101c000
    333c:	42001400 	.word	0x42001400
    3340:	42001800 	.word	0x42001800
    3344:	20000ad8 	.word	0x20000ad8

00003348 <get_tc_index>:
{
    3348:	b570      	push	{r4, r5, r6, lr}
    334a:	b086      	sub	sp, #24
    334c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    334e:	466c      	mov	r4, sp
    3350:	4d18      	ldr	r5, [pc, #96]	; (33b4 <get_tc_index+0x6c>)
    3352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3356:	e895 0003 	ldmia.w	r5, {r0, r1}
    335a:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    335e:	9b00      	ldr	r3, [sp, #0]
    3360:	42b3      	cmp	r3, r6
    3362:	d021      	beq.n	33a8 <get_tc_index+0x60>
    3364:	4631      	mov	r1, r6
    3366:	2301      	movs	r3, #1
    3368:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    336c:	428a      	cmp	r2, r1
    336e:	d01c      	beq.n	33aa <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3370:	3301      	adds	r3, #1
    3372:	2b06      	cmp	r3, #6
    3374:	d1f8      	bne.n	3368 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    3376:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    3378:	4a0f      	ldr	r2, [pc, #60]	; (33b8 <get_tc_index+0x70>)
    337a:	7812      	ldrb	r2, [r2, #0]
    337c:	429a      	cmp	r2, r3
    337e:	d016      	beq.n	33ae <get_tc_index+0x66>
    3380:	4a0d      	ldr	r2, [pc, #52]	; (33b8 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3382:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    3384:	7d11      	ldrb	r1, [r2, #20]
    3386:	4299      	cmp	r1, r3
    3388:	d012      	beq.n	33b0 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    338a:	3001      	adds	r0, #1
    338c:	b2c0      	uxtb	r0, r0
    338e:	3214      	adds	r2, #20
    3390:	2806      	cmp	r0, #6
    3392:	d1f7      	bne.n	3384 <get_tc_index+0x3c>
	ASSERT(false);
    3394:	f240 2227 	movw	r2, #551	; 0x227
    3398:	4908      	ldr	r1, [pc, #32]	; (33bc <get_tc_index+0x74>)
    339a:	2000      	movs	r0, #0
    339c:	4b08      	ldr	r3, [pc, #32]	; (33c0 <get_tc_index+0x78>)
    339e:	4798      	blx	r3
	return -1;
    33a0:	f04f 30ff 	mov.w	r0, #4294967295
}
    33a4:	b006      	add	sp, #24
    33a6:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    33a8:	2300      	movs	r3, #0
			return i;
    33aa:	b2db      	uxtb	r3, r3
    33ac:	e7e4      	b.n	3378 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    33ae:	2000      	movs	r0, #0
			return i;
    33b0:	b240      	sxtb	r0, r0
    33b2:	e7f7      	b.n	33a4 <get_tc_index+0x5c>
    33b4:	00007734 	.word	0x00007734
    33b8:	20000088 	.word	0x20000088
    33bc:	0000774c 	.word	0x0000774c
    33c0:	000022fd 	.word	0x000022fd

000033c4 <_tc_timer_init>:
{
    33c4:	b570      	push	{r4, r5, r6, lr}
    33c6:	4606      	mov	r6, r0
    33c8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    33ca:	4608      	mov	r0, r1
    33cc:	4b48      	ldr	r3, [pc, #288]	; (34f0 <_tc_timer_init+0x12c>)
    33ce:	4798      	blx	r3
    33d0:	4605      	mov	r5, r0
	device->hw = hw;
    33d2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    33d4:	22af      	movs	r2, #175	; 0xaf
    33d6:	4947      	ldr	r1, [pc, #284]	; (34f4 <_tc_timer_init+0x130>)
    33d8:	2001      	movs	r0, #1
    33da:	4b47      	ldr	r3, [pc, #284]	; (34f8 <_tc_timer_init+0x134>)
    33dc:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    33de:	6923      	ldr	r3, [r4, #16]
    33e0:	f013 0f01 	tst.w	r3, #1
    33e4:	d1fb      	bne.n	33de <_tc_timer_init+0x1a>
    33e6:	6923      	ldr	r3, [r4, #16]
    33e8:	f013 0f03 	tst.w	r3, #3
    33ec:	d1fb      	bne.n	33e6 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    33ee:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    33f0:	f013 0f02 	tst.w	r3, #2
    33f4:	d175      	bne.n	34e2 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    33f6:	6923      	ldr	r3, [r4, #16]
    33f8:	f013 0f01 	tst.w	r3, #1
    33fc:	d1fb      	bne.n	33f6 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    33fe:	6823      	ldr	r3, [r4, #0]
    3400:	f043 0301 	orr.w	r3, r3, #1
    3404:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3406:	6923      	ldr	r3, [r4, #16]
    3408:	f013 0f01 	tst.w	r3, #1
    340c:	d1fb      	bne.n	3406 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    340e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3412:	4a3a      	ldr	r2, [pc, #232]	; (34fc <_tc_timer_init+0x138>)
    3414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3418:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    341a:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    341c:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    341e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3420:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3422:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3424:	2201      	movs	r2, #1
    3426:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3428:	685b      	ldr	r3, [r3, #4]
    342a:	f003 030c 	and.w	r3, r3, #12
    342e:	2b08      	cmp	r3, #8
    3430:	d03f      	beq.n	34b2 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3432:	2b00      	cmp	r3, #0
    3434:	d147      	bne.n	34c6 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3436:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    343a:	4a30      	ldr	r2, [pc, #192]	; (34fc <_tc_timer_init+0x138>)
    343c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3440:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3442:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3444:	8a1b      	ldrh	r3, [r3, #16]
    3446:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3448:	2301      	movs	r3, #1
    344a:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    344c:	4631      	mov	r1, r6
    344e:	4620      	mov	r0, r4
    3450:	4b2b      	ldr	r3, [pc, #172]	; (3500 <_tc_timer_init+0x13c>)
    3452:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3454:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3458:	4a28      	ldr	r2, [pc, #160]	; (34fc <_tc_timer_init+0x138>)
    345a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    345e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3462:	2b00      	cmp	r3, #0
    3464:	db40      	blt.n	34e8 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3466:	095a      	lsrs	r2, r3, #5
    3468:	f003 031f 	and.w	r3, r3, #31
    346c:	2101      	movs	r1, #1
    346e:	fa01 f303 	lsl.w	r3, r1, r3
    3472:	3220      	adds	r2, #32
    3474:	4923      	ldr	r1, [pc, #140]	; (3504 <_tc_timer_init+0x140>)
    3476:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    347a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    347e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3482:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3486:	4b1d      	ldr	r3, [pc, #116]	; (34fc <_tc_timer_init+0x138>)
    3488:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    348c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3490:	2b00      	cmp	r3, #0
    3492:	db2b      	blt.n	34ec <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3494:	0959      	lsrs	r1, r3, #5
    3496:	f003 031f 	and.w	r3, r3, #31
    349a:	2201      	movs	r2, #1
    349c:	fa02 f303 	lsl.w	r3, r2, r3
    34a0:	4a18      	ldr	r2, [pc, #96]	; (3504 <_tc_timer_init+0x140>)
    34a2:	f101 0060 	add.w	r0, r1, #96	; 0x60
    34a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    34aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    34ae:	2000      	movs	r0, #0
    34b0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    34b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    34b6:	4a11      	ldr	r2, [pc, #68]	; (34fc <_tc_timer_init+0x138>)
    34b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34bc:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    34be:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    34c0:	691b      	ldr	r3, [r3, #16]
    34c2:	6223      	str	r3, [r4, #32]
    34c4:	e7c0      	b.n	3448 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    34c6:	2b04      	cmp	r3, #4
    34c8:	d1be      	bne.n	3448 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    34ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    34ce:	4a0b      	ldr	r2, [pc, #44]	; (34fc <_tc_timer_init+0x138>)
    34d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34d4:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    34d6:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    34d8:	7c1a      	ldrb	r2, [r3, #16]
    34da:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    34dc:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    34de:	76e3      	strb	r3, [r4, #27]
    34e0:	e7b2      	b.n	3448 <_tc_timer_init+0x84>
		return ERR_DENIED;
    34e2:	f06f 0010 	mvn.w	r0, #16
    34e6:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    34e8:	2000      	movs	r0, #0
    34ea:	bd70      	pop	{r4, r5, r6, pc}
    34ec:	2000      	movs	r0, #0
}
    34ee:	bd70      	pop	{r4, r5, r6, pc}
    34f0:	00003349 	.word	0x00003349
    34f4:	0000774c 	.word	0x0000774c
    34f8:	000022fd 	.word	0x000022fd
    34fc:	20000088 	.word	0x20000088
    3500:	000032e5 	.word	0x000032e5
    3504:	e000e100 	.word	0xe000e100

00003508 <_tc_timer_deinit>:
{
    3508:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    350a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    350c:	4620      	mov	r0, r4
    350e:	4b18      	ldr	r3, [pc, #96]	; (3570 <_tc_timer_deinit+0x68>)
    3510:	4798      	blx	r3
    3512:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3514:	f240 1201 	movw	r2, #257	; 0x101
    3518:	4916      	ldr	r1, [pc, #88]	; (3574 <_tc_timer_deinit+0x6c>)
    351a:	2001      	movs	r0, #1
    351c:	4b16      	ldr	r3, [pc, #88]	; (3578 <_tc_timer_deinit+0x70>)
    351e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3520:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3524:	4b15      	ldr	r3, [pc, #84]	; (357c <_tc_timer_deinit+0x74>)
    3526:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    352a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    352e:	2b00      	cmp	r3, #0
    3530:	db0d      	blt.n	354e <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3532:	095a      	lsrs	r2, r3, #5
    3534:	f003 031f 	and.w	r3, r3, #31
    3538:	2101      	movs	r1, #1
    353a:	fa01 f303 	lsl.w	r3, r1, r3
    353e:	3220      	adds	r2, #32
    3540:	490f      	ldr	r1, [pc, #60]	; (3580 <_tc_timer_deinit+0x78>)
    3542:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    354a:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    354e:	6923      	ldr	r3, [r4, #16]
    3550:	f013 0f03 	tst.w	r3, #3
    3554:	d1fb      	bne.n	354e <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3556:	6823      	ldr	r3, [r4, #0]
    3558:	f023 0302 	bic.w	r3, r3, #2
    355c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    355e:	6923      	ldr	r3, [r4, #16]
    3560:	f013 0f01 	tst.w	r3, #1
    3564:	d1fb      	bne.n	355e <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3566:	6823      	ldr	r3, [r4, #0]
    3568:	f043 0301 	orr.w	r3, r3, #1
    356c:	6023      	str	r3, [r4, #0]
    356e:	bd38      	pop	{r3, r4, r5, pc}
    3570:	00003349 	.word	0x00003349
    3574:	0000774c 	.word	0x0000774c
    3578:	000022fd 	.word	0x000022fd
    357c:	20000088 	.word	0x20000088
    3580:	e000e100 	.word	0xe000e100

00003584 <_tc_timer_set_irq>:
{
    3584:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    3586:	68c0      	ldr	r0, [r0, #12]
    3588:	4b08      	ldr	r3, [pc, #32]	; (35ac <_tc_timer_set_irq+0x28>)
    358a:	4798      	blx	r3
    358c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    358e:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    3592:	4907      	ldr	r1, [pc, #28]	; (35b0 <_tc_timer_set_irq+0x2c>)
    3594:	2001      	movs	r0, #1
    3596:	4b07      	ldr	r3, [pc, #28]	; (35b4 <_tc_timer_set_irq+0x30>)
    3598:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    359a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    359e:	4b06      	ldr	r3, [pc, #24]	; (35b8 <_tc_timer_set_irq+0x34>)
    35a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    35a4:	78a0      	ldrb	r0, [r4, #2]
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <_tc_timer_set_irq+0x38>)
    35a8:	4798      	blx	r3
    35aa:	bd10      	pop	{r4, pc}
    35ac:	00003349 	.word	0x00003349
    35b0:	0000774c 	.word	0x0000774c
    35b4:	000022fd 	.word	0x000022fd
    35b8:	20000088 	.word	0x20000088
    35bc:	00002621 	.word	0x00002621

000035c0 <_pwm_init>:
{
    35c0:	b570      	push	{r4, r5, r6, lr}
    35c2:	4606      	mov	r6, r0
    35c4:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    35c6:	4608      	mov	r0, r1
    35c8:	4b3f      	ldr	r3, [pc, #252]	; (36c8 <_pwm_init+0x108>)
    35ca:	4798      	blx	r3
    35cc:	4605      	mov	r5, r0
	device->hw = hw;
    35ce:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    35d0:	6923      	ldr	r3, [r4, #16]
    35d2:	f013 0f01 	tst.w	r3, #1
    35d6:	d1fb      	bne.n	35d0 <_pwm_init+0x10>
    35d8:	6923      	ldr	r3, [r4, #16]
    35da:	f013 0f03 	tst.w	r3, #3
    35de:	d1fb      	bne.n	35d8 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    35e0:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    35e2:	f013 0f02 	tst.w	r3, #2
    35e6:	d165      	bne.n	36b4 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    35e8:	6923      	ldr	r3, [r4, #16]
    35ea:	f013 0f01 	tst.w	r3, #1
    35ee:	d1fb      	bne.n	35e8 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    35f0:	6823      	ldr	r3, [r4, #0]
    35f2:	f043 0301 	orr.w	r3, r3, #1
    35f6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    35f8:	6923      	ldr	r3, [r4, #16]
    35fa:	f013 0f01 	tst.w	r3, #1
    35fe:	d1fb      	bne.n	35f8 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3600:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3604:	4a31      	ldr	r2, [pc, #196]	; (36cc <_pwm_init+0x10c>)
    3606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    360a:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    360c:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    360e:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3610:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3612:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3614:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3616:	2203      	movs	r2, #3
    3618:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    361a:	685b      	ldr	r3, [r3, #4]
    361c:	f003 030c 	and.w	r3, r3, #12
    3620:	2b08      	cmp	r3, #8
    3622:	d03d      	beq.n	36a0 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3624:	2b00      	cmp	r3, #0
    3626:	d148      	bne.n	36ba <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3628:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    362c:	4a27      	ldr	r2, [pc, #156]	; (36cc <_pwm_init+0x10c>)
    362e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3632:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3634:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3636:	8a1b      	ldrh	r3, [r3, #16]
    3638:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    363a:	4631      	mov	r1, r6
    363c:	4620      	mov	r0, r4
    363e:	4b24      	ldr	r3, [pc, #144]	; (36d0 <_pwm_init+0x110>)
    3640:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3642:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3646:	4a21      	ldr	r2, [pc, #132]	; (36cc <_pwm_init+0x10c>)
    3648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    364c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3650:	2b00      	cmp	r3, #0
    3652:	db35      	blt.n	36c0 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3654:	095a      	lsrs	r2, r3, #5
    3656:	f003 031f 	and.w	r3, r3, #31
    365a:	2101      	movs	r1, #1
    365c:	fa01 f303 	lsl.w	r3, r1, r3
    3660:	3220      	adds	r2, #32
    3662:	491c      	ldr	r1, [pc, #112]	; (36d4 <_pwm_init+0x114>)
    3664:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    366c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3670:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3674:	4b15      	ldr	r3, [pc, #84]	; (36cc <_pwm_init+0x10c>)
    3676:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    367a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    367e:	2b00      	cmp	r3, #0
    3680:	db20      	blt.n	36c4 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3682:	0959      	lsrs	r1, r3, #5
    3684:	f003 031f 	and.w	r3, r3, #31
    3688:	2201      	movs	r2, #1
    368a:	fa02 f303 	lsl.w	r3, r2, r3
    368e:	4a11      	ldr	r2, [pc, #68]	; (36d4 <_pwm_init+0x114>)
    3690:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3694:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3698:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    369c:	2000      	movs	r0, #0
    369e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    36a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    36a4:	4a09      	ldr	r2, [pc, #36]	; (36cc <_pwm_init+0x10c>)
    36a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    36aa:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    36ac:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    36ae:	691b      	ldr	r3, [r3, #16]
    36b0:	6223      	str	r3, [r4, #32]
    36b2:	e7c2      	b.n	363a <_pwm_init+0x7a>
		return ERR_DENIED;
    36b4:	f06f 0010 	mvn.w	r0, #16
    36b8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    36ba:	f04f 30ff 	mov.w	r0, #4294967295
    36be:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    36c0:	2000      	movs	r0, #0
    36c2:	bd70      	pop	{r4, r5, r6, pc}
    36c4:	2000      	movs	r0, #0
}
    36c6:	bd70      	pop	{r4, r5, r6, pc}
    36c8:	00003349 	.word	0x00003349
    36cc:	20000088 	.word	0x20000088
    36d0:	000032e5 	.word	0x000032e5
    36d4:	e000e100 	.word	0xe000e100

000036d8 <_tc_get_timer>:
}
    36d8:	4800      	ldr	r0, [pc, #0]	; (36dc <_tc_get_timer+0x4>)
    36da:	4770      	bx	lr
    36dc:	20000100 	.word	0x20000100

000036e0 <_tc_get_pwm>:
}
    36e0:	2000      	movs	r0, #0
    36e2:	4770      	bx	lr

000036e4 <TC0_Handler>:
{
    36e4:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    36e6:	4b02      	ldr	r3, [pc, #8]	; (36f0 <TC0_Handler+0xc>)
    36e8:	6818      	ldr	r0, [r3, #0]
    36ea:	4b02      	ldr	r3, [pc, #8]	; (36f4 <TC0_Handler+0x10>)
    36ec:	4798      	blx	r3
    36ee:	bd08      	pop	{r3, pc}
    36f0:	20000ad8 	.word	0x20000ad8
    36f4:	000032b5 	.word	0x000032b5

000036f8 <TC1_Handler>:
{
    36f8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    36fa:	4b02      	ldr	r3, [pc, #8]	; (3704 <TC1_Handler+0xc>)
    36fc:	6858      	ldr	r0, [r3, #4]
    36fe:	4b02      	ldr	r3, [pc, #8]	; (3708 <TC1_Handler+0x10>)
    3700:	4798      	blx	r3
    3702:	bd08      	pop	{r3, pc}
    3704:	20000ad8 	.word	0x20000ad8
    3708:	000032b5 	.word	0x000032b5

0000370c <TC2_Handler>:
{
    370c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    370e:	4b02      	ldr	r3, [pc, #8]	; (3718 <TC2_Handler+0xc>)
    3710:	6898      	ldr	r0, [r3, #8]
    3712:	4b02      	ldr	r3, [pc, #8]	; (371c <TC2_Handler+0x10>)
    3714:	4798      	blx	r3
    3716:	bd08      	pop	{r3, pc}
    3718:	20000ad8 	.word	0x20000ad8
    371c:	000032b5 	.word	0x000032b5

00003720 <TC3_Handler>:
{
    3720:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    3722:	4b02      	ldr	r3, [pc, #8]	; (372c <TC3_Handler+0xc>)
    3724:	68d8      	ldr	r0, [r3, #12]
    3726:	4b02      	ldr	r3, [pc, #8]	; (3730 <TC3_Handler+0x10>)
    3728:	4798      	blx	r3
    372a:	bd08      	pop	{r3, pc}
    372c:	20000ad8 	.word	0x20000ad8
    3730:	0000329d 	.word	0x0000329d

00003734 <TC4_Handler>:
{
    3734:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    3736:	4b02      	ldr	r3, [pc, #8]	; (3740 <TC4_Handler+0xc>)
    3738:	6918      	ldr	r0, [r3, #16]
    373a:	4b02      	ldr	r3, [pc, #8]	; (3744 <TC4_Handler+0x10>)
    373c:	4798      	blx	r3
    373e:	bd08      	pop	{r3, pc}
    3740:	20000ad8 	.word	0x20000ad8
    3744:	0000329d 	.word	0x0000329d

00003748 <TC5_Handler>:
{
    3748:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    374a:	4b02      	ldr	r3, [pc, #8]	; (3754 <TC5_Handler+0xc>)
    374c:	6958      	ldr	r0, [r3, #20]
    374e:	4b02      	ldr	r3, [pc, #8]	; (3758 <TC5_Handler+0x10>)
    3750:	4798      	blx	r3
    3752:	bd08      	pop	{r3, pc}
    3754:	20000ad8 	.word	0x20000ad8
    3758:	0000329d 	.word	0x0000329d

0000375c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    375c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    375e:	4604      	mov	r4, r0
    3760:	b330      	cbz	r0, 37b0 <_wdt_init+0x54>
    3762:	6800      	ldr	r0, [r0, #0]
    3764:	3000      	adds	r0, #0
    3766:	bf18      	it	ne
    3768:	2001      	movne	r0, #1
    376a:	225a      	movs	r2, #90	; 0x5a
    376c:	4914      	ldr	r1, [pc, #80]	; (37c0 <_wdt_init+0x64>)
    376e:	4b15      	ldr	r3, [pc, #84]	; (37c4 <_wdt_init+0x68>)
    3770:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3772:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3774:	689a      	ldr	r2, [r3, #8]
    3776:	f012 0f0e 	tst.w	r2, #14
    377a:	d1fb      	bne.n	3774 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    377c:	781a      	ldrb	r2, [r3, #0]
    377e:	09d2      	lsrs	r2, r2, #7
    3780:	d118      	bne.n	37b4 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3782:	689a      	ldr	r2, [r3, #8]
    3784:	f012 0f0e 	tst.w	r2, #14
    3788:	d1fb      	bne.n	3782 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    378a:	781a      	ldrb	r2, [r3, #0]
    378c:	f012 0f02 	tst.w	r2, #2
    3790:	d113      	bne.n	37ba <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3792:	689a      	ldr	r2, [r3, #8]
    3794:	f012 0f0e 	tst.w	r2, #14
    3798:	d1fb      	bne.n	3792 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    379a:	781a      	ldrb	r2, [r3, #0]
    379c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    37a0:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    37a2:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    37a4:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    37a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    37aa:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    37ac:	2000      	movs	r0, #0
    37ae:	bd10      	pop	{r4, pc}
    37b0:	2000      	movs	r0, #0
    37b2:	e7da      	b.n	376a <_wdt_init+0xe>
		return ERR_DENIED;
    37b4:	f06f 0010 	mvn.w	r0, #16
    37b8:	bd10      	pop	{r4, pc}
    37ba:	f06f 0010 	mvn.w	r0, #16
}
    37be:	bd10      	pop	{r4, pc}
    37c0:	00007760 	.word	0x00007760
    37c4:	000022fd 	.word	0x000022fd

000037c8 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    37c8:	b570      	push	{r4, r5, r6, lr}
    37ca:	460d      	mov	r5, r1
    37cc:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    37ce:	4606      	mov	r6, r0
    37d0:	2800      	cmp	r0, #0
    37d2:	d044      	beq.n	385e <_wdt_set_timeout_period+0x96>
    37d4:	6800      	ldr	r0, [r0, #0]
    37d6:	3000      	adds	r0, #0
    37d8:	bf18      	it	ne
    37da:	2001      	movne	r0, #1
    37dc:	2284      	movs	r2, #132	; 0x84
    37de:	493f      	ldr	r1, [pc, #252]	; (38dc <_wdt_set_timeout_period+0x114>)
    37e0:	4b3f      	ldr	r3, [pc, #252]	; (38e0 <_wdt_set_timeout_period+0x118>)
    37e2:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    37e4:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    37e6:	6893      	ldr	r3, [r2, #8]
    37e8:	f013 0f0e 	tst.w	r3, #14
    37ec:	d1fb      	bne.n	37e6 <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    37ee:	7813      	ldrb	r3, [r2, #0]
    37f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    37f4:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    37f6:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    37f8:	688b      	ldr	r3, [r1, #8]
    37fa:	f013 0f0e 	tst.w	r3, #14
    37fe:	d1fb      	bne.n	37f8 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    3800:	780b      	ldrb	r3, [r1, #0]
    3802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3806:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3808:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    380a:	6899      	ldr	r1, [r3, #8]
    380c:	f011 0f0e 	tst.w	r1, #14
    3810:	d1fb      	bne.n	380a <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3812:	781a      	ldrb	r2, [r3, #0]
    3814:	09d2      	lsrs	r2, r2, #7
    3816:	d158      	bne.n	38ca <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3818:	6899      	ldr	r1, [r3, #8]
    381a:	f011 0f0e 	tst.w	r1, #14
    381e:	d1fb      	bne.n	3818 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3820:	781a      	ldrb	r2, [r3, #0]
    3822:	f012 0f02 	tst.w	r2, #2
    3826:	d153      	bne.n	38d0 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3828:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    382c:	4628      	mov	r0, r5
    382e:	2100      	movs	r1, #0
    3830:	ea50 0201 	orrs.w	r2, r0, r1
    3834:	d14f      	bne.n	38d6 <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    3836:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    383a:	d038      	beq.n	38ae <_wdt_set_timeout_period+0xe6>
    383c:	d911      	bls.n	3862 <_wdt_set_timeout_period+0x9a>
    383e:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    3842:	d038      	beq.n	38b6 <_wdt_set_timeout_period+0xee>
    3844:	d927      	bls.n	3896 <_wdt_set_timeout_period+0xce>
    3846:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    384a:	d038      	beq.n	38be <_wdt_set_timeout_period+0xf6>
    384c:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    3850:	d037      	beq.n	38c2 <_wdt_set_timeout_period+0xfa>
    3852:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    3856:	d030      	beq.n	38ba <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    3858:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    385c:	bd70      	pop	{r4, r5, r6, pc}
    385e:	2000      	movs	r0, #0
    3860:	e7bc      	b.n	37dc <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    3862:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    3866:	d01e      	beq.n	38a6 <_wdt_set_timeout_period+0xde>
    3868:	d80d      	bhi.n	3886 <_wdt_set_timeout_period+0xbe>
    386a:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    386e:	d02a      	beq.n	38c6 <_wdt_set_timeout_period+0xfe>
    3870:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    3874:	d1f0      	bne.n	3858 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    3876:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3878:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    387a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    387e:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    3880:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    3882:	2000      	movs	r0, #0
    3884:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    3886:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    388a:	d00e      	beq.n	38aa <_wdt_set_timeout_period+0xe2>
    388c:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    3890:	d1e2      	bne.n	3858 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    3892:	2104      	movs	r1, #4
			break;
    3894:	e7f0      	b.n	3878 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    3896:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    389a:	d00a      	beq.n	38b2 <_wdt_set_timeout_period+0xea>
    389c:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    38a0:	d1da      	bne.n	3858 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    38a2:	2107      	movs	r1, #7
			break;
    38a4:	e7e8      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    38a6:	2102      	movs	r1, #2
			break;
    38a8:	e7e6      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    38aa:	2103      	movs	r1, #3
			break;
    38ac:	e7e4      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    38ae:	2105      	movs	r1, #5
			break;
    38b0:	e7e2      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    38b2:	2106      	movs	r1, #6
			break;
    38b4:	e7e0      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    38b6:	2108      	movs	r1, #8
			break;
    38b8:	e7de      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    38ba:	2109      	movs	r1, #9
			break;
    38bc:	e7dc      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    38be:	210a      	movs	r1, #10
			break;
    38c0:	e7da      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    38c2:	210b      	movs	r1, #11
			break;
    38c4:	e7d8      	b.n	3878 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    38c6:	2100      	movs	r1, #0
    38c8:	e7d6      	b.n	3878 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    38ca:	f06f 0010 	mvn.w	r0, #16
    38ce:	bd70      	pop	{r4, r5, r6, pc}
    38d0:	f06f 0010 	mvn.w	r0, #16
    38d4:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    38d6:	f06f 000c 	mvn.w	r0, #12
    38da:	bd70      	pop	{r4, r5, r6, pc}
    38dc:	00007760 	.word	0x00007760
    38e0:	000022fd 	.word	0x000022fd

000038e4 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    38e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    38e6:	4604      	mov	r4, r0
    38e8:	b198      	cbz	r0, 3912 <_wdt_enable+0x2e>
    38ea:	6800      	ldr	r0, [r0, #0]
    38ec:	3000      	adds	r0, #0
    38ee:	bf18      	it	ne
    38f0:	2001      	movne	r0, #1
    38f2:	f240 1207 	movw	r2, #263	; 0x107
    38f6:	4908      	ldr	r1, [pc, #32]	; (3918 <_wdt_enable+0x34>)
    38f8:	4b08      	ldr	r3, [pc, #32]	; (391c <_wdt_enable+0x38>)
    38fa:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    38fc:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    38fe:	6893      	ldr	r3, [r2, #8]
    3900:	f013 0f0e 	tst.w	r3, #14
    3904:	d1fb      	bne.n	38fe <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    3906:	7813      	ldrb	r3, [r2, #0]
    3908:	f043 0302 	orr.w	r3, r3, #2
    390c:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    390e:	2000      	movs	r0, #0
    3910:	bd10      	pop	{r4, pc}
    3912:	2000      	movs	r0, #0
    3914:	e7ed      	b.n	38f2 <_wdt_enable+0xe>
    3916:	bf00      	nop
    3918:	00007760 	.word	0x00007760
    391c:	000022fd 	.word	0x000022fd

00003920 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3920:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3922:	4604      	mov	r4, r0
    3924:	b168      	cbz	r0, 3942 <_wdt_feed+0x22>
    3926:	6800      	ldr	r0, [r0, #0]
    3928:	3000      	adds	r0, #0
    392a:	bf18      	it	ne
    392c:	2001      	movne	r0, #1
    392e:	f240 1225 	movw	r2, #293	; 0x125
    3932:	4905      	ldr	r1, [pc, #20]	; (3948 <_wdt_feed+0x28>)
    3934:	4b05      	ldr	r3, [pc, #20]	; (394c <_wdt_feed+0x2c>)
    3936:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3938:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    393a:	22a5      	movs	r2, #165	; 0xa5
    393c:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    393e:	2000      	movs	r0, #0
    3940:	bd10      	pop	{r4, pc}
    3942:	2000      	movs	r0, #0
    3944:	e7f3      	b.n	392e <_wdt_feed+0xe>
    3946:	bf00      	nop
    3948:	00007760 	.word	0x00007760
    394c:	000022fd 	.word	0x000022fd

00003950 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    3950:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    3952:	2200      	movs	r2, #0
    3954:	2108      	movs	r1, #8
    3956:	2001      	movs	r0, #1
    3958:	4c15      	ldr	r4, [pc, #84]	; (39b0 <createQueuesAndSemaphores+0x60>)
    395a:	47a0      	blx	r4
    395c:	4d15      	ldr	r5, [pc, #84]	; (39b4 <createQueuesAndSemaphores+0x64>)
    395e:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    3960:	2200      	movs	r2, #0
    3962:	2101      	movs	r1, #1
    3964:	4608      	mov	r0, r1
    3966:	47a0      	blx	r4
    3968:	4b13      	ldr	r3, [pc, #76]	; (39b8 <createQueuesAndSemaphores+0x68>)
    396a:	6018      	str	r0, [r3, #0]
    CmdResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    396c:	2200      	movs	r2, #0
    396e:	2108      	movs	r1, #8
    3970:	2001      	movs	r0, #1
    3972:	47a0      	blx	r4
    3974:	4b11      	ldr	r3, [pc, #68]	; (39bc <createQueuesAndSemaphores+0x6c>)
    3976:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    3978:	682b      	ldr	r3, [r5, #0]
    397a:	b1bb      	cbz	r3, 39ac <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    397c:	4b0e      	ldr	r3, [pc, #56]	; (39b8 <createQueuesAndSemaphores+0x68>)
    if((AtTransmitQueue != NULL) &&
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	b1a3      	cbz	r3, 39ac <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    3982:	b198      	cbz	r0, 39ac <createQueuesAndSemaphores+0x5c>
	   (CmdResponseQueue != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    3984:	480e      	ldr	r0, [pc, #56]	; (39c0 <createQueuesAndSemaphores+0x70>)
    3986:	4b0f      	ldr	r3, [pc, #60]	; (39c4 <createQueuesAndSemaphores+0x74>)
    3988:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    398a:	2203      	movs	r2, #3
    398c:	2100      	movs	r1, #0
    398e:	2001      	movs	r0, #1
    3990:	47a0      	blx	r4
    3992:	4c0d      	ldr	r4, [pc, #52]	; (39c8 <createQueuesAndSemaphores+0x78>)
    3994:	6020      	str	r0, [r4, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    3996:	2001      	movs	r0, #1
    3998:	4b0c      	ldr	r3, [pc, #48]	; (39cc <createQueuesAndSemaphores+0x7c>)
    399a:	4798      	blx	r3
    399c:	4b0c      	ldr	r3, [pc, #48]	; (39d0 <createQueuesAndSemaphores+0x80>)
    399e:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL) &&
    39a0:	6823      	ldr	r3, [r4, #0]
    39a2:	b11b      	cbz	r3, 39ac <createQueuesAndSemaphores+0x5c>
    39a4:	b110      	cbz	r0, 39ac <createQueuesAndSemaphores+0x5c>
		   (DebugPrintMutex != NULL))
		{
			DEBUG_PRINT("Semaphores and Mutexes are created");
    39a6:	480b      	ldr	r0, [pc, #44]	; (39d4 <createQueuesAndSemaphores+0x84>)
    39a8:	4b06      	ldr	r3, [pc, #24]	; (39c4 <createQueuesAndSemaphores+0x74>)
    39aa:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    39ac:	bd38      	pop	{r3, r4, r5, pc}
    39ae:	bf00      	nop
    39b0:	00004299 	.word	0x00004299
    39b4:	20003474 	.word	0x20003474
    39b8:	20003480 	.word	0x20003480
    39bc:	20003450 	.word	0x20003450
    39c0:	00007778 	.word	0x00007778
    39c4:	00001601 	.word	0x00001601
    39c8:	2000347c 	.word	0x2000347c
    39cc:	000044cd 	.word	0x000044cd
    39d0:	20003478 	.word	0x20003478
    39d4:	00007794 	.word	0x00007794

000039d8 <main>:
{
    39d8:	b580      	push	{r7, lr}
    39da:	b082      	sub	sp, #8
    atmel_start_init();	
    39dc:	4b29      	ldr	r3, [pc, #164]	; (3a84 <main+0xac>)
    39de:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    39e0:	4b29      	ldr	r3, [pc, #164]	; (3a88 <main+0xb0>)
    39e2:	9301      	str	r3, [sp, #4]
    39e4:	2702      	movs	r7, #2
    39e6:	9700      	str	r7, [sp, #0]
    39e8:	2300      	movs	r3, #0
    39ea:	2296      	movs	r2, #150	; 0x96
    39ec:	4927      	ldr	r1, [pc, #156]	; (3a8c <main+0xb4>)
    39ee:	4828      	ldr	r0, [pc, #160]	; (3a90 <main+0xb8>)
    39f0:	4d28      	ldr	r5, [pc, #160]	; (3a94 <main+0xbc>)
    39f2:	47a8      	blx	r5
    39f4:	4c28      	ldr	r4, [pc, #160]	; (3a98 <main+0xc0>)
    39f6:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    39f8:	4b28      	ldr	r3, [pc, #160]	; (3a9c <main+0xc4>)
    39fa:	9301      	str	r3, [sp, #4]
    39fc:	2601      	movs	r6, #1
    39fe:	9600      	str	r6, [sp, #0]
    3a00:	2300      	movs	r3, #0
    3a02:	2296      	movs	r2, #150	; 0x96
    3a04:	4926      	ldr	r1, [pc, #152]	; (3aa0 <main+0xc8>)
    3a06:	4827      	ldr	r0, [pc, #156]	; (3aa4 <main+0xcc>)
    3a08:	47a8      	blx	r5
    3a0a:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    3a0c:	4b26      	ldr	r3, [pc, #152]	; (3aa8 <main+0xd0>)
    3a0e:	9301      	str	r3, [sp, #4]
    3a10:	9700      	str	r7, [sp, #0]
    3a12:	2300      	movs	r3, #0
    3a14:	2296      	movs	r2, #150	; 0x96
    3a16:	4925      	ldr	r1, [pc, #148]	; (3aac <main+0xd4>)
    3a18:	4825      	ldr	r0, [pc, #148]	; (3ab0 <main+0xd8>)
    3a1a:	47a8      	blx	r5
    3a1c:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    3a1e:	4b25      	ldr	r3, [pc, #148]	; (3ab4 <main+0xdc>)
    3a20:	9301      	str	r3, [sp, #4]
    3a22:	9600      	str	r6, [sp, #0]
    3a24:	2300      	movs	r3, #0
    3a26:	2296      	movs	r2, #150	; 0x96
    3a28:	4923      	ldr	r1, [pc, #140]	; (3ab8 <main+0xe0>)
    3a2a:	4824      	ldr	r0, [pc, #144]	; (3abc <main+0xe4>)
    3a2c:	47a8      	blx	r5
    3a2e:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    3a30:	4b23      	ldr	r3, [pc, #140]	; (3ac0 <main+0xe8>)
    3a32:	9301      	str	r3, [sp, #4]
    3a34:	9600      	str	r6, [sp, #0]
    3a36:	2300      	movs	r3, #0
    3a38:	2296      	movs	r2, #150	; 0x96
    3a3a:	4922      	ldr	r1, [pc, #136]	; (3ac4 <main+0xec>)
    3a3c:	4822      	ldr	r0, [pc, #136]	; (3ac8 <main+0xf0>)
    3a3e:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    3a40:	6823      	ldr	r3, [r4, #0]
    3a42:	42b3      	cmp	r3, r6
    3a44:	d006      	beq.n	3a54 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    3a46:	4821      	ldr	r0, [pc, #132]	; (3acc <main+0xf4>)
    3a48:	4b21      	ldr	r3, [pc, #132]	; (3ad0 <main+0xf8>)
    3a4a:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    3a4c:	4821      	ldr	r0, [pc, #132]	; (3ad4 <main+0xfc>)
    3a4e:	4b20      	ldr	r3, [pc, #128]	; (3ad0 <main+0xf8>)
    3a50:	4798      	blx	r3
    3a52:	e7fe      	b.n	3a52 <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    3a54:	68e3      	ldr	r3, [r4, #12]
    3a56:	42b3      	cmp	r3, r6
    3a58:	d1f5      	bne.n	3a46 <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    3a5a:	6863      	ldr	r3, [r4, #4]
    3a5c:	42b3      	cmp	r3, r6
    3a5e:	d1f2      	bne.n	3a46 <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    3a60:	68a3      	ldr	r3, [r4, #8]
    3a62:	42b3      	cmp	r3, r6
    3a64:	d1ef      	bne.n	3a46 <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    3a66:	42b0      	cmp	r0, r6
    3a68:	d1ed      	bne.n	3a46 <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    3a6a:	481b      	ldr	r0, [pc, #108]	; (3ad8 <main+0x100>)
    3a6c:	4b18      	ldr	r3, [pc, #96]	; (3ad0 <main+0xf8>)
    3a6e:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    3a70:	4b1a      	ldr	r3, [pc, #104]	; (3adc <main+0x104>)
    3a72:	4798      	blx	r3
    3a74:	b110      	cbz	r0, 3a7c <main+0xa4>
    		vTaskStartScheduler();
    3a76:	4b1a      	ldr	r3, [pc, #104]	; (3ae0 <main+0x108>)
    3a78:	4798      	blx	r3
    3a7a:	e7e7      	b.n	3a4c <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    3a7c:	4819      	ldr	r0, [pc, #100]	; (3ae4 <main+0x10c>)
    3a7e:	4b14      	ldr	r3, [pc, #80]	; (3ad0 <main+0xf8>)
    3a80:	4798      	blx	r3
    3a82:	e7e3      	b.n	3a4c <main+0x74>
    3a84:	00001719 	.word	0x00001719
    3a88:	2000346c 	.word	0x2000346c
    3a8c:	000077b8 	.word	0x000077b8
    3a90:	00000335 	.word	0x00000335
    3a94:	00004ac9 	.word	0x00004ac9
    3a98:	20000af0 	.word	0x20000af0
    3a9c:	20003454 	.word	0x20003454
    3aa0:	000077c8 	.word	0x000077c8
    3aa4:	00001475 	.word	0x00001475
    3aa8:	20003468 	.word	0x20003468
    3aac:	000077d4 	.word	0x000077d4
    3ab0:	00001415 	.word	0x00001415
    3ab4:	2000345c 	.word	0x2000345c
    3ab8:	000077e0 	.word	0x000077e0
    3abc:	000012cd 	.word	0x000012cd
    3ac0:	20003460 	.word	0x20003460
    3ac4:	000077f4 	.word	0x000077f4
    3ac8:	00000e71 	.word	0x00000e71
    3acc:	00007844 	.word	0x00007844
    3ad0:	00001601 	.word	0x00001601
    3ad4:	0000785c 	.word	0x0000785c
    3ad8:	00007804 	.word	0x00007804
    3adc:	00003951 	.word	0x00003951
    3ae0:	00004ca5 	.word	0x00004ca5
    3ae4:	00007824 	.word	0x00007824

00003ae8 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3ae8:	f100 0308 	add.w	r3, r0, #8
    3aec:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3aee:	f04f 32ff 	mov.w	r2, #4294967295
    3af2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    3af4:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    3af6:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3af8:	2300      	movs	r3, #0
    3afa:	6003      	str	r3, [r0, #0]
    3afc:	4770      	bx	lr

00003afe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3afe:	2300      	movs	r3, #0
    3b00:	6103      	str	r3, [r0, #16]
    3b02:	4770      	bx	lr

00003b04 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    3b04:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    3b06:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3b08:	689a      	ldr	r2, [r3, #8]
    3b0a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3b0c:	689a      	ldr	r2, [r3, #8]
    3b0e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    3b10:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    3b12:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3b14:	6803      	ldr	r3, [r0, #0]
    3b16:	3301      	adds	r3, #1
    3b18:	6003      	str	r3, [r0, #0]
    3b1a:	4770      	bx	lr

00003b1c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    3b1c:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3b1e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    3b20:	f1b5 3fff 	cmp.w	r5, #4294967295
    3b24:	d002      	beq.n	3b2c <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    3b26:	f100 0208 	add.w	r2, r0, #8
    3b2a:	e002      	b.n	3b32 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    3b2c:	6902      	ldr	r2, [r0, #16]
    3b2e:	e004      	b.n	3b3a <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    3b30:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    3b32:	6853      	ldr	r3, [r2, #4]
    3b34:	681c      	ldr	r4, [r3, #0]
    3b36:	42a5      	cmp	r5, r4
    3b38:	d2fa      	bcs.n	3b30 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3b3a:	6853      	ldr	r3, [r2, #4]
    3b3c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3b3e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    3b40:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    3b42:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    3b44:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3b46:	6803      	ldr	r3, [r0, #0]
    3b48:	3301      	adds	r3, #1
    3b4a:	6003      	str	r3, [r0, #0]
}
    3b4c:	bc30      	pop	{r4, r5}
    3b4e:	4770      	bx	lr

00003b50 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    3b50:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3b52:	6842      	ldr	r2, [r0, #4]
    3b54:	6881      	ldr	r1, [r0, #8]
    3b56:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3b58:	6882      	ldr	r2, [r0, #8]
    3b5a:	6841      	ldr	r1, [r0, #4]
    3b5c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    3b5e:	685a      	ldr	r2, [r3, #4]
    3b60:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3b62:	bf04      	itt	eq
    3b64:	6882      	ldreq	r2, [r0, #8]
    3b66:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3b68:	2200      	movs	r2, #0
    3b6a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    3b6c:	681a      	ldr	r2, [r3, #0]
    3b6e:	3a01      	subs	r2, #1
    3b70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    3b72:	6818      	ldr	r0, [r3, #0]
}
    3b74:	4770      	bx	lr
	...

00003b78 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    3b78:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    3b7a:	2300      	movs	r3, #0
    3b7c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    3b7e:	4b0d      	ldr	r3, [pc, #52]	; (3bb4 <prvTaskExitError+0x3c>)
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b86:	d008      	beq.n	3b9a <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    3b88:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b8c:	f383 8811 	msr	BASEPRI, r3
    3b90:	f3bf 8f6f 	isb	sy
    3b94:	f3bf 8f4f 	dsb	sy
    3b98:	e7fe      	b.n	3b98 <prvTaskExitError+0x20>
    3b9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b9e:	f383 8811 	msr	BASEPRI, r3
    3ba2:	f3bf 8f6f 	isb	sy
    3ba6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    3baa:	9b01      	ldr	r3, [sp, #4]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d0fc      	beq.n	3baa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    3bb0:	b002      	add	sp, #8
    3bb2:	4770      	bx	lr
    3bb4:	20000120 	.word	0x20000120

00003bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    3bb8:	4808      	ldr	r0, [pc, #32]	; (3bdc <prvPortStartFirstTask+0x24>)
    3bba:	6800      	ldr	r0, [r0, #0]
    3bbc:	6800      	ldr	r0, [r0, #0]
    3bbe:	f380 8808 	msr	MSP, r0
    3bc2:	f04f 0000 	mov.w	r0, #0
    3bc6:	f380 8814 	msr	CONTROL, r0
    3bca:	b662      	cpsie	i
    3bcc:	b661      	cpsie	f
    3bce:	f3bf 8f4f 	dsb	sy
    3bd2:	f3bf 8f6f 	isb	sy
    3bd6:	df00      	svc	0
    3bd8:	bf00      	nop
    3bda:	0000      	.short	0x0000
    3bdc:	e000ed08 	.word	0xe000ed08

00003be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    3be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 3bf0 <vPortEnableVFP+0x10>
    3be4:	6801      	ldr	r1, [r0, #0]
    3be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3bea:	6001      	str	r1, [r0, #0]
    3bec:	4770      	bx	lr
    3bee:	0000      	.short	0x0000
    3bf0:	e000ed88 	.word	0xe000ed88

00003bf4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    3bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3bf8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3bfc:	f021 0101 	bic.w	r1, r1, #1
    3c00:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    3c04:	4b05      	ldr	r3, [pc, #20]	; (3c1c <pxPortInitialiseStack+0x28>)
    3c06:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3c0a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    3c0e:	f06f 0302 	mvn.w	r3, #2
    3c12:	f840 3c24 	str.w	r3, [r0, #-36]
}
    3c16:	3844      	subs	r0, #68	; 0x44
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	00003b79 	.word	0x00003b79

00003c20 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    3c20:	4b07      	ldr	r3, [pc, #28]	; (3c40 <pxCurrentTCBConst2>)
    3c22:	6819      	ldr	r1, [r3, #0]
    3c24:	6808      	ldr	r0, [r1, #0]
    3c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c2a:	f380 8809 	msr	PSP, r0
    3c2e:	f3bf 8f6f 	isb	sy
    3c32:	f04f 0000 	mov.w	r0, #0
    3c36:	f380 8811 	msr	BASEPRI, r0
    3c3a:	4770      	bx	lr
    3c3c:	f3af 8000 	nop.w

00003c40 <pxCurrentTCBConst2>:
    3c40:	200033b4 	.word	0x200033b4

00003c44 <vPortEnterCritical>:
    3c44:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c48:	f383 8811 	msr	BASEPRI, r3
    3c4c:	f3bf 8f6f 	isb	sy
    3c50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    3c54:	4a0a      	ldr	r2, [pc, #40]	; (3c80 <vPortEnterCritical+0x3c>)
    3c56:	6813      	ldr	r3, [r2, #0]
    3c58:	3301      	adds	r3, #1
    3c5a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    3c5c:	2b01      	cmp	r3, #1
    3c5e:	d10d      	bne.n	3c7c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    3c60:	4b08      	ldr	r3, [pc, #32]	; (3c84 <vPortEnterCritical+0x40>)
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	f013 0fff 	tst.w	r3, #255	; 0xff
    3c68:	d008      	beq.n	3c7c <vPortEnterCritical+0x38>
    3c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c6e:	f383 8811 	msr	BASEPRI, r3
    3c72:	f3bf 8f6f 	isb	sy
    3c76:	f3bf 8f4f 	dsb	sy
    3c7a:	e7fe      	b.n	3c7a <vPortEnterCritical+0x36>
    3c7c:	4770      	bx	lr
    3c7e:	bf00      	nop
    3c80:	20000120 	.word	0x20000120
    3c84:	e000ed04 	.word	0xe000ed04

00003c88 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    3c88:	4b09      	ldr	r3, [pc, #36]	; (3cb0 <vPortExitCritical+0x28>)
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	b943      	cbnz	r3, 3ca0 <vPortExitCritical+0x18>
    3c8e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c92:	f383 8811 	msr	BASEPRI, r3
    3c96:	f3bf 8f6f 	isb	sy
    3c9a:	f3bf 8f4f 	dsb	sy
    3c9e:	e7fe      	b.n	3c9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    3ca0:	3b01      	subs	r3, #1
    3ca2:	4a03      	ldr	r2, [pc, #12]	; (3cb0 <vPortExitCritical+0x28>)
    3ca4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    3ca6:	b90b      	cbnz	r3, 3cac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3ca8:	f383 8811 	msr	BASEPRI, r3
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop
    3cb0:	20000120 	.word	0x20000120
	...

00003cc0 <PendSV_Handler>:
	__asm volatile(
    3cc0:	f3ef 8009 	mrs	r0, PSP
    3cc4:	f3bf 8f6f 	isb	sy
    3cc8:	4b15      	ldr	r3, [pc, #84]	; (3d20 <pxCurrentTCBConst>)
    3cca:	681a      	ldr	r2, [r3, #0]
    3ccc:	f01e 0f10 	tst.w	lr, #16
    3cd0:	bf08      	it	eq
    3cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cda:	6010      	str	r0, [r2, #0]
    3cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
    3ce0:	f04f 0080 	mov.w	r0, #128	; 0x80
    3ce4:	f380 8811 	msr	BASEPRI, r0
    3ce8:	f3bf 8f4f 	dsb	sy
    3cec:	f3bf 8f6f 	isb	sy
    3cf0:	f001 f9c8 	bl	5084 <vTaskSwitchContext>
    3cf4:	f04f 0000 	mov.w	r0, #0
    3cf8:	f380 8811 	msr	BASEPRI, r0
    3cfc:	bc09      	pop	{r0, r3}
    3cfe:	6819      	ldr	r1, [r3, #0]
    3d00:	6808      	ldr	r0, [r1, #0]
    3d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d06:	f01e 0f10 	tst.w	lr, #16
    3d0a:	bf08      	it	eq
    3d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    3d10:	f380 8809 	msr	PSP, r0
    3d14:	f3bf 8f6f 	isb	sy
    3d18:	4770      	bx	lr
    3d1a:	bf00      	nop
    3d1c:	f3af 8000 	nop.w

00003d20 <pxCurrentTCBConst>:
    3d20:	200033b4 	.word	0x200033b4

00003d24 <SysTick_Handler>:
{
    3d24:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    3d26:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d2a:	f383 8811 	msr	BASEPRI, r3
    3d2e:	f3bf 8f6f 	isb	sy
    3d32:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3d36:	4b05      	ldr	r3, [pc, #20]	; (3d4c <SysTick_Handler+0x28>)
    3d38:	4798      	blx	r3
    3d3a:	b118      	cbz	r0, 3d44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    3d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d40:	4b03      	ldr	r3, [pc, #12]	; (3d50 <SysTick_Handler+0x2c>)
    3d42:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3d44:	2300      	movs	r3, #0
    3d46:	f383 8811 	msr	BASEPRI, r3
    3d4a:	bd08      	pop	{r3, pc}
    3d4c:	00004d4d 	.word	0x00004d4d
    3d50:	e000ed04 	.word	0xe000ed04

00003d54 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    3d54:	4b05      	ldr	r3, [pc, #20]	; (3d6c <vPortSetupTimerInterrupt+0x18>)
    3d56:	2200      	movs	r2, #0
    3d58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    3d5a:	4905      	ldr	r1, [pc, #20]	; (3d70 <vPortSetupTimerInterrupt+0x1c>)
    3d5c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    3d5e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    3d62:	4a04      	ldr	r2, [pc, #16]	; (3d74 <vPortSetupTimerInterrupt+0x20>)
    3d64:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    3d66:	2207      	movs	r2, #7
    3d68:	601a      	str	r2, [r3, #0]
    3d6a:	4770      	bx	lr
    3d6c:	e000e010 	.word	0xe000e010
    3d70:	e000e018 	.word	0xe000e018
    3d74:	e000e014 	.word	0xe000e014

00003d78 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    3d78:	4b3b      	ldr	r3, [pc, #236]	; (3e68 <xPortStartScheduler+0xf0>)
    3d7a:	681a      	ldr	r2, [r3, #0]
    3d7c:	4b3b      	ldr	r3, [pc, #236]	; (3e6c <xPortStartScheduler+0xf4>)
    3d7e:	429a      	cmp	r2, r3
    3d80:	d108      	bne.n	3d94 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    3d82:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d86:	f383 8811 	msr	BASEPRI, r3
    3d8a:	f3bf 8f6f 	isb	sy
    3d8e:	f3bf 8f4f 	dsb	sy
    3d92:	e7fe      	b.n	3d92 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    3d94:	4b34      	ldr	r3, [pc, #208]	; (3e68 <xPortStartScheduler+0xf0>)
    3d96:	681a      	ldr	r2, [r3, #0]
    3d98:	4b35      	ldr	r3, [pc, #212]	; (3e70 <xPortStartScheduler+0xf8>)
    3d9a:	429a      	cmp	r2, r3
    3d9c:	d108      	bne.n	3db0 <xPortStartScheduler+0x38>
    3d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3da2:	f383 8811 	msr	BASEPRI, r3
    3da6:	f3bf 8f6f 	isb	sy
    3daa:	f3bf 8f4f 	dsb	sy
    3dae:	e7fe      	b.n	3dae <xPortStartScheduler+0x36>
{
    3db0:	b510      	push	{r4, lr}
    3db2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    3db4:	4b2f      	ldr	r3, [pc, #188]	; (3e74 <xPortStartScheduler+0xfc>)
    3db6:	781a      	ldrb	r2, [r3, #0]
    3db8:	b2d2      	uxtb	r2, r2
    3dba:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    3dbc:	22ff      	movs	r2, #255	; 0xff
    3dbe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3dc0:	781b      	ldrb	r3, [r3, #0]
    3dc2:	b2db      	uxtb	r3, r3
    3dc4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3dcc:	4a2a      	ldr	r2, [pc, #168]	; (3e78 <xPortStartScheduler+0x100>)
    3dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3dd2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3dd4:	2307      	movs	r3, #7
    3dd6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3dd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3ddc:	f013 0f80 	tst.w	r3, #128	; 0x80
    3de0:	d012      	beq.n	3e08 <xPortStartScheduler+0x90>
    3de2:	2306      	movs	r3, #6
    3de4:	e000      	b.n	3de8 <xPortStartScheduler+0x70>
    3de6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3de8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3dec:	0052      	lsls	r2, r2, #1
    3dee:	b2d2      	uxtb	r2, r2
    3df0:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3df4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3df8:	1e59      	subs	r1, r3, #1
    3dfa:	f012 0f80 	tst.w	r2, #128	; 0x80
    3dfe:	d1f2      	bne.n	3de6 <xPortStartScheduler+0x6e>
    3e00:	4a1d      	ldr	r2, [pc, #116]	; (3e78 <xPortStartScheduler+0x100>)
    3e02:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3e04:	2b04      	cmp	r3, #4
    3e06:	d008      	beq.n	3e1a <xPortStartScheduler+0xa2>
    3e08:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e0c:	f383 8811 	msr	BASEPRI, r3
    3e10:	f3bf 8f6f 	isb	sy
    3e14:	f3bf 8f4f 	dsb	sy
    3e18:	e7fe      	b.n	3e18 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    3e1a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    3e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3e20:	4a15      	ldr	r2, [pc, #84]	; (3e78 <xPortStartScheduler+0x100>)
    3e22:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    3e24:	9b01      	ldr	r3, [sp, #4]
    3e26:	b2db      	uxtb	r3, r3
    3e28:	4a12      	ldr	r2, [pc, #72]	; (3e74 <xPortStartScheduler+0xfc>)
    3e2a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    3e2c:	4b13      	ldr	r3, [pc, #76]	; (3e7c <xPortStartScheduler+0x104>)
    3e2e:	681a      	ldr	r2, [r3, #0]
    3e30:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3e36:	681a      	ldr	r2, [r3, #0]
    3e38:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    3e3c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    3e3e:	4b10      	ldr	r3, [pc, #64]	; (3e80 <xPortStartScheduler+0x108>)
    3e40:	4798      	blx	r3
	uxCriticalNesting = 0;
    3e42:	2400      	movs	r4, #0
    3e44:	4b0f      	ldr	r3, [pc, #60]	; (3e84 <xPortStartScheduler+0x10c>)
    3e46:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    3e48:	4b0f      	ldr	r3, [pc, #60]	; (3e88 <xPortStartScheduler+0x110>)
    3e4a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    3e4c:	4a0f      	ldr	r2, [pc, #60]	; (3e8c <xPortStartScheduler+0x114>)
    3e4e:	6813      	ldr	r3, [r2, #0]
    3e50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3e54:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    3e56:	4b0e      	ldr	r3, [pc, #56]	; (3e90 <xPortStartScheduler+0x118>)
    3e58:	4798      	blx	r3
	vTaskSwitchContext();
    3e5a:	4b0e      	ldr	r3, [pc, #56]	; (3e94 <xPortStartScheduler+0x11c>)
    3e5c:	4798      	blx	r3
	prvTaskExitError();
    3e5e:	4b0e      	ldr	r3, [pc, #56]	; (3e98 <xPortStartScheduler+0x120>)
    3e60:	4798      	blx	r3
}
    3e62:	4620      	mov	r0, r4
    3e64:	b002      	add	sp, #8
    3e66:	bd10      	pop	{r4, pc}
    3e68:	e000ed00 	.word	0xe000ed00
    3e6c:	410fc271 	.word	0x410fc271
    3e70:	410fc270 	.word	0x410fc270
    3e74:	e000e400 	.word	0xe000e400
    3e78:	20000b00 	.word	0x20000b00
    3e7c:	e000ed20 	.word	0xe000ed20
    3e80:	00003d55 	.word	0x00003d55
    3e84:	20000120 	.word	0x20000120
    3e88:	00003be1 	.word	0x00003be1
    3e8c:	e000ef34 	.word	0xe000ef34
    3e90:	00003bb9 	.word	0x00003bb9
    3e94:	00005085 	.word	0x00005085
    3e98:	00003b79 	.word	0x00003b79

00003e9c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    3e9c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    3ea0:	2b0f      	cmp	r3, #15
    3ea2:	d90f      	bls.n	3ec4 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    3ea4:	4a10      	ldr	r2, [pc, #64]	; (3ee8 <vPortValidateInterruptPriority+0x4c>)
    3ea6:	5c9b      	ldrb	r3, [r3, r2]
    3ea8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    3eaa:	4a10      	ldr	r2, [pc, #64]	; (3eec <vPortValidateInterruptPriority+0x50>)
    3eac:	7812      	ldrb	r2, [r2, #0]
    3eae:	429a      	cmp	r2, r3
    3eb0:	d908      	bls.n	3ec4 <vPortValidateInterruptPriority+0x28>
    3eb2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3eb6:	f383 8811 	msr	BASEPRI, r3
    3eba:	f3bf 8f6f 	isb	sy
    3ebe:	f3bf 8f4f 	dsb	sy
    3ec2:	e7fe      	b.n	3ec2 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3ec4:	4b0a      	ldr	r3, [pc, #40]	; (3ef0 <vPortValidateInterruptPriority+0x54>)
    3ec6:	681b      	ldr	r3, [r3, #0]
    3ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3ecc:	4a07      	ldr	r2, [pc, #28]	; (3eec <vPortValidateInterruptPriority+0x50>)
    3ece:	6852      	ldr	r2, [r2, #4]
    3ed0:	4293      	cmp	r3, r2
    3ed2:	d908      	bls.n	3ee6 <vPortValidateInterruptPriority+0x4a>
    3ed4:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ed8:	f383 8811 	msr	BASEPRI, r3
    3edc:	f3bf 8f6f 	isb	sy
    3ee0:	f3bf 8f4f 	dsb	sy
    3ee4:	e7fe      	b.n	3ee4 <vPortValidateInterruptPriority+0x48>
    3ee6:	4770      	bx	lr
    3ee8:	e000e3f0 	.word	0xe000e3f0
    3eec:	20000b00 	.word	0x20000b00
    3ef0:	e000ed0c 	.word	0xe000ed0c

00003ef4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3ef4:	b570      	push	{r4, r5, r6, lr}
    3ef6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    3ef8:	4b2d      	ldr	r3, [pc, #180]	; (3fb0 <pvPortMalloc+0xbc>)
    3efa:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    3efc:	4b2d      	ldr	r3, [pc, #180]	; (3fb4 <pvPortMalloc+0xc0>)
    3efe:	689b      	ldr	r3, [r3, #8]
    3f00:	b183      	cbz	r3, 3f24 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    3f02:	2c00      	cmp	r4, #0
    3f04:	d04d      	beq.n	3fa2 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    3f06:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    3f08:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    3f0c:	bf1c      	itt	ne
    3f0e:	f024 0407 	bicne.w	r4, r4, #7
    3f12:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    3f14:	1e62      	subs	r2, r4, #1
    3f16:	f242 73f6 	movw	r3, #10230	; 0x27f6
    3f1a:	429a      	cmp	r2, r3
    3f1c:	d843      	bhi.n	3fa6 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    3f1e:	4925      	ldr	r1, [pc, #148]	; (3fb4 <pvPortMalloc+0xc0>)
    3f20:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3f22:	e017      	b.n	3f54 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    3f24:	4923      	ldr	r1, [pc, #140]	; (3fb4 <pvPortMalloc+0xc0>)
    3f26:	f101 0314 	add.w	r3, r1, #20
    3f2a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    3f2e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    3f30:	2500      	movs	r5, #0
    3f32:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    3f34:	4a20      	ldr	r2, [pc, #128]	; (3fb8 <pvPortMalloc+0xc4>)
    3f36:	f242 70f8 	movw	r0, #10232	; 0x27f8
    3f3a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    3f3e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    3f42:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    3f44:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    3f48:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    3f4a:	2301      	movs	r3, #1
    3f4c:	608b      	str	r3, [r1, #8]
    3f4e:	e7d8      	b.n	3f02 <pvPortMalloc+0xe>
    3f50:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    3f52:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3f54:	685a      	ldr	r2, [r3, #4]
    3f56:	4294      	cmp	r4, r2
    3f58:	d902      	bls.n	3f60 <pvPortMalloc+0x6c>
    3f5a:	681a      	ldr	r2, [r3, #0]
    3f5c:	2a00      	cmp	r2, #0
    3f5e:	d1f7      	bne.n	3f50 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    3f60:	4a16      	ldr	r2, [pc, #88]	; (3fbc <pvPortMalloc+0xc8>)
    3f62:	4293      	cmp	r3, r2
    3f64:	d021      	beq.n	3faa <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    3f66:	680d      	ldr	r5, [r1, #0]
    3f68:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    3f6a:	681a      	ldr	r2, [r3, #0]
    3f6c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    3f6e:	685a      	ldr	r2, [r3, #4]
    3f70:	1b12      	subs	r2, r2, r4
    3f72:	2a10      	cmp	r2, #16
    3f74:	d90c      	bls.n	3f90 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    3f76:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    3f78:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    3f7a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    3f7c:	6874      	ldr	r4, [r6, #4]
    3f7e:	490d      	ldr	r1, [pc, #52]	; (3fb4 <pvPortMalloc+0xc0>)
    3f80:	e000      	b.n	3f84 <pvPortMalloc+0x90>
    3f82:	4611      	mov	r1, r2
    3f84:	680a      	ldr	r2, [r1, #0]
    3f86:	6850      	ldr	r0, [r2, #4]
    3f88:	4284      	cmp	r4, r0
    3f8a:	d8fa      	bhi.n	3f82 <pvPortMalloc+0x8e>
    3f8c:	6032      	str	r2, [r6, #0]
    3f8e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    3f90:	490b      	ldr	r1, [pc, #44]	; (3fc0 <pvPortMalloc+0xcc>)
    3f92:	680a      	ldr	r2, [r1, #0]
    3f94:	685b      	ldr	r3, [r3, #4]
    3f96:	1ad2      	subs	r2, r2, r3
    3f98:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    3f9a:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <pvPortMalloc+0xd0>)
    3f9c:	4798      	blx	r3
}
    3f9e:	4628      	mov	r0, r5
    3fa0:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    3fa2:	2500      	movs	r5, #0
    3fa4:	e7f9      	b.n	3f9a <pvPortMalloc+0xa6>
    3fa6:	2500      	movs	r5, #0
    3fa8:	e7f7      	b.n	3f9a <pvPortMalloc+0xa6>
    3faa:	2500      	movs	r5, #0
    3fac:	e7f5      	b.n	3f9a <pvPortMalloc+0xa6>
    3fae:	bf00      	nop
    3fb0:	00004d2d 	.word	0x00004d2d
    3fb4:	20000b08 	.word	0x20000b08
    3fb8:	20002cf8 	.word	0x20002cf8
    3fbc:	20003314 	.word	0x20003314
    3fc0:	20000124 	.word	0x20000124
    3fc4:	00004e75 	.word	0x00004e75

00003fc8 <vPortFree>:
	if( pv != NULL )
    3fc8:	b1d0      	cbz	r0, 4000 <vPortFree+0x38>
{
    3fca:	b570      	push	{r4, r5, r6, lr}
    3fcc:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    3fce:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    3fd2:	4b0c      	ldr	r3, [pc, #48]	; (4004 <vPortFree+0x3c>)
    3fd4:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    3fd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
    3fda:	4a0b      	ldr	r2, [pc, #44]	; (4008 <vPortFree+0x40>)
    3fdc:	e000      	b.n	3fe0 <vPortFree+0x18>
    3fde:	461a      	mov	r2, r3
    3fe0:	6813      	ldr	r3, [r2, #0]
    3fe2:	6859      	ldr	r1, [r3, #4]
    3fe4:	428c      	cmp	r4, r1
    3fe6:	d8fa      	bhi.n	3fde <vPortFree+0x16>
    3fe8:	f845 3c08 	str.w	r3, [r5, #-8]
    3fec:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    3fee:	4a07      	ldr	r2, [pc, #28]	; (400c <vPortFree+0x44>)
    3ff0:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3ff4:	6811      	ldr	r1, [r2, #0]
    3ff6:	440b      	add	r3, r1
    3ff8:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    3ffa:	4b05      	ldr	r3, [pc, #20]	; (4010 <vPortFree+0x48>)
    3ffc:	4798      	blx	r3
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
    4000:	4770      	bx	lr
    4002:	bf00      	nop
    4004:	00004d2d 	.word	0x00004d2d
    4008:	20000b08 	.word	0x20000b08
    400c:	20000124 	.word	0x20000124
    4010:	00004e75 	.word	0x00004e75

00004014 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    4014:	b510      	push	{r4, lr}
    4016:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    4018:	4b04      	ldr	r3, [pc, #16]	; (402c <prvIsQueueEmpty+0x18>)
    401a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    401c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    401e:	4b04      	ldr	r3, [pc, #16]	; (4030 <prvIsQueueEmpty+0x1c>)
    4020:	4798      	blx	r3

	return xReturn;
}
    4022:	fab4 f084 	clz	r0, r4
    4026:	0940      	lsrs	r0, r0, #5
    4028:	bd10      	pop	{r4, pc}
    402a:	bf00      	nop
    402c:	00003c45 	.word	0x00003c45
    4030:	00003c89 	.word	0x00003c89

00004034 <prvCopyDataToQueue>:
{
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	4604      	mov	r4, r0
    4038:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    403a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    403c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    403e:	b952      	cbnz	r2, 4056 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4040:	6803      	ldr	r3, [r0, #0]
    4042:	2b00      	cmp	r3, #0
    4044:	d12a      	bne.n	409c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    4046:	6840      	ldr	r0, [r0, #4]
    4048:	4b18      	ldr	r3, [pc, #96]	; (40ac <prvCopyDataToQueue+0x78>)
    404a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    404c:	2300      	movs	r3, #0
    404e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    4050:	3501      	adds	r5, #1
    4052:	63a5      	str	r5, [r4, #56]	; 0x38
}
    4054:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    4056:	b96e      	cbnz	r6, 4074 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    4058:	6880      	ldr	r0, [r0, #8]
    405a:	4b15      	ldr	r3, [pc, #84]	; (40b0 <prvCopyDataToQueue+0x7c>)
    405c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    405e:	68a3      	ldr	r3, [r4, #8]
    4060:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4062:	4413      	add	r3, r2
    4064:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    4066:	6862      	ldr	r2, [r4, #4]
    4068:	4293      	cmp	r3, r2
    406a:	d319      	bcc.n	40a0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    406c:	6823      	ldr	r3, [r4, #0]
    406e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    4070:	2000      	movs	r0, #0
    4072:	e7ed      	b.n	4050 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	4b0e      	ldr	r3, [pc, #56]	; (40b0 <prvCopyDataToQueue+0x7c>)
    4078:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    407a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    407c:	425b      	negs	r3, r3
    407e:	68e2      	ldr	r2, [r4, #12]
    4080:	441a      	add	r2, r3
    4082:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    4084:	6821      	ldr	r1, [r4, #0]
    4086:	428a      	cmp	r2, r1
    4088:	d202      	bcs.n	4090 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    408a:	6862      	ldr	r2, [r4, #4]
    408c:	4413      	add	r3, r2
    408e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    4090:	2e02      	cmp	r6, #2
    4092:	d107      	bne.n	40a4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4094:	b145      	cbz	r5, 40a8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    4096:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    4098:	2000      	movs	r0, #0
    409a:	e7d9      	b.n	4050 <prvCopyDataToQueue+0x1c>
    409c:	2000      	movs	r0, #0
    409e:	e7d7      	b.n	4050 <prvCopyDataToQueue+0x1c>
    40a0:	2000      	movs	r0, #0
    40a2:	e7d5      	b.n	4050 <prvCopyDataToQueue+0x1c>
    40a4:	2000      	movs	r0, #0
    40a6:	e7d3      	b.n	4050 <prvCopyDataToQueue+0x1c>
    40a8:	2000      	movs	r0, #0
    40aa:	e7d1      	b.n	4050 <prvCopyDataToQueue+0x1c>
    40ac:	000053c5 	.word	0x000053c5
    40b0:	00005b33 	.word	0x00005b33

000040b4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    40b4:	b570      	push	{r4, r5, r6, lr}
    40b6:	b082      	sub	sp, #8
    40b8:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    40ba:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    40bc:	b164      	cbz	r4, 40d8 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    40be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    40c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    40c2:	429a      	cmp	r2, r3
    40c4:	d311      	bcc.n	40ea <prvNotifyQueueSetContainer+0x36>
    40c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    40ca:	f383 8811 	msr	BASEPRI, r3
    40ce:	f3bf 8f6f 	isb	sy
    40d2:	f3bf 8f4f 	dsb	sy
    40d6:	e7fe      	b.n	40d6 <prvNotifyQueueSetContainer+0x22>
    40d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    40dc:	f383 8811 	msr	BASEPRI, r3
    40e0:	f3bf 8f6f 	isb	sy
    40e4:	f3bf 8f4f 	dsb	sy
    40e8:	e7fe      	b.n	40e8 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    40ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    40ec:	4293      	cmp	r3, r2
    40ee:	d803      	bhi.n	40f8 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    40f0:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    40f2:	4630      	mov	r0, r6
    40f4:	b002      	add	sp, #8
    40f6:	bd70      	pop	{r4, r5, r6, pc}
    40f8:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    40fa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    40fe:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    4100:	a901      	add	r1, sp, #4
    4102:	4620      	mov	r0, r4
    4104:	4b0a      	ldr	r3, [pc, #40]	; (4130 <prvNotifyQueueSetContainer+0x7c>)
    4106:	4798      	blx	r3
    4108:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    410a:	f1b5 3fff 	cmp.w	r5, #4294967295
    410e:	d10a      	bne.n	4126 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    4110:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4112:	2b00      	cmp	r3, #0
    4114:	d0ed      	beq.n	40f2 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    4116:	f104 0024 	add.w	r0, r4, #36	; 0x24
    411a:	4b06      	ldr	r3, [pc, #24]	; (4134 <prvNotifyQueueSetContainer+0x80>)
    411c:	4798      	blx	r3
    411e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    4120:	bf18      	it	ne
    4122:	2601      	movne	r6, #1
    4124:	e7e5      	b.n	40f2 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    4126:	1c6b      	adds	r3, r5, #1
    4128:	b25b      	sxtb	r3, r3
    412a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    412e:	e7e0      	b.n	40f2 <prvNotifyQueueSetContainer+0x3e>
    4130:	00004035 	.word	0x00004035
    4134:	000051c1 	.word	0x000051c1

00004138 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    4138:	6c02      	ldr	r2, [r0, #64]	; 0x40
    413a:	b172      	cbz	r2, 415a <prvCopyDataFromQueue+0x22>
{
    413c:	b510      	push	{r4, lr}
    413e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4140:	68c4      	ldr	r4, [r0, #12]
    4142:	4414      	add	r4, r2
    4144:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    4146:	6840      	ldr	r0, [r0, #4]
    4148:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    414a:	bf24      	itt	cs
    414c:	6818      	ldrcs	r0, [r3, #0]
    414e:	60d8      	strcs	r0, [r3, #12]
    4150:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    4152:	68d9      	ldr	r1, [r3, #12]
    4154:	4b01      	ldr	r3, [pc, #4]	; (415c <prvCopyDataFromQueue+0x24>)
    4156:	4798      	blx	r3
    4158:	bd10      	pop	{r4, pc}
    415a:	4770      	bx	lr
    415c:	00005b33 	.word	0x00005b33

00004160 <prvUnlockQueue>:
{
    4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4164:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    4166:	4b23      	ldr	r3, [pc, #140]	; (41f4 <prvUnlockQueue+0x94>)
    4168:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    416a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    416e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    4170:	2c00      	cmp	r4, #0
    4172:	dd19      	ble.n	41a8 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4174:	4e20      	ldr	r6, [pc, #128]	; (41f8 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    4176:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4204 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    417a:	4f20      	ldr	r7, [pc, #128]	; (41fc <prvUnlockQueue+0x9c>)
    417c:	e008      	b.n	4190 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    417e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4180:	b193      	cbz	r3, 41a8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4182:	f105 0024 	add.w	r0, r5, #36	; 0x24
    4186:	47b8      	blx	r7
    4188:	b960      	cbnz	r0, 41a4 <prvUnlockQueue+0x44>
    418a:	3c01      	subs	r4, #1
    418c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    418e:	b15c      	cbz	r4, 41a8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    4190:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4192:	2b00      	cmp	r3, #0
    4194:	d0f3      	beq.n	417e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4196:	2100      	movs	r1, #0
    4198:	4628      	mov	r0, r5
    419a:	47b0      	blx	r6
    419c:	2800      	cmp	r0, #0
    419e:	d0f4      	beq.n	418a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    41a0:	47c0      	blx	r8
    41a2:	e7f2      	b.n	418a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    41a4:	47c0      	blx	r8
    41a6:	e7f0      	b.n	418a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    41a8:	23ff      	movs	r3, #255	; 0xff
    41aa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    41ae:	4b14      	ldr	r3, [pc, #80]	; (4200 <prvUnlockQueue+0xa0>)
    41b0:	4798      	blx	r3
	taskENTER_CRITICAL();
    41b2:	4b10      	ldr	r3, [pc, #64]	; (41f4 <prvUnlockQueue+0x94>)
    41b4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    41b6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    41ba:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    41bc:	2c00      	cmp	r4, #0
    41be:	dd12      	ble.n	41e6 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    41c0:	692b      	ldr	r3, [r5, #16]
    41c2:	b183      	cbz	r3, 41e6 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    41c4:	f105 0710 	add.w	r7, r5, #16
    41c8:	4e0c      	ldr	r6, [pc, #48]	; (41fc <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    41ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4204 <prvUnlockQueue+0xa4>
    41ce:	e004      	b.n	41da <prvUnlockQueue+0x7a>
    41d0:	3c01      	subs	r4, #1
    41d2:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    41d4:	b13c      	cbz	r4, 41e6 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    41d6:	692b      	ldr	r3, [r5, #16]
    41d8:	b12b      	cbz	r3, 41e6 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    41da:	4638      	mov	r0, r7
    41dc:	47b0      	blx	r6
    41de:	2800      	cmp	r0, #0
    41e0:	d0f6      	beq.n	41d0 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    41e2:	47c0      	blx	r8
    41e4:	e7f4      	b.n	41d0 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    41e6:	23ff      	movs	r3, #255	; 0xff
    41e8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    41ec:	4b04      	ldr	r3, [pc, #16]	; (4200 <prvUnlockQueue+0xa0>)
    41ee:	4798      	blx	r3
    41f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41f4:	00003c45 	.word	0x00003c45
    41f8:	000040b5 	.word	0x000040b5
    41fc:	000051c1 	.word	0x000051c1
    4200:	00003c89 	.word	0x00003c89
    4204:	000052f1 	.word	0x000052f1

00004208 <xQueueGenericReset>:
{
    4208:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    420a:	b330      	cbz	r0, 425a <xQueueGenericReset+0x52>
    420c:	4604      	mov	r4, r0
    420e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    4210:	4b1c      	ldr	r3, [pc, #112]	; (4284 <xQueueGenericReset+0x7c>)
    4212:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4214:	6822      	ldr	r2, [r4, #0]
    4216:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    421a:	fb03 f301 	mul.w	r3, r3, r1
    421e:	18d0      	adds	r0, r2, r3
    4220:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4222:	2000      	movs	r0, #0
    4224:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    4226:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4228:	1a5b      	subs	r3, r3, r1
    422a:	4413      	add	r3, r2
    422c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    422e:	23ff      	movs	r3, #255	; 0xff
    4230:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    4234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    4238:	b9c5      	cbnz	r5, 426c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    423a:	6923      	ldr	r3, [r4, #16]
    423c:	b1eb      	cbz	r3, 427a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    423e:	f104 0010 	add.w	r0, r4, #16
    4242:	4b11      	ldr	r3, [pc, #68]	; (4288 <xQueueGenericReset+0x80>)
    4244:	4798      	blx	r3
    4246:	b1c0      	cbz	r0, 427a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    4248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    424c:	4b0f      	ldr	r3, [pc, #60]	; (428c <xQueueGenericReset+0x84>)
    424e:	601a      	str	r2, [r3, #0]
    4250:	f3bf 8f4f 	dsb	sy
    4254:	f3bf 8f6f 	isb	sy
    4258:	e00f      	b.n	427a <xQueueGenericReset+0x72>
    425a:	f04f 0380 	mov.w	r3, #128	; 0x80
    425e:	f383 8811 	msr	BASEPRI, r3
    4262:	f3bf 8f6f 	isb	sy
    4266:	f3bf 8f4f 	dsb	sy
    426a:	e7fe      	b.n	426a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    426c:	f104 0010 	add.w	r0, r4, #16
    4270:	4d07      	ldr	r5, [pc, #28]	; (4290 <xQueueGenericReset+0x88>)
    4272:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4274:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4278:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    427a:	4b06      	ldr	r3, [pc, #24]	; (4294 <xQueueGenericReset+0x8c>)
    427c:	4798      	blx	r3
}
    427e:	2001      	movs	r0, #1
    4280:	bd38      	pop	{r3, r4, r5, pc}
    4282:	bf00      	nop
    4284:	00003c45 	.word	0x00003c45
    4288:	000051c1 	.word	0x000051c1
    428c:	e000ed04 	.word	0xe000ed04
    4290:	00003ae9 	.word	0x00003ae9
    4294:	00003c89 	.word	0x00003c89

00004298 <xQueueGenericCreate>:
{
    4298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    429a:	b940      	cbnz	r0, 42ae <xQueueGenericCreate+0x16>
    429c:	f04f 0380 	mov.w	r3, #128	; 0x80
    42a0:	f383 8811 	msr	BASEPRI, r3
    42a4:	f3bf 8f6f 	isb	sy
    42a8:	f3bf 8f4f 	dsb	sy
    42ac:	e7fe      	b.n	42ac <xQueueGenericCreate+0x14>
    42ae:	4606      	mov	r6, r0
    42b0:	4617      	mov	r7, r2
    42b2:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    42b4:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    42b8:	3054      	adds	r0, #84	; 0x54
    42ba:	4b0b      	ldr	r3, [pc, #44]	; (42e8 <xQueueGenericCreate+0x50>)
    42bc:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    42be:	4604      	mov	r4, r0
    42c0:	b178      	cbz	r0, 42e2 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    42c2:	b11d      	cbz	r5, 42cc <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    42c4:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    42c8:	6003      	str	r3, [r0, #0]
    42ca:	e000      	b.n	42ce <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    42cc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    42ce:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    42d0:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    42d2:	2101      	movs	r1, #1
    42d4:	4620      	mov	r0, r4
    42d6:	4b05      	ldr	r3, [pc, #20]	; (42ec <xQueueGenericCreate+0x54>)
    42d8:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    42da:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    42de:	2300      	movs	r3, #0
    42e0:	64a3      	str	r3, [r4, #72]	; 0x48
}
    42e2:	4620      	mov	r0, r4
    42e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42e6:	bf00      	nop
    42e8:	00003ef5 	.word	0x00003ef5
    42ec:	00004209 	.word	0x00004209

000042f0 <xQueueGenericSend>:
{
    42f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42f4:	b085      	sub	sp, #20
    42f6:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    42f8:	b198      	cbz	r0, 4322 <xQueueGenericSend+0x32>
    42fa:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    42fc:	b1d1      	cbz	r1, 4334 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    42fe:	2b02      	cmp	r3, #2
    4300:	d024      	beq.n	434c <xQueueGenericSend+0x5c>
    4302:	461e      	mov	r6, r3
    4304:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4306:	4b64      	ldr	r3, [pc, #400]	; (4498 <xQueueGenericSend+0x1a8>)
    4308:	4798      	blx	r3
    430a:	bb58      	cbnz	r0, 4364 <xQueueGenericSend+0x74>
    430c:	9b01      	ldr	r3, [sp, #4]
    430e:	b38b      	cbz	r3, 4374 <xQueueGenericSend+0x84>
    4310:	f04f 0380 	mov.w	r3, #128	; 0x80
    4314:	f383 8811 	msr	BASEPRI, r3
    4318:	f3bf 8f6f 	isb	sy
    431c:	f3bf 8f4f 	dsb	sy
    4320:	e7fe      	b.n	4320 <xQueueGenericSend+0x30>
    4322:	f04f 0380 	mov.w	r3, #128	; 0x80
    4326:	f383 8811 	msr	BASEPRI, r3
    432a:	f3bf 8f6f 	isb	sy
    432e:	f3bf 8f4f 	dsb	sy
    4332:	e7fe      	b.n	4332 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4334:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4336:	2a00      	cmp	r2, #0
    4338:	d0e1      	beq.n	42fe <xQueueGenericSend+0xe>
    433a:	f04f 0380 	mov.w	r3, #128	; 0x80
    433e:	f383 8811 	msr	BASEPRI, r3
    4342:	f3bf 8f6f 	isb	sy
    4346:	f3bf 8f4f 	dsb	sy
    434a:	e7fe      	b.n	434a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    434c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    434e:	2a01      	cmp	r2, #1
    4350:	d0d7      	beq.n	4302 <xQueueGenericSend+0x12>
    4352:	f04f 0380 	mov.w	r3, #128	; 0x80
    4356:	f383 8811 	msr	BASEPRI, r3
    435a:	f3bf 8f6f 	isb	sy
    435e:	f3bf 8f4f 	dsb	sy
    4362:	e7fe      	b.n	4362 <xQueueGenericSend+0x72>
    4364:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    4366:	f8df 815c 	ldr.w	r8, [pc, #348]	; 44c4 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    436a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 44c8 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    436e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 44a4 <xQueueGenericSend+0x1b4>
    4372:	e041      	b.n	43f8 <xQueueGenericSend+0x108>
    4374:	2500      	movs	r5, #0
    4376:	e7f6      	b.n	4366 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4378:	4632      	mov	r2, r6
    437a:	4639      	mov	r1, r7
    437c:	4620      	mov	r0, r4
    437e:	4b47      	ldr	r3, [pc, #284]	; (449c <xQueueGenericSend+0x1ac>)
    4380:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    4382:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4384:	b193      	cbz	r3, 43ac <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4386:	4631      	mov	r1, r6
    4388:	4620      	mov	r0, r4
    438a:	4b45      	ldr	r3, [pc, #276]	; (44a0 <xQueueGenericSend+0x1b0>)
    438c:	4798      	blx	r3
    438e:	b138      	cbz	r0, 43a0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    4390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4394:	4b43      	ldr	r3, [pc, #268]	; (44a4 <xQueueGenericSend+0x1b4>)
    4396:	601a      	str	r2, [r3, #0]
    4398:	f3bf 8f4f 	dsb	sy
    439c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    43a0:	4b41      	ldr	r3, [pc, #260]	; (44a8 <xQueueGenericSend+0x1b8>)
    43a2:	4798      	blx	r3
				return pdPASS;
    43a4:	2001      	movs	r0, #1
}
    43a6:	b005      	add	sp, #20
    43a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    43ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43ae:	b173      	cbz	r3, 43ce <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    43b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    43b4:	4b3d      	ldr	r3, [pc, #244]	; (44ac <xQueueGenericSend+0x1bc>)
    43b6:	4798      	blx	r3
    43b8:	2800      	cmp	r0, #0
    43ba:	d0f1      	beq.n	43a0 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    43bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    43c0:	4b38      	ldr	r3, [pc, #224]	; (44a4 <xQueueGenericSend+0x1b4>)
    43c2:	601a      	str	r2, [r3, #0]
    43c4:	f3bf 8f4f 	dsb	sy
    43c8:	f3bf 8f6f 	isb	sy
    43cc:	e7e8      	b.n	43a0 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    43ce:	2800      	cmp	r0, #0
    43d0:	d0e6      	beq.n	43a0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    43d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    43d6:	4b33      	ldr	r3, [pc, #204]	; (44a4 <xQueueGenericSend+0x1b4>)
    43d8:	601a      	str	r2, [r3, #0]
    43da:	f3bf 8f4f 	dsb	sy
    43de:	f3bf 8f6f 	isb	sy
    43e2:	e7dd      	b.n	43a0 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    43e4:	4b30      	ldr	r3, [pc, #192]	; (44a8 <xQueueGenericSend+0x1b8>)
    43e6:	4798      	blx	r3
					return errQUEUE_FULL;
    43e8:	2000      	movs	r0, #0
    43ea:	e7dc      	b.n	43a6 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    43ec:	4620      	mov	r0, r4
    43ee:	4b30      	ldr	r3, [pc, #192]	; (44b0 <xQueueGenericSend+0x1c0>)
    43f0:	4798      	blx	r3
				(void)xTaskResumeAll();
    43f2:	4b30      	ldr	r3, [pc, #192]	; (44b4 <xQueueGenericSend+0x1c4>)
    43f4:	4798      	blx	r3
    43f6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    43f8:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    43fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    43fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    43fe:	429a      	cmp	r2, r3
    4400:	d3ba      	bcc.n	4378 <xQueueGenericSend+0x88>
    4402:	2e02      	cmp	r6, #2
    4404:	d0b8      	beq.n	4378 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    4406:	9b01      	ldr	r3, [sp, #4]
    4408:	2b00      	cmp	r3, #0
    440a:	d0eb      	beq.n	43e4 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    440c:	b90d      	cbnz	r5, 4412 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    440e:	a802      	add	r0, sp, #8
    4410:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    4412:	4b25      	ldr	r3, [pc, #148]	; (44a8 <xQueueGenericSend+0x1b8>)
    4414:	4798      	blx	r3
		vTaskSuspendAll();
    4416:	4b28      	ldr	r3, [pc, #160]	; (44b8 <xQueueGenericSend+0x1c8>)
    4418:	4798      	blx	r3
		prvLockQueue(pxQueue);
    441a:	47c0      	blx	r8
    441c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4420:	b25b      	sxtb	r3, r3
    4422:	f1b3 3fff 	cmp.w	r3, #4294967295
    4426:	bf04      	itt	eq
    4428:	2300      	moveq	r3, #0
    442a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    442e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4432:	b25b      	sxtb	r3, r3
    4434:	f1b3 3fff 	cmp.w	r3, #4294967295
    4438:	bf04      	itt	eq
    443a:	2300      	moveq	r3, #0
    443c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4440:	4b19      	ldr	r3, [pc, #100]	; (44a8 <xQueueGenericSend+0x1b8>)
    4442:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4444:	a901      	add	r1, sp, #4
    4446:	a802      	add	r0, sp, #8
    4448:	4b1c      	ldr	r3, [pc, #112]	; (44bc <xQueueGenericSend+0x1cc>)
    444a:	4798      	blx	r3
    444c:	b9e0      	cbnz	r0, 4488 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    444e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    4450:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    4454:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    4456:	4b14      	ldr	r3, [pc, #80]	; (44a8 <xQueueGenericSend+0x1b8>)
    4458:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    445a:	45ab      	cmp	fp, r5
    445c:	d1c6      	bne.n	43ec <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    445e:	9901      	ldr	r1, [sp, #4]
    4460:	f104 0010 	add.w	r0, r4, #16
    4464:	4b16      	ldr	r3, [pc, #88]	; (44c0 <xQueueGenericSend+0x1d0>)
    4466:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4468:	4620      	mov	r0, r4
    446a:	4b11      	ldr	r3, [pc, #68]	; (44b0 <xQueueGenericSend+0x1c0>)
    446c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    446e:	4b11      	ldr	r3, [pc, #68]	; (44b4 <xQueueGenericSend+0x1c4>)
    4470:	4798      	blx	r3
    4472:	2800      	cmp	r0, #0
    4474:	d1bf      	bne.n	43f6 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    4476:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    447a:	f8c9 3000 	str.w	r3, [r9]
    447e:	f3bf 8f4f 	dsb	sy
    4482:	f3bf 8f6f 	isb	sy
    4486:	e7b6      	b.n	43f6 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    4488:	4620      	mov	r0, r4
    448a:	4b09      	ldr	r3, [pc, #36]	; (44b0 <xQueueGenericSend+0x1c0>)
    448c:	4798      	blx	r3
			(void)xTaskResumeAll();
    448e:	4b09      	ldr	r3, [pc, #36]	; (44b4 <xQueueGenericSend+0x1c4>)
    4490:	4798      	blx	r3
			return errQUEUE_FULL;
    4492:	2000      	movs	r0, #0
    4494:	e787      	b.n	43a6 <xQueueGenericSend+0xb6>
    4496:	bf00      	nop
    4498:	00005301 	.word	0x00005301
    449c:	00004035 	.word	0x00004035
    44a0:	000040b5 	.word	0x000040b5
    44a4:	e000ed04 	.word	0xe000ed04
    44a8:	00003c89 	.word	0x00003c89
    44ac:	000051c1 	.word	0x000051c1
    44b0:	00004161 	.word	0x00004161
    44b4:	00004e75 	.word	0x00004e75
    44b8:	00004d2d 	.word	0x00004d2d
    44bc:	00005265 	.word	0x00005265
    44c0:	00005141 	.word	0x00005141
    44c4:	00003c45 	.word	0x00003c45
    44c8:	00005251 	.word	0x00005251

000044cc <xQueueCreateMutex>:
{
    44cc:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    44ce:	4602      	mov	r2, r0
    44d0:	2100      	movs	r1, #0
    44d2:	2001      	movs	r0, #1
    44d4:	4b06      	ldr	r3, [pc, #24]	; (44f0 <xQueueCreateMutex+0x24>)
    44d6:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    44d8:	4604      	mov	r4, r0
    44da:	b138      	cbz	r0, 44ec <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    44dc:	2100      	movs	r1, #0
    44de:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    44e0:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    44e2:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    44e4:	460b      	mov	r3, r1
    44e6:	460a      	mov	r2, r1
    44e8:	4d02      	ldr	r5, [pc, #8]	; (44f4 <xQueueCreateMutex+0x28>)
    44ea:	47a8      	blx	r5
}
    44ec:	4620      	mov	r0, r4
    44ee:	bd38      	pop	{r3, r4, r5, pc}
    44f0:	00004299 	.word	0x00004299
    44f4:	000042f1 	.word	0x000042f1

000044f8 <xQueueGenericSendFromISR>:
{
    44f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    44fc:	2800      	cmp	r0, #0
    44fe:	d036      	beq.n	456e <xQueueGenericSendFromISR+0x76>
    4500:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4502:	2900      	cmp	r1, #0
    4504:	d03c      	beq.n	4580 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4506:	2b02      	cmp	r3, #2
    4508:	d046      	beq.n	4598 <xQueueGenericSendFromISR+0xa0>
    450a:	461f      	mov	r7, r3
    450c:	4690      	mov	r8, r2
    450e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4510:	4b37      	ldr	r3, [pc, #220]	; (45f0 <xQueueGenericSendFromISR+0xf8>)
    4512:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4514:	f3ef 8611 	mrs	r6, BASEPRI
    4518:	f04f 0380 	mov.w	r3, #128	; 0x80
    451c:	f383 8811 	msr	BASEPRI, r3
    4520:	f3bf 8f6f 	isb	sy
    4524:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    452a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    452c:	429a      	cmp	r2, r3
    452e:	d301      	bcc.n	4534 <xQueueGenericSendFromISR+0x3c>
    4530:	2f02      	cmp	r7, #2
    4532:	d151      	bne.n	45d8 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    4534:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4538:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    453a:	463a      	mov	r2, r7
    453c:	4649      	mov	r1, r9
    453e:	4620      	mov	r0, r4
    4540:	4b2c      	ldr	r3, [pc, #176]	; (45f4 <xQueueGenericSendFromISR+0xfc>)
    4542:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    4544:	f1b5 3fff 	cmp.w	r5, #4294967295
    4548:	d140      	bne.n	45cc <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    454a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    454c:	b383      	cbz	r3, 45b0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    454e:	4639      	mov	r1, r7
    4550:	4620      	mov	r0, r4
    4552:	4b29      	ldr	r3, [pc, #164]	; (45f8 <xQueueGenericSendFromISR+0x100>)
    4554:	4798      	blx	r3
    4556:	2800      	cmp	r0, #0
    4558:	d040      	beq.n	45dc <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    455a:	f1b8 0f00 	cmp.w	r8, #0
    455e:	d03f      	beq.n	45e0 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4560:	2001      	movs	r0, #1
    4562:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4566:	f386 8811 	msr	BASEPRI, r6
}
    456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    456e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4572:	f383 8811 	msr	BASEPRI, r3
    4576:	f3bf 8f6f 	isb	sy
    457a:	f3bf 8f4f 	dsb	sy
    457e:	e7fe      	b.n	457e <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4580:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4582:	2800      	cmp	r0, #0
    4584:	d0bf      	beq.n	4506 <xQueueGenericSendFromISR+0xe>
    4586:	f04f 0380 	mov.w	r3, #128	; 0x80
    458a:	f383 8811 	msr	BASEPRI, r3
    458e:	f3bf 8f6f 	isb	sy
    4592:	f3bf 8f4f 	dsb	sy
    4596:	e7fe      	b.n	4596 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4598:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    459a:	2801      	cmp	r0, #1
    459c:	d0b5      	beq.n	450a <xQueueGenericSendFromISR+0x12>
    459e:	f04f 0380 	mov.w	r3, #128	; 0x80
    45a2:	f383 8811 	msr	BASEPRI, r3
    45a6:	f3bf 8f6f 	isb	sy
    45aa:	f3bf 8f4f 	dsb	sy
    45ae:	e7fe      	b.n	45ae <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    45b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45b2:	b1bb      	cbz	r3, 45e4 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    45b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    45b8:	4b10      	ldr	r3, [pc, #64]	; (45fc <xQueueGenericSendFromISR+0x104>)
    45ba:	4798      	blx	r3
    45bc:	b1a0      	cbz	r0, 45e8 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    45be:	f1b8 0f00 	cmp.w	r8, #0
    45c2:	d013      	beq.n	45ec <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    45c4:	2001      	movs	r0, #1
    45c6:	f8c8 0000 	str.w	r0, [r8]
    45ca:	e7cc      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    45cc:	1c6b      	adds	r3, r5, #1
    45ce:	b25b      	sxtb	r3, r3
    45d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    45d4:	2001      	movs	r0, #1
    45d6:	e7c6      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    45d8:	2000      	movs	r0, #0
    45da:	e7c4      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    45dc:	2001      	movs	r0, #1
    45de:	e7c2      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
    45e0:	2001      	movs	r0, #1
    45e2:	e7c0      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
    45e4:	2001      	movs	r0, #1
    45e6:	e7be      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
    45e8:	2001      	movs	r0, #1
    45ea:	e7bc      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
    45ec:	2001      	movs	r0, #1
    45ee:	e7ba      	b.n	4566 <xQueueGenericSendFromISR+0x6e>
    45f0:	00003e9d 	.word	0x00003e9d
    45f4:	00004035 	.word	0x00004035
    45f8:	000040b5 	.word	0x000040b5
    45fc:	000051c1 	.word	0x000051c1

00004600 <xQueueReceive>:
{
    4600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4604:	b084      	sub	sp, #16
    4606:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    4608:	b180      	cbz	r0, 462c <xQueueReceive+0x2c>
    460a:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    460c:	b1b9      	cbz	r1, 463e <xQueueReceive+0x3e>
    460e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4610:	4b50      	ldr	r3, [pc, #320]	; (4754 <xQueueReceive+0x154>)
    4612:	4798      	blx	r3
    4614:	b9f8      	cbnz	r0, 4656 <xQueueReceive+0x56>
    4616:	9b01      	ldr	r3, [sp, #4]
    4618:	b32b      	cbz	r3, 4666 <xQueueReceive+0x66>
    461a:	f04f 0380 	mov.w	r3, #128	; 0x80
    461e:	f383 8811 	msr	BASEPRI, r3
    4622:	f3bf 8f6f 	isb	sy
    4626:	f3bf 8f4f 	dsb	sy
    462a:	e7fe      	b.n	462a <xQueueReceive+0x2a>
    462c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4630:	f383 8811 	msr	BASEPRI, r3
    4634:	f3bf 8f6f 	isb	sy
    4638:	f3bf 8f4f 	dsb	sy
    463c:	e7fe      	b.n	463c <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    463e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4640:	2b00      	cmp	r3, #0
    4642:	d0e4      	beq.n	460e <xQueueReceive+0xe>
    4644:	f04f 0380 	mov.w	r3, #128	; 0x80
    4648:	f383 8811 	msr	BASEPRI, r3
    464c:	f3bf 8f6f 	isb	sy
    4650:	f3bf 8f4f 	dsb	sy
    4654:	e7fe      	b.n	4654 <xQueueReceive+0x54>
    4656:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4658:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4780 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    465c:	f8df a124 	ldr.w	sl, [pc, #292]	; 4784 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    4660:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4760 <xQueueReceive+0x160>
    4664:	e029      	b.n	46ba <xQueueReceive+0xba>
    4666:	2700      	movs	r7, #0
    4668:	e7f6      	b.n	4658 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    466a:	4631      	mov	r1, r6
    466c:	4620      	mov	r0, r4
    466e:	4b3a      	ldr	r3, [pc, #232]	; (4758 <xQueueReceive+0x158>)
    4670:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4672:	3d01      	subs	r5, #1
    4674:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4676:	6923      	ldr	r3, [r4, #16]
    4678:	b163      	cbz	r3, 4694 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    467a:	f104 0010 	add.w	r0, r4, #16
    467e:	4b37      	ldr	r3, [pc, #220]	; (475c <xQueueReceive+0x15c>)
    4680:	4798      	blx	r3
    4682:	b138      	cbz	r0, 4694 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    4684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4688:	4b35      	ldr	r3, [pc, #212]	; (4760 <xQueueReceive+0x160>)
    468a:	601a      	str	r2, [r3, #0]
    468c:	f3bf 8f4f 	dsb	sy
    4690:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4694:	4b33      	ldr	r3, [pc, #204]	; (4764 <xQueueReceive+0x164>)
    4696:	4798      	blx	r3
				return pdPASS;
    4698:	2001      	movs	r0, #1
}
    469a:	b004      	add	sp, #16
    469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    46a0:	4b30      	ldr	r3, [pc, #192]	; (4764 <xQueueReceive+0x164>)
    46a2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    46a4:	2000      	movs	r0, #0
    46a6:	e7f8      	b.n	469a <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    46a8:	a802      	add	r0, sp, #8
    46aa:	47d0      	blx	sl
    46ac:	e00e      	b.n	46cc <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    46ae:	4620      	mov	r0, r4
    46b0:	4b2d      	ldr	r3, [pc, #180]	; (4768 <xQueueReceive+0x168>)
    46b2:	4798      	blx	r3
				(void)xTaskResumeAll();
    46b4:	4b2d      	ldr	r3, [pc, #180]	; (476c <xQueueReceive+0x16c>)
    46b6:	4798      	blx	r3
    46b8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    46ba:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    46bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    46be:	2d00      	cmp	r5, #0
    46c0:	d1d3      	bne.n	466a <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    46c2:	9b01      	ldr	r3, [sp, #4]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d0eb      	beq.n	46a0 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    46c8:	2f00      	cmp	r7, #0
    46ca:	d0ed      	beq.n	46a8 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    46cc:	4b25      	ldr	r3, [pc, #148]	; (4764 <xQueueReceive+0x164>)
    46ce:	4798      	blx	r3
		vTaskSuspendAll();
    46d0:	4b27      	ldr	r3, [pc, #156]	; (4770 <xQueueReceive+0x170>)
    46d2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    46d4:	47c0      	blx	r8
    46d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    46da:	b25b      	sxtb	r3, r3
    46dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    46e0:	bf04      	itt	eq
    46e2:	2300      	moveq	r3, #0
    46e4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    46e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    46ec:	b25b      	sxtb	r3, r3
    46ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    46f2:	bf04      	itt	eq
    46f4:	2300      	moveq	r3, #0
    46f6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    46fa:	4b1a      	ldr	r3, [pc, #104]	; (4764 <xQueueReceive+0x164>)
    46fc:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    46fe:	a901      	add	r1, sp, #4
    4700:	a802      	add	r0, sp, #8
    4702:	4b1c      	ldr	r3, [pc, #112]	; (4774 <xQueueReceive+0x174>)
    4704:	4798      	blx	r3
    4706:	b9c8      	cbnz	r0, 473c <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4708:	4620      	mov	r0, r4
    470a:	4b1b      	ldr	r3, [pc, #108]	; (4778 <xQueueReceive+0x178>)
    470c:	4798      	blx	r3
    470e:	2800      	cmp	r0, #0
    4710:	d0cd      	beq.n	46ae <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4712:	9901      	ldr	r1, [sp, #4]
    4714:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4718:	4b18      	ldr	r3, [pc, #96]	; (477c <xQueueReceive+0x17c>)
    471a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    471c:	4620      	mov	r0, r4
    471e:	4b12      	ldr	r3, [pc, #72]	; (4768 <xQueueReceive+0x168>)
    4720:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4722:	4b12      	ldr	r3, [pc, #72]	; (476c <xQueueReceive+0x16c>)
    4724:	4798      	blx	r3
    4726:	2800      	cmp	r0, #0
    4728:	d1c6      	bne.n	46b8 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    472a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    472e:	f8c9 3000 	str.w	r3, [r9]
    4732:	f3bf 8f4f 	dsb	sy
    4736:	f3bf 8f6f 	isb	sy
    473a:	e7bd      	b.n	46b8 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    473c:	4620      	mov	r0, r4
    473e:	4b0a      	ldr	r3, [pc, #40]	; (4768 <xQueueReceive+0x168>)
    4740:	4798      	blx	r3
			(void)xTaskResumeAll();
    4742:	4b0a      	ldr	r3, [pc, #40]	; (476c <xQueueReceive+0x16c>)
    4744:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4746:	4620      	mov	r0, r4
    4748:	4b0b      	ldr	r3, [pc, #44]	; (4778 <xQueueReceive+0x178>)
    474a:	4798      	blx	r3
    474c:	2800      	cmp	r0, #0
    474e:	d0b3      	beq.n	46b8 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    4750:	2000      	movs	r0, #0
    4752:	e7a2      	b.n	469a <xQueueReceive+0x9a>
    4754:	00005301 	.word	0x00005301
    4758:	00004139 	.word	0x00004139
    475c:	000051c1 	.word	0x000051c1
    4760:	e000ed04 	.word	0xe000ed04
    4764:	00003c89 	.word	0x00003c89
    4768:	00004161 	.word	0x00004161
    476c:	00004e75 	.word	0x00004e75
    4770:	00004d2d 	.word	0x00004d2d
    4774:	00005265 	.word	0x00005265
    4778:	00004015 	.word	0x00004015
    477c:	00005141 	.word	0x00005141
    4780:	00003c45 	.word	0x00003c45
    4784:	00005251 	.word	0x00005251

00004788 <xQueueSemaphoreTake>:
{
    4788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    478c:	b085      	sub	sp, #20
    478e:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    4790:	b158      	cbz	r0, 47aa <xQueueSemaphoreTake+0x22>
    4792:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    4794:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4796:	b18b      	cbz	r3, 47bc <xQueueSemaphoreTake+0x34>
    4798:	f04f 0380 	mov.w	r3, #128	; 0x80
    479c:	f383 8811 	msr	BASEPRI, r3
    47a0:	f3bf 8f6f 	isb	sy
    47a4:	f3bf 8f4f 	dsb	sy
    47a8:	e7fe      	b.n	47a8 <xQueueSemaphoreTake+0x20>
    47aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    47ae:	f383 8811 	msr	BASEPRI, r3
    47b2:	f3bf 8f6f 	isb	sy
    47b6:	f3bf 8f4f 	dsb	sy
    47ba:	e7fe      	b.n	47ba <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    47bc:	4b5b      	ldr	r3, [pc, #364]	; (492c <xQueueSemaphoreTake+0x1a4>)
    47be:	4798      	blx	r3
    47c0:	b950      	cbnz	r0, 47d8 <xQueueSemaphoreTake+0x50>
    47c2:	9b01      	ldr	r3, [sp, #4]
    47c4:	b183      	cbz	r3, 47e8 <xQueueSemaphoreTake+0x60>
    47c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    47ca:	f383 8811 	msr	BASEPRI, r3
    47ce:	f3bf 8f6f 	isb	sy
    47d2:	f3bf 8f4f 	dsb	sy
    47d6:	e7fe      	b.n	47d6 <xQueueSemaphoreTake+0x4e>
    47d8:	2500      	movs	r5, #0
    47da:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    47dc:	4e54      	ldr	r6, [pc, #336]	; (4930 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    47de:	f8df 9184 	ldr.w	r9, [pc, #388]	; 4964 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    47e2:	f8df 8158 	ldr.w	r8, [pc, #344]	; 493c <xQueueSemaphoreTake+0x1b4>
    47e6:	e048      	b.n	487a <xQueueSemaphoreTake+0xf2>
    47e8:	2500      	movs	r5, #0
    47ea:	462f      	mov	r7, r5
    47ec:	e7f6      	b.n	47dc <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    47ee:	3b01      	subs	r3, #1
    47f0:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    47f2:	6823      	ldr	r3, [r4, #0]
    47f4:	b913      	cbnz	r3, 47fc <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    47f6:	4b4f      	ldr	r3, [pc, #316]	; (4934 <xQueueSemaphoreTake+0x1ac>)
    47f8:	4798      	blx	r3
    47fa:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    47fc:	6923      	ldr	r3, [r4, #16]
    47fe:	b163      	cbz	r3, 481a <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4800:	f104 0010 	add.w	r0, r4, #16
    4804:	4b4c      	ldr	r3, [pc, #304]	; (4938 <xQueueSemaphoreTake+0x1b0>)
    4806:	4798      	blx	r3
    4808:	b138      	cbz	r0, 481a <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    480e:	4b4b      	ldr	r3, [pc, #300]	; (493c <xQueueSemaphoreTake+0x1b4>)
    4810:	601a      	str	r2, [r3, #0]
    4812:	f3bf 8f4f 	dsb	sy
    4816:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    481a:	4b49      	ldr	r3, [pc, #292]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    481c:	4798      	blx	r3
				return pdPASS;
    481e:	2501      	movs	r5, #1
}
    4820:	4628      	mov	r0, r5
    4822:	b005      	add	sp, #20
    4824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    4828:	b145      	cbz	r5, 483c <xQueueSemaphoreTake+0xb4>
    482a:	f04f 0380 	mov.w	r3, #128	; 0x80
    482e:	f383 8811 	msr	BASEPRI, r3
    4832:	f3bf 8f6f 	isb	sy
    4836:	f3bf 8f4f 	dsb	sy
    483a:	e7fe      	b.n	483a <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    483c:	4b40      	ldr	r3, [pc, #256]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    483e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4840:	e7ee      	b.n	4820 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4842:	a802      	add	r0, sp, #8
    4844:	47c8      	blx	r9
    4846:	e021      	b.n	488c <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    4848:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    484a:	6860      	ldr	r0, [r4, #4]
    484c:	4b3d      	ldr	r3, [pc, #244]	; (4944 <xQueueSemaphoreTake+0x1bc>)
    484e:	4798      	blx	r3
    4850:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    4852:	4b3b      	ldr	r3, [pc, #236]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    4854:	4798      	blx	r3
    4856:	e040      	b.n	48da <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    4858:	4620      	mov	r0, r4
    485a:	4b3b      	ldr	r3, [pc, #236]	; (4948 <xQueueSemaphoreTake+0x1c0>)
    485c:	4798      	blx	r3
				(void)xTaskResumeAll();
    485e:	4b3b      	ldr	r3, [pc, #236]	; (494c <xQueueSemaphoreTake+0x1c4>)
    4860:	4798      	blx	r3
    4862:	e009      	b.n	4878 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    4864:	4620      	mov	r0, r4
    4866:	4b38      	ldr	r3, [pc, #224]	; (4948 <xQueueSemaphoreTake+0x1c0>)
    4868:	4798      	blx	r3
			(void)xTaskResumeAll();
    486a:	4b38      	ldr	r3, [pc, #224]	; (494c <xQueueSemaphoreTake+0x1c4>)
    486c:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    486e:	4620      	mov	r0, r4
    4870:	4b37      	ldr	r3, [pc, #220]	; (4950 <xQueueSemaphoreTake+0x1c8>)
    4872:	4798      	blx	r3
    4874:	2800      	cmp	r0, #0
    4876:	d145      	bne.n	4904 <xQueueSemaphoreTake+0x17c>
    4878:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    487a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    487c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    487e:	2b00      	cmp	r3, #0
    4880:	d1b5      	bne.n	47ee <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    4882:	9b01      	ldr	r3, [sp, #4]
    4884:	2b00      	cmp	r3, #0
    4886:	d0cf      	beq.n	4828 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    4888:	2f00      	cmp	r7, #0
    488a:	d0da      	beq.n	4842 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    488c:	4b2c      	ldr	r3, [pc, #176]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    488e:	4798      	blx	r3
		vTaskSuspendAll();
    4890:	4b30      	ldr	r3, [pc, #192]	; (4954 <xQueueSemaphoreTake+0x1cc>)
    4892:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4894:	47b0      	blx	r6
    4896:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    489a:	b25b      	sxtb	r3, r3
    489c:	f1b3 3fff 	cmp.w	r3, #4294967295
    48a0:	bf04      	itt	eq
    48a2:	2300      	moveq	r3, #0
    48a4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    48a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    48ac:	b25b      	sxtb	r3, r3
    48ae:	f1b3 3fff 	cmp.w	r3, #4294967295
    48b2:	bf04      	itt	eq
    48b4:	2300      	moveq	r3, #0
    48b6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    48ba:	4b21      	ldr	r3, [pc, #132]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    48bc:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    48be:	a901      	add	r1, sp, #4
    48c0:	a802      	add	r0, sp, #8
    48c2:	4b25      	ldr	r3, [pc, #148]	; (4958 <xQueueSemaphoreTake+0x1d0>)
    48c4:	4798      	blx	r3
    48c6:	2800      	cmp	r0, #0
    48c8:	d1cc      	bne.n	4864 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    48ca:	4620      	mov	r0, r4
    48cc:	4b20      	ldr	r3, [pc, #128]	; (4950 <xQueueSemaphoreTake+0x1c8>)
    48ce:	4798      	blx	r3
    48d0:	2800      	cmp	r0, #0
    48d2:	d0c1      	beq.n	4858 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    48d4:	6823      	ldr	r3, [r4, #0]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d0b6      	beq.n	4848 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    48da:	9901      	ldr	r1, [sp, #4]
    48dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    48e0:	4b1e      	ldr	r3, [pc, #120]	; (495c <xQueueSemaphoreTake+0x1d4>)
    48e2:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    48e4:	4620      	mov	r0, r4
    48e6:	4b18      	ldr	r3, [pc, #96]	; (4948 <xQueueSemaphoreTake+0x1c0>)
    48e8:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    48ea:	4b18      	ldr	r3, [pc, #96]	; (494c <xQueueSemaphoreTake+0x1c4>)
    48ec:	4798      	blx	r3
    48ee:	2800      	cmp	r0, #0
    48f0:	d1c2      	bne.n	4878 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    48f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    48f6:	f8c8 3000 	str.w	r3, [r8]
    48fa:	f3bf 8f4f 	dsb	sy
    48fe:	f3bf 8f6f 	isb	sy
    4902:	e7b9      	b.n	4878 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4904:	2d00      	cmp	r5, #0
    4906:	d08b      	beq.n	4820 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    4908:	4b09      	ldr	r3, [pc, #36]	; (4930 <xQueueSemaphoreTake+0x1a8>)
    490a:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    490c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    490e:	b153      	cbz	r3, 4926 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4910:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4912:	6819      	ldr	r1, [r3, #0]
    4914:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    4918:	6860      	ldr	r0, [r4, #4]
    491a:	4b11      	ldr	r3, [pc, #68]	; (4960 <xQueueSemaphoreTake+0x1d8>)
    491c:	4798      	blx	r3
						taskEXIT_CRITICAL();
    491e:	4b08      	ldr	r3, [pc, #32]	; (4940 <xQueueSemaphoreTake+0x1b8>)
    4920:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4922:	2500      	movs	r5, #0
    4924:	e77c      	b.n	4820 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    4926:	2100      	movs	r1, #0
    4928:	e7f6      	b.n	4918 <xQueueSemaphoreTake+0x190>
    492a:	bf00      	nop
    492c:	00005301 	.word	0x00005301
    4930:	00003c45 	.word	0x00003c45
    4934:	0000550d 	.word	0x0000550d
    4938:	000051c1 	.word	0x000051c1
    493c:	e000ed04 	.word	0xe000ed04
    4940:	00003c89 	.word	0x00003c89
    4944:	00005321 	.word	0x00005321
    4948:	00004161 	.word	0x00004161
    494c:	00004e75 	.word	0x00004e75
    4950:	00004015 	.word	0x00004015
    4954:	00004d2d 	.word	0x00004d2d
    4958:	00005265 	.word	0x00005265
    495c:	00005141 	.word	0x00005141
    4960:	00005461 	.word	0x00005461
    4964:	00005251 	.word	0x00005251

00004968 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    4968:	b940      	cbnz	r0, 497c <uxQueueMessagesWaiting+0x14>
    496a:	f04f 0380 	mov.w	r3, #128	; 0x80
    496e:	f383 8811 	msr	BASEPRI, r3
    4972:	f3bf 8f6f 	isb	sy
    4976:	f3bf 8f4f 	dsb	sy
    497a:	e7fe      	b.n	497a <uxQueueMessagesWaiting+0x12>
{
    497c:	b510      	push	{r4, lr}
    497e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    4980:	4b03      	ldr	r3, [pc, #12]	; (4990 <uxQueueMessagesWaiting+0x28>)
    4982:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    4984:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    4986:	4b03      	ldr	r3, [pc, #12]	; (4994 <uxQueueMessagesWaiting+0x2c>)
    4988:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    498a:	4620      	mov	r0, r4
    498c:	bd10      	pop	{r4, pc}
    498e:	bf00      	nop
    4990:	00003c45 	.word	0x00003c45
    4994:	00003c89 	.word	0x00003c89

00004998 <vQueueWaitForMessageRestricted>:
{
    4998:	b570      	push	{r4, r5, r6, lr}
    499a:	4604      	mov	r4, r0
    499c:	460d      	mov	r5, r1
    499e:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    49a0:	4b11      	ldr	r3, [pc, #68]	; (49e8 <vQueueWaitForMessageRestricted+0x50>)
    49a2:	4798      	blx	r3
    49a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    49a8:	b25b      	sxtb	r3, r3
    49aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    49ae:	bf04      	itt	eq
    49b0:	2300      	moveq	r3, #0
    49b2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    49b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    49ba:	b25b      	sxtb	r3, r3
    49bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    49c0:	bf04      	itt	eq
    49c2:	2300      	moveq	r3, #0
    49c4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    49c8:	4b08      	ldr	r3, [pc, #32]	; (49ec <vQueueWaitForMessageRestricted+0x54>)
    49ca:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    49cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    49ce:	b11b      	cbz	r3, 49d8 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    49d0:	4620      	mov	r0, r4
    49d2:	4b07      	ldr	r3, [pc, #28]	; (49f0 <vQueueWaitForMessageRestricted+0x58>)
    49d4:	4798      	blx	r3
    49d6:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    49d8:	4632      	mov	r2, r6
    49da:	4629      	mov	r1, r5
    49dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    49e0:	4b04      	ldr	r3, [pc, #16]	; (49f4 <vQueueWaitForMessageRestricted+0x5c>)
    49e2:	4798      	blx	r3
    49e4:	e7f4      	b.n	49d0 <vQueueWaitForMessageRestricted+0x38>
    49e6:	bf00      	nop
    49e8:	00003c45 	.word	0x00003c45
    49ec:	00003c89 	.word	0x00003c89
    49f0:	00004161 	.word	0x00004161
    49f4:	0000517d 	.word	0x0000517d

000049f8 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    49f8:	4a06      	ldr	r2, [pc, #24]	; (4a14 <prvIdleTask+0x1c>)
				taskYIELD();
    49fa:	4807      	ldr	r0, [pc, #28]	; (4a18 <prvIdleTask+0x20>)
    49fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4a00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4a02:	2b01      	cmp	r3, #1
    4a04:	d9fc      	bls.n	4a00 <prvIdleTask+0x8>
				taskYIELD();
    4a06:	6001      	str	r1, [r0, #0]
    4a08:	f3bf 8f4f 	dsb	sy
    4a0c:	f3bf 8f6f 	isb	sy
    4a10:	e7f6      	b.n	4a00 <prvIdleTask+0x8>
    4a12:	bf00      	nop
    4a14:	2000331c 	.word	0x2000331c
    4a18:	e000ed04 	.word	0xe000ed04

00004a1c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    4a1c:	4b09      	ldr	r3, [pc, #36]	; (4a44 <prvResetNextTaskUnblockTime+0x28>)
    4a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	b143      	cbz	r3, 4a38 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4a26:	4b07      	ldr	r3, [pc, #28]	; (4a44 <prvResetNextTaskUnblockTime+0x28>)
    4a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    4a2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    4a2e:	68d2      	ldr	r2, [r2, #12]
    4a30:	6852      	ldr	r2, [r2, #4]
    4a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4a36:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    4a38:	f04f 32ff 	mov.w	r2, #4294967295
    4a3c:	4b01      	ldr	r3, [pc, #4]	; (4a44 <prvResetNextTaskUnblockTime+0x28>)
    4a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4a42:	4770      	bx	lr
    4a44:	2000331c 	.word	0x2000331c

00004a48 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    4a48:	b570      	push	{r4, r5, r6, lr}
    4a4a:	4604      	mov	r4, r0
    4a4c:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    4a4e:	4b1a      	ldr	r3, [pc, #104]	; (4ab8 <prvAddCurrentTaskToDelayedList+0x70>)
    4a50:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    4a54:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4a58:	3004      	adds	r0, #4
    4a5a:	4b18      	ldr	r3, [pc, #96]	; (4abc <prvAddCurrentTaskToDelayedList+0x74>)
    4a5c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4a5e:	f1b4 3fff 	cmp.w	r4, #4294967295
    4a62:	d016      	beq.n	4a92 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    4a64:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    4a66:	4b14      	ldr	r3, [pc, #80]	; (4ab8 <prvAddCurrentTaskToDelayedList+0x70>)
    4a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4a6c:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    4a6e:	42a5      	cmp	r5, r4
    4a70:	d818      	bhi.n	4aa4 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4a72:	4d11      	ldr	r5, [pc, #68]	; (4ab8 <prvAddCurrentTaskToDelayedList+0x70>)
    4a74:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    4a78:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    4a7c:	3104      	adds	r1, #4
    4a7e:	4b10      	ldr	r3, [pc, #64]	; (4ac0 <prvAddCurrentTaskToDelayedList+0x78>)
    4a80:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    4a82:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    4a86:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    4a88:	bf3c      	itt	cc
    4a8a:	462b      	movcc	r3, r5
    4a8c:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    4a90:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4a92:	2e00      	cmp	r6, #0
    4a94:	d0e6      	beq.n	4a64 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    4a96:	4808      	ldr	r0, [pc, #32]	; (4ab8 <prvAddCurrentTaskToDelayedList+0x70>)
    4a98:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    4a9c:	3104      	adds	r1, #4
    4a9e:	4b09      	ldr	r3, [pc, #36]	; (4ac4 <prvAddCurrentTaskToDelayedList+0x7c>)
    4aa0:	4798      	blx	r3
    4aa2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4aa4:	4b04      	ldr	r3, [pc, #16]	; (4ab8 <prvAddCurrentTaskToDelayedList+0x70>)
    4aa6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    4aaa:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4aae:	3104      	adds	r1, #4
    4ab0:	4b03      	ldr	r3, [pc, #12]	; (4ac0 <prvAddCurrentTaskToDelayedList+0x78>)
    4ab2:	4798      	blx	r3
    4ab4:	bd70      	pop	{r4, r5, r6, pc}
    4ab6:	bf00      	nop
    4ab8:	2000331c 	.word	0x2000331c
    4abc:	00003b51 	.word	0x00003b51
    4ac0:	00003b1d 	.word	0x00003b1d
    4ac4:	00003b05 	.word	0x00003b05

00004ac8 <xTaskCreate>:
{
    4ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4acc:	b083      	sub	sp, #12
    4ace:	4683      	mov	fp, r0
    4ad0:	460d      	mov	r5, r1
    4ad2:	9301      	str	r3, [sp, #4]
    4ad4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    4ad8:	0096      	lsls	r6, r2, #2
    4ada:	4630      	mov	r0, r6
    4adc:	4b66      	ldr	r3, [pc, #408]	; (4c78 <xTaskCreate+0x1b0>)
    4ade:	4798      	blx	r3
		if (pxStack != NULL) {
    4ae0:	2800      	cmp	r0, #0
    4ae2:	f000 8096 	beq.w	4c12 <xTaskCreate+0x14a>
    4ae6:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    4ae8:	2054      	movs	r0, #84	; 0x54
    4aea:	4b63      	ldr	r3, [pc, #396]	; (4c78 <xTaskCreate+0x1b0>)
    4aec:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    4aee:	4604      	mov	r4, r0
    4af0:	2800      	cmp	r0, #0
    4af2:	f000 808b 	beq.w	4c0c <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    4af6:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    4af8:	4632      	mov	r2, r6
    4afa:	21a5      	movs	r1, #165	; 0xa5
    4afc:	4638      	mov	r0, r7
    4afe:	4b5f      	ldr	r3, [pc, #380]	; (4c7c <xTaskCreate+0x1b4>)
    4b00:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4b02:	3e04      	subs	r6, #4
    4b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4b06:	441e      	add	r6, r3
		                      & (~(
    4b08:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4b0c:	782b      	ldrb	r3, [r5, #0]
    4b0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4b12:	782b      	ldrb	r3, [r5, #0]
    4b14:	b15b      	cbz	r3, 4b2e <xTaskCreate+0x66>
    4b16:	462b      	mov	r3, r5
    4b18:	f104 0235 	add.w	r2, r4, #53	; 0x35
    4b1c:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4b1e:	7858      	ldrb	r0, [r3, #1]
    4b20:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    4b24:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4b28:	b108      	cbz	r0, 4b2e <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    4b2a:	4299      	cmp	r1, r3
    4b2c:	d1f7      	bne.n	4b1e <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    4b2e:	2700      	movs	r7, #0
    4b30:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    4b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4b36:	2d04      	cmp	r5, #4
    4b38:	bf28      	it	cs
    4b3a:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    4b3c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    4b3e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    4b40:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    4b42:	f104 0804 	add.w	r8, r4, #4
    4b46:	4640      	mov	r0, r8
    4b48:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4ca0 <xTaskCreate+0x1d8>
    4b4c:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    4b4e:	f104 0018 	add.w	r0, r4, #24
    4b52:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    4b54:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    4b56:	f1c5 0505 	rsb	r5, r5, #5
    4b5a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    4b5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    4b5e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    4b60:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    4b64:	9a01      	ldr	r2, [sp, #4]
    4b66:	4659      	mov	r1, fp
    4b68:	4630      	mov	r0, r6
    4b6a:	4b45      	ldr	r3, [pc, #276]	; (4c80 <xTaskCreate+0x1b8>)
    4b6c:	4798      	blx	r3
    4b6e:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    4b70:	f1ba 0f00 	cmp.w	sl, #0
    4b74:	d001      	beq.n	4b7a <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    4b76:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    4b7a:	4b42      	ldr	r3, [pc, #264]	; (4c84 <xTaskCreate+0x1bc>)
    4b7c:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    4b7e:	4b42      	ldr	r3, [pc, #264]	; (4c88 <xTaskCreate+0x1c0>)
    4b80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    4b84:	3201      	adds	r2, #1
    4b86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    4b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d042      	beq.n	4c18 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    4b92:	4b3d      	ldr	r3, [pc, #244]	; (4c88 <xTaskCreate+0x1c0>)
    4b94:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4b98:	b94b      	cbnz	r3, 4bae <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    4b9a:	4b3b      	ldr	r3, [pc, #236]	; (4c88 <xTaskCreate+0x1c0>)
    4b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4ba4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    4ba6:	bf9c      	itt	ls
    4ba8:	4b37      	ldrls	r3, [pc, #220]	; (4c88 <xTaskCreate+0x1c0>)
    4baa:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    4bae:	4a36      	ldr	r2, [pc, #216]	; (4c88 <xTaskCreate+0x1c0>)
    4bb0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4bb4:	3301      	adds	r3, #1
    4bb6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    4bba:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    4bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bbe:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4bc2:	4293      	cmp	r3, r2
    4bc4:	bf84      	itt	hi
    4bc6:	4a30      	ldrhi	r2, [pc, #192]	; (4c88 <xTaskCreate+0x1c0>)
    4bc8:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    4bcc:	4d2e      	ldr	r5, [pc, #184]	; (4c88 <xTaskCreate+0x1c0>)
    4bce:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4bd6:	4641      	mov	r1, r8
    4bd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4bdc:	4b2b      	ldr	r3, [pc, #172]	; (4c8c <xTaskCreate+0x1c4>)
    4bde:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4be0:	4b2b      	ldr	r3, [pc, #172]	; (4c90 <xTaskCreate+0x1c8>)
    4be2:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4be4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    4be8:	2b00      	cmp	r3, #0
    4bea:	d03f      	beq.n	4c6c <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    4bec:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bf4:	429a      	cmp	r2, r3
    4bf6:	d23d      	bcs.n	4c74 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    4bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4bfc:	4b25      	ldr	r3, [pc, #148]	; (4c94 <xTaskCreate+0x1cc>)
    4bfe:	601a      	str	r2, [r3, #0]
    4c00:	f3bf 8f4f 	dsb	sy
    4c04:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    4c08:	2001      	movs	r0, #1
    4c0a:	e030      	b.n	4c6e <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    4c0c:	4638      	mov	r0, r7
    4c0e:	4b22      	ldr	r3, [pc, #136]	; (4c98 <xTaskCreate+0x1d0>)
    4c10:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4c12:	f04f 30ff 	mov.w	r0, #4294967295
    4c16:	e02a      	b.n	4c6e <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    4c18:	4b1b      	ldr	r3, [pc, #108]	; (4c88 <xTaskCreate+0x1c0>)
    4c1a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    4c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4c22:	2b01      	cmp	r3, #1
    4c24:	d1c3      	bne.n	4bae <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    4c26:	4d18      	ldr	r5, [pc, #96]	; (4c88 <xTaskCreate+0x1c0>)
    4c28:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4c2c:	4e1b      	ldr	r6, [pc, #108]	; (4c9c <xTaskCreate+0x1d4>)
    4c2e:	47b0      	blx	r6
    4c30:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    4c34:	47b0      	blx	r6
    4c36:	f105 0050 	add.w	r0, r5, #80	; 0x50
    4c3a:	47b0      	blx	r6
    4c3c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    4c40:	47b0      	blx	r6
    4c42:	f105 0078 	add.w	r0, r5, #120	; 0x78
    4c46:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    4c48:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    4c4c:	4648      	mov	r0, r9
    4c4e:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    4c50:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    4c54:	4638      	mov	r0, r7
    4c56:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    4c58:	f105 0014 	add.w	r0, r5, #20
    4c5c:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    4c5e:	4628      	mov	r0, r5
    4c60:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    4c62:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4c66:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    4c6a:	e7a0      	b.n	4bae <xTaskCreate+0xe6>
		xReturn = pdPASS;
    4c6c:	2001      	movs	r0, #1
}
    4c6e:	b003      	add	sp, #12
    4c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    4c74:	2001      	movs	r0, #1
	return xReturn;
    4c76:	e7fa      	b.n	4c6e <xTaskCreate+0x1a6>
    4c78:	00003ef5 	.word	0x00003ef5
    4c7c:	00005b7d 	.word	0x00005b7d
    4c80:	00003bf5 	.word	0x00003bf5
    4c84:	00003c45 	.word	0x00003c45
    4c88:	2000331c 	.word	0x2000331c
    4c8c:	00003b05 	.word	0x00003b05
    4c90:	00003c89 	.word	0x00003c89
    4c94:	e000ed04 	.word	0xe000ed04
    4c98:	00003fc9 	.word	0x00003fc9
    4c9c:	00003ae9 	.word	0x00003ae9
    4ca0:	00003aff 	.word	0x00003aff

00004ca4 <vTaskStartScheduler>:
{
    4ca4:	b510      	push	{r4, lr}
    4ca6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    4ca8:	4b19      	ldr	r3, [pc, #100]	; (4d10 <vTaskStartScheduler+0x6c>)
    4caa:	9301      	str	r3, [sp, #4]
    4cac:	2300      	movs	r3, #0
    4cae:	9300      	str	r3, [sp, #0]
    4cb0:	2280      	movs	r2, #128	; 0x80
    4cb2:	4918      	ldr	r1, [pc, #96]	; (4d14 <vTaskStartScheduler+0x70>)
    4cb4:	4818      	ldr	r0, [pc, #96]	; (4d18 <vTaskStartScheduler+0x74>)
    4cb6:	4c19      	ldr	r4, [pc, #100]	; (4d1c <vTaskStartScheduler+0x78>)
    4cb8:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    4cba:	2801      	cmp	r0, #1
    4cbc:	d004      	beq.n	4cc8 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    4cbe:	f1b0 3fff 	cmp.w	r0, #4294967295
    4cc2:	d01b      	beq.n	4cfc <vTaskStartScheduler+0x58>
}
    4cc4:	b002      	add	sp, #8
    4cc6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    4cc8:	4b15      	ldr	r3, [pc, #84]	; (4d20 <vTaskStartScheduler+0x7c>)
    4cca:	4798      	blx	r3
	if (xReturn == pdPASS) {
    4ccc:	2801      	cmp	r0, #1
    4cce:	d1f6      	bne.n	4cbe <vTaskStartScheduler+0x1a>
    4cd0:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cd4:	f383 8811 	msr	BASEPRI, r3
    4cd8:	f3bf 8f6f 	isb	sy
    4cdc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4ce0:	4b10      	ldr	r3, [pc, #64]	; (4d24 <vTaskStartScheduler+0x80>)
    4ce2:	f04f 32ff 	mov.w	r2, #4294967295
    4ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    4cea:	2201      	movs	r2, #1
    4cec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4cf0:	2200      	movs	r2, #0
    4cf2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    4cf6:	4b0c      	ldr	r3, [pc, #48]	; (4d28 <vTaskStartScheduler+0x84>)
    4cf8:	4798      	blx	r3
    4cfa:	e7e3      	b.n	4cc4 <vTaskStartScheduler+0x20>
    4cfc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d00:	f383 8811 	msr	BASEPRI, r3
    4d04:	f3bf 8f6f 	isb	sy
    4d08:	f3bf 8f4f 	dsb	sy
    4d0c:	e7fe      	b.n	4d0c <vTaskStartScheduler+0x68>
    4d0e:	bf00      	nop
    4d10:	200033f8 	.word	0x200033f8
    4d14:	00007874 	.word	0x00007874
    4d18:	000049f9 	.word	0x000049f9
    4d1c:	00004ac9 	.word	0x00004ac9
    4d20:	00005799 	.word	0x00005799
    4d24:	2000331c 	.word	0x2000331c
    4d28:	00003d79 	.word	0x00003d79

00004d2c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    4d2c:	4a03      	ldr	r2, [pc, #12]	; (4d3c <vTaskSuspendAll+0x10>)
    4d2e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    4d32:	3301      	adds	r3, #1
    4d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop
    4d3c:	2000331c 	.word	0x2000331c

00004d40 <xTaskGetTickCount>:
		xTicks = xTickCount;
    4d40:	4b01      	ldr	r3, [pc, #4]	; (4d48 <xTaskGetTickCount+0x8>)
    4d42:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    4d46:	4770      	bx	lr
    4d48:	2000331c 	.word	0x2000331c

00004d4c <xTaskIncrementTick>:
{
    4d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4d50:	4b44      	ldr	r3, [pc, #272]	; (4e64 <xTaskIncrementTick+0x118>)
    4d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4d56:	2b00      	cmp	r3, #0
    4d58:	d173      	bne.n	4e42 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    4d5a:	4b42      	ldr	r3, [pc, #264]	; (4e64 <xTaskIncrementTick+0x118>)
    4d5c:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    4d60:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    4d62:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    4d66:	b9e6      	cbnz	r6, 4da2 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    4d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	b143      	cbz	r3, 4d82 <xTaskIncrementTick+0x36>
    4d70:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d74:	f383 8811 	msr	BASEPRI, r3
    4d78:	f3bf 8f6f 	isb	sy
    4d7c:	f3bf 8f4f 	dsb	sy
    4d80:	e7fe      	b.n	4d80 <xTaskIncrementTick+0x34>
    4d82:	4b38      	ldr	r3, [pc, #224]	; (4e64 <xTaskIncrementTick+0x118>)
    4d84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    4d88:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    4d8c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    4d90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4d94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4d98:	3201      	adds	r2, #1
    4d9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    4d9e:	4b32      	ldr	r3, [pc, #200]	; (4e68 <xTaskIncrementTick+0x11c>)
    4da0:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4da2:	4b30      	ldr	r3, [pc, #192]	; (4e64 <xTaskIncrementTick+0x118>)
    4da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    4da8:	429e      	cmp	r6, r3
    4daa:	d20d      	bcs.n	4dc8 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    4dac:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    4dae:	4b2d      	ldr	r3, [pc, #180]	; (4e64 <xTaskIncrementTick+0x118>)
    4db0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4db4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4db6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4dba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4dc0:	2b02      	cmp	r3, #2
    4dc2:	bf28      	it	cs
    4dc4:	2401      	movcs	r4, #1
    4dc6:	e043      	b.n	4e50 <xTaskIncrementTick+0x104>
    4dc8:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    4dca:	4d26      	ldr	r5, [pc, #152]	; (4e64 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4dcc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4e70 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4dd0:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4dd4:	e021      	b.n	4e1a <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4dd6:	f04f 32ff 	mov.w	r2, #4294967295
    4dda:	4b22      	ldr	r3, [pc, #136]	; (4e64 <xTaskIncrementTick+0x118>)
    4ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4de0:	e7e5      	b.n	4dae <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4de2:	4a20      	ldr	r2, [pc, #128]	; (4e64 <xTaskIncrementTick+0x118>)
    4de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    4de8:	e7e1      	b.n	4dae <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    4dea:	f107 0018 	add.w	r0, r7, #24
    4dee:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4df2:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4df6:	4298      	cmp	r0, r3
    4df8:	bf88      	it	hi
    4dfa:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    4dfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4e02:	4649      	mov	r1, r9
    4e04:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    4e08:	4b18      	ldr	r3, [pc, #96]	; (4e6c <xTaskIncrementTick+0x120>)
    4e0a:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4e0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4e14:	429a      	cmp	r2, r3
    4e16:	bf28      	it	cs
    4e18:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    4e1a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4e1e:	681b      	ldr	r3, [r3, #0]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d0d8      	beq.n	4dd6 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4e24:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4e28:	68db      	ldr	r3, [r3, #12]
    4e2a:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    4e2c:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    4e2e:	429e      	cmp	r6, r3
    4e30:	d3d7      	bcc.n	4de2 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4e32:	f107 0904 	add.w	r9, r7, #4
    4e36:	4648      	mov	r0, r9
    4e38:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    4e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d1d4      	bne.n	4dea <xTaskIncrementTick+0x9e>
    4e40:	e7d6      	b.n	4df0 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    4e42:	4a08      	ldr	r2, [pc, #32]	; (4e64 <xTaskIncrementTick+0x118>)
    4e44:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    4e48:	3301      	adds	r3, #1
    4e4a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    4e4e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    4e50:	4b04      	ldr	r3, [pc, #16]	; (4e64 <xTaskIncrementTick+0x118>)
    4e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    4e56:	2b00      	cmp	r3, #0
}
    4e58:	bf0c      	ite	eq
    4e5a:	4620      	moveq	r0, r4
    4e5c:	2001      	movne	r0, #1
    4e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e62:	bf00      	nop
    4e64:	2000331c 	.word	0x2000331c
    4e68:	00004a1d 	.word	0x00004a1d
    4e6c:	00003b05 	.word	0x00003b05
    4e70:	00003b51 	.word	0x00003b51

00004e74 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    4e74:	4b3a      	ldr	r3, [pc, #232]	; (4f60 <xTaskResumeAll+0xec>)
    4e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4e7a:	b943      	cbnz	r3, 4e8e <xTaskResumeAll+0x1a>
    4e7c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e80:	f383 8811 	msr	BASEPRI, r3
    4e84:	f3bf 8f6f 	isb	sy
    4e88:	f3bf 8f4f 	dsb	sy
    4e8c:	e7fe      	b.n	4e8c <xTaskResumeAll+0x18>
{
    4e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    4e92:	4b34      	ldr	r3, [pc, #208]	; (4f64 <xTaskResumeAll+0xf0>)
    4e94:	4798      	blx	r3
		--uxSchedulerSuspended;
    4e96:	4b32      	ldr	r3, [pc, #200]	; (4f60 <xTaskResumeAll+0xec>)
    4e98:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    4e9c:	3a01      	subs	r2, #1
    4e9e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d155      	bne.n	4f56 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    4eaa:	4b2d      	ldr	r3, [pc, #180]	; (4f60 <xTaskResumeAll+0xec>)
    4eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4eb0:	b92b      	cbnz	r3, 4ebe <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4eb2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4eb4:	4b2c      	ldr	r3, [pc, #176]	; (4f68 <xTaskResumeAll+0xf4>)
    4eb6:	4798      	blx	r3
}
    4eb8:	4620      	mov	r0, r4
    4eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ebe:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4ec0:	4c27      	ldr	r4, [pc, #156]	; (4f60 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4ec2:	4e2a      	ldr	r6, [pc, #168]	; (4f6c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4ec4:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4ec8:	6963      	ldr	r3, [r4, #20]
    4eca:	b1fb      	cbz	r3, 4f0c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    4ecc:	6a23      	ldr	r3, [r4, #32]
    4ece:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4ed0:	f105 0018 	add.w	r0, r5, #24
    4ed4:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4ed6:	1d2f      	adds	r7, r5, #4
    4ed8:	4638      	mov	r0, r7
    4eda:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4edc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4ede:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4ee2:	4298      	cmp	r0, r3
    4ee4:	bf88      	it	hi
    4ee6:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    4eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4eee:	4639      	mov	r1, r7
    4ef0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4ef4:	4b1e      	ldr	r3, [pc, #120]	; (4f70 <xTaskResumeAll+0xfc>)
    4ef6:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4ef8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4efc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f00:	429a      	cmp	r2, r3
    4f02:	d3e1      	bcc.n	4ec8 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4f04:	2301      	movs	r3, #1
    4f06:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    4f0a:	e7dd      	b.n	4ec8 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    4f0c:	b10d      	cbz	r5, 4f12 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    4f0e:	4b19      	ldr	r3, [pc, #100]	; (4f74 <xTaskResumeAll+0x100>)
    4f10:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4f12:	4b13      	ldr	r3, [pc, #76]	; (4f60 <xTaskResumeAll+0xec>)
    4f14:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    4f18:	b17c      	cbz	r4, 4f3a <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    4f1a:	4f17      	ldr	r7, [pc, #92]	; (4f78 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    4f1c:	461e      	mov	r6, r3
    4f1e:	2501      	movs	r5, #1
    4f20:	e001      	b.n	4f26 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    4f22:	3c01      	subs	r4, #1
    4f24:	d005      	beq.n	4f32 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    4f26:	47b8      	blx	r7
    4f28:	2800      	cmp	r0, #0
    4f2a:	d0fa      	beq.n	4f22 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    4f2c:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    4f30:	e7f7      	b.n	4f22 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    4f32:	2200      	movs	r2, #0
    4f34:	4b0a      	ldr	r3, [pc, #40]	; (4f60 <xTaskResumeAll+0xec>)
    4f36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    4f3a:	4b09      	ldr	r3, [pc, #36]	; (4f60 <xTaskResumeAll+0xec>)
    4f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    4f40:	b15b      	cbz	r3, 4f5a <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    4f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f46:	4b0d      	ldr	r3, [pc, #52]	; (4f7c <xTaskResumeAll+0x108>)
    4f48:	601a      	str	r2, [r3, #0]
    4f4a:	f3bf 8f4f 	dsb	sy
    4f4e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    4f52:	2401      	movs	r4, #1
    4f54:	e7ae      	b.n	4eb4 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    4f56:	2400      	movs	r4, #0
    4f58:	e7ac      	b.n	4eb4 <xTaskResumeAll+0x40>
    4f5a:	2400      	movs	r4, #0
    4f5c:	e7aa      	b.n	4eb4 <xTaskResumeAll+0x40>
    4f5e:	bf00      	nop
    4f60:	2000331c 	.word	0x2000331c
    4f64:	00003c45 	.word	0x00003c45
    4f68:	00003c89 	.word	0x00003c89
    4f6c:	00003b51 	.word	0x00003b51
    4f70:	00003b05 	.word	0x00003b05
    4f74:	00004a1d 	.word	0x00004a1d
    4f78:	00004d4d 	.word	0x00004d4d
    4f7c:	e000ed04 	.word	0xe000ed04

00004f80 <vTaskDelayUntil>:
{
    4f80:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    4f82:	b150      	cbz	r0, 4f9a <vTaskDelayUntil+0x1a>
    4f84:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    4f86:	b989      	cbnz	r1, 4fac <vTaskDelayUntil+0x2c>
    4f88:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f8c:	f383 8811 	msr	BASEPRI, r3
    4f90:	f3bf 8f6f 	isb	sy
    4f94:	f3bf 8f4f 	dsb	sy
    4f98:	e7fe      	b.n	4f98 <vTaskDelayUntil+0x18>
    4f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f9e:	f383 8811 	msr	BASEPRI, r3
    4fa2:	f3bf 8f6f 	isb	sy
    4fa6:	f3bf 8f4f 	dsb	sy
    4faa:	e7fe      	b.n	4faa <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4fac:	4b1a      	ldr	r3, [pc, #104]	; (5018 <vTaskDelayUntil+0x98>)
    4fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4fb2:	b143      	cbz	r3, 4fc6 <vTaskDelayUntil+0x46>
    4fb4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fb8:	f383 8811 	msr	BASEPRI, r3
    4fbc:	f3bf 8f6f 	isb	sy
    4fc0:	f3bf 8f4f 	dsb	sy
    4fc4:	e7fe      	b.n	4fc4 <vTaskDelayUntil+0x44>
    4fc6:	460c      	mov	r4, r1
	vTaskSuspendAll();
    4fc8:	4b14      	ldr	r3, [pc, #80]	; (501c <vTaskDelayUntil+0x9c>)
    4fca:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4fcc:	4b12      	ldr	r3, [pc, #72]	; (5018 <vTaskDelayUntil+0x98>)
    4fce:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4fd2:	682a      	ldr	r2, [r5, #0]
    4fd4:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    4fd6:	4290      	cmp	r0, r2
    4fd8:	d214      	bcs.n	5004 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    4fda:	42a2      	cmp	r2, r4
    4fdc:	d916      	bls.n	500c <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4fde:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4fe0:	42a0      	cmp	r0, r4
    4fe2:	d203      	bcs.n	4fec <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4fe4:	2100      	movs	r1, #0
    4fe6:	1a20      	subs	r0, r4, r0
    4fe8:	4b0d      	ldr	r3, [pc, #52]	; (5020 <vTaskDelayUntil+0xa0>)
    4fea:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4fec:	4b0d      	ldr	r3, [pc, #52]	; (5024 <vTaskDelayUntil+0xa4>)
    4fee:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4ff0:	b980      	cbnz	r0, 5014 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ff6:	4b0c      	ldr	r3, [pc, #48]	; (5028 <vTaskDelayUntil+0xa8>)
    4ff8:	601a      	str	r2, [r3, #0]
    4ffa:	f3bf 8f4f 	dsb	sy
    4ffe:	f3bf 8f6f 	isb	sy
}
    5002:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    5004:	42a2      	cmp	r2, r4
    5006:	d803      	bhi.n	5010 <vTaskDelayUntil+0x90>
    5008:	42a0      	cmp	r0, r4
    500a:	d301      	bcc.n	5010 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    500c:	602c      	str	r4, [r5, #0]
    500e:	e7ed      	b.n	4fec <vTaskDelayUntil+0x6c>
    5010:	602c      	str	r4, [r5, #0]
    5012:	e7e7      	b.n	4fe4 <vTaskDelayUntil+0x64>
    5014:	bd38      	pop	{r3, r4, r5, pc}
    5016:	bf00      	nop
    5018:	2000331c 	.word	0x2000331c
    501c:	00004d2d 	.word	0x00004d2d
    5020:	00004a49 	.word	0x00004a49
    5024:	00004e75 	.word	0x00004e75
    5028:	e000ed04 	.word	0xe000ed04

0000502c <vTaskDelay>:
{
    502c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    502e:	b1b0      	cbz	r0, 505e <vTaskDelay+0x32>
    5030:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    5032:	4b0f      	ldr	r3, [pc, #60]	; (5070 <vTaskDelay+0x44>)
    5034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5038:	b143      	cbz	r3, 504c <vTaskDelay+0x20>
    503a:	f04f 0380 	mov.w	r3, #128	; 0x80
    503e:	f383 8811 	msr	BASEPRI, r3
    5042:	f3bf 8f6f 	isb	sy
    5046:	f3bf 8f4f 	dsb	sy
    504a:	e7fe      	b.n	504a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    504c:	4b09      	ldr	r3, [pc, #36]	; (5074 <vTaskDelay+0x48>)
    504e:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5050:	2100      	movs	r1, #0
    5052:	4620      	mov	r0, r4
    5054:	4b08      	ldr	r3, [pc, #32]	; (5078 <vTaskDelay+0x4c>)
    5056:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    5058:	4b08      	ldr	r3, [pc, #32]	; (507c <vTaskDelay+0x50>)
    505a:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    505c:	b938      	cbnz	r0, 506e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5062:	4b07      	ldr	r3, [pc, #28]	; (5080 <vTaskDelay+0x54>)
    5064:	601a      	str	r2, [r3, #0]
    5066:	f3bf 8f4f 	dsb	sy
    506a:	f3bf 8f6f 	isb	sy
    506e:	bd10      	pop	{r4, pc}
    5070:	2000331c 	.word	0x2000331c
    5074:	00004d2d 	.word	0x00004d2d
    5078:	00004a49 	.word	0x00004a49
    507c:	00004e75 	.word	0x00004e75
    5080:	e000ed04 	.word	0xe000ed04

00005084 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5084:	4b2c      	ldr	r3, [pc, #176]	; (5138 <vTaskSwitchContext+0xb4>)
    5086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    508a:	bb8b      	cbnz	r3, 50f0 <vTaskSwitchContext+0x6c>
{
    508c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    508e:	4b2a      	ldr	r3, [pc, #168]	; (5138 <vTaskSwitchContext+0xb4>)
    5090:	2200      	movs	r2, #0
    5092:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    5096:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    509a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    509e:	6812      	ldr	r2, [r2, #0]
    50a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50a2:	429a      	cmp	r2, r3
    50a4:	d807      	bhi.n	50b6 <vTaskSwitchContext+0x32>
    50a6:	4b24      	ldr	r3, [pc, #144]	; (5138 <vTaskSwitchContext+0xb4>)
    50a8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    50ac:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    50b0:	3134      	adds	r1, #52	; 0x34
    50b2:	4b22      	ldr	r3, [pc, #136]	; (513c <vTaskSwitchContext+0xb8>)
    50b4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    50b6:	4a20      	ldr	r2, [pc, #128]	; (5138 <vTaskSwitchContext+0xb4>)
    50b8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    50bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    50c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    50c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    50c6:	b9c2      	cbnz	r2, 50fa <vTaskSwitchContext+0x76>
    50c8:	b14b      	cbz	r3, 50de <vTaskSwitchContext+0x5a>
    50ca:	491b      	ldr	r1, [pc, #108]	; (5138 <vTaskSwitchContext+0xb4>)
    50cc:	3b01      	subs	r3, #1
    50ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    50d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    50d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    50d8:	b97a      	cbnz	r2, 50fa <vTaskSwitchContext+0x76>
    50da:	2b00      	cmp	r3, #0
    50dc:	d1f6      	bne.n	50cc <vTaskSwitchContext+0x48>
    50de:	f04f 0380 	mov.w	r3, #128	; 0x80
    50e2:	f383 8811 	msr	BASEPRI, r3
    50e6:	f3bf 8f6f 	isb	sy
    50ea:	f3bf 8f4f 	dsb	sy
    50ee:	e7fe      	b.n	50ee <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    50f0:	2201      	movs	r2, #1
    50f2:	4b11      	ldr	r3, [pc, #68]	; (5138 <vTaskSwitchContext+0xb4>)
    50f4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    50f8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    50fa:	4a0f      	ldr	r2, [pc, #60]	; (5138 <vTaskSwitchContext+0xb4>)
    50fc:	0099      	lsls	r1, r3, #2
    50fe:	18c8      	adds	r0, r1, r3
    5100:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    5104:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5106:	6864      	ldr	r4, [r4, #4]
    5108:	62c4      	str	r4, [r0, #44]	; 0x2c
    510a:	4419      	add	r1, r3
    510c:	4602      	mov	r2, r0
    510e:	3230      	adds	r2, #48	; 0x30
    5110:	4294      	cmp	r4, r2
    5112:	d00b      	beq.n	512c <vTaskSwitchContext+0xa8>
    5114:	4a08      	ldr	r2, [pc, #32]	; (5138 <vTaskSwitchContext+0xb4>)
    5116:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    511a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    511e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5120:	68c9      	ldr	r1, [r1, #12]
    5122:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    5126:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    512a:	bd10      	pop	{r4, pc}
    512c:	6860      	ldr	r0, [r4, #4]
    512e:	4a02      	ldr	r2, [pc, #8]	; (5138 <vTaskSwitchContext+0xb4>)
    5130:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5134:	62d0      	str	r0, [r2, #44]	; 0x2c
    5136:	e7ed      	b.n	5114 <vTaskSwitchContext+0x90>
    5138:	2000331c 	.word	0x2000331c
    513c:	000002d1 	.word	0x000002d1

00005140 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    5140:	b940      	cbnz	r0, 5154 <vTaskPlaceOnEventList+0x14>
    5142:	f04f 0380 	mov.w	r3, #128	; 0x80
    5146:	f383 8811 	msr	BASEPRI, r3
    514a:	f3bf 8f6f 	isb	sy
    514e:	f3bf 8f4f 	dsb	sy
    5152:	e7fe      	b.n	5152 <vTaskPlaceOnEventList+0x12>
{
    5154:	b510      	push	{r4, lr}
    5156:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    5158:	4b05      	ldr	r3, [pc, #20]	; (5170 <vTaskPlaceOnEventList+0x30>)
    515a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    515e:	3118      	adds	r1, #24
    5160:	4b04      	ldr	r3, [pc, #16]	; (5174 <vTaskPlaceOnEventList+0x34>)
    5162:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5164:	2101      	movs	r1, #1
    5166:	4620      	mov	r0, r4
    5168:	4b03      	ldr	r3, [pc, #12]	; (5178 <vTaskPlaceOnEventList+0x38>)
    516a:	4798      	blx	r3
    516c:	bd10      	pop	{r4, pc}
    516e:	bf00      	nop
    5170:	2000331c 	.word	0x2000331c
    5174:	00003b1d 	.word	0x00003b1d
    5178:	00004a49 	.word	0x00004a49

0000517c <vTaskPlaceOnEventListRestricted>:
{
    517c:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    517e:	b180      	cbz	r0, 51a2 <vTaskPlaceOnEventListRestricted+0x26>
    5180:	4614      	mov	r4, r2
    5182:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5184:	4b0b      	ldr	r3, [pc, #44]	; (51b4 <vTaskPlaceOnEventListRestricted+0x38>)
    5186:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    518a:	3118      	adds	r1, #24
    518c:	4b0a      	ldr	r3, [pc, #40]	; (51b8 <vTaskPlaceOnEventListRestricted+0x3c>)
    518e:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    5190:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5192:	4621      	mov	r1, r4
    5194:	bf0c      	ite	eq
    5196:	4628      	moveq	r0, r5
    5198:	f04f 30ff 	movne.w	r0, #4294967295
    519c:	4b07      	ldr	r3, [pc, #28]	; (51bc <vTaskPlaceOnEventListRestricted+0x40>)
    519e:	4798      	blx	r3
    51a0:	bd38      	pop	{r3, r4, r5, pc}
    51a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    51a6:	f383 8811 	msr	BASEPRI, r3
    51aa:	f3bf 8f6f 	isb	sy
    51ae:	f3bf 8f4f 	dsb	sy
    51b2:	e7fe      	b.n	51b2 <vTaskPlaceOnEventListRestricted+0x36>
    51b4:	2000331c 	.word	0x2000331c
    51b8:	00003b05 	.word	0x00003b05
    51bc:	00004a49 	.word	0x00004a49

000051c0 <xTaskRemoveFromEventList>:
{
    51c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    51c2:	68c3      	ldr	r3, [r0, #12]
    51c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    51c6:	2c00      	cmp	r4, #0
    51c8:	d02a      	beq.n	5220 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    51ca:	f104 0518 	add.w	r5, r4, #24
    51ce:	4628      	mov	r0, r5
    51d0:	4b1a      	ldr	r3, [pc, #104]	; (523c <xTaskRemoveFromEventList+0x7c>)
    51d2:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    51d4:	4b1a      	ldr	r3, [pc, #104]	; (5240 <xTaskRemoveFromEventList+0x80>)
    51d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    51da:	bb53      	cbnz	r3, 5232 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    51dc:	1d25      	adds	r5, r4, #4
    51de:	4628      	mov	r0, r5
    51e0:	4b16      	ldr	r3, [pc, #88]	; (523c <xTaskRemoveFromEventList+0x7c>)
    51e2:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    51e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    51e6:	4b16      	ldr	r3, [pc, #88]	; (5240 <xTaskRemoveFromEventList+0x80>)
    51e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    51ec:	4298      	cmp	r0, r3
    51ee:	bf84      	itt	hi
    51f0:	4b13      	ldrhi	r3, [pc, #76]	; (5240 <xTaskRemoveFromEventList+0x80>)
    51f2:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    51f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51fa:	4629      	mov	r1, r5
    51fc:	4b11      	ldr	r3, [pc, #68]	; (5244 <xTaskRemoveFromEventList+0x84>)
    51fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5202:	4b11      	ldr	r3, [pc, #68]	; (5248 <xTaskRemoveFromEventList+0x88>)
    5204:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5206:	4b0e      	ldr	r3, [pc, #56]	; (5240 <xTaskRemoveFromEventList+0x80>)
    5208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    520c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5210:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    5212:	bf83      	ittte	hi
    5214:	2001      	movhi	r0, #1
    5216:	4b0a      	ldrhi	r3, [pc, #40]	; (5240 <xTaskRemoveFromEventList+0x80>)
    5218:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    521c:	2000      	movls	r0, #0
}
    521e:	bd38      	pop	{r3, r4, r5, pc}
    5220:	f04f 0380 	mov.w	r3, #128	; 0x80
    5224:	f383 8811 	msr	BASEPRI, r3
    5228:	f3bf 8f6f 	isb	sy
    522c:	f3bf 8f4f 	dsb	sy
    5230:	e7fe      	b.n	5230 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    5232:	4629      	mov	r1, r5
    5234:	4805      	ldr	r0, [pc, #20]	; (524c <xTaskRemoveFromEventList+0x8c>)
    5236:	4b04      	ldr	r3, [pc, #16]	; (5248 <xTaskRemoveFromEventList+0x88>)
    5238:	4798      	blx	r3
    523a:	e7e4      	b.n	5206 <xTaskRemoveFromEventList+0x46>
    523c:	00003b51 	.word	0x00003b51
    5240:	2000331c 	.word	0x2000331c
    5244:	20003344 	.word	0x20003344
    5248:	00003b05 	.word	0x00003b05
    524c:	20003330 	.word	0x20003330

00005250 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    5250:	4b03      	ldr	r3, [pc, #12]	; (5260 <vTaskInternalSetTimeOutState+0x10>)
    5252:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5256:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    525c:	6043      	str	r3, [r0, #4]
    525e:	4770      	bx	lr
    5260:	2000331c 	.word	0x2000331c

00005264 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    5264:	b1f8      	cbz	r0, 52a6 <xTaskCheckForTimeOut+0x42>
{
    5266:	b570      	push	{r4, r5, r6, lr}
    5268:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    526a:	b329      	cbz	r1, 52b8 <xTaskCheckForTimeOut+0x54>
    526c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    526e:	4b1c      	ldr	r3, [pc, #112]	; (52e0 <xTaskCheckForTimeOut+0x7c>)
    5270:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    5272:	4b1c      	ldr	r3, [pc, #112]	; (52e4 <xTaskCheckForTimeOut+0x80>)
    5274:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5278:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    527a:	6823      	ldr	r3, [r4, #0]
    527c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5280:	d02a      	beq.n	52d8 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    5282:	4818      	ldr	r0, [pc, #96]	; (52e4 <xTaskCheckForTimeOut+0x80>)
    5284:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    5288:	682e      	ldr	r6, [r5, #0]
    528a:	4286      	cmp	r6, r0
    528c:	d001      	beq.n	5292 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    528e:	428a      	cmp	r2, r1
    5290:	d224      	bcs.n	52dc <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5292:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    5294:	429a      	cmp	r2, r3
    5296:	d318      	bcc.n	52ca <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    5298:	2300      	movs	r3, #0
    529a:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    529c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    529e:	4b12      	ldr	r3, [pc, #72]	; (52e8 <xTaskCheckForTimeOut+0x84>)
    52a0:	4798      	blx	r3
}
    52a2:	4620      	mov	r0, r4
    52a4:	bd70      	pop	{r4, r5, r6, pc}
    52a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    52aa:	f383 8811 	msr	BASEPRI, r3
    52ae:	f3bf 8f6f 	isb	sy
    52b2:	f3bf 8f4f 	dsb	sy
    52b6:	e7fe      	b.n	52b6 <xTaskCheckForTimeOut+0x52>
    52b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    52bc:	f383 8811 	msr	BASEPRI, r3
    52c0:	f3bf 8f6f 	isb	sy
    52c4:	f3bf 8f4f 	dsb	sy
    52c8:	e7fe      	b.n	52c8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    52ca:	1a9b      	subs	r3, r3, r2
    52cc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    52ce:	4628      	mov	r0, r5
    52d0:	4b06      	ldr	r3, [pc, #24]	; (52ec <xTaskCheckForTimeOut+0x88>)
    52d2:	4798      	blx	r3
			xReturn = pdFALSE;
    52d4:	2400      	movs	r4, #0
    52d6:	e7e2      	b.n	529e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    52d8:	2400      	movs	r4, #0
    52da:	e7e0      	b.n	529e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    52dc:	2401      	movs	r4, #1
    52de:	e7de      	b.n	529e <xTaskCheckForTimeOut+0x3a>
    52e0:	00003c45 	.word	0x00003c45
    52e4:	2000331c 	.word	0x2000331c
    52e8:	00003c89 	.word	0x00003c89
    52ec:	00005251 	.word	0x00005251

000052f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    52f0:	2201      	movs	r2, #1
    52f2:	4b02      	ldr	r3, [pc, #8]	; (52fc <vTaskMissedYield+0xc>)
    52f4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    52f8:	4770      	bx	lr
    52fa:	bf00      	nop
    52fc:	2000331c 	.word	0x2000331c

00005300 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    5300:	4b06      	ldr	r3, [pc, #24]	; (531c <xTaskGetSchedulerState+0x1c>)
    5302:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5306:	b13b      	cbz	r3, 5318 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5308:	4b04      	ldr	r3, [pc, #16]	; (531c <xTaskGetSchedulerState+0x1c>)
    530a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    530e:	2b00      	cmp	r3, #0
    5310:	bf0c      	ite	eq
    5312:	2002      	moveq	r0, #2
    5314:	2000      	movne	r0, #0
    5316:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    5318:	2001      	movs	r0, #1
}
    531a:	4770      	bx	lr
    531c:	2000331c 	.word	0x2000331c

00005320 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    5320:	2800      	cmp	r0, #0
    5322:	d045      	beq.n	53b0 <xTaskPriorityInherit+0x90>
{
    5324:	b538      	push	{r3, r4, r5, lr}
    5326:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    5328:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    532a:	4922      	ldr	r1, [pc, #136]	; (53b4 <xTaskPriorityInherit+0x94>)
    532c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    5330:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5332:	428a      	cmp	r2, r1
    5334:	d232      	bcs.n	539c <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    5336:	6981      	ldr	r1, [r0, #24]
    5338:	2900      	cmp	r1, #0
    533a:	db06      	blt.n	534a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    533c:	491d      	ldr	r1, [pc, #116]	; (53b4 <xTaskPriorityInherit+0x94>)
    533e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    5342:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5344:	f1c1 0105 	rsb	r1, r1, #5
    5348:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    534a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    534e:	491a      	ldr	r1, [pc, #104]	; (53b8 <xTaskPriorityInherit+0x98>)
    5350:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5354:	6969      	ldr	r1, [r5, #20]
    5356:	4291      	cmp	r1, r2
    5358:	d006      	beq.n	5368 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    535a:	4a16      	ldr	r2, [pc, #88]	; (53b4 <xTaskPriorityInherit+0x94>)
    535c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5360:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5362:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    5364:	2001      	movs	r0, #1
    5366:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    5368:	1d2c      	adds	r4, r5, #4
    536a:	4620      	mov	r0, r4
    536c:	4b13      	ldr	r3, [pc, #76]	; (53bc <xTaskPriorityInherit+0x9c>)
    536e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    5370:	4b10      	ldr	r3, [pc, #64]	; (53b4 <xTaskPriorityInherit+0x94>)
    5372:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5376:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    5378:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    537a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    537e:	4298      	cmp	r0, r3
    5380:	bf84      	itt	hi
    5382:	4b0c      	ldrhi	r3, [pc, #48]	; (53b4 <xTaskPriorityInherit+0x94>)
    5384:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    538c:	4621      	mov	r1, r4
    538e:	4b0a      	ldr	r3, [pc, #40]	; (53b8 <xTaskPriorityInherit+0x98>)
    5390:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5394:	4b0a      	ldr	r3, [pc, #40]	; (53c0 <xTaskPriorityInherit+0xa0>)
    5396:	4798      	blx	r3
			xReturn = pdTRUE;
    5398:	2001      	movs	r0, #1
    539a:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    539c:	4a05      	ldr	r2, [pc, #20]	; (53b4 <xTaskPriorityInherit+0x94>)
    539e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    53a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    53a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    53a6:	4298      	cmp	r0, r3
    53a8:	bf2c      	ite	cs
    53aa:	2000      	movcs	r0, #0
    53ac:	2001      	movcc	r0, #1
    53ae:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    53b0:	2000      	movs	r0, #0
	return xReturn;
    53b2:	4770      	bx	lr
    53b4:	2000331c 	.word	0x2000331c
    53b8:	20003344 	.word	0x20003344
    53bc:	00003b51 	.word	0x00003b51
    53c0:	00003b05 	.word	0x00003b05

000053c4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    53c4:	2800      	cmp	r0, #0
    53c6:	d03c      	beq.n	5442 <xTaskPriorityDisinherit+0x7e>
{
    53c8:	b538      	push	{r3, r4, r5, lr}
    53ca:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    53cc:	4a20      	ldr	r2, [pc, #128]	; (5450 <xTaskPriorityDisinherit+0x8c>)
    53ce:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    53d2:	4290      	cmp	r0, r2
    53d4:	d008      	beq.n	53e8 <xTaskPriorityDisinherit+0x24>
    53d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    53da:	f383 8811 	msr	BASEPRI, r3
    53de:	f3bf 8f6f 	isb	sy
    53e2:	f3bf 8f4f 	dsb	sy
    53e6:	e7fe      	b.n	53e6 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    53e8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    53ea:	b942      	cbnz	r2, 53fe <xTaskPriorityDisinherit+0x3a>
    53ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    53f0:	f383 8811 	msr	BASEPRI, r3
    53f4:	f3bf 8f6f 	isb	sy
    53f8:	f3bf 8f4f 	dsb	sy
    53fc:	e7fe      	b.n	53fc <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    53fe:	3a01      	subs	r2, #1
    5400:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    5402:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5404:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5406:	4288      	cmp	r0, r1
    5408:	d01d      	beq.n	5446 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    540a:	b9f2      	cbnz	r2, 544a <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    540c:	1d25      	adds	r5, r4, #4
    540e:	4628      	mov	r0, r5
    5410:	4b10      	ldr	r3, [pc, #64]	; (5454 <xTaskPriorityDisinherit+0x90>)
    5412:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5414:	6c60      	ldr	r0, [r4, #68]	; 0x44
    5416:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    5418:	f1c0 0305 	rsb	r3, r0, #5
    541c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    541e:	4b0c      	ldr	r3, [pc, #48]	; (5450 <xTaskPriorityDisinherit+0x8c>)
    5420:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5424:	4298      	cmp	r0, r3
    5426:	bf84      	itt	hi
    5428:	4b09      	ldrhi	r3, [pc, #36]	; (5450 <xTaskPriorityDisinherit+0x8c>)
    542a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    542e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5432:	4629      	mov	r1, r5
    5434:	4b08      	ldr	r3, [pc, #32]	; (5458 <xTaskPriorityDisinherit+0x94>)
    5436:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    543a:	4b08      	ldr	r3, [pc, #32]	; (545c <xTaskPriorityDisinherit+0x98>)
    543c:	4798      	blx	r3
				xReturn = pdTRUE;
    543e:	2001      	movs	r0, #1
    5440:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    5442:	2000      	movs	r0, #0
    5444:	4770      	bx	lr
    5446:	2000      	movs	r0, #0
    5448:	bd38      	pop	{r3, r4, r5, pc}
    544a:	2000      	movs	r0, #0
}
    544c:	bd38      	pop	{r3, r4, r5, pc}
    544e:	bf00      	nop
    5450:	2000331c 	.word	0x2000331c
    5454:	00003b51 	.word	0x00003b51
    5458:	20003344 	.word	0x20003344
    545c:	00003b05 	.word	0x00003b05

00005460 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    5460:	2800      	cmp	r0, #0
    5462:	d049      	beq.n	54f8 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    5464:	b538      	push	{r3, r4, r5, lr}
    5466:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    5468:	6c80      	ldr	r0, [r0, #72]	; 0x48
    546a:	b940      	cbnz	r0, 547e <vTaskPriorityDisinheritAfterTimeout+0x1e>
    546c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5470:	f383 8811 	msr	BASEPRI, r3
    5474:	f3bf 8f6f 	isb	sy
    5478:	f3bf 8f4f 	dsb	sy
    547c:	e7fe      	b.n	547c <vTaskPriorityDisinheritAfterTimeout+0x1c>
    547e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5480:	428a      	cmp	r2, r1
    5482:	bf38      	it	cc
    5484:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    5486:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5488:	4291      	cmp	r1, r2
    548a:	d001      	beq.n	5490 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    548c:	2801      	cmp	r0, #1
    548e:	d000      	beq.n	5492 <vTaskPriorityDisinheritAfterTimeout+0x32>
    5490:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    5492:	481a      	ldr	r0, [pc, #104]	; (54fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5494:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    5498:	4284      	cmp	r4, r0
    549a:	d108      	bne.n	54ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    549c:	f04f 0380 	mov.w	r3, #128	; 0x80
    54a0:	f383 8811 	msr	BASEPRI, r3
    54a4:	f3bf 8f6f 	isb	sy
    54a8:	f3bf 8f4f 	dsb	sy
    54ac:	e7fe      	b.n	54ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    54ae:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    54b0:	69a0      	ldr	r0, [r4, #24]
    54b2:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    54b4:	bfa4      	itt	ge
    54b6:	f1c2 0205 	rsbge	r2, r2, #5
    54ba:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    54bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    54c0:	4a0f      	ldr	r2, [pc, #60]	; (5500 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    54c2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    54c6:	6962      	ldr	r2, [r4, #20]
    54c8:	428a      	cmp	r2, r1
    54ca:	d1e1      	bne.n	5490 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    54cc:	1d25      	adds	r5, r4, #4
    54ce:	4628      	mov	r0, r5
    54d0:	4b0c      	ldr	r3, [pc, #48]	; (5504 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    54d2:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    54d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    54d6:	4b09      	ldr	r3, [pc, #36]	; (54fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    54d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    54dc:	4298      	cmp	r0, r3
    54de:	bf84      	itt	hi
    54e0:	4b06      	ldrhi	r3, [pc, #24]	; (54fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    54e2:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    54e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    54ea:	4629      	mov	r1, r5
    54ec:	4b04      	ldr	r3, [pc, #16]	; (5500 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    54ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    54f2:	4b05      	ldr	r3, [pc, #20]	; (5508 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    54f4:	4798      	blx	r3
}
    54f6:	e7cb      	b.n	5490 <vTaskPriorityDisinheritAfterTimeout+0x30>
    54f8:	4770      	bx	lr
    54fa:	bf00      	nop
    54fc:	2000331c 	.word	0x2000331c
    5500:	20003344 	.word	0x20003344
    5504:	00003b51 	.word	0x00003b51
    5508:	00003b05 	.word	0x00003b05

0000550c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    550c:	4b06      	ldr	r3, [pc, #24]	; (5528 <pvTaskIncrementMutexHeldCount+0x1c>)
    550e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5512:	b12b      	cbz	r3, 5520 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    5514:	4b04      	ldr	r3, [pc, #16]	; (5528 <pvTaskIncrementMutexHeldCount+0x1c>)
    5516:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    551a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    551c:	3301      	adds	r3, #1
    551e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    5520:	4b01      	ldr	r3, [pc, #4]	; (5528 <pvTaskIncrementMutexHeldCount+0x1c>)
    5522:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    5526:	4770      	bx	lr
    5528:	2000331c 	.word	0x2000331c

0000552c <xTaskNotifyWait>:
{
    552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    552e:	4607      	mov	r7, r0
    5530:	460d      	mov	r5, r1
    5532:	4614      	mov	r4, r2
    5534:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    5536:	4b25      	ldr	r3, [pc, #148]	; (55cc <xTaskNotifyWait+0xa0>)
    5538:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    553a:	4b25      	ldr	r3, [pc, #148]	; (55d0 <xTaskNotifyWait+0xa4>)
    553c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5544:	b2db      	uxtb	r3, r3
    5546:	2b02      	cmp	r3, #2
    5548:	d00c      	beq.n	5564 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    554a:	4b21      	ldr	r3, [pc, #132]	; (55d0 <xTaskNotifyWait+0xa4>)
    554c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5550:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    5552:	ea20 0007 	bic.w	r0, r0, r7
    5556:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    555c:	2201      	movs	r2, #1
    555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    5562:	b9e6      	cbnz	r6, 559e <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    5564:	4b1b      	ldr	r3, [pc, #108]	; (55d4 <xTaskNotifyWait+0xa8>)
    5566:	4798      	blx	r3
	taskENTER_CRITICAL();
    5568:	4b18      	ldr	r3, [pc, #96]	; (55cc <xTaskNotifyWait+0xa0>)
    556a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    556c:	b124      	cbz	r4, 5578 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    556e:	4b18      	ldr	r3, [pc, #96]	; (55d0 <xTaskNotifyWait+0xa4>)
    5570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5576:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    5578:	4b15      	ldr	r3, [pc, #84]	; (55d0 <xTaskNotifyWait+0xa4>)
    557a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    557e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5582:	b2db      	uxtb	r3, r3
    5584:	2b02      	cmp	r3, #2
    5586:	d017      	beq.n	55b8 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    5588:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    558a:	4b11      	ldr	r3, [pc, #68]	; (55d0 <xTaskNotifyWait+0xa4>)
    558c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5590:	2200      	movs	r2, #0
    5592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    5596:	4b0f      	ldr	r3, [pc, #60]	; (55d4 <xTaskNotifyWait+0xa8>)
    5598:	4798      	blx	r3
}
    559a:	4620      	mov	r0, r4
    559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    559e:	4611      	mov	r1, r2
    55a0:	4630      	mov	r0, r6
    55a2:	4b0d      	ldr	r3, [pc, #52]	; (55d8 <xTaskNotifyWait+0xac>)
    55a4:	4798      	blx	r3
				portYIELD_WITHIN_API();
    55a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    55aa:	4b0c      	ldr	r3, [pc, #48]	; (55dc <xTaskNotifyWait+0xb0>)
    55ac:	601a      	str	r2, [r3, #0]
    55ae:	f3bf 8f4f 	dsb	sy
    55b2:	f3bf 8f6f 	isb	sy
    55b6:	e7d5      	b.n	5564 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    55b8:	4b05      	ldr	r3, [pc, #20]	; (55d0 <xTaskNotifyWait+0xa4>)
    55ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    55be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    55c0:	ea23 0505 	bic.w	r5, r3, r5
    55c4:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    55c6:	2401      	movs	r4, #1
    55c8:	e7df      	b.n	558a <xTaskNotifyWait+0x5e>
    55ca:	bf00      	nop
    55cc:	00003c45 	.word	0x00003c45
    55d0:	2000331c 	.word	0x2000331c
    55d4:	00003c89 	.word	0x00003c89
    55d8:	00004a49 	.word	0x00004a49
    55dc:	e000ed04 	.word	0xe000ed04

000055e0 <xTaskGenericNotifyFromISR>:
{
    55e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55e4:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    55e6:	b310      	cbz	r0, 562e <xTaskGenericNotifyFromISR+0x4e>
    55e8:	4604      	mov	r4, r0
    55ea:	4699      	mov	r9, r3
    55ec:	4617      	mov	r7, r2
    55ee:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    55f0:	4b3e      	ldr	r3, [pc, #248]	; (56ec <xTaskGenericNotifyFromISR+0x10c>)
    55f2:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    55f4:	f3ef 8511 	mrs	r5, BASEPRI
    55f8:	f04f 0380 	mov.w	r3, #128	; 0x80
    55fc:	f383 8811 	msr	BASEPRI, r3
    5600:	f3bf 8f6f 	isb	sy
    5604:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    5608:	f1b9 0f00 	cmp.w	r9, #0
    560c:	d002      	beq.n	5614 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    560e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5610:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    5614:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    5618:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    561a:	2202      	movs	r2, #2
    561c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    5620:	1e7a      	subs	r2, r7, #1
    5622:	2a03      	cmp	r2, #3
    5624:	d810      	bhi.n	5648 <xTaskGenericNotifyFromISR+0x68>
    5626:	e8df f002 	tbb	[pc, r2]
    562a:	1c0b      	.short	0x1c0b
    562c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    562e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5632:	f383 8811 	msr	BASEPRI, r3
    5636:	f3bf 8f6f 	isb	sy
    563a:	f3bf 8f4f 	dsb	sy
    563e:	e7fe      	b.n	563e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    5640:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5642:	ea42 0208 	orr.w	r2, r2, r8
    5646:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    5648:	2b01      	cmp	r3, #1
    564a:	d147      	bne.n	56dc <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    564c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    564e:	b1a3      	cbz	r3, 567a <xTaskGenericNotifyFromISR+0x9a>
    5650:	f04f 0380 	mov.w	r3, #128	; 0x80
    5654:	f383 8811 	msr	BASEPRI, r3
    5658:	f3bf 8f6f 	isb	sy
    565c:	f3bf 8f4f 	dsb	sy
    5660:	e7fe      	b.n	5660 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    5662:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5664:	3201      	adds	r2, #1
    5666:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    5668:	e7ee      	b.n	5648 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    566a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    566e:	e7eb      	b.n	5648 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    5670:	2b02      	cmp	r3, #2
    5672:	d031      	beq.n	56d8 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    5674:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    5678:	e7e6      	b.n	5648 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    567a:	4b1d      	ldr	r3, [pc, #116]	; (56f0 <xTaskGenericNotifyFromISR+0x110>)
    567c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5680:	b9fb      	cbnz	r3, 56c2 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    5682:	1d27      	adds	r7, r4, #4
    5684:	4638      	mov	r0, r7
    5686:	4b1b      	ldr	r3, [pc, #108]	; (56f4 <xTaskGenericNotifyFromISR+0x114>)
    5688:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    568a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    568c:	4b18      	ldr	r3, [pc, #96]	; (56f0 <xTaskGenericNotifyFromISR+0x110>)
    568e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5692:	4298      	cmp	r0, r3
    5694:	bf84      	itt	hi
    5696:	4b16      	ldrhi	r3, [pc, #88]	; (56f0 <xTaskGenericNotifyFromISR+0x110>)
    5698:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    569c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    56a0:	4639      	mov	r1, r7
    56a2:	4b15      	ldr	r3, [pc, #84]	; (56f8 <xTaskGenericNotifyFromISR+0x118>)
    56a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    56a8:	4b14      	ldr	r3, [pc, #80]	; (56fc <xTaskGenericNotifyFromISR+0x11c>)
    56aa:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    56ac:	4b10      	ldr	r3, [pc, #64]	; (56f0 <xTaskGenericNotifyFromISR+0x110>)
    56ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    56b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    56b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56b6:	429a      	cmp	r2, r3
    56b8:	d915      	bls.n	56e6 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    56ba:	b146      	cbz	r6, 56ce <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    56bc:	2001      	movs	r0, #1
    56be:	6030      	str	r0, [r6, #0]
    56c0:	e00d      	b.n	56de <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    56c2:	f104 0118 	add.w	r1, r4, #24
    56c6:	480e      	ldr	r0, [pc, #56]	; (5700 <xTaskGenericNotifyFromISR+0x120>)
    56c8:	4b0c      	ldr	r3, [pc, #48]	; (56fc <xTaskGenericNotifyFromISR+0x11c>)
    56ca:	4798      	blx	r3
    56cc:	e7ee      	b.n	56ac <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    56ce:	2001      	movs	r0, #1
    56d0:	4b07      	ldr	r3, [pc, #28]	; (56f0 <xTaskGenericNotifyFromISR+0x110>)
    56d2:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    56d6:	e002      	b.n	56de <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    56d8:	2000      	movs	r0, #0
    56da:	e000      	b.n	56de <xTaskGenericNotifyFromISR+0xfe>
    56dc:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    56de:	f385 8811 	msr	BASEPRI, r5
}
    56e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    56e6:	2001      	movs	r0, #1
    56e8:	e7f9      	b.n	56de <xTaskGenericNotifyFromISR+0xfe>
    56ea:	bf00      	nop
    56ec:	00003e9d 	.word	0x00003e9d
    56f0:	2000331c 	.word	0x2000331c
    56f4:	00003b51 	.word	0x00003b51
    56f8:	20003344 	.word	0x20003344
    56fc:	00003b05 	.word	0x00003b05
    5700:	20003330 	.word	0x20003330

00005704 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    5704:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    5706:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5708:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    570a:	4291      	cmp	r1, r2
    570c:	d80c      	bhi.n	5728 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    570e:	1ad2      	subs	r2, r2, r3
    5710:	6983      	ldr	r3, [r0, #24]
    5712:	429a      	cmp	r2, r3
    5714:	d301      	bcc.n	571a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5716:	2001      	movs	r0, #1
    5718:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    571a:	1d01      	adds	r1, r0, #4
    571c:	4b09      	ldr	r3, [pc, #36]	; (5744 <prvInsertTimerInActiveList+0x40>)
    571e:	6818      	ldr	r0, [r3, #0]
    5720:	4b09      	ldr	r3, [pc, #36]	; (5748 <prvInsertTimerInActiveList+0x44>)
    5722:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5724:	2000      	movs	r0, #0
    5726:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    5728:	429a      	cmp	r2, r3
    572a:	d201      	bcs.n	5730 <prvInsertTimerInActiveList+0x2c>
    572c:	4299      	cmp	r1, r3
    572e:	d206      	bcs.n	573e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5730:	1d01      	adds	r1, r0, #4
    5732:	4b04      	ldr	r3, [pc, #16]	; (5744 <prvInsertTimerInActiveList+0x40>)
    5734:	6858      	ldr	r0, [r3, #4]
    5736:	4b04      	ldr	r3, [pc, #16]	; (5748 <prvInsertTimerInActiveList+0x44>)
    5738:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    573a:	2000      	movs	r0, #0
    573c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    573e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    5740:	bd08      	pop	{r3, pc}
    5742:	bf00      	nop
    5744:	20003408 	.word	0x20003408
    5748:	00003b1d 	.word	0x00003b1d

0000574c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    574e:	4b0d      	ldr	r3, [pc, #52]	; (5784 <prvCheckForValidListAndQueue+0x38>)
    5750:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    5752:	4b0d      	ldr	r3, [pc, #52]	; (5788 <prvCheckForValidListAndQueue+0x3c>)
    5754:	689b      	ldr	r3, [r3, #8]
    5756:	b113      	cbz	r3, 575e <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5758:	4b0c      	ldr	r3, [pc, #48]	; (578c <prvCheckForValidListAndQueue+0x40>)
    575a:	4798      	blx	r3
    575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    575e:	4c0a      	ldr	r4, [pc, #40]	; (5788 <prvCheckForValidListAndQueue+0x3c>)
    5760:	f104 060c 	add.w	r6, r4, #12
    5764:	4630      	mov	r0, r6
    5766:	4f0a      	ldr	r7, [pc, #40]	; (5790 <prvCheckForValidListAndQueue+0x44>)
    5768:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    576a:	f104 0520 	add.w	r5, r4, #32
    576e:	4628      	mov	r0, r5
    5770:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    5772:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    5774:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    5776:	2200      	movs	r2, #0
    5778:	210c      	movs	r1, #12
    577a:	2014      	movs	r0, #20
    577c:	4b05      	ldr	r3, [pc, #20]	; (5794 <prvCheckForValidListAndQueue+0x48>)
    577e:	4798      	blx	r3
    5780:	60a0      	str	r0, [r4, #8]
    5782:	e7e9      	b.n	5758 <prvCheckForValidListAndQueue+0xc>
    5784:	00003c45 	.word	0x00003c45
    5788:	20003408 	.word	0x20003408
    578c:	00003c89 	.word	0x00003c89
    5790:	00003ae9 	.word	0x00003ae9
    5794:	00004299 	.word	0x00004299

00005798 <xTimerCreateTimerTask>:
{
    5798:	b510      	push	{r4, lr}
    579a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    579c:	4b0d      	ldr	r3, [pc, #52]	; (57d4 <xTimerCreateTimerTask+0x3c>)
    579e:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    57a0:	4b0d      	ldr	r3, [pc, #52]	; (57d8 <xTimerCreateTimerTask+0x40>)
    57a2:	689b      	ldr	r3, [r3, #8]
    57a4:	b163      	cbz	r3, 57c0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    57a6:	4b0d      	ldr	r3, [pc, #52]	; (57dc <xTimerCreateTimerTask+0x44>)
    57a8:	9301      	str	r3, [sp, #4]
    57aa:	2303      	movs	r3, #3
    57ac:	9300      	str	r3, [sp, #0]
    57ae:	2300      	movs	r3, #0
    57b0:	2280      	movs	r2, #128	; 0x80
    57b2:	490b      	ldr	r1, [pc, #44]	; (57e0 <xTimerCreateTimerTask+0x48>)
    57b4:	480b      	ldr	r0, [pc, #44]	; (57e4 <xTimerCreateTimerTask+0x4c>)
    57b6:	4c0c      	ldr	r4, [pc, #48]	; (57e8 <xTimerCreateTimerTask+0x50>)
    57b8:	47a0      	blx	r4
	configASSERT(xReturn);
    57ba:	b108      	cbz	r0, 57c0 <xTimerCreateTimerTask+0x28>
}
    57bc:	b002      	add	sp, #8
    57be:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    57c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    57c4:	f383 8811 	msr	BASEPRI, r3
    57c8:	f3bf 8f6f 	isb	sy
    57cc:	f3bf 8f4f 	dsb	sy
    57d0:	e7fe      	b.n	57d0 <xTimerCreateTimerTask+0x38>
    57d2:	bf00      	nop
    57d4:	0000574d 	.word	0x0000574d
    57d8:	20003408 	.word	0x20003408
    57dc:	2000343c 	.word	0x2000343c
    57e0:	0000788c 	.word	0x0000788c
    57e4:	00005905 	.word	0x00005905
    57e8:	00004ac9 	.word	0x00004ac9

000057ec <xTimerGenericCommand>:
	configASSERT(xTimer);
    57ec:	b1d8      	cbz	r0, 5826 <xTimerGenericCommand+0x3a>
{
    57ee:	b530      	push	{r4, r5, lr}
    57f0:	b085      	sub	sp, #20
    57f2:	4615      	mov	r5, r2
    57f4:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    57f6:	4a14      	ldr	r2, [pc, #80]	; (5848 <xTimerGenericCommand+0x5c>)
    57f8:	6890      	ldr	r0, [r2, #8]
    57fa:	b310      	cbz	r0, 5842 <xTimerGenericCommand+0x56>
    57fc:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    57fe:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5800:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    5802:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    5804:	2905      	cmp	r1, #5
    5806:	dc17      	bgt.n	5838 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    5808:	4b10      	ldr	r3, [pc, #64]	; (584c <xTimerGenericCommand+0x60>)
    580a:	4798      	blx	r3
    580c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    580e:	f04f 0300 	mov.w	r3, #0
    5812:	bf0c      	ite	eq
    5814:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    5816:	461a      	movne	r2, r3
    5818:	a901      	add	r1, sp, #4
    581a:	480b      	ldr	r0, [pc, #44]	; (5848 <xTimerGenericCommand+0x5c>)
    581c:	6880      	ldr	r0, [r0, #8]
    581e:	4c0c      	ldr	r4, [pc, #48]	; (5850 <xTimerGenericCommand+0x64>)
    5820:	47a0      	blx	r4
}
    5822:	b005      	add	sp, #20
    5824:	bd30      	pop	{r4, r5, pc}
    5826:	f04f 0380 	mov.w	r3, #128	; 0x80
    582a:	f383 8811 	msr	BASEPRI, r3
    582e:	f3bf 8f6f 	isb	sy
    5832:	f3bf 8f4f 	dsb	sy
    5836:	e7fe      	b.n	5836 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    5838:	2300      	movs	r3, #0
    583a:	a901      	add	r1, sp, #4
    583c:	4c05      	ldr	r4, [pc, #20]	; (5854 <xTimerGenericCommand+0x68>)
    583e:	47a0      	blx	r4
    5840:	e7ef      	b.n	5822 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    5842:	2000      	movs	r0, #0
	return xReturn;
    5844:	e7ed      	b.n	5822 <xTimerGenericCommand+0x36>
    5846:	bf00      	nop
    5848:	20003408 	.word	0x20003408
    584c:	00005301 	.word	0x00005301
    5850:	000042f1 	.word	0x000042f1
    5854:	000044f9 	.word	0x000044f9

00005858 <prvSampleTimeNow>:
{
    5858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    585c:	b082      	sub	sp, #8
    585e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    5860:	4b23      	ldr	r3, [pc, #140]	; (58f0 <prvSampleTimeNow+0x98>)
    5862:	4798      	blx	r3
    5864:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    5866:	4b23      	ldr	r3, [pc, #140]	; (58f4 <prvSampleTimeNow+0x9c>)
    5868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    586a:	4298      	cmp	r0, r3
    586c:	d319      	bcc.n	58a2 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    586e:	2300      	movs	r3, #0
    5870:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    5874:	4b1f      	ldr	r3, [pc, #124]	; (58f4 <prvSampleTimeNow+0x9c>)
    5876:	639f      	str	r7, [r3, #56]	; 0x38
}
    5878:	4638      	mov	r0, r7
    587a:	b002      	add	sp, #8
    587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5880:	2100      	movs	r1, #0
    5882:	9100      	str	r1, [sp, #0]
    5884:	460b      	mov	r3, r1
    5886:	4652      	mov	r2, sl
    5888:	4620      	mov	r0, r4
    588a:	4c1b      	ldr	r4, [pc, #108]	; (58f8 <prvSampleTimeNow+0xa0>)
    588c:	47a0      	blx	r4
				configASSERT(xResult);
    588e:	b950      	cbnz	r0, 58a6 <prvSampleTimeNow+0x4e>
    5890:	f04f 0380 	mov.w	r3, #128	; 0x80
    5894:	f383 8811 	msr	BASEPRI, r3
    5898:	f3bf 8f6f 	isb	sy
    589c:	f3bf 8f4f 	dsb	sy
    58a0:	e7fe      	b.n	58a0 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    58a2:	4d14      	ldr	r5, [pc, #80]	; (58f4 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    58a4:	4e15      	ldr	r6, [pc, #84]	; (58fc <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    58a6:	686b      	ldr	r3, [r5, #4]
    58a8:	681a      	ldr	r2, [r3, #0]
    58aa:	b1c2      	cbz	r2, 58de <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    58ac:	68db      	ldr	r3, [r3, #12]
    58ae:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    58b2:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    58b4:	f104 0904 	add.w	r9, r4, #4
    58b8:	4648      	mov	r0, r9
    58ba:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    58bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58be:	4620      	mov	r0, r4
    58c0:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    58c2:	69e3      	ldr	r3, [r4, #28]
    58c4:	2b01      	cmp	r3, #1
    58c6:	d1ee      	bne.n	58a6 <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    58c8:	69a3      	ldr	r3, [r4, #24]
    58ca:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    58cc:	459a      	cmp	sl, r3
    58ce:	d2d7      	bcs.n	5880 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    58d0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    58d2:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    58d4:	4649      	mov	r1, r9
    58d6:	6868      	ldr	r0, [r5, #4]
    58d8:	4b09      	ldr	r3, [pc, #36]	; (5900 <prvSampleTimeNow+0xa8>)
    58da:	4798      	blx	r3
    58dc:	e7e3      	b.n	58a6 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    58de:	4a05      	ldr	r2, [pc, #20]	; (58f4 <prvSampleTimeNow+0x9c>)
    58e0:	6811      	ldr	r1, [r2, #0]
    58e2:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    58e4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    58e6:	2301      	movs	r3, #1
    58e8:	f8c8 3000 	str.w	r3, [r8]
    58ec:	e7c2      	b.n	5874 <prvSampleTimeNow+0x1c>
    58ee:	bf00      	nop
    58f0:	00004d41 	.word	0x00004d41
    58f4:	20003408 	.word	0x20003408
    58f8:	000057ed 	.word	0x000057ed
    58fc:	00003b51 	.word	0x00003b51
    5900:	00003b1d 	.word	0x00003b1d

00005904 <prvTimerTask>:
{
    5904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5908:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    590a:	4c65      	ldr	r4, [pc, #404]	; (5aa0 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    590c:	4f65      	ldr	r7, [pc, #404]	; (5aa4 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    590e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5ac4 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5912:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5ac8 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    5916:	6863      	ldr	r3, [r4, #4]
    5918:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    591a:	b172      	cbz	r2, 593a <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    591c:	68db      	ldr	r3, [r3, #12]
    591e:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    5920:	4b61      	ldr	r3, [pc, #388]	; (5aa8 <prvTimerTask+0x1a4>)
    5922:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5924:	a803      	add	r0, sp, #12
    5926:	4b61      	ldr	r3, [pc, #388]	; (5aac <prvTimerTask+0x1a8>)
    5928:	4798      	blx	r3
    592a:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    592c:	9b03      	ldr	r3, [sp, #12]
    592e:	2b00      	cmp	r3, #0
    5930:	d179      	bne.n	5a26 <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    5932:	42a8      	cmp	r0, r5
    5934:	d24a      	bcs.n	59cc <prvTimerTask+0xc8>
    5936:	2200      	movs	r2, #0
    5938:	e00e      	b.n	5958 <prvTimerTask+0x54>
	vTaskSuspendAll();
    593a:	4b5b      	ldr	r3, [pc, #364]	; (5aa8 <prvTimerTask+0x1a4>)
    593c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    593e:	a803      	add	r0, sp, #12
    5940:	4b5a      	ldr	r3, [pc, #360]	; (5aac <prvTimerTask+0x1a8>)
    5942:	4798      	blx	r3
    5944:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    5946:	9b03      	ldr	r3, [sp, #12]
    5948:	2b00      	cmp	r3, #0
    594a:	d16c      	bne.n	5a26 <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    594c:	6823      	ldr	r3, [r4, #0]
    594e:	681a      	ldr	r2, [r3, #0]
    5950:	fab2 f282 	clz	r2, r2
    5954:	0952      	lsrs	r2, r2, #5
    5956:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    5958:	1ba9      	subs	r1, r5, r6
    595a:	68a0      	ldr	r0, [r4, #8]
    595c:	4b54      	ldr	r3, [pc, #336]	; (5ab0 <prvTimerTask+0x1ac>)
    595e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5960:	47b8      	blx	r7
    5962:	b938      	cbnz	r0, 5974 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    5964:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5968:	f8c9 3000 	str.w	r3, [r9]
    596c:	f3bf 8f4f 	dsb	sy
    5970:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    5974:	4d4f      	ldr	r5, [pc, #316]	; (5ab4 <prvTimerTask+0x1b0>)
    5976:	2200      	movs	r2, #0
    5978:	a903      	add	r1, sp, #12
    597a:	68a0      	ldr	r0, [r4, #8]
    597c:	47a8      	blx	r5
    597e:	2800      	cmp	r0, #0
    5980:	d0c9      	beq.n	5916 <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    5982:	9b03      	ldr	r3, [sp, #12]
    5984:	2b00      	cmp	r3, #0
    5986:	dbf6      	blt.n	5976 <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5988:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    598a:	6973      	ldr	r3, [r6, #20]
    598c:	b10b      	cbz	r3, 5992 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    598e:	1d30      	adds	r0, r6, #4
    5990:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5992:	a802      	add	r0, sp, #8
    5994:	4b45      	ldr	r3, [pc, #276]	; (5aac <prvTimerTask+0x1a8>)
    5996:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    5998:	9b03      	ldr	r3, [sp, #12]
    599a:	2b09      	cmp	r3, #9
    599c:	d8eb      	bhi.n	5976 <prvTimerTask+0x72>
    599e:	a201      	add	r2, pc, #4	; (adr r2, 59a4 <prvTimerTask+0xa0>)
    59a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59a4:	00005a2b 	.word	0x00005a2b
    59a8:	00005a2b 	.word	0x00005a2b
    59ac:	00005a2b 	.word	0x00005a2b
    59b0:	00005977 	.word	0x00005977
    59b4:	00005a73 	.word	0x00005a73
    59b8:	00005a99 	.word	0x00005a99
    59bc:	00005a2b 	.word	0x00005a2b
    59c0:	00005a2b 	.word	0x00005a2b
    59c4:	00005977 	.word	0x00005977
    59c8:	00005a73 	.word	0x00005a73
				(void)xTaskResumeAll();
    59cc:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    59ce:	6863      	ldr	r3, [r4, #4]
    59d0:	68db      	ldr	r3, [r3, #12]
    59d2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    59d6:	f10a 0004 	add.w	r0, sl, #4
    59da:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    59dc:	f8da 301c 	ldr.w	r3, [sl, #28]
    59e0:	2b01      	cmp	r3, #1
    59e2:	d004      	beq.n	59ee <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    59e4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    59e8:	4650      	mov	r0, sl
    59ea:	4798      	blx	r3
    59ec:	e7c2      	b.n	5974 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    59ee:	f8da 1018 	ldr.w	r1, [sl, #24]
    59f2:	462b      	mov	r3, r5
    59f4:	4632      	mov	r2, r6
    59f6:	4429      	add	r1, r5
    59f8:	4650      	mov	r0, sl
    59fa:	4e2f      	ldr	r6, [pc, #188]	; (5ab8 <prvTimerTask+0x1b4>)
    59fc:	47b0      	blx	r6
    59fe:	2800      	cmp	r0, #0
    5a00:	d0f0      	beq.n	59e4 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5a02:	2100      	movs	r1, #0
    5a04:	9100      	str	r1, [sp, #0]
    5a06:	460b      	mov	r3, r1
    5a08:	462a      	mov	r2, r5
    5a0a:	4650      	mov	r0, sl
    5a0c:	4d2b      	ldr	r5, [pc, #172]	; (5abc <prvTimerTask+0x1b8>)
    5a0e:	47a8      	blx	r5
			configASSERT(xResult);
    5a10:	2800      	cmp	r0, #0
    5a12:	d1e7      	bne.n	59e4 <prvTimerTask+0xe0>
    5a14:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a18:	f383 8811 	msr	BASEPRI, r3
    5a1c:	f3bf 8f6f 	isb	sy
    5a20:	f3bf 8f4f 	dsb	sy
    5a24:	e7fe      	b.n	5a24 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    5a26:	47b8      	blx	r7
    5a28:	e7a4      	b.n	5974 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    5a2a:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    5a2c:	69b1      	ldr	r1, [r6, #24]
    5a2e:	462b      	mov	r3, r5
    5a30:	4602      	mov	r2, r0
    5a32:	4429      	add	r1, r5
    5a34:	4630      	mov	r0, r6
    5a36:	4d20      	ldr	r5, [pc, #128]	; (5ab8 <prvTimerTask+0x1b4>)
    5a38:	47a8      	blx	r5
    5a3a:	2800      	cmp	r0, #0
    5a3c:	d09a      	beq.n	5974 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5a3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5a40:	4630      	mov	r0, r6
    5a42:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5a44:	69f3      	ldr	r3, [r6, #28]
    5a46:	2b01      	cmp	r3, #1
    5a48:	d194      	bne.n	5974 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    5a4a:	69b2      	ldr	r2, [r6, #24]
    5a4c:	2100      	movs	r1, #0
    5a4e:	9100      	str	r1, [sp, #0]
    5a50:	460b      	mov	r3, r1
    5a52:	9804      	ldr	r0, [sp, #16]
    5a54:	4402      	add	r2, r0
    5a56:	4630      	mov	r0, r6
    5a58:	4d18      	ldr	r5, [pc, #96]	; (5abc <prvTimerTask+0x1b8>)
    5a5a:	47a8      	blx	r5
						configASSERT(xResult);
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d189      	bne.n	5974 <prvTimerTask+0x70>
    5a60:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a64:	f383 8811 	msr	BASEPRI, r3
    5a68:	f3bf 8f6f 	isb	sy
    5a6c:	f3bf 8f4f 	dsb	sy
    5a70:	e7fe      	b.n	5a70 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5a72:	9904      	ldr	r1, [sp, #16]
    5a74:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    5a76:	b131      	cbz	r1, 5a86 <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    5a78:	4603      	mov	r3, r0
    5a7a:	4602      	mov	r2, r0
    5a7c:	4401      	add	r1, r0
    5a7e:	4630      	mov	r0, r6
    5a80:	4d0d      	ldr	r5, [pc, #52]	; (5ab8 <prvTimerTask+0x1b4>)
    5a82:	47a8      	blx	r5
    5a84:	e776      	b.n	5974 <prvTimerTask+0x70>
    5a86:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a8a:	f383 8811 	msr	BASEPRI, r3
    5a8e:	f3bf 8f6f 	isb	sy
    5a92:	f3bf 8f4f 	dsb	sy
    5a96:	e7fe      	b.n	5a96 <prvTimerTask+0x192>
				vPortFree(pxTimer);
    5a98:	4630      	mov	r0, r6
    5a9a:	4b09      	ldr	r3, [pc, #36]	; (5ac0 <prvTimerTask+0x1bc>)
    5a9c:	4798      	blx	r3
    5a9e:	e769      	b.n	5974 <prvTimerTask+0x70>
    5aa0:	20003408 	.word	0x20003408
    5aa4:	00004e75 	.word	0x00004e75
    5aa8:	00004d2d 	.word	0x00004d2d
    5aac:	00005859 	.word	0x00005859
    5ab0:	00004999 	.word	0x00004999
    5ab4:	00004601 	.word	0x00004601
    5ab8:	00005705 	.word	0x00005705
    5abc:	000057ed 	.word	0x000057ed
    5ac0:	00003fc9 	.word	0x00003fc9
    5ac4:	e000ed04 	.word	0xe000ed04
    5ac8:	00003b51 	.word	0x00003b51

00005acc <__libc_init_array>:
    5acc:	b570      	push	{r4, r5, r6, lr}
    5ace:	4e0d      	ldr	r6, [pc, #52]	; (5b04 <__libc_init_array+0x38>)
    5ad0:	4c0d      	ldr	r4, [pc, #52]	; (5b08 <__libc_init_array+0x3c>)
    5ad2:	1ba4      	subs	r4, r4, r6
    5ad4:	10a4      	asrs	r4, r4, #2
    5ad6:	2500      	movs	r5, #0
    5ad8:	42a5      	cmp	r5, r4
    5ada:	d109      	bne.n	5af0 <__libc_init_array+0x24>
    5adc:	4e0b      	ldr	r6, [pc, #44]	; (5b0c <__libc_init_array+0x40>)
    5ade:	4c0c      	ldr	r4, [pc, #48]	; (5b10 <__libc_init_array+0x44>)
    5ae0:	f001 ff22 	bl	7928 <_init>
    5ae4:	1ba4      	subs	r4, r4, r6
    5ae6:	10a4      	asrs	r4, r4, #2
    5ae8:	2500      	movs	r5, #0
    5aea:	42a5      	cmp	r5, r4
    5aec:	d105      	bne.n	5afa <__libc_init_array+0x2e>
    5aee:	bd70      	pop	{r4, r5, r6, pc}
    5af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5af4:	4798      	blx	r3
    5af6:	3501      	adds	r5, #1
    5af8:	e7ee      	b.n	5ad8 <__libc_init_array+0xc>
    5afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5afe:	4798      	blx	r3
    5b00:	3501      	adds	r5, #1
    5b02:	e7f2      	b.n	5aea <__libc_init_array+0x1e>
    5b04:	00007934 	.word	0x00007934
    5b08:	00007934 	.word	0x00007934
    5b0c:	00007934 	.word	0x00007934
    5b10:	00007938 	.word	0x00007938

00005b14 <memcmp>:
    5b14:	b510      	push	{r4, lr}
    5b16:	3901      	subs	r1, #1
    5b18:	4402      	add	r2, r0
    5b1a:	4290      	cmp	r0, r2
    5b1c:	d101      	bne.n	5b22 <memcmp+0xe>
    5b1e:	2000      	movs	r0, #0
    5b20:	bd10      	pop	{r4, pc}
    5b22:	f810 3b01 	ldrb.w	r3, [r0], #1
    5b26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5b2a:	42a3      	cmp	r3, r4
    5b2c:	d0f5      	beq.n	5b1a <memcmp+0x6>
    5b2e:	1b18      	subs	r0, r3, r4
    5b30:	bd10      	pop	{r4, pc}

00005b32 <memcpy>:
    5b32:	b510      	push	{r4, lr}
    5b34:	1e43      	subs	r3, r0, #1
    5b36:	440a      	add	r2, r1
    5b38:	4291      	cmp	r1, r2
    5b3a:	d100      	bne.n	5b3e <memcpy+0xc>
    5b3c:	bd10      	pop	{r4, pc}
    5b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
    5b42:	f803 4f01 	strb.w	r4, [r3, #1]!
    5b46:	e7f7      	b.n	5b38 <memcpy+0x6>

00005b48 <memmove>:
    5b48:	4288      	cmp	r0, r1
    5b4a:	b510      	push	{r4, lr}
    5b4c:	eb01 0302 	add.w	r3, r1, r2
    5b50:	d803      	bhi.n	5b5a <memmove+0x12>
    5b52:	1e42      	subs	r2, r0, #1
    5b54:	4299      	cmp	r1, r3
    5b56:	d10c      	bne.n	5b72 <memmove+0x2a>
    5b58:	bd10      	pop	{r4, pc}
    5b5a:	4298      	cmp	r0, r3
    5b5c:	d2f9      	bcs.n	5b52 <memmove+0xa>
    5b5e:	1881      	adds	r1, r0, r2
    5b60:	1ad2      	subs	r2, r2, r3
    5b62:	42d3      	cmn	r3, r2
    5b64:	d100      	bne.n	5b68 <memmove+0x20>
    5b66:	bd10      	pop	{r4, pc}
    5b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    5b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    5b70:	e7f7      	b.n	5b62 <memmove+0x1a>
    5b72:	f811 4b01 	ldrb.w	r4, [r1], #1
    5b76:	f802 4f01 	strb.w	r4, [r2, #1]!
    5b7a:	e7eb      	b.n	5b54 <memmove+0xc>

00005b7c <memset>:
    5b7c:	4402      	add	r2, r0
    5b7e:	4603      	mov	r3, r0
    5b80:	4293      	cmp	r3, r2
    5b82:	d100      	bne.n	5b86 <memset+0xa>
    5b84:	4770      	bx	lr
    5b86:	f803 1b01 	strb.w	r1, [r3], #1
    5b8a:	e7f9      	b.n	5b80 <memset+0x4>

00005b8c <_free_r>:
    5b8c:	b538      	push	{r3, r4, r5, lr}
    5b8e:	4605      	mov	r5, r0
    5b90:	2900      	cmp	r1, #0
    5b92:	d045      	beq.n	5c20 <_free_r+0x94>
    5b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5b98:	1f0c      	subs	r4, r1, #4
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	bfb8      	it	lt
    5b9e:	18e4      	addlt	r4, r4, r3
    5ba0:	f000 f8f6 	bl	5d90 <__malloc_lock>
    5ba4:	4a1f      	ldr	r2, [pc, #124]	; (5c24 <_free_r+0x98>)
    5ba6:	6813      	ldr	r3, [r2, #0]
    5ba8:	4610      	mov	r0, r2
    5baa:	b933      	cbnz	r3, 5bba <_free_r+0x2e>
    5bac:	6063      	str	r3, [r4, #4]
    5bae:	6014      	str	r4, [r2, #0]
    5bb0:	4628      	mov	r0, r5
    5bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5bb6:	f000 b8ec 	b.w	5d92 <__malloc_unlock>
    5bba:	42a3      	cmp	r3, r4
    5bbc:	d90c      	bls.n	5bd8 <_free_r+0x4c>
    5bbe:	6821      	ldr	r1, [r4, #0]
    5bc0:	1862      	adds	r2, r4, r1
    5bc2:	4293      	cmp	r3, r2
    5bc4:	bf04      	itt	eq
    5bc6:	681a      	ldreq	r2, [r3, #0]
    5bc8:	685b      	ldreq	r3, [r3, #4]
    5bca:	6063      	str	r3, [r4, #4]
    5bcc:	bf04      	itt	eq
    5bce:	1852      	addeq	r2, r2, r1
    5bd0:	6022      	streq	r2, [r4, #0]
    5bd2:	6004      	str	r4, [r0, #0]
    5bd4:	e7ec      	b.n	5bb0 <_free_r+0x24>
    5bd6:	4613      	mov	r3, r2
    5bd8:	685a      	ldr	r2, [r3, #4]
    5bda:	b10a      	cbz	r2, 5be0 <_free_r+0x54>
    5bdc:	42a2      	cmp	r2, r4
    5bde:	d9fa      	bls.n	5bd6 <_free_r+0x4a>
    5be0:	6819      	ldr	r1, [r3, #0]
    5be2:	1858      	adds	r0, r3, r1
    5be4:	42a0      	cmp	r0, r4
    5be6:	d10b      	bne.n	5c00 <_free_r+0x74>
    5be8:	6820      	ldr	r0, [r4, #0]
    5bea:	4401      	add	r1, r0
    5bec:	1858      	adds	r0, r3, r1
    5bee:	4282      	cmp	r2, r0
    5bf0:	6019      	str	r1, [r3, #0]
    5bf2:	d1dd      	bne.n	5bb0 <_free_r+0x24>
    5bf4:	6810      	ldr	r0, [r2, #0]
    5bf6:	6852      	ldr	r2, [r2, #4]
    5bf8:	605a      	str	r2, [r3, #4]
    5bfa:	4401      	add	r1, r0
    5bfc:	6019      	str	r1, [r3, #0]
    5bfe:	e7d7      	b.n	5bb0 <_free_r+0x24>
    5c00:	d902      	bls.n	5c08 <_free_r+0x7c>
    5c02:	230c      	movs	r3, #12
    5c04:	602b      	str	r3, [r5, #0]
    5c06:	e7d3      	b.n	5bb0 <_free_r+0x24>
    5c08:	6820      	ldr	r0, [r4, #0]
    5c0a:	1821      	adds	r1, r4, r0
    5c0c:	428a      	cmp	r2, r1
    5c0e:	bf04      	itt	eq
    5c10:	6811      	ldreq	r1, [r2, #0]
    5c12:	6852      	ldreq	r2, [r2, #4]
    5c14:	6062      	str	r2, [r4, #4]
    5c16:	bf04      	itt	eq
    5c18:	1809      	addeq	r1, r1, r0
    5c1a:	6021      	streq	r1, [r4, #0]
    5c1c:	605c      	str	r4, [r3, #4]
    5c1e:	e7c7      	b.n	5bb0 <_free_r+0x24>
    5c20:	bd38      	pop	{r3, r4, r5, pc}
    5c22:	bf00      	nop
    5c24:	20003444 	.word	0x20003444

00005c28 <_malloc_r>:
    5c28:	b570      	push	{r4, r5, r6, lr}
    5c2a:	1ccd      	adds	r5, r1, #3
    5c2c:	f025 0503 	bic.w	r5, r5, #3
    5c30:	3508      	adds	r5, #8
    5c32:	2d0c      	cmp	r5, #12
    5c34:	bf38      	it	cc
    5c36:	250c      	movcc	r5, #12
    5c38:	2d00      	cmp	r5, #0
    5c3a:	4606      	mov	r6, r0
    5c3c:	db01      	blt.n	5c42 <_malloc_r+0x1a>
    5c3e:	42a9      	cmp	r1, r5
    5c40:	d903      	bls.n	5c4a <_malloc_r+0x22>
    5c42:	230c      	movs	r3, #12
    5c44:	6033      	str	r3, [r6, #0]
    5c46:	2000      	movs	r0, #0
    5c48:	bd70      	pop	{r4, r5, r6, pc}
    5c4a:	f000 f8a1 	bl	5d90 <__malloc_lock>
    5c4e:	4a23      	ldr	r2, [pc, #140]	; (5cdc <_malloc_r+0xb4>)
    5c50:	6814      	ldr	r4, [r2, #0]
    5c52:	4621      	mov	r1, r4
    5c54:	b991      	cbnz	r1, 5c7c <_malloc_r+0x54>
    5c56:	4c22      	ldr	r4, [pc, #136]	; (5ce0 <_malloc_r+0xb8>)
    5c58:	6823      	ldr	r3, [r4, #0]
    5c5a:	b91b      	cbnz	r3, 5c64 <_malloc_r+0x3c>
    5c5c:	4630      	mov	r0, r6
    5c5e:	f000 f841 	bl	5ce4 <_sbrk_r>
    5c62:	6020      	str	r0, [r4, #0]
    5c64:	4629      	mov	r1, r5
    5c66:	4630      	mov	r0, r6
    5c68:	f000 f83c 	bl	5ce4 <_sbrk_r>
    5c6c:	1c43      	adds	r3, r0, #1
    5c6e:	d126      	bne.n	5cbe <_malloc_r+0x96>
    5c70:	230c      	movs	r3, #12
    5c72:	6033      	str	r3, [r6, #0]
    5c74:	4630      	mov	r0, r6
    5c76:	f000 f88c 	bl	5d92 <__malloc_unlock>
    5c7a:	e7e4      	b.n	5c46 <_malloc_r+0x1e>
    5c7c:	680b      	ldr	r3, [r1, #0]
    5c7e:	1b5b      	subs	r3, r3, r5
    5c80:	d41a      	bmi.n	5cb8 <_malloc_r+0x90>
    5c82:	2b0b      	cmp	r3, #11
    5c84:	d90f      	bls.n	5ca6 <_malloc_r+0x7e>
    5c86:	600b      	str	r3, [r1, #0]
    5c88:	50cd      	str	r5, [r1, r3]
    5c8a:	18cc      	adds	r4, r1, r3
    5c8c:	4630      	mov	r0, r6
    5c8e:	f000 f880 	bl	5d92 <__malloc_unlock>
    5c92:	f104 000b 	add.w	r0, r4, #11
    5c96:	1d23      	adds	r3, r4, #4
    5c98:	f020 0007 	bic.w	r0, r0, #7
    5c9c:	1ac3      	subs	r3, r0, r3
    5c9e:	d01b      	beq.n	5cd8 <_malloc_r+0xb0>
    5ca0:	425a      	negs	r2, r3
    5ca2:	50e2      	str	r2, [r4, r3]
    5ca4:	bd70      	pop	{r4, r5, r6, pc}
    5ca6:	428c      	cmp	r4, r1
    5ca8:	bf0d      	iteet	eq
    5caa:	6863      	ldreq	r3, [r4, #4]
    5cac:	684b      	ldrne	r3, [r1, #4]
    5cae:	6063      	strne	r3, [r4, #4]
    5cb0:	6013      	streq	r3, [r2, #0]
    5cb2:	bf18      	it	ne
    5cb4:	460c      	movne	r4, r1
    5cb6:	e7e9      	b.n	5c8c <_malloc_r+0x64>
    5cb8:	460c      	mov	r4, r1
    5cba:	6849      	ldr	r1, [r1, #4]
    5cbc:	e7ca      	b.n	5c54 <_malloc_r+0x2c>
    5cbe:	1cc4      	adds	r4, r0, #3
    5cc0:	f024 0403 	bic.w	r4, r4, #3
    5cc4:	42a0      	cmp	r0, r4
    5cc6:	d005      	beq.n	5cd4 <_malloc_r+0xac>
    5cc8:	1a21      	subs	r1, r4, r0
    5cca:	4630      	mov	r0, r6
    5ccc:	f000 f80a 	bl	5ce4 <_sbrk_r>
    5cd0:	3001      	adds	r0, #1
    5cd2:	d0cd      	beq.n	5c70 <_malloc_r+0x48>
    5cd4:	6025      	str	r5, [r4, #0]
    5cd6:	e7d9      	b.n	5c8c <_malloc_r+0x64>
    5cd8:	bd70      	pop	{r4, r5, r6, pc}
    5cda:	bf00      	nop
    5cdc:	20003444 	.word	0x20003444
    5ce0:	20003448 	.word	0x20003448

00005ce4 <_sbrk_r>:
    5ce4:	b538      	push	{r3, r4, r5, lr}
    5ce6:	4c06      	ldr	r4, [pc, #24]	; (5d00 <_sbrk_r+0x1c>)
    5ce8:	2300      	movs	r3, #0
    5cea:	4605      	mov	r5, r0
    5cec:	4608      	mov	r0, r1
    5cee:	6023      	str	r3, [r4, #0]
    5cf0:	f7fc fbc6 	bl	2480 <_sbrk>
    5cf4:	1c43      	adds	r3, r0, #1
    5cf6:	d102      	bne.n	5cfe <_sbrk_r+0x1a>
    5cf8:	6823      	ldr	r3, [r4, #0]
    5cfa:	b103      	cbz	r3, 5cfe <_sbrk_r+0x1a>
    5cfc:	602b      	str	r3, [r5, #0]
    5cfe:	bd38      	pop	{r3, r4, r5, pc}
    5d00:	20003e64 	.word	0x20003e64

00005d04 <siprintf>:
    5d04:	b40e      	push	{r1, r2, r3}
    5d06:	b500      	push	{lr}
    5d08:	b09c      	sub	sp, #112	; 0x70
    5d0a:	f44f 7102 	mov.w	r1, #520	; 0x208
    5d0e:	ab1d      	add	r3, sp, #116	; 0x74
    5d10:	f8ad 1014 	strh.w	r1, [sp, #20]
    5d14:	9002      	str	r0, [sp, #8]
    5d16:	9006      	str	r0, [sp, #24]
    5d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5d1c:	480a      	ldr	r0, [pc, #40]	; (5d48 <siprintf+0x44>)
    5d1e:	9104      	str	r1, [sp, #16]
    5d20:	9107      	str	r1, [sp, #28]
    5d22:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d26:	f853 2b04 	ldr.w	r2, [r3], #4
    5d2a:	f8ad 1016 	strh.w	r1, [sp, #22]
    5d2e:	6800      	ldr	r0, [r0, #0]
    5d30:	9301      	str	r3, [sp, #4]
    5d32:	a902      	add	r1, sp, #8
    5d34:	f000 f88a 	bl	5e4c <_svfiprintf_r>
    5d38:	9b02      	ldr	r3, [sp, #8]
    5d3a:	2200      	movs	r2, #0
    5d3c:	701a      	strb	r2, [r3, #0]
    5d3e:	b01c      	add	sp, #112	; 0x70
    5d40:	f85d eb04 	ldr.w	lr, [sp], #4
    5d44:	b003      	add	sp, #12
    5d46:	4770      	bx	lr
    5d48:	20000128 	.word	0x20000128

00005d4c <strcpy>:
    5d4c:	4603      	mov	r3, r0
    5d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
    5d52:	f803 2b01 	strb.w	r2, [r3], #1
    5d56:	2a00      	cmp	r2, #0
    5d58:	d1f9      	bne.n	5d4e <strcpy+0x2>
    5d5a:	4770      	bx	lr

00005d5c <strlen>:
    5d5c:	4603      	mov	r3, r0
    5d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
    5d62:	2a00      	cmp	r2, #0
    5d64:	d1fb      	bne.n	5d5e <strlen+0x2>
    5d66:	1a18      	subs	r0, r3, r0
    5d68:	3801      	subs	r0, #1
    5d6a:	4770      	bx	lr

00005d6c <strncmp>:
    5d6c:	b510      	push	{r4, lr}
    5d6e:	b16a      	cbz	r2, 5d8c <strncmp+0x20>
    5d70:	3901      	subs	r1, #1
    5d72:	1884      	adds	r4, r0, r2
    5d74:	f810 3b01 	ldrb.w	r3, [r0], #1
    5d78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5d7c:	4293      	cmp	r3, r2
    5d7e:	d103      	bne.n	5d88 <strncmp+0x1c>
    5d80:	42a0      	cmp	r0, r4
    5d82:	d001      	beq.n	5d88 <strncmp+0x1c>
    5d84:	2b00      	cmp	r3, #0
    5d86:	d1f5      	bne.n	5d74 <strncmp+0x8>
    5d88:	1a98      	subs	r0, r3, r2
    5d8a:	bd10      	pop	{r4, pc}
    5d8c:	4610      	mov	r0, r2
    5d8e:	bd10      	pop	{r4, pc}

00005d90 <__malloc_lock>:
    5d90:	4770      	bx	lr

00005d92 <__malloc_unlock>:
    5d92:	4770      	bx	lr

00005d94 <__ssputs_r>:
    5d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d98:	688e      	ldr	r6, [r1, #8]
    5d9a:	429e      	cmp	r6, r3
    5d9c:	4682      	mov	sl, r0
    5d9e:	460c      	mov	r4, r1
    5da0:	4691      	mov	r9, r2
    5da2:	4698      	mov	r8, r3
    5da4:	d835      	bhi.n	5e12 <__ssputs_r+0x7e>
    5da6:	898a      	ldrh	r2, [r1, #12]
    5da8:	f412 6f90 	tst.w	r2, #1152	; 0x480
    5dac:	d031      	beq.n	5e12 <__ssputs_r+0x7e>
    5dae:	6825      	ldr	r5, [r4, #0]
    5db0:	6909      	ldr	r1, [r1, #16]
    5db2:	1a6f      	subs	r7, r5, r1
    5db4:	6965      	ldr	r5, [r4, #20]
    5db6:	2302      	movs	r3, #2
    5db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5dbc:	fb95 f5f3 	sdiv	r5, r5, r3
    5dc0:	f108 0301 	add.w	r3, r8, #1
    5dc4:	443b      	add	r3, r7
    5dc6:	429d      	cmp	r5, r3
    5dc8:	bf38      	it	cc
    5dca:	461d      	movcc	r5, r3
    5dcc:	0553      	lsls	r3, r2, #21
    5dce:	d531      	bpl.n	5e34 <__ssputs_r+0xa0>
    5dd0:	4629      	mov	r1, r5
    5dd2:	f7ff ff29 	bl	5c28 <_malloc_r>
    5dd6:	4606      	mov	r6, r0
    5dd8:	b950      	cbnz	r0, 5df0 <__ssputs_r+0x5c>
    5dda:	230c      	movs	r3, #12
    5ddc:	f8ca 3000 	str.w	r3, [sl]
    5de0:	89a3      	ldrh	r3, [r4, #12]
    5de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5de6:	81a3      	strh	r3, [r4, #12]
    5de8:	f04f 30ff 	mov.w	r0, #4294967295
    5dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5df0:	463a      	mov	r2, r7
    5df2:	6921      	ldr	r1, [r4, #16]
    5df4:	f7ff fe9d 	bl	5b32 <memcpy>
    5df8:	89a3      	ldrh	r3, [r4, #12]
    5dfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    5dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5e02:	81a3      	strh	r3, [r4, #12]
    5e04:	6126      	str	r6, [r4, #16]
    5e06:	6165      	str	r5, [r4, #20]
    5e08:	443e      	add	r6, r7
    5e0a:	1bed      	subs	r5, r5, r7
    5e0c:	6026      	str	r6, [r4, #0]
    5e0e:	60a5      	str	r5, [r4, #8]
    5e10:	4646      	mov	r6, r8
    5e12:	4546      	cmp	r6, r8
    5e14:	bf28      	it	cs
    5e16:	4646      	movcs	r6, r8
    5e18:	4632      	mov	r2, r6
    5e1a:	4649      	mov	r1, r9
    5e1c:	6820      	ldr	r0, [r4, #0]
    5e1e:	f7ff fe93 	bl	5b48 <memmove>
    5e22:	68a3      	ldr	r3, [r4, #8]
    5e24:	1b9b      	subs	r3, r3, r6
    5e26:	60a3      	str	r3, [r4, #8]
    5e28:	6823      	ldr	r3, [r4, #0]
    5e2a:	441e      	add	r6, r3
    5e2c:	6026      	str	r6, [r4, #0]
    5e2e:	2000      	movs	r0, #0
    5e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e34:	462a      	mov	r2, r5
    5e36:	f000 fae3 	bl	6400 <_realloc_r>
    5e3a:	4606      	mov	r6, r0
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d1e1      	bne.n	5e04 <__ssputs_r+0x70>
    5e40:	6921      	ldr	r1, [r4, #16]
    5e42:	4650      	mov	r0, sl
    5e44:	f7ff fea2 	bl	5b8c <_free_r>
    5e48:	e7c7      	b.n	5dda <__ssputs_r+0x46>
	...

00005e4c <_svfiprintf_r>:
    5e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e50:	b09d      	sub	sp, #116	; 0x74
    5e52:	4680      	mov	r8, r0
    5e54:	9303      	str	r3, [sp, #12]
    5e56:	898b      	ldrh	r3, [r1, #12]
    5e58:	061c      	lsls	r4, r3, #24
    5e5a:	460d      	mov	r5, r1
    5e5c:	4616      	mov	r6, r2
    5e5e:	d50f      	bpl.n	5e80 <_svfiprintf_r+0x34>
    5e60:	690b      	ldr	r3, [r1, #16]
    5e62:	b96b      	cbnz	r3, 5e80 <_svfiprintf_r+0x34>
    5e64:	2140      	movs	r1, #64	; 0x40
    5e66:	f7ff fedf 	bl	5c28 <_malloc_r>
    5e6a:	6028      	str	r0, [r5, #0]
    5e6c:	6128      	str	r0, [r5, #16]
    5e6e:	b928      	cbnz	r0, 5e7c <_svfiprintf_r+0x30>
    5e70:	230c      	movs	r3, #12
    5e72:	f8c8 3000 	str.w	r3, [r8]
    5e76:	f04f 30ff 	mov.w	r0, #4294967295
    5e7a:	e0c5      	b.n	6008 <_svfiprintf_r+0x1bc>
    5e7c:	2340      	movs	r3, #64	; 0x40
    5e7e:	616b      	str	r3, [r5, #20]
    5e80:	2300      	movs	r3, #0
    5e82:	9309      	str	r3, [sp, #36]	; 0x24
    5e84:	2320      	movs	r3, #32
    5e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5e8a:	2330      	movs	r3, #48	; 0x30
    5e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5e90:	f04f 0b01 	mov.w	fp, #1
    5e94:	4637      	mov	r7, r6
    5e96:	463c      	mov	r4, r7
    5e98:	f814 3b01 	ldrb.w	r3, [r4], #1
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d13c      	bne.n	5f1a <_svfiprintf_r+0xce>
    5ea0:	ebb7 0a06 	subs.w	sl, r7, r6
    5ea4:	d00b      	beq.n	5ebe <_svfiprintf_r+0x72>
    5ea6:	4653      	mov	r3, sl
    5ea8:	4632      	mov	r2, r6
    5eaa:	4629      	mov	r1, r5
    5eac:	4640      	mov	r0, r8
    5eae:	f7ff ff71 	bl	5d94 <__ssputs_r>
    5eb2:	3001      	adds	r0, #1
    5eb4:	f000 80a3 	beq.w	5ffe <_svfiprintf_r+0x1b2>
    5eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5eba:	4453      	add	r3, sl
    5ebc:	9309      	str	r3, [sp, #36]	; 0x24
    5ebe:	783b      	ldrb	r3, [r7, #0]
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	f000 809c 	beq.w	5ffe <_svfiprintf_r+0x1b2>
    5ec6:	2300      	movs	r3, #0
    5ec8:	f04f 32ff 	mov.w	r2, #4294967295
    5ecc:	9304      	str	r3, [sp, #16]
    5ece:	9307      	str	r3, [sp, #28]
    5ed0:	9205      	str	r2, [sp, #20]
    5ed2:	9306      	str	r3, [sp, #24]
    5ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5ed8:	931a      	str	r3, [sp, #104]	; 0x68
    5eda:	2205      	movs	r2, #5
    5edc:	7821      	ldrb	r1, [r4, #0]
    5ede:	4850      	ldr	r0, [pc, #320]	; (6020 <_svfiprintf_r+0x1d4>)
    5ee0:	f000 fa3e 	bl	6360 <memchr>
    5ee4:	1c67      	adds	r7, r4, #1
    5ee6:	9b04      	ldr	r3, [sp, #16]
    5ee8:	b9d8      	cbnz	r0, 5f22 <_svfiprintf_r+0xd6>
    5eea:	06d9      	lsls	r1, r3, #27
    5eec:	bf44      	itt	mi
    5eee:	2220      	movmi	r2, #32
    5ef0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5ef4:	071a      	lsls	r2, r3, #28
    5ef6:	bf44      	itt	mi
    5ef8:	222b      	movmi	r2, #43	; 0x2b
    5efa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5efe:	7822      	ldrb	r2, [r4, #0]
    5f00:	2a2a      	cmp	r2, #42	; 0x2a
    5f02:	d016      	beq.n	5f32 <_svfiprintf_r+0xe6>
    5f04:	9a07      	ldr	r2, [sp, #28]
    5f06:	2100      	movs	r1, #0
    5f08:	200a      	movs	r0, #10
    5f0a:	4627      	mov	r7, r4
    5f0c:	3401      	adds	r4, #1
    5f0e:	783b      	ldrb	r3, [r7, #0]
    5f10:	3b30      	subs	r3, #48	; 0x30
    5f12:	2b09      	cmp	r3, #9
    5f14:	d951      	bls.n	5fba <_svfiprintf_r+0x16e>
    5f16:	b1c9      	cbz	r1, 5f4c <_svfiprintf_r+0x100>
    5f18:	e011      	b.n	5f3e <_svfiprintf_r+0xf2>
    5f1a:	2b25      	cmp	r3, #37	; 0x25
    5f1c:	d0c0      	beq.n	5ea0 <_svfiprintf_r+0x54>
    5f1e:	4627      	mov	r7, r4
    5f20:	e7b9      	b.n	5e96 <_svfiprintf_r+0x4a>
    5f22:	4a3f      	ldr	r2, [pc, #252]	; (6020 <_svfiprintf_r+0x1d4>)
    5f24:	1a80      	subs	r0, r0, r2
    5f26:	fa0b f000 	lsl.w	r0, fp, r0
    5f2a:	4318      	orrs	r0, r3
    5f2c:	9004      	str	r0, [sp, #16]
    5f2e:	463c      	mov	r4, r7
    5f30:	e7d3      	b.n	5eda <_svfiprintf_r+0x8e>
    5f32:	9a03      	ldr	r2, [sp, #12]
    5f34:	1d11      	adds	r1, r2, #4
    5f36:	6812      	ldr	r2, [r2, #0]
    5f38:	9103      	str	r1, [sp, #12]
    5f3a:	2a00      	cmp	r2, #0
    5f3c:	db01      	blt.n	5f42 <_svfiprintf_r+0xf6>
    5f3e:	9207      	str	r2, [sp, #28]
    5f40:	e004      	b.n	5f4c <_svfiprintf_r+0x100>
    5f42:	4252      	negs	r2, r2
    5f44:	f043 0302 	orr.w	r3, r3, #2
    5f48:	9207      	str	r2, [sp, #28]
    5f4a:	9304      	str	r3, [sp, #16]
    5f4c:	783b      	ldrb	r3, [r7, #0]
    5f4e:	2b2e      	cmp	r3, #46	; 0x2e
    5f50:	d10e      	bne.n	5f70 <_svfiprintf_r+0x124>
    5f52:	787b      	ldrb	r3, [r7, #1]
    5f54:	2b2a      	cmp	r3, #42	; 0x2a
    5f56:	f107 0101 	add.w	r1, r7, #1
    5f5a:	d132      	bne.n	5fc2 <_svfiprintf_r+0x176>
    5f5c:	9b03      	ldr	r3, [sp, #12]
    5f5e:	1d1a      	adds	r2, r3, #4
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	9203      	str	r2, [sp, #12]
    5f64:	2b00      	cmp	r3, #0
    5f66:	bfb8      	it	lt
    5f68:	f04f 33ff 	movlt.w	r3, #4294967295
    5f6c:	3702      	adds	r7, #2
    5f6e:	9305      	str	r3, [sp, #20]
    5f70:	4c2c      	ldr	r4, [pc, #176]	; (6024 <_svfiprintf_r+0x1d8>)
    5f72:	7839      	ldrb	r1, [r7, #0]
    5f74:	2203      	movs	r2, #3
    5f76:	4620      	mov	r0, r4
    5f78:	f000 f9f2 	bl	6360 <memchr>
    5f7c:	b138      	cbz	r0, 5f8e <_svfiprintf_r+0x142>
    5f7e:	2340      	movs	r3, #64	; 0x40
    5f80:	1b00      	subs	r0, r0, r4
    5f82:	fa03 f000 	lsl.w	r0, r3, r0
    5f86:	9b04      	ldr	r3, [sp, #16]
    5f88:	4303      	orrs	r3, r0
    5f8a:	9304      	str	r3, [sp, #16]
    5f8c:	3701      	adds	r7, #1
    5f8e:	7839      	ldrb	r1, [r7, #0]
    5f90:	4825      	ldr	r0, [pc, #148]	; (6028 <_svfiprintf_r+0x1dc>)
    5f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5f96:	2206      	movs	r2, #6
    5f98:	1c7e      	adds	r6, r7, #1
    5f9a:	f000 f9e1 	bl	6360 <memchr>
    5f9e:	2800      	cmp	r0, #0
    5fa0:	d035      	beq.n	600e <_svfiprintf_r+0x1c2>
    5fa2:	4b22      	ldr	r3, [pc, #136]	; (602c <_svfiprintf_r+0x1e0>)
    5fa4:	b9fb      	cbnz	r3, 5fe6 <_svfiprintf_r+0x19a>
    5fa6:	9b03      	ldr	r3, [sp, #12]
    5fa8:	3307      	adds	r3, #7
    5faa:	f023 0307 	bic.w	r3, r3, #7
    5fae:	3308      	adds	r3, #8
    5fb0:	9303      	str	r3, [sp, #12]
    5fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5fb4:	444b      	add	r3, r9
    5fb6:	9309      	str	r3, [sp, #36]	; 0x24
    5fb8:	e76c      	b.n	5e94 <_svfiprintf_r+0x48>
    5fba:	fb00 3202 	mla	r2, r0, r2, r3
    5fbe:	2101      	movs	r1, #1
    5fc0:	e7a3      	b.n	5f0a <_svfiprintf_r+0xbe>
    5fc2:	2300      	movs	r3, #0
    5fc4:	9305      	str	r3, [sp, #20]
    5fc6:	4618      	mov	r0, r3
    5fc8:	240a      	movs	r4, #10
    5fca:	460f      	mov	r7, r1
    5fcc:	3101      	adds	r1, #1
    5fce:	783a      	ldrb	r2, [r7, #0]
    5fd0:	3a30      	subs	r2, #48	; 0x30
    5fd2:	2a09      	cmp	r2, #9
    5fd4:	d903      	bls.n	5fde <_svfiprintf_r+0x192>
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d0ca      	beq.n	5f70 <_svfiprintf_r+0x124>
    5fda:	9005      	str	r0, [sp, #20]
    5fdc:	e7c8      	b.n	5f70 <_svfiprintf_r+0x124>
    5fde:	fb04 2000 	mla	r0, r4, r0, r2
    5fe2:	2301      	movs	r3, #1
    5fe4:	e7f1      	b.n	5fca <_svfiprintf_r+0x17e>
    5fe6:	ab03      	add	r3, sp, #12
    5fe8:	9300      	str	r3, [sp, #0]
    5fea:	462a      	mov	r2, r5
    5fec:	4b10      	ldr	r3, [pc, #64]	; (6030 <_svfiprintf_r+0x1e4>)
    5fee:	a904      	add	r1, sp, #16
    5ff0:	4640      	mov	r0, r8
    5ff2:	f3af 8000 	nop.w
    5ff6:	f1b0 3fff 	cmp.w	r0, #4294967295
    5ffa:	4681      	mov	r9, r0
    5ffc:	d1d9      	bne.n	5fb2 <_svfiprintf_r+0x166>
    5ffe:	89ab      	ldrh	r3, [r5, #12]
    6000:	065b      	lsls	r3, r3, #25
    6002:	f53f af38 	bmi.w	5e76 <_svfiprintf_r+0x2a>
    6006:	9809      	ldr	r0, [sp, #36]	; 0x24
    6008:	b01d      	add	sp, #116	; 0x74
    600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    600e:	ab03      	add	r3, sp, #12
    6010:	9300      	str	r3, [sp, #0]
    6012:	462a      	mov	r2, r5
    6014:	4b06      	ldr	r3, [pc, #24]	; (6030 <_svfiprintf_r+0x1e4>)
    6016:	a904      	add	r1, sp, #16
    6018:	4640      	mov	r0, r8
    601a:	f000 f881 	bl	6120 <_printf_i>
    601e:	e7ea      	b.n	5ff6 <_svfiprintf_r+0x1aa>
    6020:	000078f4 	.word	0x000078f4
    6024:	000078fa 	.word	0x000078fa
    6028:	000078fe 	.word	0x000078fe
    602c:	00000000 	.word	0x00000000
    6030:	00005d95 	.word	0x00005d95

00006034 <_printf_common>:
    6034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6038:	4691      	mov	r9, r2
    603a:	461f      	mov	r7, r3
    603c:	688a      	ldr	r2, [r1, #8]
    603e:	690b      	ldr	r3, [r1, #16]
    6040:	f8dd 8020 	ldr.w	r8, [sp, #32]
    6044:	4293      	cmp	r3, r2
    6046:	bfb8      	it	lt
    6048:	4613      	movlt	r3, r2
    604a:	f8c9 3000 	str.w	r3, [r9]
    604e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    6052:	4606      	mov	r6, r0
    6054:	460c      	mov	r4, r1
    6056:	b112      	cbz	r2, 605e <_printf_common+0x2a>
    6058:	3301      	adds	r3, #1
    605a:	f8c9 3000 	str.w	r3, [r9]
    605e:	6823      	ldr	r3, [r4, #0]
    6060:	0699      	lsls	r1, r3, #26
    6062:	bf42      	ittt	mi
    6064:	f8d9 3000 	ldrmi.w	r3, [r9]
    6068:	3302      	addmi	r3, #2
    606a:	f8c9 3000 	strmi.w	r3, [r9]
    606e:	6825      	ldr	r5, [r4, #0]
    6070:	f015 0506 	ands.w	r5, r5, #6
    6074:	d107      	bne.n	6086 <_printf_common+0x52>
    6076:	f104 0a19 	add.w	sl, r4, #25
    607a:	68e3      	ldr	r3, [r4, #12]
    607c:	f8d9 2000 	ldr.w	r2, [r9]
    6080:	1a9b      	subs	r3, r3, r2
    6082:	429d      	cmp	r5, r3
    6084:	db29      	blt.n	60da <_printf_common+0xa6>
    6086:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    608a:	6822      	ldr	r2, [r4, #0]
    608c:	3300      	adds	r3, #0
    608e:	bf18      	it	ne
    6090:	2301      	movne	r3, #1
    6092:	0692      	lsls	r2, r2, #26
    6094:	d42e      	bmi.n	60f4 <_printf_common+0xc0>
    6096:	f104 0243 	add.w	r2, r4, #67	; 0x43
    609a:	4639      	mov	r1, r7
    609c:	4630      	mov	r0, r6
    609e:	47c0      	blx	r8
    60a0:	3001      	adds	r0, #1
    60a2:	d021      	beq.n	60e8 <_printf_common+0xb4>
    60a4:	6823      	ldr	r3, [r4, #0]
    60a6:	68e5      	ldr	r5, [r4, #12]
    60a8:	f8d9 2000 	ldr.w	r2, [r9]
    60ac:	f003 0306 	and.w	r3, r3, #6
    60b0:	2b04      	cmp	r3, #4
    60b2:	bf08      	it	eq
    60b4:	1aad      	subeq	r5, r5, r2
    60b6:	68a3      	ldr	r3, [r4, #8]
    60b8:	6922      	ldr	r2, [r4, #16]
    60ba:	bf0c      	ite	eq
    60bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    60c0:	2500      	movne	r5, #0
    60c2:	4293      	cmp	r3, r2
    60c4:	bfc4      	itt	gt
    60c6:	1a9b      	subgt	r3, r3, r2
    60c8:	18ed      	addgt	r5, r5, r3
    60ca:	f04f 0900 	mov.w	r9, #0
    60ce:	341a      	adds	r4, #26
    60d0:	454d      	cmp	r5, r9
    60d2:	d11b      	bne.n	610c <_printf_common+0xd8>
    60d4:	2000      	movs	r0, #0
    60d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60da:	2301      	movs	r3, #1
    60dc:	4652      	mov	r2, sl
    60de:	4639      	mov	r1, r7
    60e0:	4630      	mov	r0, r6
    60e2:	47c0      	blx	r8
    60e4:	3001      	adds	r0, #1
    60e6:	d103      	bne.n	60f0 <_printf_common+0xbc>
    60e8:	f04f 30ff 	mov.w	r0, #4294967295
    60ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60f0:	3501      	adds	r5, #1
    60f2:	e7c2      	b.n	607a <_printf_common+0x46>
    60f4:	18e1      	adds	r1, r4, r3
    60f6:	1c5a      	adds	r2, r3, #1
    60f8:	2030      	movs	r0, #48	; 0x30
    60fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    60fe:	4422      	add	r2, r4
    6100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    6104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    6108:	3302      	adds	r3, #2
    610a:	e7c4      	b.n	6096 <_printf_common+0x62>
    610c:	2301      	movs	r3, #1
    610e:	4622      	mov	r2, r4
    6110:	4639      	mov	r1, r7
    6112:	4630      	mov	r0, r6
    6114:	47c0      	blx	r8
    6116:	3001      	adds	r0, #1
    6118:	d0e6      	beq.n	60e8 <_printf_common+0xb4>
    611a:	f109 0901 	add.w	r9, r9, #1
    611e:	e7d7      	b.n	60d0 <_printf_common+0x9c>

00006120 <_printf_i>:
    6120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6124:	4617      	mov	r7, r2
    6126:	7e0a      	ldrb	r2, [r1, #24]
    6128:	b085      	sub	sp, #20
    612a:	2a6e      	cmp	r2, #110	; 0x6e
    612c:	4698      	mov	r8, r3
    612e:	4606      	mov	r6, r0
    6130:	460c      	mov	r4, r1
    6132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6134:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    6138:	f000 80bc 	beq.w	62b4 <_printf_i+0x194>
    613c:	d81a      	bhi.n	6174 <_printf_i+0x54>
    613e:	2a63      	cmp	r2, #99	; 0x63
    6140:	d02e      	beq.n	61a0 <_printf_i+0x80>
    6142:	d80a      	bhi.n	615a <_printf_i+0x3a>
    6144:	2a00      	cmp	r2, #0
    6146:	f000 80c8 	beq.w	62da <_printf_i+0x1ba>
    614a:	2a58      	cmp	r2, #88	; 0x58
    614c:	f000 808a 	beq.w	6264 <_printf_i+0x144>
    6150:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6154:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    6158:	e02a      	b.n	61b0 <_printf_i+0x90>
    615a:	2a64      	cmp	r2, #100	; 0x64
    615c:	d001      	beq.n	6162 <_printf_i+0x42>
    615e:	2a69      	cmp	r2, #105	; 0x69
    6160:	d1f6      	bne.n	6150 <_printf_i+0x30>
    6162:	6821      	ldr	r1, [r4, #0]
    6164:	681a      	ldr	r2, [r3, #0]
    6166:	f011 0f80 	tst.w	r1, #128	; 0x80
    616a:	d023      	beq.n	61b4 <_printf_i+0x94>
    616c:	1d11      	adds	r1, r2, #4
    616e:	6019      	str	r1, [r3, #0]
    6170:	6813      	ldr	r3, [r2, #0]
    6172:	e027      	b.n	61c4 <_printf_i+0xa4>
    6174:	2a73      	cmp	r2, #115	; 0x73
    6176:	f000 80b4 	beq.w	62e2 <_printf_i+0x1c2>
    617a:	d808      	bhi.n	618e <_printf_i+0x6e>
    617c:	2a6f      	cmp	r2, #111	; 0x6f
    617e:	d02a      	beq.n	61d6 <_printf_i+0xb6>
    6180:	2a70      	cmp	r2, #112	; 0x70
    6182:	d1e5      	bne.n	6150 <_printf_i+0x30>
    6184:	680a      	ldr	r2, [r1, #0]
    6186:	f042 0220 	orr.w	r2, r2, #32
    618a:	600a      	str	r2, [r1, #0]
    618c:	e003      	b.n	6196 <_printf_i+0x76>
    618e:	2a75      	cmp	r2, #117	; 0x75
    6190:	d021      	beq.n	61d6 <_printf_i+0xb6>
    6192:	2a78      	cmp	r2, #120	; 0x78
    6194:	d1dc      	bne.n	6150 <_printf_i+0x30>
    6196:	2278      	movs	r2, #120	; 0x78
    6198:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    619c:	496e      	ldr	r1, [pc, #440]	; (6358 <_printf_i+0x238>)
    619e:	e064      	b.n	626a <_printf_i+0x14a>
    61a0:	681a      	ldr	r2, [r3, #0]
    61a2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    61a6:	1d11      	adds	r1, r2, #4
    61a8:	6019      	str	r1, [r3, #0]
    61aa:	6813      	ldr	r3, [r2, #0]
    61ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    61b0:	2301      	movs	r3, #1
    61b2:	e0a3      	b.n	62fc <_printf_i+0x1dc>
    61b4:	f011 0f40 	tst.w	r1, #64	; 0x40
    61b8:	f102 0104 	add.w	r1, r2, #4
    61bc:	6019      	str	r1, [r3, #0]
    61be:	d0d7      	beq.n	6170 <_printf_i+0x50>
    61c0:	f9b2 3000 	ldrsh.w	r3, [r2]
    61c4:	2b00      	cmp	r3, #0
    61c6:	da03      	bge.n	61d0 <_printf_i+0xb0>
    61c8:	222d      	movs	r2, #45	; 0x2d
    61ca:	425b      	negs	r3, r3
    61cc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    61d0:	4962      	ldr	r1, [pc, #392]	; (635c <_printf_i+0x23c>)
    61d2:	220a      	movs	r2, #10
    61d4:	e017      	b.n	6206 <_printf_i+0xe6>
    61d6:	6820      	ldr	r0, [r4, #0]
    61d8:	6819      	ldr	r1, [r3, #0]
    61da:	f010 0f80 	tst.w	r0, #128	; 0x80
    61de:	d003      	beq.n	61e8 <_printf_i+0xc8>
    61e0:	1d08      	adds	r0, r1, #4
    61e2:	6018      	str	r0, [r3, #0]
    61e4:	680b      	ldr	r3, [r1, #0]
    61e6:	e006      	b.n	61f6 <_printf_i+0xd6>
    61e8:	f010 0f40 	tst.w	r0, #64	; 0x40
    61ec:	f101 0004 	add.w	r0, r1, #4
    61f0:	6018      	str	r0, [r3, #0]
    61f2:	d0f7      	beq.n	61e4 <_printf_i+0xc4>
    61f4:	880b      	ldrh	r3, [r1, #0]
    61f6:	4959      	ldr	r1, [pc, #356]	; (635c <_printf_i+0x23c>)
    61f8:	2a6f      	cmp	r2, #111	; 0x6f
    61fa:	bf14      	ite	ne
    61fc:	220a      	movne	r2, #10
    61fe:	2208      	moveq	r2, #8
    6200:	2000      	movs	r0, #0
    6202:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6206:	6865      	ldr	r5, [r4, #4]
    6208:	60a5      	str	r5, [r4, #8]
    620a:	2d00      	cmp	r5, #0
    620c:	f2c0 809c 	blt.w	6348 <_printf_i+0x228>
    6210:	6820      	ldr	r0, [r4, #0]
    6212:	f020 0004 	bic.w	r0, r0, #4
    6216:	6020      	str	r0, [r4, #0]
    6218:	2b00      	cmp	r3, #0
    621a:	d13f      	bne.n	629c <_printf_i+0x17c>
    621c:	2d00      	cmp	r5, #0
    621e:	f040 8095 	bne.w	634c <_printf_i+0x22c>
    6222:	4675      	mov	r5, lr
    6224:	2a08      	cmp	r2, #8
    6226:	d10b      	bne.n	6240 <_printf_i+0x120>
    6228:	6823      	ldr	r3, [r4, #0]
    622a:	07da      	lsls	r2, r3, #31
    622c:	d508      	bpl.n	6240 <_printf_i+0x120>
    622e:	6923      	ldr	r3, [r4, #16]
    6230:	6862      	ldr	r2, [r4, #4]
    6232:	429a      	cmp	r2, r3
    6234:	bfde      	ittt	le
    6236:	2330      	movle	r3, #48	; 0x30
    6238:	f805 3c01 	strble.w	r3, [r5, #-1]
    623c:	f105 35ff 	addle.w	r5, r5, #4294967295
    6240:	ebae 0305 	sub.w	r3, lr, r5
    6244:	6123      	str	r3, [r4, #16]
    6246:	f8cd 8000 	str.w	r8, [sp]
    624a:	463b      	mov	r3, r7
    624c:	aa03      	add	r2, sp, #12
    624e:	4621      	mov	r1, r4
    6250:	4630      	mov	r0, r6
    6252:	f7ff feef 	bl	6034 <_printf_common>
    6256:	3001      	adds	r0, #1
    6258:	d155      	bne.n	6306 <_printf_i+0x1e6>
    625a:	f04f 30ff 	mov.w	r0, #4294967295
    625e:	b005      	add	sp, #20
    6260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6264:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    6268:	493c      	ldr	r1, [pc, #240]	; (635c <_printf_i+0x23c>)
    626a:	6822      	ldr	r2, [r4, #0]
    626c:	6818      	ldr	r0, [r3, #0]
    626e:	f012 0f80 	tst.w	r2, #128	; 0x80
    6272:	f100 0504 	add.w	r5, r0, #4
    6276:	601d      	str	r5, [r3, #0]
    6278:	d001      	beq.n	627e <_printf_i+0x15e>
    627a:	6803      	ldr	r3, [r0, #0]
    627c:	e002      	b.n	6284 <_printf_i+0x164>
    627e:	0655      	lsls	r5, r2, #25
    6280:	d5fb      	bpl.n	627a <_printf_i+0x15a>
    6282:	8803      	ldrh	r3, [r0, #0]
    6284:	07d0      	lsls	r0, r2, #31
    6286:	bf44      	itt	mi
    6288:	f042 0220 	orrmi.w	r2, r2, #32
    628c:	6022      	strmi	r2, [r4, #0]
    628e:	b91b      	cbnz	r3, 6298 <_printf_i+0x178>
    6290:	6822      	ldr	r2, [r4, #0]
    6292:	f022 0220 	bic.w	r2, r2, #32
    6296:	6022      	str	r2, [r4, #0]
    6298:	2210      	movs	r2, #16
    629a:	e7b1      	b.n	6200 <_printf_i+0xe0>
    629c:	4675      	mov	r5, lr
    629e:	fbb3 f0f2 	udiv	r0, r3, r2
    62a2:	fb02 3310 	mls	r3, r2, r0, r3
    62a6:	5ccb      	ldrb	r3, [r1, r3]
    62a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    62ac:	4603      	mov	r3, r0
    62ae:	2800      	cmp	r0, #0
    62b0:	d1f5      	bne.n	629e <_printf_i+0x17e>
    62b2:	e7b7      	b.n	6224 <_printf_i+0x104>
    62b4:	6808      	ldr	r0, [r1, #0]
    62b6:	681a      	ldr	r2, [r3, #0]
    62b8:	6949      	ldr	r1, [r1, #20]
    62ba:	f010 0f80 	tst.w	r0, #128	; 0x80
    62be:	d004      	beq.n	62ca <_printf_i+0x1aa>
    62c0:	1d10      	adds	r0, r2, #4
    62c2:	6018      	str	r0, [r3, #0]
    62c4:	6813      	ldr	r3, [r2, #0]
    62c6:	6019      	str	r1, [r3, #0]
    62c8:	e007      	b.n	62da <_printf_i+0x1ba>
    62ca:	f010 0f40 	tst.w	r0, #64	; 0x40
    62ce:	f102 0004 	add.w	r0, r2, #4
    62d2:	6018      	str	r0, [r3, #0]
    62d4:	6813      	ldr	r3, [r2, #0]
    62d6:	d0f6      	beq.n	62c6 <_printf_i+0x1a6>
    62d8:	8019      	strh	r1, [r3, #0]
    62da:	2300      	movs	r3, #0
    62dc:	6123      	str	r3, [r4, #16]
    62de:	4675      	mov	r5, lr
    62e0:	e7b1      	b.n	6246 <_printf_i+0x126>
    62e2:	681a      	ldr	r2, [r3, #0]
    62e4:	1d11      	adds	r1, r2, #4
    62e6:	6019      	str	r1, [r3, #0]
    62e8:	6815      	ldr	r5, [r2, #0]
    62ea:	6862      	ldr	r2, [r4, #4]
    62ec:	2100      	movs	r1, #0
    62ee:	4628      	mov	r0, r5
    62f0:	f000 f836 	bl	6360 <memchr>
    62f4:	b108      	cbz	r0, 62fa <_printf_i+0x1da>
    62f6:	1b40      	subs	r0, r0, r5
    62f8:	6060      	str	r0, [r4, #4]
    62fa:	6863      	ldr	r3, [r4, #4]
    62fc:	6123      	str	r3, [r4, #16]
    62fe:	2300      	movs	r3, #0
    6300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6304:	e79f      	b.n	6246 <_printf_i+0x126>
    6306:	6923      	ldr	r3, [r4, #16]
    6308:	462a      	mov	r2, r5
    630a:	4639      	mov	r1, r7
    630c:	4630      	mov	r0, r6
    630e:	47c0      	blx	r8
    6310:	3001      	adds	r0, #1
    6312:	d0a2      	beq.n	625a <_printf_i+0x13a>
    6314:	6823      	ldr	r3, [r4, #0]
    6316:	079b      	lsls	r3, r3, #30
    6318:	d507      	bpl.n	632a <_printf_i+0x20a>
    631a:	2500      	movs	r5, #0
    631c:	f104 0919 	add.w	r9, r4, #25
    6320:	68e3      	ldr	r3, [r4, #12]
    6322:	9a03      	ldr	r2, [sp, #12]
    6324:	1a9b      	subs	r3, r3, r2
    6326:	429d      	cmp	r5, r3
    6328:	db05      	blt.n	6336 <_printf_i+0x216>
    632a:	68e0      	ldr	r0, [r4, #12]
    632c:	9b03      	ldr	r3, [sp, #12]
    632e:	4298      	cmp	r0, r3
    6330:	bfb8      	it	lt
    6332:	4618      	movlt	r0, r3
    6334:	e793      	b.n	625e <_printf_i+0x13e>
    6336:	2301      	movs	r3, #1
    6338:	464a      	mov	r2, r9
    633a:	4639      	mov	r1, r7
    633c:	4630      	mov	r0, r6
    633e:	47c0      	blx	r8
    6340:	3001      	adds	r0, #1
    6342:	d08a      	beq.n	625a <_printf_i+0x13a>
    6344:	3501      	adds	r5, #1
    6346:	e7eb      	b.n	6320 <_printf_i+0x200>
    6348:	2b00      	cmp	r3, #0
    634a:	d1a7      	bne.n	629c <_printf_i+0x17c>
    634c:	780b      	ldrb	r3, [r1, #0]
    634e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    6352:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6356:	e765      	b.n	6224 <_printf_i+0x104>
    6358:	00007916 	.word	0x00007916
    635c:	00007905 	.word	0x00007905

00006360 <memchr>:
    6360:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6364:	2a10      	cmp	r2, #16
    6366:	db2b      	blt.n	63c0 <memchr+0x60>
    6368:	f010 0f07 	tst.w	r0, #7
    636c:	d008      	beq.n	6380 <memchr+0x20>
    636e:	f810 3b01 	ldrb.w	r3, [r0], #1
    6372:	3a01      	subs	r2, #1
    6374:	428b      	cmp	r3, r1
    6376:	d02d      	beq.n	63d4 <memchr+0x74>
    6378:	f010 0f07 	tst.w	r0, #7
    637c:	b342      	cbz	r2, 63d0 <memchr+0x70>
    637e:	d1f6      	bne.n	636e <memchr+0xe>
    6380:	b4f0      	push	{r4, r5, r6, r7}
    6382:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6386:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    638a:	f022 0407 	bic.w	r4, r2, #7
    638e:	f07f 0700 	mvns.w	r7, #0
    6392:	2300      	movs	r3, #0
    6394:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6398:	3c08      	subs	r4, #8
    639a:	ea85 0501 	eor.w	r5, r5, r1
    639e:	ea86 0601 	eor.w	r6, r6, r1
    63a2:	fa85 f547 	uadd8	r5, r5, r7
    63a6:	faa3 f587 	sel	r5, r3, r7
    63aa:	fa86 f647 	uadd8	r6, r6, r7
    63ae:	faa5 f687 	sel	r6, r5, r7
    63b2:	b98e      	cbnz	r6, 63d8 <memchr+0x78>
    63b4:	d1ee      	bne.n	6394 <memchr+0x34>
    63b6:	bcf0      	pop	{r4, r5, r6, r7}
    63b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    63bc:	f002 0207 	and.w	r2, r2, #7
    63c0:	b132      	cbz	r2, 63d0 <memchr+0x70>
    63c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    63c6:	3a01      	subs	r2, #1
    63c8:	ea83 0301 	eor.w	r3, r3, r1
    63cc:	b113      	cbz	r3, 63d4 <memchr+0x74>
    63ce:	d1f8      	bne.n	63c2 <memchr+0x62>
    63d0:	2000      	movs	r0, #0
    63d2:	4770      	bx	lr
    63d4:	3801      	subs	r0, #1
    63d6:	4770      	bx	lr
    63d8:	2d00      	cmp	r5, #0
    63da:	bf06      	itte	eq
    63dc:	4635      	moveq	r5, r6
    63de:	3803      	subeq	r0, #3
    63e0:	3807      	subne	r0, #7
    63e2:	f015 0f01 	tst.w	r5, #1
    63e6:	d107      	bne.n	63f8 <memchr+0x98>
    63e8:	3001      	adds	r0, #1
    63ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    63ee:	bf02      	ittt	eq
    63f0:	3001      	addeq	r0, #1
    63f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    63f6:	3001      	addeq	r0, #1
    63f8:	bcf0      	pop	{r4, r5, r6, r7}
    63fa:	3801      	subs	r0, #1
    63fc:	4770      	bx	lr
    63fe:	bf00      	nop

00006400 <_realloc_r>:
    6400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6402:	4607      	mov	r7, r0
    6404:	4614      	mov	r4, r2
    6406:	460e      	mov	r6, r1
    6408:	b921      	cbnz	r1, 6414 <_realloc_r+0x14>
    640a:	4611      	mov	r1, r2
    640c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6410:	f7ff bc0a 	b.w	5c28 <_malloc_r>
    6414:	b922      	cbnz	r2, 6420 <_realloc_r+0x20>
    6416:	f7ff fbb9 	bl	5b8c <_free_r>
    641a:	4625      	mov	r5, r4
    641c:	4628      	mov	r0, r5
    641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6420:	f000 f814 	bl	644c <_malloc_usable_size_r>
    6424:	4284      	cmp	r4, r0
    6426:	d90f      	bls.n	6448 <_realloc_r+0x48>
    6428:	4621      	mov	r1, r4
    642a:	4638      	mov	r0, r7
    642c:	f7ff fbfc 	bl	5c28 <_malloc_r>
    6430:	4605      	mov	r5, r0
    6432:	2800      	cmp	r0, #0
    6434:	d0f2      	beq.n	641c <_realloc_r+0x1c>
    6436:	4631      	mov	r1, r6
    6438:	4622      	mov	r2, r4
    643a:	f7ff fb7a 	bl	5b32 <memcpy>
    643e:	4631      	mov	r1, r6
    6440:	4638      	mov	r0, r7
    6442:	f7ff fba3 	bl	5b8c <_free_r>
    6446:	e7e9      	b.n	641c <_realloc_r+0x1c>
    6448:	4635      	mov	r5, r6
    644a:	e7e7      	b.n	641c <_realloc_r+0x1c>

0000644c <_malloc_usable_size_r>:
    644c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    6450:	2800      	cmp	r0, #0
    6452:	f1a0 0004 	sub.w	r0, r0, #4
    6456:	bfbc      	itt	lt
    6458:	580b      	ldrlt	r3, [r1, r0]
    645a:	18c0      	addlt	r0, r0, r3
    645c:	4770      	bx	lr
    645e:	0000      	movs	r0, r0
    6460:	2a2a2a2a 	.word	0x2a2a2a2a
    6464:	2a2a2a2a 	.word	0x2a2a2a2a
    6468:	2a2a2a2a 	.word	0x2a2a2a2a
    646c:	2a2a2a2a 	.word	0x2a2a2a2a
    6470:	2a2a2a2a 	.word	0x2a2a2a2a
    6474:	2a2a2a2a 	.word	0x2a2a2a2a
    6478:	2a2a2a2a 	.word	0x2a2a2a2a
    647c:	2a2a2a2a 	.word	0x2a2a2a2a
    6480:	2a2a2a2a 	.word	0x2a2a2a2a
    6484:	2a2a2a2a 	.word	0x2a2a2a2a
    6488:	2a2a2a2a 	.word	0x2a2a2a2a
    648c:	2a2a2a2a 	.word	0x2a2a2a2a
    6490:	2a2a2a2a 	.word	0x2a2a2a2a
    6494:	2a2a2a2a 	.word	0x2a2a2a2a
    6498:	00002a2a 	.word	0x00002a2a
    649c:	2a2a2a2a 	.word	0x2a2a2a2a
    64a0:	2a2a2a2a 	.word	0x2a2a2a2a
    64a4:	2a2a2a2a 	.word	0x2a2a2a2a
    64a8:	532a2a2a 	.word	0x532a2a2a
    64ac:	4b434154 	.word	0x4b434154
    64b0:	45564f20 	.word	0x45564f20
    64b4:	4f4c4652 	.word	0x4f4c4652
    64b8:	45442057 	.word	0x45442057
    64bc:	54434554 	.word	0x54434554
    64c0:	2a2a4445 	.word	0x2a2a4445
    64c4:	2a2a2a2a 	.word	0x2a2a2a2a
    64c8:	2a2a2a2a 	.word	0x2a2a2a2a
    64cc:	2a2a2a2a 	.word	0x2a2a2a2a
    64d0:	2a2a2a2a 	.word	0x2a2a2a2a
    64d4:	00002a2a 	.word	0x00002a2a
    64d8:	6b736154 	.word	0x6b736154
    64dc:	6e614820 	.word	0x6e614820
    64e0:	20656c64 	.word	0x20656c64
    64e4:	6425202d 	.word	0x6425202d
    64e8:	00000a0d 	.word	0x00000a0d

000064ec <ModemCmdData>:
    64ec:	00000200 00006b68 00000000 00001311     ....hk..........
    64fc:	00000000 00000001 0000699c 00020003     .........i......
    650c:	00001311 00000009 00000002 000069a0     .............i..
    651c:	000f0008 00001311 0000001b 00000003     ................
    652c:	000069ac 000e000c 00001311 0000001e     .i..............
    653c:	00000004 000069bc 000c0008 00001311     .....i..........
    654c:	00000018 00000005 000069c8 00080005     .........i......
    655c:	00001311 00000011 00000006 000069d4     .............i..
    656c:	000b000a 00001311 00000019 00000007     ................
    657c:	000069e0 0015000a 00001311 00000023     .i..........#...
    658c:	00000008 000069ec 00020005 00001311     .....i..........
    659c:	0000000b 00000109 000069f4 000c0027     .........i..'...
    65ac:	00001311 00000037 0000010a 00006a1c     ....7........j..
    65bc:	00020012 00001311 00000018 0000010b     ................
    65cc:	00006a30 00020012 00001311 00000018     0j..............
    65dc:	0000010c 00006a44 00020012 00001311     ....Dj..........
    65ec:	00000018 0000010d 00006a58 00020012     ........Xj......
    65fc:	00001311 00000018 0000010e 00006a6c     ............lj..
    660c:	00020012 00001311 00000018 0000010f     ................
    661c:	00006a80 00020012 00001311 00000018     .j..............
    662c:	00000110 00006a94 00020012 00001311     .....j..........
    663c:	00000018 00000111 00006aa8 00020012     .........j......
    664c:	00001311 00000018 00000112 00006abc     .............j..
    665c:	00020012 00001311 00000018 00000113     ................
    666c:	00006ad0 00020013 00001311 00000019     .j..............
    667c:	00000114 00006ae4 0002001f 00001311     .....j..........
    668c:	00000025 00000115 00006b04 00020023     %........k..#...
    669c:	00001311 00000029 00000116 00006b28     ....).......(k..
    66ac:	0002001a 00001311 00000020 00000117     ........ .......
    66bc:	20000000 00070011 00001311 0000001c     ... ............
    66cc:	00000118 200001ac 00bf003a 00001311     ....... :.......
    66dc:	000000fd 00000119 00006b44 00020010     ........Dk......
    66ec:	00001311 00000016 0000011a 00006b58     ............Xk..
    66fc:	00020010 00001311 00000016 0000011b     ................
    670c:	00006b6c 0002000b 00001311 00000011     lk..............
	...
    699c:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    69ac:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    69bc:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    69cc:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    69dc:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    69ec:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    69fc:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    6a0c:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    6a1c:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    6a2c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6a3c:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    6a4c:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    6a5c:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    6a6c:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    6a7c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6a8c:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    6a9c:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    6aac:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    6abc:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    6acc:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6adc:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    6aec:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    6afc:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    6b0c:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    6b1c:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    6b2c:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    6b3c:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    6b4c:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    6b5c:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    6b6c:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    6b7c:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    6b8c:	66206e6f 7020726f 65737261 74616420     on for parse dat
    6b9c:	75622061 72656666 69616620 0064656c     a buffer failed.
    6bac:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    6bbc:	76206f74 66697265 68742079 6f632065     to verify the co
    6bcc:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    6bdc:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    6bec:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    6bfc:	20646165 61746164 6f726620 6572206d     ead data from re
    6c0c:	76696563 69722065 6220676e 65666675     ceive ring buffe
    6c1c:	75642072 676e6972 72617020 00726573     r during parser.
    6c2c:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    6c3c:	69746163 66206e6f 7220726f 6f707365     cation for respo
    6c4c:	2065736e 61746164 66756220 20726566     nse data buffer 
    6c5c:	6c696166 00006465 746e6553 65687420     failed..Sent the
    6c6c:	73655320 6e6f6973 6f6c4320 72206573      Session Close r
    6c7c:	65757165 74207473 7854206f 73615420     equest to Tx Tas
    6c8c:	0000006b 6c696146 74206465 6573206f     k...Failed to se
    6c9c:	7420746e 53206568 69737365 43206e6f     nt the Session C
    6cac:	65736f6c 71657220 74736575 206f7420     lose request to 
    6cbc:	54207854 006b7361 6f727245 203a2072     Tx Task.Error : 
    6ccc:	20746f4e 656c6261 206f7420 6174626f     Not able to obta
    6cdc:	54206e69 65532078 6170616d 65726f68     in Tx Semapahore
    6cec:	00000000 6e617254 74696d73 65755120     ....Transmit Que
    6cfc:	69206575 6f6e2073 6d652074 00797470     ue is not empty.
    6d0c:	4d206f4e 2065726f 69746341 43206576     No More Active C
    6d1c:	656e6e6f 6f697463 7420736e 6c63206f     onnections to cl
    6d2c:	0065736f 65636552 64657669 63206120     ose.Received a c
    6d3c:	656e6e6f 6f697463 6572206e 6e6f7073     onnection respon
    6d4c:	69206573 5852206e 646f4d20 00000065     se in RX Mode...
    6d5c:	6c696146 74206465 6572206f 76696563     Failed to receiv
    6d6c:	6f632065 63656e6e 6e6f6974 73657220     e connection res
    6d7c:	736e6f70 6e692065 20585220 65646f6d     ponse in RX mode
    6d8c:	00000000 6c696146 74206465 6573206f     ....Failed to se
    6d9c:	7420746e 45206568 7020464f 65747461     nt the EOF patte
    6dac:	74206e72 7854206f 73615420 0000006b     rn to Tx Task...
    6dbc:	6c696146 74206465 6573206f 6120746e     Failed to sent a
    6dcc:	73656363 6f702073 20746e69 20646d63     ccess point cmd 
    6ddc:	54206f74 61542078 00006b73 6c696146     to Tx Task..Fail
    6dec:	74206465 6573206f 6320746e 656e6e6f     ed to sent conne
    6dfc:	6f697463 6974206e 2072656d 20646d63     ction timer cmd 
    6e0c:	54206f74 61542078 00006b73 4e4e4f43     to Tx Task..CONN
    6e1c:	00544345 50545448 4e4f4320 5443454e     ECT.HTTP CONNECT
    6e2c:	00004445 45444f4d 4144204d 55204154     ED..MODEM DATA U
    6e3c:	20545241 52455328 334d4f43 6e692029     ART (SERCOM3) in
    6e4c:	61697469 657a696c 00000064 43524553     itialized...SERC
    6e5c:	20334d4f 4f495250 59544952 00000000     OM3 PRIORITY....
    6e6c:	6c696146 74206465 6e69206f 61697469     Failed to initia
    6e7c:	657a696c 65687420 444f4d20 44204d45     lize the MODEM D
    6e8c:	20415441 54524155 00000000 746e6553     ATA UART....Sent
    6e9c:	65687420 61694420 61642067 74206174      the Diag data t
    6eac:	7854206f 73615420 0000006b 6c696146     o Tx Task...Fail
    6ebc:	74206465 6573206f 7420746e 44206568     ed to sent the D
    6ecc:	20676169 61746164 206f7420 54207854     iag data to Tx T
    6edc:	006b7361 72746552 65766569 68742064     ask.Retrieved th
    6eec:	6f4d2065 206d6564 49454d49 6d754e20     e Modem IMEI Num
    6efc:	00726562 72746552 65766569 68742064     ber.Retrieved th
    6f0c:	6f4d2065 206d6564 69726573 4e206c61     e Modem serial N
    6f1c:	65626d75 00000072 65636552 64657669     umber...Received
    6f2c:	6e6f4320 7463656e 206e6f69 70736572      Connection resp
    6f3c:	65736e6f 206e6920 646e6168 0000656c     onse in handle..
    6f4c:	63637553 66737365 796c6c75 736f7020     Successfully pos
    6f5c:	20646574 6e6e6f63 69746365 52206e6f     ted connection R
    6f6c:	6f707365 2065736e 51206f74 65756575     esponse to Queue
    6f7c:	00000000 6c696146 74206465 6f70206f     ....Failed to po
    6f8c:	74207473 63206568 656e6e6f 6f697463     st the connectio
    6f9c:	6552206e 6e6f7073 74206573 7551206f     n Response to Qu
    6fac:	00657565 6f727245 203a2072 6d6d6f43     eue.Error : Comm
    6fbc:	20646e61 70736552 65736e6f 65755120     and Response Que
    6fcc:	69206575 6f6e2073 6d652074 00797470     ue is not empty.
    6fdc:	4f525245 52203a52 69656365 20646576     ERROR: Received 
    6fec:	65206e61 7974706d 73657220 736e6f70     an empty respons
    6ffc:	74732065 676e6972 206e6920 6d6d6f63     e string in comm
    700c:	20646e61 70736572 65736e6f 6e616820     and response han
    701c:	72656c64 00000000 6c430a0d 6465736f     dler......Closed
    702c:	206e6120 69746361 63206576 656e6e6f      an active conne
    703c:	6f697463 0000006e 72656854 73692065     ction...There is
    704c:	206f6e20 6e6e6f63 69746365 65206e6f      no connection e
    705c:	62617473 6873696c 77206465 20687469     stablished with 
    706c:	73696874 73657320 6e6f6973 2e444920     this session ID.
    707c:	00002e2e 63656843 676e696b 726f6620     ....Checking for
    708c:	206e6120 69746361 63206576 656e6e6f      an active conne
    709c:	6f697463 6977206e 6e206874 20747865     ction with next 
    70ac:	73736573 206e6f69 2e2e4449 00000a2e     session ID......
    70bc:	4b206e49 54544150 204e5245 646e6168     In KPATTERN hand
    70cc:	0072656c 4b206e49 43584e43 68204746     ler.In KCNXCFG h
    70dc:	6c646e61 00007265 4b206e49 54584e43     andler..In KCNXT
    70ec:	52454d49 6e616820 72656c64 00000000     IMER handler....
    70fc:	4b206e49 50545448 20474643 646e6168     In KHTTPCFG hand
    710c:	0072656c 4b206e49 50545448 41454820     ler.In KHTTP HEA
    711c:	20524544 646e6168 0072656c 64616548     DER handler.Head
    712c:	52207265 6f707365 2065736e 00006b4f     er Response Ok..
    713c:	64616548 52207265 6f707365 2065736e     Header Response 
    714c:	20746f4e 00006b4f 000a0a0d 54206e49     Not Ok......In T
    715c:	494d5245 4554414e 41454820 20524544     ERMINATE HEADER 
    716c:	646e6168 0072656c 69746f4e 61636966     handler.Notifica
    717c:	6e6f6974 63655220 65766965 6f742064     tion Received to
    718c:	20785220 6b736154 6f726620 5349206d      Rx Task from IS
    719c:	00000052 4f525245 43203a52 616d6d6f     R...ERROR: Comma
    71ac:	5020646e 69737261 4620676e 656c6961     nd Parsing Faile
    71bc:	00000064 73207854 61697265 6544206c     d...Tx serial De
    71cc:	20677562 656e6f44 00000a0d 44207852     bug Done....Rx D
    71dc:	0d656e6f 0000000a 2d207325 20642520     one.....%s - %d 
    71ec:	00000a0d 682f2e2e 692f6c61 756c636e     ....../hal/inclu
    71fc:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
    720c:	20544457 74696e49 696c6169 00646573     WDT Initialised.
    721c:	20544457 6c696146 74206465 6e69206f     WDT Failed to in
    722c:	61697469 657a696c 00000000 682f2e2e     itialize....../h
    723c:	732f6c61 682f6372 615f6c61 79735f63     al/src/hal_ac_sy
    724c:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    725c:	682f6372 615f6c61 735f6364 2e636e79     rc/hal_adc_sync.
    726c:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    727c:	645f6c61 735f6361 2e636e79 00000063     al_dac_sync.c...
    728c:	682f2e2e 732f6c61 682f6372 665f6c61     ../hal/src/hal_f
    729c:	6873616c 0000632e 682f2e2e 732f6c61     lash.c..../hal/s
    72ac:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
    72bc:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    72cc:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    72dc:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    72ec:	2e747369 00000063 682f2e2e 752f6c61     ist.c...../hal/u
    72fc:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
    730c:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
    731c:	612f6c70 70682f63 63615f6c 0000632e     pl/ac/hpl_ac.c..

0000732c <_adcs>:
    732c:	00c00000 00830002 00001900 00000000     ................
    733c:	00000000 00010001 00000000 00000000     ................
	...
    7358:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    7368:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    7378:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00007388 <_cfgs>:
	...

00007488 <user_mux_confs>:
	...

000074cc <channel_confs>:
	...

0000750c <interrupt_cfg>:
	...
    758c:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    759c:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    75ac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    75bc:	43000000 43000400                       ...C...C

000075c4 <_usarts>:
    75c4:	00000003 40200004 00030000 00700002     ...... @......p.
    75d4:	0000f62b 00000000 00000004 40300184     +.............0@
    75e4:	00030300 00700002 0000ff2e 00000000     ......p.........
    75f4:	00000005 40300004 00030000 00700002     ......0@......p.
    7604:	0000f62b 00000000                       +.......

0000760c <_i2cms>:
	...

00007624 <sercomspi_regs>:
	...
    7638:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    7648:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    7658:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00007668 <_tccs>:
    7668:	00000000 00000300 00000000 00000000     ................
    7678:	00001770 00000000 00000000 00000000     p...............
    7688:	00000000 00000001 00000300 00000000     ................
    7698:	00000000 00001770 00000000 00000000     ....p...........
	...
    76b0:	00000002 00000300 00000000 00000000     ................
    76c0:	00001770 00000000 00000000 00000000     p...............
    76d0:	00000000 00000003 00000300 00000000     ................
    76e0:	00000000 00001770 00000000 00000000     ....p...........
	...
    76f8:	00000004 00000300 00000000 00000000     ................
    7708:	00001770 00000000 00000000 00000000     p...............
    7718:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    7728:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    7738:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    7748:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    7758:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    7768:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    7778:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    7788:	63206572 74616572 00006465 616d6553     re created..Sema
    7798:	726f6870 61207365 4d20646e 78657475     phores and Mutex
    77a8:	61207365 63206572 74616572 00006465     es are created..
    77b8:	70736944 68637461 6b736154 00000000     DispatchTask....
    77c8:	65646f4d 7361546d 0000006b 65646f4d     ModemTask...Mode
    77d8:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    77e8:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    77f8:	6169446d 73615467 0000006b 63637553     mDiagTask...Succ
    7808:	66737365 796c6c75 65724320 64657461     essfully Created
    7818:	65687420 73615420 0000736b 65657246      the Tasks..Free
    7828:	4f545220 63532053 75646568 2072656c      RTOS Scheduler 
    7838:	20746f6e 72617473 00646574 6c696146     not started.Fail
    7848:	74206465 7263206f 65746165 73617420     ed to create tas
    7858:	0000736b 6f727245 53203a72 64656863     ks..Error: Sched
    7868:	72656c75 69786520 00646574 454c4449     uler exited.IDLE
    7878:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    7888:	00000a0d 20726d54 00637653              ....Tmr Svc.

00007894 <__sf_fake_stderr>:
	...

000078b4 <__sf_fake_stdin>:
	...

000078d4 <__sf_fake_stdout>:
	...
    78f4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7904:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7914:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7924:	00006665                                ef..

00007928 <_init>:
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792a:	bf00      	nop
    792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    792e:	bc08      	pop	{r3}
    7930:	469e      	mov	lr, r3
    7932:	4770      	bx	lr

00007934 <__init_array_start>:
    7934:	00000289 	.word	0x00000289

00007938 <_fini>:
    7938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    793a:	bf00      	nop
    793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    793e:	bc08      	pop	{r3}
    7940:	469e      	mov	lr, r3
    7942:	4770      	bx	lr

00007944 <__fini_array_start>:
    7944:	00000265 	.word	0x00000265
