
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003550  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f4  20000000  00003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200f4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200f4  2**0
                  CONTENTS
  4 .bss          0000111c  20000100  00003650  000200f4  2**4
                  ALLOC
  5 .stack        00010004  2000121c  0000476c  000200f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004dd3f  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000742c  00000000  00000000  0006deba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001737e  00000000  00000000  000752e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001730  00000000  00000000  0008c664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c48  00000000  00000000  0008dd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00015e7a  00000000  00000000  0008f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025775  00000000  00000000  000a5856  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010548a  00000000  00000000  000cafcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a0c  00000000  00000000  001d0458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	20 12 01 20 f5 07 00 00 f1 07 00 00 f1 07 00 00      .. ............
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	f1 07 00 00 f1 07 00 00 f1 07 00 00 00 00 00 00     ................
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	81 28 00 00 f1 07 00 00 00 00 00 00 b1 28 00 00     .(...........(..
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	15 29 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     .)..............
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      5c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      6c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      7c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      8c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      9c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      ac:	f1 07 00 00 f1 07 00 00 3d 1b 00 00 51 1b 00 00     ........=...Q...
      bc:	cd 18 00 00 d9 18 00 00 e5 18 00 00 f1 18 00 00     ................
      cc:	fd 18 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      dc:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
      ec:	f1 07 00 00 00 00 00 00 45 1c 00 00 f1 07 00 00     ........E.......
      fc:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     10c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     11c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 d5 04 00 00     ................
     12c:	19 05 00 00 65 05 00 00 f1 07 00 00 f1 07 00 00     ....e...........
     13c:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     14c:	f1 07 00 00 91 07 00 00 f1 07 00 00 00 00 00 00     ................
	...
     180:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     190:	00 00 00 00 d5 21 00 00 f1 07 00 00 f1 07 00 00     .....!..........
     1a0:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     1b0:	e9 21 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     .!..............
     1c0:	f1 07 00 00 fd 21 00 00 f1 07 00 00 f1 07 00 00     .....!..........
     1d0:	f1 07 00 00 11 22 00 00 f1 07 00 00 f1 07 00 00     ....."..........
     1e0:	25 22 00 00 f1 07 00 00 f1 07 00 00 19 27 00 00     %"...........'..
     1f0:	2d 27 00 00 41 27 00 00 55 27 00 00 69 27 00 00     -'..A'..U'..i'..
     200:	7d 27 00 00 00 00 00 00 00 00 00 00 f1 07 00 00     }'..............
     210:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     220:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     230:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     240:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     250:	f1 07 00 00 f1 07 00 00 f1 07 00 00 f1 07 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000100 	.word	0x20000100
     280:	00000000 	.word	0x00000000
     284:	00003550 	.word	0x00003550

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003550 	.word	0x00003550
     2c4:	20000104 	.word	0x20000104
     2c8:	00003550 	.word	0x00003550
     2cc:	00000000 	.word	0x00000000

000002d0 <defaultFunctionPointer>:




void defaultFunctionPointer(void)
{
     2d0:	4770      	bx	lr
	...

000002d4 <mdmParser_SendCommandToModem>:
{
     2d4:	b510      	push	{r4, lr}
     2d6:	4604      	mov	r4, r0
	mdmCtrlr_SendDataToModem(ModemCmdData[atCmd].AtString,ModemCmdData[atCmd].CmdLength);
     2d8:	4b06      	ldr	r3, [pc, #24]	; (2f4 <mdmParser_SendCommandToModem+0x20>)
     2da:	0082      	lsls	r2, r0, #2
     2dc:	1811      	adds	r1, r2, r0
     2de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     2e2:	460b      	mov	r3, r1
     2e4:	7a09      	ldrb	r1, [r1, #8]
     2e6:	6858      	ldr	r0, [r3, #4]
     2e8:	4b03      	ldr	r3, [pc, #12]	; (2f8 <mdmParser_SendCommandToModem+0x24>)
     2ea:	4798      	blx	r3
	lastSendATCommand = atCmd;
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <mdmParser_SendCommandToModem+0x28>)
     2ee:	701c      	strb	r4, [r3, #0]
     2f0:	bd10      	pop	{r4, pc}
     2f2:	bf00      	nop
     2f4:	00002bb0 	.word	0x00002bb0
     2f8:	000005a5 	.word	0x000005a5
     2fc:	20000000 	.word	0x20000000

00000300 <mdmParser_ProcessModemResponse>:
{
     300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     304:	b090      	sub	sp, #64	; 0x40
	if(false != mdmParser_solicitedCmdParser(lastSendATCommand,responseDataBuffer))
     306:	4b38      	ldr	r3, [pc, #224]	; (3e8 <mdmParser_ProcessModemResponse+0xe8>)
	MODEM_CMD_DATA cmdData = ModemCmdData[cmd];
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     30e:	4b37      	ldr	r3, [pc, #220]	; (3ec <mdmParser_ProcessModemResponse+0xec>)
     310:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     314:	f8d3 a004 	ldr.w	sl, [r3, #4]
     318:	7a1c      	ldrb	r4, [r3, #8]
     31a:	7a5d      	ldrb	r5, [r3, #9]
     31c:	f893 8010 	ldrb.w	r8, [r3, #16]
	readStatus = mdmCtrlr_ReadResponseFromModem(dataBuffer,cmdData.ResponseLength);
     320:	4641      	mov	r1, r8
     322:	a801      	add	r0, sp, #4
     324:	4b32      	ldr	r3, [pc, #200]	; (3f0 <mdmParser_ProcessModemResponse+0xf0>)
     326:	4798      	blx	r3
     328:	4681      	mov	r9, r0
	SerialDebugPrint(rxIsrCnt,2);
     32a:	4e32      	ldr	r6, [pc, #200]	; (3f4 <mdmParser_ProcessModemResponse+0xf4>)
     32c:	2102      	movs	r1, #2
     32e:	8830      	ldrh	r0, [r6, #0]
     330:	4f31      	ldr	r7, [pc, #196]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     332:	47b8      	blx	r7
	SerialDebugPrint("\r\n",2);
     334:	2102      	movs	r1, #2
     336:	4831      	ldr	r0, [pc, #196]	; (3fc <mdmParser_ProcessModemResponse+0xfc>)
     338:	47b8      	blx	r7
	rxIsrCnt = 0;
     33a:	2300      	movs	r3, #0
     33c:	8033      	strh	r3, [r6, #0]
	if(readStatus != false)
     33e:	f1b9 0f00 	cmp.w	r9, #0
     342:	d041      	beq.n	3c8 <mdmParser_ProcessModemResponse+0xc8>
		SerialDebugPrint(dataBuffer,cmdData.ResponseLength);
     344:	4641      	mov	r1, r8
     346:	a801      	add	r0, sp, #4
     348:	47b8      	blx	r7
		if(VERIFIED_EQUAL == strncmp(cmdData.AtString, dataBuffer, cmdData.CmdLength))
     34a:	4622      	mov	r2, r4
     34c:	a901      	add	r1, sp, #4
     34e:	4650      	mov	r0, sl
     350:	4b2b      	ldr	r3, [pc, #172]	; (400 <mdmParser_ProcessModemResponse+0x100>)
     352:	4798      	blx	r3
     354:	2800      	cmp	r0, #0
     356:	d132      	bne.n	3be <mdmParser_ProcessModemResponse+0xbe>
			SerialDebugPrint("Successfully parsed the command string\r\n",40);
     358:	2128      	movs	r1, #40	; 0x28
     35a:	482a      	ldr	r0, [pc, #168]	; (404 <mdmParser_ProcessModemResponse+0x104>)
     35c:	47b8      	blx	r7
			while(parseCnt < cmdData.validDataCnt)
     35e:	b365      	cbz	r5, 3ba <mdmParser_ProcessModemResponse+0xba>
     360:	3402      	adds	r4, #2
     362:	b2e4      	uxtb	r4, r4
     364:	1e63      	subs	r3, r4, #1
     366:	aa01      	add	r2, sp, #4
     368:	4413      	add	r3, r2
     36a:	4a27      	ldr	r2, [pc, #156]	; (408 <mdmParser_ProcessModemResponse+0x108>)
     36c:	1e68      	subs	r0, r5, #1
     36e:	fa54 f080 	uxtab	r0, r4, r0
     372:	a901      	add	r1, sp, #4
     374:	4408      	add	r0, r1
				response[parseCnt] = dataBuffer[dataStartIndex + parseCnt];
     376:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     37a:	f802 1f01 	strb.w	r1, [r2, #1]!
			while(parseCnt < cmdData.validDataCnt)
     37e:	4283      	cmp	r3, r0
     380:	d1f9      	bne.n	376 <mdmParser_ProcessModemResponse+0x76>
			response[parseCnt] = '\0';
     382:	4e22      	ldr	r6, [pc, #136]	; (40c <mdmParser_ProcessModemResponse+0x10c>)
     384:	2300      	movs	r3, #0
     386:	5573      	strb	r3, [r6, r5]
			SerialDebugPrint("Successfully updated the cmd response data to buffer\r\n",50);
     388:	2132      	movs	r1, #50	; 0x32
     38a:	4821      	ldr	r0, [pc, #132]	; (410 <mdmParser_ProcessModemResponse+0x110>)
     38c:	4c1a      	ldr	r4, [pc, #104]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     38e:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     390:	4b20      	ldr	r3, [pc, #128]	; (414 <mdmParser_ProcessModemResponse+0x114>)
     392:	4798      	blx	r3
		SerialDebugPrint("Successfully Received modem response data\r\n",40);
     394:	2128      	movs	r1, #40	; 0x28
     396:	4820      	ldr	r0, [pc, #128]	; (418 <mdmParser_ProcessModemResponse+0x118>)
     398:	47a0      	blx	r4
		SerialDebugPrint(responseDataBuffer,ModemCmdData[lastSendATCommand].validDataCnt);
     39a:	4d13      	ldr	r5, [pc, #76]	; (3e8 <mdmParser_ProcessModemResponse+0xe8>)
     39c:	782b      	ldrb	r3, [r5, #0]
     39e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     3a2:	4a12      	ldr	r2, [pc, #72]	; (3ec <mdmParser_ProcessModemResponse+0xec>)
     3a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     3a8:	7a59      	ldrb	r1, [r3, #9]
     3aa:	4630      	mov	r0, r6
     3ac:	47a0      	blx	r4
		SerialDebugPrint("\r\n",2);
     3ae:	2102      	movs	r1, #2
     3b0:	4812      	ldr	r0, [pc, #72]	; (3fc <mdmParser_ProcessModemResponse+0xfc>)
     3b2:	47a0      	blx	r4
		lastSendATCommand = CMD_AT_MAX;
     3b4:	2308      	movs	r3, #8
     3b6:	702b      	strb	r3, [r5, #0]
     3b8:	e013      	b.n	3e2 <mdmParser_ProcessModemResponse+0xe2>
	uint8_t parseCnt=0;
     3ba:	2500      	movs	r5, #0
     3bc:	e7e1      	b.n	382 <mdmParser_ProcessModemResponse+0x82>
			SerialDebugPrint("Failed to verify the command string\r\n",40);
     3be:	2128      	movs	r1, #40	; 0x28
     3c0:	4816      	ldr	r0, [pc, #88]	; (41c <mdmParser_ProcessModemResponse+0x11c>)
     3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     3c4:	4798      	blx	r3
     3c6:	e003      	b.n	3d0 <mdmParser_ProcessModemResponse+0xd0>
		SerialDebugPrint("Read from modem controller is failed\r\n",40);
     3c8:	2128      	movs	r1, #40	; 0x28
     3ca:	4815      	ldr	r0, [pc, #84]	; (420 <mdmParser_ProcessModemResponse+0x120>)
     3cc:	4b0a      	ldr	r3, [pc, #40]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     3ce:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     3d0:	4b10      	ldr	r3, [pc, #64]	; (414 <mdmParser_ProcessModemResponse+0x114>)
     3d2:	4798      	blx	r3
		SerialDebugPrint("Failed to Receive modem response data\r\n",40);
     3d4:	2128      	movs	r1, #40	; 0x28
     3d6:	4813      	ldr	r0, [pc, #76]	; (424 <mdmParser_ProcessModemResponse+0x124>)
     3d8:	4b07      	ldr	r3, [pc, #28]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     3da:	4798      	blx	r3
		lastSendATCommand = CMD_AT_MAX;
     3dc:	2208      	movs	r2, #8
     3de:	4b02      	ldr	r3, [pc, #8]	; (3e8 <mdmParser_ProcessModemResponse+0xe8>)
     3e0:	701a      	strb	r2, [r3, #0]
}
     3e2:	b010      	add	sp, #64	; 0x40
     3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3e8:	20000000 	.word	0x20000000
     3ec:	00002bb0 	.word	0x00002bb0
     3f0:	000005cd 	.word	0x000005cd
     3f4:	200007fc 	.word	0x200007fc
     3f8:	0000074d 	.word	0x0000074d
     3fc:	00002fac 	.word	0x00002fac
     400:	00002b8d 	.word	0x00002b8d
     404:	00002d40 	.word	0x00002d40
     408:	2000011b 	.word	0x2000011b
     40c:	2000011c 	.word	0x2000011c
     410:	00002d6c 	.word	0x00002d6c
     414:	00000625 	.word	0x00000625
     418:	00002da4 	.word	0x00002da4
     41c:	00002dd0 	.word	0x00002dd0
     420:	00002df8 	.word	0x00002df8
     424:	00002e20 	.word	0x00002e20

00000428 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     42a:	491e      	ldr	r1, [pc, #120]	; (4a4 <mdmCtrlr_DataCommInit+0x7c>)
     42c:	481e      	ldr	r0, [pc, #120]	; (4a8 <mdmCtrlr_DataCommInit+0x80>)
     42e:	4b1f      	ldr	r3, [pc, #124]	; (4ac <mdmCtrlr_DataCommInit+0x84>)
     430:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     432:	b180      	cbz	r0, 456 <mdmCtrlr_DataCommInit+0x2e>
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 not initialized\r\n");
     434:	4d1e      	ldr	r5, [pc, #120]	; (4b0 <mdmCtrlr_DataCommInit+0x88>)
     436:	4c1f      	ldr	r4, [pc, #124]	; (4b4 <mdmCtrlr_DataCommInit+0x8c>)
     438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     43a:	6028      	str	r0, [r5, #0]
     43c:	6069      	str	r1, [r5, #4]
     43e:	60aa      	str	r2, [r5, #8]
     440:	60eb      	str	r3, [r5, #12]
     442:	cc03      	ldmia	r4!, {r0, r1}
     444:	6128      	str	r0, [r5, #16]
     446:	6169      	str	r1, [r5, #20]
     448:	8823      	ldrh	r3, [r4, #0]
     44a:	832b      	strh	r3, [r5, #24]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     44c:	2128      	movs	r1, #40	; 0x28
     44e:	4628      	mov	r0, r5
     450:	4b19      	ldr	r3, [pc, #100]	; (4b8 <mdmCtrlr_DataCommInit+0x90>)
     452:	4798      	blx	r3
     454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     456:	f44f 6200 	mov.w	r2, #2048	; 0x800
     45a:	4918      	ldr	r1, [pc, #96]	; (4bc <mdmCtrlr_DataCommInit+0x94>)
     45c:	4818      	ldr	r0, [pc, #96]	; (4c0 <mdmCtrlr_DataCommInit+0x98>)
     45e:	4b19      	ldr	r3, [pc, #100]	; (4c4 <mdmCtrlr_DataCommInit+0x9c>)
     460:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     462:	2800      	cmp	r0, #0
     464:	d1e6      	bne.n	434 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     466:	4c10      	ldr	r4, [pc, #64]	; (4a8 <mdmCtrlr_DataCommInit+0x80>)
     468:	2201      	movs	r2, #1
     46a:	4611      	mov	r1, r2
     46c:	4620      	mov	r0, r4
     46e:	4b16      	ldr	r3, [pc, #88]	; (4c8 <mdmCtrlr_DataCommInit+0xa0>)
     470:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     472:	4620      	mov	r0, r4
     474:	4b15      	ldr	r3, [pc, #84]	; (4cc <mdmCtrlr_DataCommInit+0xa4>)
     476:	4798      	blx	r3
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
     478:	4c15      	ldr	r4, [pc, #84]	; (4d0 <mdmCtrlr_DataCommInit+0xa8>)
     47a:	4d0d      	ldr	r5, [pc, #52]	; (4b0 <mdmCtrlr_DataCommInit+0x88>)
     47c:	f104 0720 	add.w	r7, r4, #32
     480:	4626      	mov	r6, r4
     482:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     484:	6028      	str	r0, [r5, #0]
     486:	6069      	str	r1, [r5, #4]
     488:	60aa      	str	r2, [r5, #8]
     48a:	60eb      	str	r3, [r5, #12]
     48c:	4634      	mov	r4, r6
     48e:	3510      	adds	r5, #16
     490:	42be      	cmp	r6, r7
     492:	d1f5      	bne.n	480 <mdmCtrlr_DataCommInit+0x58>
     494:	cc03      	ldmia	r4!, {r0, r1}
     496:	6028      	str	r0, [r5, #0]
     498:	6069      	str	r1, [r5, #4]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     49a:	2128      	movs	r1, #40	; 0x28
     49c:	4804      	ldr	r0, [pc, #16]	; (4b0 <mdmCtrlr_DataCommInit+0x88>)
     49e:	4b06      	ldr	r3, [pc, #24]	; (4b8 <mdmCtrlr_DataCommInit+0x90>)
     4a0:	4798      	blx	r3
     4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4a4:	41014000 	.word	0x41014000
     4a8:	20000004 	.word	0x20000004
     4ac:	00001dc1 	.word	0x00001dc1
     4b0:	20001014 	.word	0x20001014
     4b4:	00002ea0 	.word	0x00002ea0
     4b8:	0000074d 	.word	0x0000074d
     4bc:	20000804 	.word	0x20000804
     4c0:	20001004 	.word	0x20001004
     4c4:	000013d5 	.word	0x000013d5
     4c8:	00001e5d 	.word	0x00001e5d
     4cc:	00001e25 	.word	0x00001e25
     4d0:	00002ebc 	.word	0x00002ebc

000004d4 <SERCOM3_0_Handler>:
**
** Description:        DRE: TX Data Register Empty Interrupt
**
**===========================================================================*/
void SERCOM3_0_Handler( void )
{
     4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* DRE: TX Data Register Empty */
	sprintf(printBuff,"Modem Data Tx Data Reg Empty CallBack\r\n");
     4d6:	4c0c      	ldr	r4, [pc, #48]	; (508 <SERCOM3_0_Handler+0x34>)
     4d8:	4d0c      	ldr	r5, [pc, #48]	; (50c <SERCOM3_0_Handler+0x38>)
     4da:	f104 0720 	add.w	r7, r4, #32
     4de:	4626      	mov	r6, r4
     4e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     4e2:	6028      	str	r0, [r5, #0]
     4e4:	6069      	str	r1, [r5, #4]
     4e6:	60aa      	str	r2, [r5, #8]
     4e8:	60eb      	str	r3, [r5, #12]
     4ea:	4634      	mov	r4, r6
     4ec:	3510      	adds	r5, #16
     4ee:	42be      	cmp	r6, r7
     4f0:	d1f5      	bne.n	4de <SERCOM3_0_Handler+0xa>
     4f2:	cc03      	ldmia	r4!, {r0, r1}
     4f4:	6028      	str	r0, [r5, #0]
     4f6:	6069      	str	r1, [r5, #4]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     4f8:	2128      	movs	r1, #40	; 0x28
     4fa:	4804      	ldr	r0, [pc, #16]	; (50c <SERCOM3_0_Handler+0x38>)
     4fc:	4b04      	ldr	r3, [pc, #16]	; (510 <SERCOM3_0_Handler+0x3c>)
     4fe:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     500:	2201      	movs	r2, #1
     502:	4b04      	ldr	r3, [pc, #16]	; (514 <SERCOM3_0_Handler+0x40>)
     504:	761a      	strb	r2, [r3, #24]
     506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     508:	00002ee4 	.word	0x00002ee4
     50c:	20001014 	.word	0x20001014
     510:	0000074d 	.word	0x0000074d
     514:	41014000 	.word	0x41014000

00000518 <SERCOM3_1_Handler>:
**
** Description:        TXC : Transmit Complete Interrupt
**
**===========================================================================*/
void SERCOM3_1_Handler(void )
{
     518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* TXC : Transmit Complete */
	sprintf(printBuff,"Modem Data Tx byte Complete Callback\r\n");
     51a:	4e0e      	ldr	r6, [pc, #56]	; (554 <SERCOM3_1_Handler+0x3c>)
     51c:	4c0e      	ldr	r4, [pc, #56]	; (558 <SERCOM3_1_Handler+0x40>)
     51e:	f106 0720 	add.w	r7, r6, #32
     522:	4635      	mov	r5, r6
     524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     526:	6020      	str	r0, [r4, #0]
     528:	6061      	str	r1, [r4, #4]
     52a:	60a2      	str	r2, [r4, #8]
     52c:	60e3      	str	r3, [r4, #12]
     52e:	462e      	mov	r6, r5
     530:	3410      	adds	r4, #16
     532:	42bd      	cmp	r5, r7
     534:	d1f5      	bne.n	522 <SERCOM3_1_Handler+0xa>
     536:	6828      	ldr	r0, [r5, #0]
     538:	6020      	str	r0, [r4, #0]
     53a:	88aa      	ldrh	r2, [r5, #4]
     53c:	79ab      	ldrb	r3, [r5, #6]
     53e:	80a2      	strh	r2, [r4, #4]
     540:	71a3      	strb	r3, [r4, #6]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     542:	2128      	movs	r1, #40	; 0x28
     544:	4804      	ldr	r0, [pc, #16]	; (558 <SERCOM3_1_Handler+0x40>)
     546:	4b05      	ldr	r3, [pc, #20]	; (55c <SERCOM3_1_Handler+0x44>)
     548:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     54a:	2202      	movs	r2, #2
     54c:	4b04      	ldr	r3, [pc, #16]	; (560 <SERCOM3_1_Handler+0x48>)
     54e:	761a      	strb	r2, [r3, #24]
     550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     552:	bf00      	nop
     554:	00002f0c 	.word	0x00002f0c
     558:	20001014 	.word	0x20001014
     55c:	0000074d 	.word	0x0000074d
     560:	41014000 	.word	0x41014000

00000564 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     564:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar;
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     566:	4d09      	ldr	r5, [pc, #36]	; (58c <SERCOM3_2_Handler+0x28>)
     568:	4c09      	ldr	r4, [pc, #36]	; (590 <SERCOM3_2_Handler+0x2c>)
     56a:	4628      	mov	r0, r5
     56c:	47a0      	blx	r4
     56e:	2800      	cmp	r0, #0
     570:	d0fb      	beq.n	56a <SERCOM3_2_Handler+0x6>
	rcvdChar = _usart_async_read_byte(&MODEM_DATA);
     572:	4806      	ldr	r0, [pc, #24]	; (58c <SERCOM3_2_Handler+0x28>)
     574:	4b07      	ldr	r3, [pc, #28]	; (594 <SERCOM3_2_Handler+0x30>)
     576:	4798      	blx	r3
	rxIsrCnt++;
     578:	4a07      	ldr	r2, [pc, #28]	; (598 <SERCOM3_2_Handler+0x34>)
     57a:	8813      	ldrh	r3, [r2, #0]
     57c:	3301      	adds	r3, #1
     57e:	8013      	strh	r3, [r2, #0]
	
	ringbuffer_put(&RxRingBuffer, rcvdChar);
     580:	4601      	mov	r1, r0
     582:	4806      	ldr	r0, [pc, #24]	; (59c <SERCOM3_2_Handler+0x38>)
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <SERCOM3_2_Handler+0x3c>)
     586:	4798      	blx	r3
     588:	bd38      	pop	{r3, r4, r5, pc}
     58a:	bf00      	nop
     58c:	20000004 	.word	0x20000004
     590:	00001e51 	.word	0x00001e51
     594:	00001e3f 	.word	0x00001e3f
     598:	200007fc 	.word	0x200007fc
     59c:	20001004 	.word	0x20001004
     5a0:	00001469 	.word	0x00001469

000005a4 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     5a4:	b570      	push	{r4, r5, r6, lr}
     5a6:	4605      	mov	r5, r0
     5a8:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     5aa:	4c05      	ldr	r4, [pc, #20]	; (5c0 <mdmCtrlr_SendDataToModem+0x1c>)
     5ac:	4620      	mov	r0, r4
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <mdmCtrlr_SendDataToModem+0x20>)
     5b0:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     5b2:	4632      	mov	r2, r6
     5b4:	4629      	mov	r1, r5
     5b6:	4620      	mov	r0, r4
     5b8:	4b03      	ldr	r3, [pc, #12]	; (5c8 <mdmCtrlr_SendDataToModem+0x24>)
     5ba:	4798      	blx	r3
}
     5bc:	bd70      	pop	{r4, r5, r6, pc}
     5be:	bf00      	nop
     5c0:	20000004 	.word	0x20000004
     5c4:	00001e25 	.word	0x00001e25
     5c8:	000006c9 	.word	0x000006c9

000005cc <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5d0:	b082      	sub	sp, #8
     5d2:	4606      	mov	r6, r0
     5d4:	460d      	mov	r5, r1
	bool status = false;
	
	uint8_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     5d6:	480e      	ldr	r0, [pc, #56]	; (610 <mdmCtrlr_ReadResponseFromModem+0x44>)
     5d8:	4b0e      	ldr	r3, [pc, #56]	; (614 <mdmCtrlr_ReadResponseFromModem+0x48>)
     5da:	4798      	blx	r3
     5dc:	42a8      	cmp	r0, r5
     5de:	d202      	bcs.n	5e6 <mdmCtrlr_ReadResponseFromModem+0x1a>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     5e0:	b002      	add	sp, #8
     5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CRITICAL_SECTION_ENTER()
     5e6:	a801      	add	r0, sp, #4
     5e8:	4b0b      	ldr	r3, [pc, #44]	; (618 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     5ea:	4798      	blx	r3
		while (readCnt < length)
     5ec:	b165      	cbz	r5, 608 <mdmCtrlr_ReadResponseFromModem+0x3c>
     5ee:	2100      	movs	r1, #0
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     5f0:	f8df 801c 	ldr.w	r8, [pc, #28]	; 610 <mdmCtrlr_ReadResponseFromModem+0x44>
     5f4:	4f09      	ldr	r7, [pc, #36]	; (61c <mdmCtrlr_ReadResponseFromModem+0x50>)
     5f6:	1c4c      	adds	r4, r1, #1
     5f8:	b2e4      	uxtb	r4, r4
     5fa:	4431      	add	r1, r6
     5fc:	4640      	mov	r0, r8
     5fe:	47b8      	blx	r7
     600:	4621      	mov	r1, r4
		while (readCnt < length)
     602:	b2a4      	uxth	r4, r4
     604:	42a5      	cmp	r5, r4
     606:	d8f6      	bhi.n	5f6 <mdmCtrlr_ReadResponseFromModem+0x2a>
		CRITICAL_SECTION_LEAVE()
     608:	a801      	add	r0, sp, #4
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <mdmCtrlr_ReadResponseFromModem+0x54>)
     60c:	4798      	blx	r3
     60e:	e7e7      	b.n	5e0 <mdmCtrlr_ReadResponseFromModem+0x14>
     610:	20001004 	.word	0x20001004
     614:	000014a9 	.word	0x000014a9
     618:	000010a5 	.word	0x000010a5
     61c:	00001425 	.word	0x00001425
     620:	000010b3 	.word	0x000010b3

00000624 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     624:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     626:	4802      	ldr	r0, [pc, #8]	; (630 <mdmCtrlr_FlushRxBuffer+0xc>)
     628:	4b02      	ldr	r3, [pc, #8]	; (634 <mdmCtrlr_FlushRxBuffer+0x10>)
     62a:	4798      	blx	r3
     62c:	bd08      	pop	{r3, pc}
     62e:	bf00      	nop
     630:	20001004 	.word	0x20001004
     634:	000014cd 	.word	0x000014cd

00000638 <modemPowerInit>:

/* Perform the HL7618RD modem power on sequence */
/* I FEEL LIKE SOMETHING WRONG HERE */

void modemPowerInit(void)
{
     638:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     63a:	4c1d      	ldr	r4, [pc, #116]	; (6b0 <modemPowerInit+0x78>)
     63c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     640:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     648:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     64c:	4919      	ldr	r1, [pc, #100]	; (6b4 <modemPowerInit+0x7c>)
     64e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     652:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     656:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     65e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     662:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     666:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     668:	62a3      	str	r3, [r4, #40]	; 0x28
     66a:	4a13      	ldr	r2, [pc, #76]	; (6b8 <modemPowerInit+0x80>)
     66c:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     67a:	6160      	str	r0, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     67c:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67e:	62a3      	str	r3, [r4, #40]	; 0x28
     680:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     682:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     686:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     68e:	6165      	str	r5, [r4, #20]

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	//gpio_set_pin_pull_mode(MODEM_DTR, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(500);
     690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     694:	4e09      	ldr	r6, [pc, #36]	; (6bc <modemPowerInit+0x84>)
     696:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     698:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Give a short 50 ms positive pulse on MODEM ON Pin */
	gpio_set_pin_level(MODEM_ON,true);
	delay_ms(50);
     69c:	2032      	movs	r0, #50	; 0x32
     69e:	47b0      	blx	r6
	
	/* make MODEM ON to default level */
	//gpio_set_pin_level(MODEM_ON,false);
	delay_ms(3000);
     6a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
     6a4:	47b0      	blx	r6
	
	SerialDebugPrint((uint8_t*)"Modem Power On initialization Completed\r\n",41);
     6a6:	2129      	movs	r1, #41	; 0x29
     6a8:	4805      	ldr	r0, [pc, #20]	; (6c0 <modemPowerInit+0x88>)
     6aa:	4b06      	ldr	r3, [pc, #24]	; (6c4 <modemPowerInit+0x8c>)
     6ac:	4798      	blx	r3
     6ae:	bd70      	pop	{r4, r5, r6, pc}
     6b0:	41008000 	.word	0x41008000
     6b4:	c0000001 	.word	0xc0000001
     6b8:	c0000008 	.word	0xc0000008
     6bc:	00001115 	.word	0x00001115
     6c0:	00002f54 	.word	0x00002f54
     6c4:	0000074d 	.word	0x0000074d

000006c8 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6cc:	4604      	mov	r4, r0
     6ce:	460e      	mov	r6, r1
     6d0:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     6d2:	4d0e      	ldr	r5, [pc, #56]	; (70c <usart_async_write+0x44>)
     6d4:	4620      	mov	r0, r4
     6d6:	47a8      	blx	r5
     6d8:	2800      	cmp	r0, #0
     6da:	d0fb      	beq.n	6d4 <usart_async_write+0xc>
     6dc:	3e01      	subs	r6, #1
     6de:	f8df 8030 	ldr.w	r8, [pc, #48]	; 710 <usart_async_write+0x48>
     6e2:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     6e4:	f8df a02c 	ldr.w	sl, [pc, #44]	; 714 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     6e8:	4d08      	ldr	r5, [pc, #32]	; (70c <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     6ea:	7873      	ldrb	r3, [r6, #1]
     6ec:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     6f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     6f4:	4620      	mov	r0, r4
     6f6:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     6f8:	4620      	mov	r0, r4
     6fa:	47a8      	blx	r5
     6fc:	2800      	cmp	r0, #0
     6fe:	d0fb      	beq.n	6f8 <usart_async_write+0x30>
		;
	} while (++offset < length);
     700:	3701      	adds	r7, #1
     702:	454f      	cmp	r7, r9
     704:	d3f1      	bcc.n	6ea <usart_async_write+0x22>

	return (int32_t)offset;
}
     706:	4638      	mov	r0, r7
     708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     70c:	00001e47 	.word	0x00001e47
     710:	20000144 	.word	0x20000144
     714:	00001e39 	.word	0x00001e39

00000718 <SerialDebugTxByteSentCallBack>:
     718:	2302      	movs	r3, #2
     71a:	7603      	strb	r3, [r0, #24]
     71c:	4770      	bx	lr

0000071e <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     71e:	2380      	movs	r3, #128	; 0x80
     720:	7603      	strb	r3, [r0, #24]
     722:	4770      	bx	lr

00000724 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     724:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&DEBUG_PRINT,SERCOM5);
     726:	4c05      	ldr	r4, [pc, #20]	; (73c <SerialDebugPrintInit+0x18>)
     728:	4905      	ldr	r1, [pc, #20]	; (740 <SerialDebugPrintInit+0x1c>)
     72a:	4620      	mov	r0, r4
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <SerialDebugPrintInit+0x20>)
     72e:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     730:	2201      	movs	r2, #1
     732:	4611      	mov	r1, r2
     734:	4620      	mov	r0, r4
     736:	4b04      	ldr	r3, [pc, #16]	; (748 <SerialDebugPrintInit+0x24>)
     738:	4798      	blx	r3
     73a:	bd10      	pop	{r4, pc}
     73c:	20000020 	.word	0x20000020
     740:	43000400 	.word	0x43000400
     744:	00001dc1 	.word	0x00001dc1
     748:	00001e5d 	.word	0x00001e5d

0000074c <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	4605      	mov	r5, r0
     750:	460e      	mov	r6, r1
	_usart_async_enable(&DEBUG_PRINT);
     752:	4c05      	ldr	r4, [pc, #20]	; (768 <SerialDebugPrint+0x1c>)
     754:	4620      	mov	r0, r4
     756:	4b05      	ldr	r3, [pc, #20]	; (76c <SerialDebugPrint+0x20>)
     758:	4798      	blx	r3
	
	usart_async_write(&DEBUG_PRINT, dataToPrint, length);
     75a:	4632      	mov	r2, r6
     75c:	4629      	mov	r1, r5
     75e:	4620      	mov	r0, r4
     760:	4b03      	ldr	r3, [pc, #12]	; (770 <SerialDebugPrint+0x24>)
     762:	4798      	blx	r3
     764:	bd70      	pop	{r4, r5, r6, pc}
     766:	bf00      	nop
     768:	20000020 	.word	0x20000020
     76c:	00001e25 	.word	0x00001e25
     770:	000006c9 	.word	0x000006c9

00000774 <SerialDebugTxDoneCallBack>:
{
     774:	b510      	push	{r4, lr}
     776:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     778:	2116      	movs	r1, #22
     77a:	4803      	ldr	r0, [pc, #12]	; (788 <SerialDebugTxDoneCallBack+0x14>)
     77c:	4b03      	ldr	r3, [pc, #12]	; (78c <SerialDebugTxDoneCallBack+0x18>)
     77e:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     780:	2301      	movs	r3, #1
     782:	7623      	strb	r3, [r4, #24]
     784:	bd10      	pop	{r4, pc}
     786:	bf00      	nop
     788:	00002fb0 	.word	0x00002fb0
     78c:	0000074d 	.word	0x0000074d

00000790 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     790:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     792:	2204      	movs	r2, #4
     794:	4b0b      	ldr	r3, [pc, #44]	; (7c4 <SERCOM5_2_Handler+0x34>)
     796:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&DEBUG_PRINT));
     798:	4d0b      	ldr	r5, [pc, #44]	; (7c8 <SERCOM5_2_Handler+0x38>)
     79a:	4c0c      	ldr	r4, [pc, #48]	; (7cc <SERCOM5_2_Handler+0x3c>)
     79c:	4628      	mov	r0, r5
     79e:	47a0      	blx	r4
     7a0:	2800      	cmp	r0, #0
     7a2:	d0fb      	beq.n	79c <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&DEBUG_PRINT);
     7a4:	4808      	ldr	r0, [pc, #32]	; (7c8 <SERCOM5_2_Handler+0x38>)
     7a6:	4b0a      	ldr	r3, [pc, #40]	; (7d0 <SERCOM5_2_Handler+0x40>)
     7a8:	4798      	blx	r3
     7aa:	490a      	ldr	r1, [pc, #40]	; (7d4 <SERCOM5_2_Handler+0x44>)
     7ac:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     7ae:	2300      	movs	r3, #0
     7b0:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     7b2:	4c09      	ldr	r4, [pc, #36]	; (7d8 <SERCOM5_2_Handler+0x48>)
     7b4:	4620      	mov	r0, r4
     7b6:	4b09      	ldr	r3, [pc, #36]	; (7dc <SERCOM5_2_Handler+0x4c>)
     7b8:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     7ba:	2105      	movs	r1, #5
     7bc:	4620      	mov	r0, r4
     7be:	4b08      	ldr	r3, [pc, #32]	; (7e0 <SERCOM5_2_Handler+0x50>)
     7c0:	4798      	blx	r3
     7c2:	bd38      	pop	{r3, r4, r5, pc}
     7c4:	43000400 	.word	0x43000400
     7c8:	20000020 	.word	0x20000020
     7cc:	00001e51 	.word	0x00001e51
     7d0:	00001e3f 	.word	0x00001e3f
     7d4:	20001054 	.word	0x20001054
     7d8:	20001058 	.word	0x20001058
     7dc:	00002b7d 	.word	0x00002b7d
     7e0:	0000074d 	.word	0x0000074d

000007e4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     7e4:	b508      	push	{r3, lr}
	system_init();
     7e6:	4b01      	ldr	r3, [pc, #4]	; (7ec <atmel_start_init+0x8>)
     7e8:	4798      	blx	r3
     7ea:	bd08      	pop	{r3, pc}
     7ec:	00000f25 	.word	0x00000f25

000007f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7f0:	e7fe      	b.n	7f0 <Dummy_Handler>
	...

000007f4 <Reset_Handler>:
{
     7f4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     7f6:	4b1c      	ldr	r3, [pc, #112]	; (868 <Reset_Handler+0x74>)
     7f8:	4a1c      	ldr	r2, [pc, #112]	; (86c <Reset_Handler+0x78>)
     7fa:	429a      	cmp	r2, r3
     7fc:	d010      	beq.n	820 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     7fe:	4b1c      	ldr	r3, [pc, #112]	; (870 <Reset_Handler+0x7c>)
     800:	4a19      	ldr	r2, [pc, #100]	; (868 <Reset_Handler+0x74>)
     802:	429a      	cmp	r2, r3
     804:	d20c      	bcs.n	820 <Reset_Handler+0x2c>
     806:	3b01      	subs	r3, #1
     808:	1a9b      	subs	r3, r3, r2
     80a:	f023 0303 	bic.w	r3, r3, #3
     80e:	3304      	adds	r3, #4
     810:	4413      	add	r3, r2
     812:	4916      	ldr	r1, [pc, #88]	; (86c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     814:	f851 0b04 	ldr.w	r0, [r1], #4
     818:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     81c:	429a      	cmp	r2, r3
     81e:	d1f9      	bne.n	814 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     820:	4b14      	ldr	r3, [pc, #80]	; (874 <Reset_Handler+0x80>)
     822:	4a15      	ldr	r2, [pc, #84]	; (878 <Reset_Handler+0x84>)
     824:	429a      	cmp	r2, r3
     826:	d20a      	bcs.n	83e <Reset_Handler+0x4a>
     828:	3b01      	subs	r3, #1
     82a:	1a9b      	subs	r3, r3, r2
     82c:	f023 0303 	bic.w	r3, r3, #3
     830:	3304      	adds	r3, #4
     832:	4413      	add	r3, r2
                *pDest++ = 0;
     834:	2100      	movs	r1, #0
     836:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     83a:	4293      	cmp	r3, r2
     83c:	d1fb      	bne.n	836 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     83e:	4b0f      	ldr	r3, [pc, #60]	; (87c <Reset_Handler+0x88>)
     840:	4a0f      	ldr	r2, [pc, #60]	; (880 <Reset_Handler+0x8c>)
     842:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     846:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     848:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     84c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     858:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     85c:	4b09      	ldr	r3, [pc, #36]	; (884 <Reset_Handler+0x90>)
     85e:	4798      	blx	r3
        main();
     860:	4b09      	ldr	r3, [pc, #36]	; (888 <Reset_Handler+0x94>)
     862:	4798      	blx	r3
     864:	e7fe      	b.n	864 <Reset_Handler+0x70>
     866:	bf00      	nop
     868:	20000000 	.word	0x20000000
     86c:	00003550 	.word	0x00003550
     870:	200000f4 	.word	0x200000f4
     874:	2000121c 	.word	0x2000121c
     878:	20000100 	.word	0x20000100
     87c:	e000ed00 	.word	0xe000ed00
     880:	00000000 	.word	0x00000000
     884:	00002b35 	.word	0x00002b35
     888:	000027fd 	.word	0x000027fd

0000088c <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     88c:	4a04      	ldr	r2, [pc, #16]	; (8a0 <AC_0_CLOCK_init+0x14>)
     88e:	69d3      	ldr	r3, [r2, #28]
     890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     894:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     896:	2240      	movs	r2, #64	; 0x40
     898:	4b02      	ldr	r3, [pc, #8]	; (8a4 <AC_0_CLOCK_init+0x18>)
     89a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     89e:	4770      	bx	lr
     8a0:	40000800 	.word	0x40000800
     8a4:	40001c00 	.word	0x40001c00

000008a8 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     8a8:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     8aa:	4b03      	ldr	r3, [pc, #12]	; (8b8 <AC_0_init+0x10>)
     8ac:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     8ae:	4903      	ldr	r1, [pc, #12]	; (8bc <AC_0_init+0x14>)
     8b0:	4803      	ldr	r0, [pc, #12]	; (8c0 <AC_0_init+0x18>)
     8b2:	4b04      	ldr	r3, [pc, #16]	; (8c4 <AC_0_init+0x1c>)
     8b4:	4798      	blx	r3
     8b6:	bd08      	pop	{r3, pc}
     8b8:	0000088d 	.word	0x0000088d
     8bc:	42002000 	.word	0x42002000
     8c0:	20001100 	.word	0x20001100
     8c4:	00001045 	.word	0x00001045

000008c8 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8c8:	4b5d      	ldr	r3, [pc, #372]	; (a40 <ADC_0_PORT_init+0x178>)
     8ca:	2204      	movs	r2, #4
     8cc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     8d2:	629a      	str	r2, [r3, #40]	; 0x28
     8d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     8d8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8fa:	2108      	movs	r1, #8
     8fc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     902:	6299      	str	r1, [r3, #40]	; 0x28
     904:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     906:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     90a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     90e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     912:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     916:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     91a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     91e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     922:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     926:	f44f 7180 	mov.w	r1, #256	; 0x100
     92a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     932:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     936:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     93a:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     93e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     942:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     946:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     94a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     94e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     952:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     956:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     95a:	f44f 7100 	mov.w	r1, #512	; 0x200
     95e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     962:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     966:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     96a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96e:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     982:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     986:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     98e:	2110      	movs	r1, #16
     990:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     992:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     996:	6299      	str	r1, [r3, #40]	; 0x28
     998:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     99a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     99e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9a2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9a6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9aa:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9ae:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9b2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9b6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9ba:	2120      	movs	r1, #32
     9bc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9c2:	6299      	str	r1, [r3, #40]	; 0x28
     9c4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d2:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9d6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9da:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9de:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9e2:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9e6:	2140      	movs	r1, #64	; 0x40
     9e8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9ee:	6299      	str	r1, [r3, #40]	; 0x28
     9f0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9fa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9fe:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a02:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a06:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a0a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a0e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a12:	2180      	movs	r1, #128	; 0x80
     a14:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a16:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a1a:	6299      	str	r1, [r3, #40]	; 0x28
     a1c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a1e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a26:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a2e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a32:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a36:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a3a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     a3e:	4770      	bx	lr
     a40:	41008000 	.word	0x41008000

00000a44 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     a44:	4a04      	ldr	r2, [pc, #16]	; (a58 <ADC_0_CLOCK_init+0x14>)
     a46:	6a13      	ldr	r3, [r2, #32]
     a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     a4c:	6213      	str	r3, [r2, #32]
     a4e:	2241      	movs	r2, #65	; 0x41
     a50:	4b02      	ldr	r3, [pc, #8]	; (a5c <ADC_0_CLOCK_init+0x18>)
     a52:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     a56:	4770      	bx	lr
     a58:	40000800 	.word	0x40000800
     a5c:	40001c00 	.word	0x40001c00

00000a60 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     a60:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <ADC_0_init+0x18>)
     a64:	4798      	blx	r3
	ADC_0_PORT_init();
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <ADC_0_init+0x1c>)
     a68:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     a6a:	2200      	movs	r2, #0
     a6c:	4904      	ldr	r1, [pc, #16]	; (a80 <ADC_0_init+0x20>)
     a6e:	4805      	ldr	r0, [pc, #20]	; (a84 <ADC_0_init+0x24>)
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <ADC_0_init+0x28>)
     a72:	4798      	blx	r3
     a74:	bd08      	pop	{r3, pc}
     a76:	bf00      	nop
     a78:	00000a45 	.word	0x00000a45
     a7c:	000008c9 	.word	0x000008c9
     a80:	43001c00 	.word	0x43001c00
     a84:	20001110 	.word	0x20001110
     a88:	00001075 	.word	0x00001075

00000a8c <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     a8c:	4a04      	ldr	r2, [pc, #16]	; (aa0 <ADC_1_CLOCK_init+0x14>)
     a8e:	6a13      	ldr	r3, [r2, #32]
     a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     a94:	6213      	str	r3, [r2, #32]
     a96:	2240      	movs	r2, #64	; 0x40
     a98:	4b02      	ldr	r3, [pc, #8]	; (aa4 <ADC_1_CLOCK_init+0x18>)
     a9a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     a9e:	4770      	bx	lr
     aa0:	40000800 	.word	0x40000800
     aa4:	40001c00 	.word	0x40001c00

00000aa8 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     aa8:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     aaa:	4b04      	ldr	r3, [pc, #16]	; (abc <ADC_1_init+0x14>)
     aac:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     aae:	2200      	movs	r2, #0
     ab0:	4903      	ldr	r1, [pc, #12]	; (ac0 <ADC_1_init+0x18>)
     ab2:	4804      	ldr	r0, [pc, #16]	; (ac4 <ADC_1_init+0x1c>)
     ab4:	4b04      	ldr	r3, [pc, #16]	; (ac8 <ADC_1_init+0x20>)
     ab6:	4798      	blx	r3
     ab8:	bd08      	pop	{r3, pc}
     aba:	bf00      	nop
     abc:	00000a8d 	.word	0x00000a8d
     ac0:	43002000 	.word	0x43002000
     ac4:	200011c8 	.word	0x200011c8
     ac8:	00001075 	.word	0x00001075

00000acc <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     acc:	4a04      	ldr	r2, [pc, #16]	; (ae0 <DAC_0_CLOCK_init+0x14>)
     ace:	6a13      	ldr	r3, [r2, #32]
     ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     ad4:	6213      	str	r3, [r2, #32]
     ad6:	2240      	movs	r2, #64	; 0x40
     ad8:	4b02      	ldr	r3, [pc, #8]	; (ae4 <DAC_0_CLOCK_init+0x18>)
     ada:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ade:	4770      	bx	lr
     ae0:	40000800 	.word	0x40000800
     ae4:	40001c00 	.word	0x40001c00

00000ae8 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     ae8:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     aea:	4b03      	ldr	r3, [pc, #12]	; (af8 <DAC_0_init+0x10>)
     aec:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     aee:	4903      	ldr	r1, [pc, #12]	; (afc <DAC_0_init+0x14>)
     af0:	4803      	ldr	r0, [pc, #12]	; (b00 <DAC_0_init+0x18>)
     af2:	4b04      	ldr	r3, [pc, #16]	; (b04 <DAC_0_init+0x1c>)
     af4:	4798      	blx	r3
     af6:	bd08      	pop	{r3, pc}
     af8:	00000acd 	.word	0x00000acd
     afc:	43002400 	.word	0x43002400
     b00:	20001138 	.word	0x20001138
     b04:	000010c1 	.word	0x000010c1

00000b08 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     b08:	b508      	push	{r3, lr}
     b0a:	2240      	movs	r2, #64	; 0x40
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <EXTERNAL_IRQ_0_init+0x1c>)
     b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     b12:	4a05      	ldr	r2, [pc, #20]	; (b28 <EXTERNAL_IRQ_0_init+0x20>)
     b14:	6953      	ldr	r3, [r2, #20]
     b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     b1a:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <EXTERNAL_IRQ_0_init+0x24>)
     b1e:	4798      	blx	r3
     b20:	bd08      	pop	{r3, pc}
     b22:	bf00      	nop
     b24:	40001c00 	.word	0x40001c00
     b28:	40000800 	.word	0x40000800
     b2c:	00001179 	.word	0x00001179

00000b30 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     b30:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b32:	4a04      	ldr	r2, [pc, #16]	; (b44 <EVENT_SYSTEM_0_init+0x14>)
     b34:	6993      	ldr	r3, [r2, #24]
     b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b3a:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <EVENT_SYSTEM_0_init+0x18>)
     b3e:	4798      	blx	r3
     b40:	bd08      	pop	{r3, pc}
     b42:	bf00      	nop
     b44:	40000800 	.word	0x40000800
     b48:	00001135 	.word	0x00001135

00000b4c <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     b4c:	4a02      	ldr	r2, [pc, #8]	; (b58 <FLASH_0_CLOCK_init+0xc>)
     b4e:	6913      	ldr	r3, [r2, #16]
     b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     b54:	6113      	str	r3, [r2, #16]
     b56:	4770      	bx	lr
     b58:	40000800 	.word	0x40000800

00000b5c <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     b5c:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     b5e:	4b03      	ldr	r3, [pc, #12]	; (b6c <FLASH_0_init+0x10>)
     b60:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     b62:	4903      	ldr	r1, [pc, #12]	; (b70 <FLASH_0_init+0x14>)
     b64:	4803      	ldr	r0, [pc, #12]	; (b74 <FLASH_0_init+0x18>)
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <FLASH_0_init+0x1c>)
     b68:	4798      	blx	r3
     b6a:	bd08      	pop	{r3, pc}
     b6c:	00000b4d 	.word	0x00000b4d
     b70:	41004000 	.word	0x41004000
     b74:	200010c4 	.word	0x200010c4
     b78:	000011b1 	.word	0x000011b1

00000b7c <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7c:	4b10      	ldr	r3, [pc, #64]	; (bc0 <ModemData_PORT_init+0x44>)
     b7e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     b82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b86:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b8e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b92:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b96:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     baa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bb6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     bbe:	4770      	bx	lr
     bc0:	41008000 	.word	0x41008000

00000bc4 <ModemData_CLOCK_init>:
     bc4:	4b06      	ldr	r3, [pc, #24]	; (be0 <ModemData_CLOCK_init+0x1c>)
     bc6:	2240      	movs	r2, #64	; 0x40
     bc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     bcc:	224a      	movs	r2, #74	; 0x4a
     bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     bd2:	4a04      	ldr	r2, [pc, #16]	; (be4 <ModemData_CLOCK_init+0x20>)
     bd4:	6993      	ldr	r3, [r2, #24]
     bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     bda:	6193      	str	r3, [r2, #24]
     bdc:	4770      	bx	lr
     bde:	bf00      	nop
     be0:	40001c00 	.word	0x40001c00
     be4:	40000800 	.word	0x40000800

00000be8 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     be8:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     bea:	4b03      	ldr	r3, [pc, #12]	; (bf8 <ModemData_init+0x10>)
     bec:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
     bee:	4b03      	ldr	r3, [pc, #12]	; (bfc <ModemData_init+0x14>)
     bf0:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     bf2:	4b03      	ldr	r3, [pc, #12]	; (c00 <ModemData_init+0x18>)
     bf4:	4798      	blx	r3
     bf6:	bd08      	pop	{r3, pc}
     bf8:	00000bc5 	.word	0x00000bc5
     bfc:	00000429 	.word	0x00000429
     c00:	00000b7d 	.word	0x00000b7d

00000c04 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c04:	4b10      	ldr	r3, [pc, #64]	; (c48 <SerialDebug_PORT_init+0x44>)
     c06:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     c0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c12:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c16:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c1a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c1e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c22:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c26:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     c2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c2e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c32:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c36:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c3a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c3e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c42:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     c46:	4770      	bx	lr
     c48:	41008000 	.word	0x41008000

00000c4c <SerialDebug_CLOCK_init>:
     c4c:	4b06      	ldr	r3, [pc, #24]	; (c68 <SerialDebug_CLOCK_init+0x1c>)
     c4e:	2240      	movs	r2, #64	; 0x40
     c50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     c54:	224a      	movs	r2, #74	; 0x4a
     c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c5a:	4a04      	ldr	r2, [pc, #16]	; (c6c <SerialDebug_CLOCK_init+0x20>)
     c5c:	6a13      	ldr	r3, [r2, #32]
     c5e:	f043 0302 	orr.w	r3, r3, #2
     c62:	6213      	str	r3, [r2, #32]
     c64:	4770      	bx	lr
     c66:	bf00      	nop
     c68:	40001c00 	.word	0x40001c00
     c6c:	40000800 	.word	0x40000800

00000c70 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     c70:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     c72:	4b03      	ldr	r3, [pc, #12]	; (c80 <SerialDebug_init+0x10>)
     c74:	4798      	blx	r3
	SerialDebugPrintInit();
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <SerialDebug_init+0x14>)
     c78:	4798      	blx	r3
	SerialDebug_PORT_init();
     c7a:	4b03      	ldr	r3, [pc, #12]	; (c88 <SerialDebug_init+0x18>)
     c7c:	4798      	blx	r3
     c7e:	bd08      	pop	{r3, pc}
     c80:	00000c4d 	.word	0x00000c4d
     c84:	00000725 	.word	0x00000725
     c88:	00000c05 	.word	0x00000c05

00000c8c <delay_driver_init>:
}

void delay_driver_init(void)
{
     c8c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     c8e:	4802      	ldr	r0, [pc, #8]	; (c98 <delay_driver_init+0xc>)
     c90:	4b02      	ldr	r3, [pc, #8]	; (c9c <delay_driver_init+0x10>)
     c92:	4798      	blx	r3
     c94:	bd08      	pop	{r3, pc}
     c96:	bf00      	nop
     c98:	e000e010 	.word	0xe000e010
     c9c:	00001101 	.word	0x00001101

00000ca0 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     ca0:	4a04      	ldr	r2, [pc, #16]	; (cb4 <PWM_0_CLOCK_init+0x14>)
     ca2:	6953      	ldr	r3, [r2, #20]
     ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     ca8:	6153      	str	r3, [r2, #20]
     caa:	2240      	movs	r2, #64	; 0x40
     cac:	4b02      	ldr	r3, [pc, #8]	; (cb8 <PWM_0_CLOCK_init+0x18>)
     cae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     cb2:	4770      	bx	lr
     cb4:	40000800 	.word	0x40000800
     cb8:	40001c00 	.word	0x40001c00

00000cbc <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     cbc:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     cbe:	4b05      	ldr	r3, [pc, #20]	; (cd4 <PWM_0_init+0x18>)
     cc0:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <PWM_0_init+0x1c>)
     cc4:	4798      	blx	r3
     cc6:	4602      	mov	r2, r0
     cc8:	4904      	ldr	r1, [pc, #16]	; (cdc <PWM_0_init+0x20>)
     cca:	4805      	ldr	r0, [pc, #20]	; (ce0 <PWM_0_init+0x24>)
     ccc:	4b05      	ldr	r3, [pc, #20]	; (ce4 <PWM_0_init+0x28>)
     cce:	4798      	blx	r3
     cd0:	bd08      	pop	{r3, pc}
     cd2:	bf00      	nop
     cd4:	00000ca1 	.word	0x00000ca1
     cd8:	00002715 	.word	0x00002715
     cdc:	40003800 	.word	0x40003800
     ce0:	2000108c 	.word	0x2000108c
     ce4:	0000120d 	.word	0x0000120d

00000ce8 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     ce8:	4a04      	ldr	r2, [pc, #16]	; (cfc <PWM_1_CLOCK_init+0x14>)
     cea:	6953      	ldr	r3, [r2, #20]
     cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     cf0:	6153      	str	r3, [r2, #20]
     cf2:	2240      	movs	r2, #64	; 0x40
     cf4:	4b02      	ldr	r3, [pc, #8]	; (d00 <PWM_1_CLOCK_init+0x18>)
     cf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     cfa:	4770      	bx	lr
     cfc:	40000800 	.word	0x40000800
     d00:	40001c00 	.word	0x40001c00

00000d04 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     d04:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     d06:	4b05      	ldr	r3, [pc, #20]	; (d1c <PWM_1_init+0x18>)
     d08:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     d0a:	4b05      	ldr	r3, [pc, #20]	; (d20 <PWM_1_init+0x1c>)
     d0c:	4798      	blx	r3
     d0e:	4602      	mov	r2, r0
     d10:	4904      	ldr	r1, [pc, #16]	; (d24 <PWM_1_init+0x20>)
     d12:	4805      	ldr	r0, [pc, #20]	; (d28 <PWM_1_init+0x24>)
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <PWM_1_init+0x28>)
     d16:	4798      	blx	r3
     d18:	bd08      	pop	{r3, pc}
     d1a:	bf00      	nop
     d1c:	00000ce9 	.word	0x00000ce9
     d20:	00002715 	.word	0x00002715
     d24:	40003c00 	.word	0x40003c00
     d28:	200011ac 	.word	0x200011ac
     d2c:	0000120d 	.word	0x0000120d

00000d30 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     d30:	4a04      	ldr	r2, [pc, #16]	; (d44 <PWM_2_CLOCK_init+0x14>)
     d32:	6993      	ldr	r3, [r2, #24]
     d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     d38:	6193      	str	r3, [r2, #24]
     d3a:	2240      	movs	r2, #64	; 0x40
     d3c:	4b02      	ldr	r3, [pc, #8]	; (d48 <PWM_2_CLOCK_init+0x18>)
     d3e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     d42:	4770      	bx	lr
     d44:	40000800 	.word	0x40000800
     d48:	40001c00 	.word	0x40001c00

00000d4c <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     d4c:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <PWM_2_init+0x18>)
     d50:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <PWM_2_init+0x1c>)
     d54:	4798      	blx	r3
     d56:	4602      	mov	r2, r0
     d58:	4904      	ldr	r1, [pc, #16]	; (d6c <PWM_2_init+0x20>)
     d5a:	4805      	ldr	r0, [pc, #20]	; (d70 <PWM_2_init+0x24>)
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <PWM_2_init+0x28>)
     d5e:	4798      	blx	r3
     d60:	bd08      	pop	{r3, pc}
     d62:	bf00      	nop
     d64:	00000d31 	.word	0x00000d31
     d68:	00002715 	.word	0x00002715
     d6c:	4101a000 	.word	0x4101a000
     d70:	200010a8 	.word	0x200010a8
     d74:	0000120d 	.word	0x0000120d

00000d78 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     d78:	4a04      	ldr	r2, [pc, #16]	; (d8c <TIMER_3_CLOCK_init+0x14>)
     d7a:	6993      	ldr	r3, [r2, #24]
     d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     d80:	6193      	str	r3, [r2, #24]
     d82:	2240      	movs	r2, #64	; 0x40
     d84:	4b02      	ldr	r3, [pc, #8]	; (d90 <TIMER_3_CLOCK_init+0x18>)
     d86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     d8a:	4770      	bx	lr
     d8c:	40000800 	.word	0x40000800
     d90:	40001c00 	.word	0x40001c00

00000d94 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     d94:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     d96:	4b05      	ldr	r3, [pc, #20]	; (dac <TIMER_3_init+0x18>)
     d98:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <TIMER_3_init+0x1c>)
     d9c:	4798      	blx	r3
     d9e:	4602      	mov	r2, r0
     da0:	4904      	ldr	r1, [pc, #16]	; (db4 <TIMER_3_init+0x20>)
     da2:	4805      	ldr	r0, [pc, #20]	; (db8 <TIMER_3_init+0x24>)
     da4:	4b05      	ldr	r3, [pc, #20]	; (dbc <TIMER_3_init+0x28>)
     da6:	4798      	blx	r3
     da8:	bd08      	pop	{r3, pc}
     daa:	bf00      	nop
     dac:	00000d79 	.word	0x00000d79
     db0:	000021cd 	.word	0x000021cd
     db4:	41016000 	.word	0x41016000
     db8:	200011cc 	.word	0x200011cc
     dbc:	00001329 	.word	0x00001329

00000dc0 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     dc0:	4a04      	ldr	r2, [pc, #16]	; (dd4 <TIMER_4_CLOCK_init+0x14>)
     dc2:	6993      	ldr	r3, [r2, #24]
     dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     dc8:	6193      	str	r3, [r2, #24]
     dca:	2240      	movs	r2, #64	; 0x40
     dcc:	4b02      	ldr	r3, [pc, #8]	; (dd8 <TIMER_4_CLOCK_init+0x18>)
     dce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     dd2:	4770      	bx	lr
     dd4:	40000800 	.word	0x40000800
     dd8:	40001c00 	.word	0x40001c00

00000ddc <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     ddc:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <TIMER_4_init+0x18>)
     de0:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <TIMER_4_init+0x1c>)
     de4:	4798      	blx	r3
     de6:	4602      	mov	r2, r0
     de8:	4904      	ldr	r1, [pc, #16]	; (dfc <TIMER_4_init+0x20>)
     dea:	4805      	ldr	r0, [pc, #20]	; (e00 <TIMER_4_init+0x24>)
     dec:	4b05      	ldr	r3, [pc, #20]	; (e04 <TIMER_4_init+0x28>)
     dee:	4798      	blx	r3
     df0:	bd08      	pop	{r3, pc}
     df2:	bf00      	nop
     df4:	00000dc1 	.word	0x00000dc1
     df8:	000021cd 	.word	0x000021cd
     dfc:	41018000 	.word	0x41018000
     e00:	20001114 	.word	0x20001114
     e04:	00001329 	.word	0x00001329

00000e08 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     e08:	4a04      	ldr	r2, [pc, #16]	; (e1c <TIMER_5_CLOCK_init+0x14>)
     e0a:	69d3      	ldr	r3, [r2, #28]
     e0c:	f043 0308 	orr.w	r3, r3, #8
     e10:	61d3      	str	r3, [r2, #28]
     e12:	2240      	movs	r2, #64	; 0x40
     e14:	4b02      	ldr	r3, [pc, #8]	; (e20 <TIMER_5_CLOCK_init+0x18>)
     e16:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     e1a:	4770      	bx	lr
     e1c:	40000800 	.word	0x40000800
     e20:	40001c00 	.word	0x40001c00

00000e24 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     e24:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     e26:	4b05      	ldr	r3, [pc, #20]	; (e3c <TIMER_5_init+0x18>)
     e28:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     e2a:	4b05      	ldr	r3, [pc, #20]	; (e40 <TIMER_5_init+0x1c>)
     e2c:	4798      	blx	r3
     e2e:	4602      	mov	r2, r0
     e30:	4904      	ldr	r1, [pc, #16]	; (e44 <TIMER_5_init+0x20>)
     e32:	4805      	ldr	r0, [pc, #20]	; (e48 <TIMER_5_init+0x24>)
     e34:	4b05      	ldr	r3, [pc, #20]	; (e4c <TIMER_5_init+0x28>)
     e36:	4798      	blx	r3
     e38:	bd08      	pop	{r3, pc}
     e3a:	bf00      	nop
     e3c:	00000e09 	.word	0x00000e09
     e40:	000021cd 	.word	0x000021cd
     e44:	42000c00 	.word	0x42000c00
     e48:	2000116c 	.word	0x2000116c
     e4c:	00001329 	.word	0x00001329

00000e50 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     e50:	4a04      	ldr	r2, [pc, #16]	; (e64 <TIMER_6_CLOCK_init+0x14>)
     e52:	69d3      	ldr	r3, [r2, #28]
     e54:	f043 0310 	orr.w	r3, r3, #16
     e58:	61d3      	str	r3, [r2, #28]
     e5a:	2240      	movs	r2, #64	; 0x40
     e5c:	4b02      	ldr	r3, [pc, #8]	; (e68 <TIMER_6_CLOCK_init+0x18>)
     e5e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     e62:	4770      	bx	lr
     e64:	40000800 	.word	0x40000800
     e68:	40001c00 	.word	0x40001c00

00000e6c <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     e6c:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <TIMER_6_init+0x18>)
     e70:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <TIMER_6_init+0x1c>)
     e74:	4798      	blx	r3
     e76:	4602      	mov	r2, r0
     e78:	4904      	ldr	r1, [pc, #16]	; (e8c <TIMER_6_init+0x20>)
     e7a:	4805      	ldr	r0, [pc, #20]	; (e90 <TIMER_6_init+0x24>)
     e7c:	4b05      	ldr	r3, [pc, #20]	; (e94 <TIMER_6_init+0x28>)
     e7e:	4798      	blx	r3
     e80:	bd08      	pop	{r3, pc}
     e82:	bf00      	nop
     e84:	00000e51 	.word	0x00000e51
     e88:	000021cd 	.word	0x000021cd
     e8c:	42001000 	.word	0x42001000
     e90:	2000118c 	.word	0x2000118c
     e94:	00001329 	.word	0x00001329

00000e98 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     e98:	4a04      	ldr	r2, [pc, #16]	; (eac <TIMER_7_CLOCK_init+0x14>)
     e9a:	6a13      	ldr	r3, [r2, #32]
     e9c:	f043 0310 	orr.w	r3, r3, #16
     ea0:	6213      	str	r3, [r2, #32]
     ea2:	2240      	movs	r2, #64	; 0x40
     ea4:	4b02      	ldr	r3, [pc, #8]	; (eb0 <TIMER_7_CLOCK_init+0x18>)
     ea6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     eaa:	4770      	bx	lr
     eac:	40000800 	.word	0x40000800
     eb0:	40001c00 	.word	0x40001c00

00000eb4 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     eb4:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <TIMER_7_init+0x18>)
     eb8:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     eba:	4b05      	ldr	r3, [pc, #20]	; (ed0 <TIMER_7_init+0x1c>)
     ebc:	4798      	blx	r3
     ebe:	4602      	mov	r2, r0
     ec0:	4904      	ldr	r1, [pc, #16]	; (ed4 <TIMER_7_init+0x20>)
     ec2:	4805      	ldr	r0, [pc, #20]	; (ed8 <TIMER_7_init+0x24>)
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <TIMER_7_init+0x28>)
     ec6:	4798      	blx	r3
     ec8:	bd08      	pop	{r3, pc}
     eca:	bf00      	nop
     ecc:	00000e99 	.word	0x00000e99
     ed0:	000021cd 	.word	0x000021cd
     ed4:	43001000 	.word	0x43001000
     ed8:	200010e0 	.word	0x200010e0
     edc:	00001329 	.word	0x00001329

00000ee0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     ee0:	4a02      	ldr	r2, [pc, #8]	; (eec <WDT_0_CLOCK_init+0xc>)
     ee2:	6953      	ldr	r3, [r2, #20]
     ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     ee8:	6153      	str	r3, [r2, #20]
     eea:	4770      	bx	lr
     eec:	40000800 	.word	0x40000800

00000ef0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     ef0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     ef2:	4b06      	ldr	r3, [pc, #24]	; (f0c <WDT_0_init+0x1c>)
     ef4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     ef6:	2252      	movs	r2, #82	; 0x52
     ef8:	4905      	ldr	r1, [pc, #20]	; (f10 <WDT_0_init+0x20>)
     efa:	2001      	movs	r0, #1
     efc:	4b05      	ldr	r3, [pc, #20]	; (f14 <WDT_0_init+0x24>)
     efe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     f00:	4805      	ldr	r0, [pc, #20]	; (f18 <WDT_0_init+0x28>)
     f02:	4b06      	ldr	r3, [pc, #24]	; (f1c <WDT_0_init+0x2c>)
     f04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     f06:	4b06      	ldr	r3, [pc, #24]	; (f20 <WDT_0_init+0x30>)
     f08:	4798      	blx	r3
     f0a:	bd08      	pop	{r3, pc}
     f0c:	00000ee1 	.word	0x00000ee1
     f10:	00002fd4 	.word	0x00002fd4
     f14:	0000136d 	.word	0x0000136d
     f18:	20001134 	.word	0x20001134
     f1c:	40002000 	.word	0x40002000
     f20:	00002791 	.word	0x00002791

00000f24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f28:	4b28      	ldr	r3, [pc, #160]	; (fcc <system_init+0xa8>)
     f2a:	4798      	blx	r3
	init_mcu();

	AC_0_init();
     f2c:	4b28      	ldr	r3, [pc, #160]	; (fd0 <system_init+0xac>)
     f2e:	4798      	blx	r3

	ADC_0_init();
     f30:	4b28      	ldr	r3, [pc, #160]	; (fd4 <system_init+0xb0>)
     f32:	4798      	blx	r3

	ADC_1_init();
     f34:	4b28      	ldr	r3, [pc, #160]	; (fd8 <system_init+0xb4>)
     f36:	4798      	blx	r3

	DAC_0_init();
     f38:	4b28      	ldr	r3, [pc, #160]	; (fdc <system_init+0xb8>)
     f3a:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     f3c:	4b28      	ldr	r3, [pc, #160]	; (fe0 <system_init+0xbc>)
     f3e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     f40:	4b28      	ldr	r3, [pc, #160]	; (fe4 <system_init+0xc0>)
     f42:	4798      	blx	r3

	FLASH_0_init();
     f44:	4b28      	ldr	r3, [pc, #160]	; (fe8 <system_init+0xc4>)
     f46:	4798      	blx	r3

	SerialDebug_init();
     f48:	4b28      	ldr	r3, [pc, #160]	; (fec <system_init+0xc8>)
     f4a:	4798      	blx	r3
	
	ModemData_init();
     f4c:	4b28      	ldr	r3, [pc, #160]	; (ff0 <system_init+0xcc>)
     f4e:	4798      	blx	r3

	delay_driver_init();
     f50:	4b28      	ldr	r3, [pc, #160]	; (ff4 <system_init+0xd0>)
     f52:	4798      	blx	r3

	PWM_0_init();
     f54:	4b28      	ldr	r3, [pc, #160]	; (ff8 <system_init+0xd4>)
     f56:	4798      	blx	r3

	PWM_1_init();
     f58:	4b28      	ldr	r3, [pc, #160]	; (ffc <system_init+0xd8>)
     f5a:	4798      	blx	r3

	PWM_2_init();
     f5c:	4b28      	ldr	r3, [pc, #160]	; (1000 <system_init+0xdc>)
     f5e:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     f60:	4c28      	ldr	r4, [pc, #160]	; (1004 <system_init+0xe0>)
     f62:	69a3      	ldr	r3, [r4, #24]
     f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f68:	61a3      	str	r3, [r4, #24]
     f6a:	4f27      	ldr	r7, [pc, #156]	; (1008 <system_init+0xe4>)
     f6c:	f04f 0840 	mov.w	r8, #64	; 0x40
     f70:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     f74:	4e25      	ldr	r6, [pc, #148]	; (100c <system_init+0xe8>)
     f76:	47b0      	blx	r6
     f78:	4602      	mov	r2, r0
     f7a:	4925      	ldr	r1, [pc, #148]	; (1010 <system_init+0xec>)
     f7c:	4825      	ldr	r0, [pc, #148]	; (1014 <system_init+0xf0>)
     f7e:	4d26      	ldr	r5, [pc, #152]	; (1018 <system_init+0xf4>)
     f80:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     f82:	69e3      	ldr	r3, [r4, #28]
     f84:	f043 0320 	orr.w	r3, r3, #32
     f88:	61e3      	str	r3, [r4, #28]
     f8a:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     f8e:	47b0      	blx	r6
     f90:	4602      	mov	r2, r0
     f92:	4922      	ldr	r1, [pc, #136]	; (101c <system_init+0xf8>)
     f94:	4822      	ldr	r0, [pc, #136]	; (1020 <system_init+0xfc>)
     f96:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     f98:	69e3      	ldr	r3, [r4, #28]
     f9a:	ea43 0308 	orr.w	r3, r3, r8
     f9e:	61e3      	str	r3, [r4, #28]
     fa0:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     fa4:	47b0      	blx	r6
     fa6:	4602      	mov	r2, r0
     fa8:	491e      	ldr	r1, [pc, #120]	; (1024 <system_init+0x100>)
     faa:	481f      	ldr	r0, [pc, #124]	; (1028 <system_init+0x104>)
     fac:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
     fae:	4b1f      	ldr	r3, [pc, #124]	; (102c <system_init+0x108>)
     fb0:	4798      	blx	r3

	TIMER_4_init();
     fb2:	4b1f      	ldr	r3, [pc, #124]	; (1030 <system_init+0x10c>)
     fb4:	4798      	blx	r3

	TIMER_5_init();
     fb6:	4b1f      	ldr	r3, [pc, #124]	; (1034 <system_init+0x110>)
     fb8:	4798      	blx	r3

	TIMER_6_init();
     fba:	4b1f      	ldr	r3, [pc, #124]	; (1038 <system_init+0x114>)
     fbc:	4798      	blx	r3

	TIMER_7_init();
     fbe:	4b1f      	ldr	r3, [pc, #124]	; (103c <system_init+0x118>)
     fc0:	4798      	blx	r3

	WDT_0_init();
     fc2:	4b1f      	ldr	r3, [pc, #124]	; (1040 <system_init+0x11c>)
     fc4:	4798      	blx	r3
     fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fca:	bf00      	nop
     fcc:	00001695 	.word	0x00001695
     fd0:	000008a9 	.word	0x000008a9
     fd4:	00000a61 	.word	0x00000a61
     fd8:	00000aa9 	.word	0x00000aa9
     fdc:	00000ae9 	.word	0x00000ae9
     fe0:	00000b09 	.word	0x00000b09
     fe4:	00000b31 	.word	0x00000b31
     fe8:	00000b5d 	.word	0x00000b5d
     fec:	00000c71 	.word	0x00000c71
     ff0:	00000be9 	.word	0x00000be9
     ff4:	00000c8d 	.word	0x00000c8d
     ff8:	00000cbd 	.word	0x00000cbd
     ffc:	00000d05 	.word	0x00000d05
    1000:	00000d4d 	.word	0x00000d4d
    1004:	40000800 	.word	0x40000800
    1008:	40001c00 	.word	0x40001c00
    100c:	0000270d 	.word	0x0000270d
    1010:	4101c000 	.word	0x4101c000
    1014:	200011ec 	.word	0x200011ec
    1018:	00001329 	.word	0x00001329
    101c:	42001400 	.word	0x42001400
    1020:	2000114c 	.word	0x2000114c
    1024:	42001800 	.word	0x42001800
    1028:	2000106c 	.word	0x2000106c
    102c:	00000d95 	.word	0x00000d95
    1030:	00000ddd 	.word	0x00000ddd
    1034:	00000e25 	.word	0x00000e25
    1038:	00000e6d 	.word	0x00000e6d
    103c:	00000eb5 	.word	0x00000eb5
    1040:	00000ef1 	.word	0x00000ef1

00001044 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1044:	b538      	push	{r3, r4, r5, lr}
    1046:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1048:	4605      	mov	r5, r0
    104a:	b158      	cbz	r0, 1064 <ac_sync_init+0x20>
    104c:	1c08      	adds	r0, r1, #0
    104e:	bf18      	it	ne
    1050:	2001      	movne	r0, #1
    1052:	223b      	movs	r2, #59	; 0x3b
    1054:	4904      	ldr	r1, [pc, #16]	; (1068 <ac_sync_init+0x24>)
    1056:	4b05      	ldr	r3, [pc, #20]	; (106c <ac_sync_init+0x28>)
    1058:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    105a:	4621      	mov	r1, r4
    105c:	4628      	mov	r0, r5
    105e:	4b04      	ldr	r3, [pc, #16]	; (1070 <ac_sync_init+0x2c>)
    1060:	4798      	blx	r3
}
    1062:	bd38      	pop	{r3, r4, r5, pc}
    1064:	2000      	movs	r0, #0
    1066:	e7f4      	b.n	1052 <ac_sync_init+0xe>
    1068:	00002ff0 	.word	0x00002ff0
    106c:	0000136d 	.word	0x0000136d
    1070:	0000155d 	.word	0x0000155d

00001074 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1074:	b538      	push	{r3, r4, r5, lr}
    1076:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1078:	4605      	mov	r5, r0
    107a:	b158      	cbz	r0, 1094 <adc_sync_init+0x20>
    107c:	1c08      	adds	r0, r1, #0
    107e:	bf18      	it	ne
    1080:	2001      	movne	r0, #1
    1082:	2243      	movs	r2, #67	; 0x43
    1084:	4904      	ldr	r1, [pc, #16]	; (1098 <adc_sync_init+0x24>)
    1086:	4b05      	ldr	r3, [pc, #20]	; (109c <adc_sync_init+0x28>)
    1088:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    108a:	4621      	mov	r1, r4
    108c:	4628      	mov	r0, r5
    108e:	4b04      	ldr	r3, [pc, #16]	; (10a0 <adc_sync_init+0x2c>)
    1090:	4798      	blx	r3
}
    1092:	bd38      	pop	{r3, r4, r5, pc}
    1094:	2000      	movs	r0, #0
    1096:	e7f4      	b.n	1082 <adc_sync_init+0xe>
    1098:	0000300c 	.word	0x0000300c
    109c:	0000136d 	.word	0x0000136d
    10a0:	00001635 	.word	0x00001635

000010a4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    10a4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    10a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    10aa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    10ac:	f3bf 8f5f 	dmb	sy
    10b0:	4770      	bx	lr

000010b2 <atomic_leave_critical>:
    10b2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    10b6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    10b8:	f383 8810 	msr	PRIMASK, r3
    10bc:	4770      	bx	lr
	...

000010c0 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    10c0:	b538      	push	{r3, r4, r5, lr}
    10c2:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    10c4:	4604      	mov	r4, r0
    10c6:	b198      	cbz	r0, 10f0 <dac_sync_init+0x30>
    10c8:	1c08      	adds	r0, r1, #0
    10ca:	bf18      	it	ne
    10cc:	2001      	movne	r0, #1
    10ce:	223c      	movs	r2, #60	; 0x3c
    10d0:	4908      	ldr	r1, [pc, #32]	; (10f4 <dac_sync_init+0x34>)
    10d2:	4b09      	ldr	r3, [pc, #36]	; (10f8 <dac_sync_init+0x38>)
    10d4:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    10d6:	4629      	mov	r1, r5
    10d8:	4620      	mov	r0, r4
    10da:	4b08      	ldr	r3, [pc, #32]	; (10fc <dac_sync_init+0x3c>)
    10dc:	4798      	blx	r3
	if (rc) {
    10de:	4602      	mov	r2, r0
    10e0:	b920      	cbnz	r0, 10ec <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    10e2:	2300      	movs	r3, #0
    10e4:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    10e6:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    10e8:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    10ea:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    10ec:	4610      	mov	r0, r2
    10ee:	bd38      	pop	{r3, r4, r5, pc}
    10f0:	2000      	movs	r0, #0
    10f2:	e7ec      	b.n	10ce <dac_sync_init+0xe>
    10f4:	00003028 	.word	0x00003028
    10f8:	0000136d 	.word	0x0000136d
    10fc:	0000174d 	.word	0x0000174d

00001100 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1100:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1102:	4b02      	ldr	r3, [pc, #8]	; (110c <delay_init+0xc>)
    1104:	6018      	str	r0, [r3, #0]
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <delay_init+0x10>)
    1108:	4798      	blx	r3
    110a:	bd08      	pop	{r3, pc}
    110c:	20000150 	.word	0x20000150
    1110:	00001ec9 	.word	0x00001ec9

00001114 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1114:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1116:	4b04      	ldr	r3, [pc, #16]	; (1128 <delay_ms+0x14>)
    1118:	681c      	ldr	r4, [r3, #0]
    111a:	4b04      	ldr	r3, [pc, #16]	; (112c <delay_ms+0x18>)
    111c:	4798      	blx	r3
    111e:	4601      	mov	r1, r0
    1120:	4620      	mov	r0, r4
    1122:	4b03      	ldr	r3, [pc, #12]	; (1130 <delay_ms+0x1c>)
    1124:	4798      	blx	r3
    1126:	bd10      	pop	{r4, pc}
    1128:	20000150 	.word	0x20000150
    112c:	00001689 	.word	0x00001689
    1130:	00001edd 	.word	0x00001edd

00001134 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1134:	b508      	push	{r3, lr}
	return _event_system_init();
    1136:	4b01      	ldr	r3, [pc, #4]	; (113c <event_system_init+0x8>)
    1138:	4798      	blx	r3
}
    113a:	bd08      	pop	{r3, pc}
    113c:	00001989 	.word	0x00001989

00001140 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1140:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1142:	4b0c      	ldr	r3, [pc, #48]	; (1174 <process_ext_irq+0x34>)
    1144:	685c      	ldr	r4, [r3, #4]
    1146:	42a0      	cmp	r0, r4
    1148:	d00e      	beq.n	1168 <process_ext_irq+0x28>
    114a:	2301      	movs	r3, #1
    114c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    114e:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1150:	25ff      	movs	r5, #255	; 0xff
    1152:	e003      	b.n	115c <process_ext_irq+0x1c>
    1154:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1156:	185a      	adds	r2, r3, r1
    1158:	0852      	lsrs	r2, r2, #1
    115a:	d104      	bne.n	1166 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    115c:	42a0      	cmp	r0, r4
    115e:	d9f9      	bls.n	1154 <process_ext_irq+0x14>
	while (upper >= lower) {
    1160:	b13b      	cbz	r3, 1172 <process_ext_irq+0x32>
			lower = middle + 1;
    1162:	4631      	mov	r1, r6
    1164:	e7f7      	b.n	1156 <process_ext_irq+0x16>
    1166:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1168:	4b02      	ldr	r3, [pc, #8]	; (1174 <process_ext_irq+0x34>)
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	b10b      	cbz	r3, 1172 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    116e:	4798      	blx	r3
    1170:	bd70      	pop	{r4, r5, r6, pc}
    1172:	bd70      	pop	{r4, r5, r6, pc}
    1174:	20000154 	.word	0x20000154

00001178 <ext_irq_init>:
{
    1178:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <ext_irq_init+0x18>)
    117c:	f04f 32ff 	mov.w	r2, #4294967295
    1180:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1182:	2200      	movs	r2, #0
    1184:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1186:	4803      	ldr	r0, [pc, #12]	; (1194 <ext_irq_init+0x1c>)
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <ext_irq_init+0x20>)
    118a:	4798      	blx	r3
}
    118c:	bd08      	pop	{r3, pc}
    118e:	bf00      	nop
    1190:	20000154 	.word	0x20000154
    1194:	00001141 	.word	0x00001141
    1198:	00001909 	.word	0x00001909

0000119c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    119c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    119e:	6943      	ldr	r3, [r0, #20]
    11a0:	b103      	cbz	r3, 11a4 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    11a2:	4798      	blx	r3
    11a4:	bd08      	pop	{r3, pc}

000011a6 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    11a6:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    11a8:	6983      	ldr	r3, [r0, #24]
    11aa:	b103      	cbz	r3, 11ae <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    11ac:	4798      	blx	r3
    11ae:	bd08      	pop	{r3, pc}

000011b0 <flash_init>:
{
    11b0:	b538      	push	{r3, r4, r5, lr}
    11b2:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    11b4:	4604      	mov	r4, r0
    11b6:	b190      	cbz	r0, 11de <flash_init+0x2e>
    11b8:	1c08      	adds	r0, r1, #0
    11ba:	bf18      	it	ne
    11bc:	2001      	movne	r0, #1
    11be:	2242      	movs	r2, #66	; 0x42
    11c0:	4908      	ldr	r1, [pc, #32]	; (11e4 <flash_init+0x34>)
    11c2:	4b09      	ldr	r3, [pc, #36]	; (11e8 <flash_init+0x38>)
    11c4:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    11c6:	4629      	mov	r1, r5
    11c8:	4620      	mov	r0, r4
    11ca:	4b08      	ldr	r3, [pc, #32]	; (11ec <flash_init+0x3c>)
    11cc:	4798      	blx	r3
	if (rc) {
    11ce:	4603      	mov	r3, r0
    11d0:	b918      	cbnz	r0, 11da <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    11d2:	4a07      	ldr	r2, [pc, #28]	; (11f0 <flash_init+0x40>)
    11d4:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    11d6:	4a07      	ldr	r2, [pc, #28]	; (11f4 <flash_init+0x44>)
    11d8:	6062      	str	r2, [r4, #4]
}
    11da:	4618      	mov	r0, r3
    11dc:	bd38      	pop	{r3, r4, r5, pc}
    11de:	2000      	movs	r0, #0
    11e0:	e7ed      	b.n	11be <flash_init+0xe>
    11e2:	bf00      	nop
    11e4:	00003044 	.word	0x00003044
    11e8:	0000136d 	.word	0x0000136d
    11ec:	00001ac5 	.word	0x00001ac5
    11f0:	0000119d 	.word	0x0000119d
    11f4:	000011a7 	.word	0x000011a7

000011f8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    11f8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    11fa:	6943      	ldr	r3, [r0, #20]
    11fc:	b103      	cbz	r3, 1200 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    11fe:	4798      	blx	r3
    1200:	bd08      	pop	{r3, pc}

00001202 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1202:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1204:	6983      	ldr	r3, [r0, #24]
    1206:	b103      	cbz	r3, 120a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1208:	4798      	blx	r3
    120a:	bd08      	pop	{r3, pc}

0000120c <pwm_init>:
{
    120c:	b538      	push	{r3, r4, r5, lr}
    120e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1210:	4604      	mov	r4, r0
    1212:	b180      	cbz	r0, 1236 <pwm_init+0x2a>
    1214:	1c08      	adds	r0, r1, #0
    1216:	bf18      	it	ne
    1218:	2001      	movne	r0, #1
    121a:	223d      	movs	r2, #61	; 0x3d
    121c:	4907      	ldr	r1, [pc, #28]	; (123c <pwm_init+0x30>)
    121e:	4b08      	ldr	r3, [pc, #32]	; (1240 <pwm_init+0x34>)
    1220:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1222:	4629      	mov	r1, r5
    1224:	4620      	mov	r0, r4
    1226:	4b07      	ldr	r3, [pc, #28]	; (1244 <pwm_init+0x38>)
    1228:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    122a:	4b07      	ldr	r3, [pc, #28]	; (1248 <pwm_init+0x3c>)
    122c:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    122e:	4b07      	ldr	r3, [pc, #28]	; (124c <pwm_init+0x40>)
    1230:	6063      	str	r3, [r4, #4]
}
    1232:	2000      	movs	r0, #0
    1234:	bd38      	pop	{r3, r4, r5, pc}
    1236:	2000      	movs	r0, #0
    1238:	e7ef      	b.n	121a <pwm_init+0xe>
    123a:	bf00      	nop
    123c:	0000305c 	.word	0x0000305c
    1240:	0000136d 	.word	0x0000136d
    1244:	000025f5 	.word	0x000025f5
    1248:	000011f9 	.word	0x000011f9
    124c:	00001203 	.word	0x00001203

00001250 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1252:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1254:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1256:	b12f      	cbz	r7, 1264 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1258:	688d      	ldr	r5, [r1, #8]
    125a:	463c      	mov	r4, r7
    125c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    125e:	f1c2 0e01 	rsb	lr, r2, #1
    1262:	e00b      	b.n	127c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1264:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <timer_add_timer_task+0x50>)
    1266:	4798      	blx	r3
		return;
    1268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    126a:	4473      	add	r3, lr
    126c:	68a0      	ldr	r0, [r4, #8]
    126e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1270:	42ab      	cmp	r3, r5
    1272:	d20a      	bcs.n	128a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1274:	6823      	ldr	r3, [r4, #0]
    1276:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1278:	b153      	cbz	r3, 1290 <timer_add_timer_task+0x40>
    127a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    127c:	6863      	ldr	r3, [r4, #4]
    127e:	4293      	cmp	r3, r2
    1280:	d8f3      	bhi.n	126a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1282:	68a0      	ldr	r0, [r4, #8]
    1284:	4403      	add	r3, r0
    1286:	1a9b      	subs	r3, r3, r2
    1288:	e7f2      	b.n	1270 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    128a:	42a7      	cmp	r7, r4
    128c:	d004      	beq.n	1298 <timer_add_timer_task+0x48>
    128e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1290:	4620      	mov	r0, r4
    1292:	4b04      	ldr	r3, [pc, #16]	; (12a4 <timer_add_timer_task+0x54>)
    1294:	4798      	blx	r3
    1296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1298:	4660      	mov	r0, ip
    129a:	4b01      	ldr	r3, [pc, #4]	; (12a0 <timer_add_timer_task+0x50>)
    129c:	4798      	blx	r3
    129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12a0:	00001395 	.word	0x00001395
    12a4:	000013c1 	.word	0x000013c1

000012a8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    12a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    12ac:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    12ae:	6907      	ldr	r7, [r0, #16]
    12b0:	3701      	adds	r7, #1
    12b2:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    12b4:	7e03      	ldrb	r3, [r0, #24]
    12b6:	f013 0f01 	tst.w	r3, #1
    12ba:	d113      	bne.n	12e4 <timer_process_counted+0x3c>
    12bc:	7e03      	ldrb	r3, [r0, #24]
    12be:	f013 0f02 	tst.w	r3, #2
    12c2:	d10f      	bne.n	12e4 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    12c4:	b354      	cbz	r4, 131c <timer_process_counted+0x74>
    12c6:	6863      	ldr	r3, [r4, #4]
    12c8:	1afb      	subs	r3, r7, r3
    12ca:	68a2      	ldr	r2, [r4, #8]
    12cc:	4293      	cmp	r3, r2
    12ce:	d307      	bcc.n	12e0 <timer_process_counted+0x38>
    12d0:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    12d2:	f100 0814 	add.w	r8, r0, #20
    12d6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1320 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    12da:	f8df a048 	ldr.w	sl, [pc, #72]	; 1324 <timer_process_counted+0x7c>
    12de:	e012      	b.n	1306 <timer_process_counted+0x5e>
    12e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    12e4:	7e03      	ldrb	r3, [r0, #24]
    12e6:	f043 0302 	orr.w	r3, r3, #2
    12ea:	7603      	strb	r3, [r0, #24]
		return;
    12ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12f0:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    12f2:	68e3      	ldr	r3, [r4, #12]
    12f4:	4620      	mov	r0, r4
    12f6:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    12f8:	b185      	cbz	r5, 131c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    12fa:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    12fc:	686b      	ldr	r3, [r5, #4]
    12fe:	1afb      	subs	r3, r7, r3
    1300:	68aa      	ldr	r2, [r5, #8]
    1302:	4293      	cmp	r3, r2
    1304:	d30a      	bcc.n	131c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1306:	4640      	mov	r0, r8
    1308:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    130a:	7c23      	ldrb	r3, [r4, #16]
    130c:	2b01      	cmp	r3, #1
    130e:	d1ef      	bne.n	12f0 <timer_process_counted+0x48>
			tmp->time_label = time;
    1310:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1312:	463a      	mov	r2, r7
    1314:	4621      	mov	r1, r4
    1316:	4640      	mov	r0, r8
    1318:	47d0      	blx	sl
    131a:	e7e9      	b.n	12f0 <timer_process_counted+0x48>
    131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1320:	000013c9 	.word	0x000013c9
    1324:	00001251 	.word	0x00001251

00001328 <timer_init>:
{
    1328:	b570      	push	{r4, r5, r6, lr}
    132a:	460e      	mov	r6, r1
    132c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    132e:	4604      	mov	r4, r0
    1330:	b190      	cbz	r0, 1358 <timer_init+0x30>
    1332:	b199      	cbz	r1, 135c <timer_init+0x34>
    1334:	1c10      	adds	r0, r2, #0
    1336:	bf18      	it	ne
    1338:	2001      	movne	r0, #1
    133a:	2245      	movs	r2, #69	; 0x45
    133c:	4908      	ldr	r1, [pc, #32]	; (1360 <timer_init+0x38>)
    133e:	4b09      	ldr	r3, [pc, #36]	; (1364 <timer_init+0x3c>)
    1340:	4798      	blx	r3
	descr->func = func;
    1342:	4620      	mov	r0, r4
    1344:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1348:	682b      	ldr	r3, [r5, #0]
    134a:	4631      	mov	r1, r6
    134c:	4798      	blx	r3
	descr->time                           = 0;
    134e:	2000      	movs	r0, #0
    1350:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <timer_init+0x40>)
    1354:	6063      	str	r3, [r4, #4]
}
    1356:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1358:	2000      	movs	r0, #0
    135a:	e7ee      	b.n	133a <timer_init+0x12>
    135c:	2000      	movs	r0, #0
    135e:	e7ec      	b.n	133a <timer_init+0x12>
    1360:	00003074 	.word	0x00003074
    1364:	0000136d 	.word	0x0000136d
    1368:	000012a9 	.word	0x000012a9

0000136c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    136c:	b900      	cbnz	r0, 1370 <assert+0x4>
		__asm("BKPT #0");
    136e:	be00      	bkpt	0x0000
    1370:	4770      	bx	lr

00001372 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1372:	6803      	ldr	r3, [r0, #0]
    1374:	b14b      	cbz	r3, 138a <is_list_element+0x18>
		if (it == element) {
    1376:	428b      	cmp	r3, r1
    1378:	d009      	beq.n	138e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	b11b      	cbz	r3, 1386 <is_list_element+0x14>
		if (it == element) {
    137e:	4299      	cmp	r1, r3
    1380:	d1fb      	bne.n	137a <is_list_element+0x8>
			return true;
    1382:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1384:	4770      	bx	lr
	return false;
    1386:	2000      	movs	r0, #0
    1388:	4770      	bx	lr
    138a:	2000      	movs	r0, #0
    138c:	4770      	bx	lr
			return true;
    138e:	2001      	movs	r0, #1
    1390:	4770      	bx	lr
	...

00001394 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1394:	b538      	push	{r3, r4, r5, lr}
    1396:	4604      	mov	r4, r0
    1398:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    139a:	4b06      	ldr	r3, [pc, #24]	; (13b4 <list_insert_as_head+0x20>)
    139c:	4798      	blx	r3
    139e:	f080 0001 	eor.w	r0, r0, #1
    13a2:	2243      	movs	r2, #67	; 0x43
    13a4:	4904      	ldr	r1, [pc, #16]	; (13b8 <list_insert_as_head+0x24>)
    13a6:	b2c0      	uxtb	r0, r0
    13a8:	4b04      	ldr	r3, [pc, #16]	; (13bc <list_insert_as_head+0x28>)
    13aa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    13ac:	6823      	ldr	r3, [r4, #0]
    13ae:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    13b0:	6025      	str	r5, [r4, #0]
    13b2:	bd38      	pop	{r3, r4, r5, pc}
    13b4:	00001373 	.word	0x00001373
    13b8:	0000308c 	.word	0x0000308c
    13bc:	0000136d 	.word	0x0000136d

000013c0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    13c0:	6803      	ldr	r3, [r0, #0]
    13c2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    13c4:	6001      	str	r1, [r0, #0]
    13c6:	4770      	bx	lr

000013c8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    13c8:	6803      	ldr	r3, [r0, #0]
    13ca:	b10b      	cbz	r3, 13d0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    13cc:	681a      	ldr	r2, [r3, #0]
    13ce:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    13d0:	4618      	mov	r0, r3
    13d2:	4770      	bx	lr

000013d4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	460e      	mov	r6, r1
    13d8:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    13da:	4604      	mov	r4, r0
    13dc:	b178      	cbz	r0, 13fe <ringbuffer_init+0x2a>
    13de:	b181      	cbz	r1, 1402 <ringbuffer_init+0x2e>
    13e0:	b1a2      	cbz	r2, 140c <ringbuffer_init+0x38>
    13e2:	2001      	movs	r0, #1
    13e4:	2232      	movs	r2, #50	; 0x32
    13e6:	490d      	ldr	r1, [pc, #52]	; (141c <ringbuffer_init+0x48>)
    13e8:	4b0d      	ldr	r3, [pc, #52]	; (1420 <ringbuffer_init+0x4c>)
    13ea:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    13ec:	1e6b      	subs	r3, r5, #1
    13ee:	421d      	tst	r5, r3
    13f0:	d109      	bne.n	1406 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    13f2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    13f4:	2000      	movs	r0, #0
    13f6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    13f8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    13fa:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    13fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    13fe:	2000      	movs	r0, #0
    1400:	e7f0      	b.n	13e4 <ringbuffer_init+0x10>
    1402:	2000      	movs	r0, #0
    1404:	e7ee      	b.n	13e4 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1406:	f06f 000c 	mvn.w	r0, #12
    140a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    140c:	2232      	movs	r2, #50	; 0x32
    140e:	4903      	ldr	r1, [pc, #12]	; (141c <ringbuffer_init+0x48>)
    1410:	2000      	movs	r0, #0
    1412:	4b03      	ldr	r3, [pc, #12]	; (1420 <ringbuffer_init+0x4c>)
    1414:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1416:	1e6b      	subs	r3, r5, #1
    1418:	e7eb      	b.n	13f2 <ringbuffer_init+0x1e>
    141a:	bf00      	nop
    141c:	000030ac 	.word	0x000030ac
    1420:	0000136d 	.word	0x0000136d

00001424 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1424:	b538      	push	{r3, r4, r5, lr}
    1426:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1428:	4604      	mov	r4, r0
    142a:	b1a0      	cbz	r0, 1456 <ringbuffer_get+0x32>
    142c:	1c08      	adds	r0, r1, #0
    142e:	bf18      	it	ne
    1430:	2001      	movne	r0, #1
    1432:	224a      	movs	r2, #74	; 0x4a
    1434:	490a      	ldr	r1, [pc, #40]	; (1460 <ringbuffer_get+0x3c>)
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <ringbuffer_get+0x40>)
    1438:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    143a:	68a3      	ldr	r3, [r4, #8]
    143c:	68e2      	ldr	r2, [r4, #12]
    143e:	429a      	cmp	r2, r3
    1440:	d00b      	beq.n	145a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1442:	6862      	ldr	r2, [r4, #4]
    1444:	4013      	ands	r3, r2
    1446:	6822      	ldr	r2, [r4, #0]
    1448:	5cd3      	ldrb	r3, [r2, r3]
    144a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    144c:	68a3      	ldr	r3, [r4, #8]
    144e:	3301      	adds	r3, #1
    1450:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1452:	2000      	movs	r0, #0
    1454:	bd38      	pop	{r3, r4, r5, pc}
    1456:	2000      	movs	r0, #0
    1458:	e7eb      	b.n	1432 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    145a:	f06f 0009 	mvn.w	r0, #9
}
    145e:	bd38      	pop	{r3, r4, r5, pc}
    1460:	000030ac 	.word	0x000030ac
    1464:	0000136d 	.word	0x0000136d

00001468 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1468:	b538      	push	{r3, r4, r5, lr}
    146a:	460d      	mov	r5, r1
	ASSERT(rb);
    146c:	4604      	mov	r4, r0
    146e:	225b      	movs	r2, #91	; 0x5b
    1470:	490b      	ldr	r1, [pc, #44]	; (14a0 <ringbuffer_put+0x38>)
    1472:	3000      	adds	r0, #0
    1474:	bf18      	it	ne
    1476:	2001      	movne	r0, #1
    1478:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <ringbuffer_put+0x3c>)
    147a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    147c:	68e3      	ldr	r3, [r4, #12]
    147e:	6862      	ldr	r2, [r4, #4]
    1480:	4013      	ands	r3, r2
    1482:	6822      	ldr	r2, [r4, #0]
    1484:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1486:	68e3      	ldr	r3, [r4, #12]
    1488:	6861      	ldr	r1, [r4, #4]
    148a:	68a2      	ldr	r2, [r4, #8]
    148c:	1a9a      	subs	r2, r3, r2
    148e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1490:	bf84      	itt	hi
    1492:	1a59      	subhi	r1, r3, r1
    1494:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1496:	3301      	adds	r3, #1
    1498:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    149a:	2000      	movs	r0, #0
    149c:	bd38      	pop	{r3, r4, r5, pc}
    149e:	bf00      	nop
    14a0:	000030ac 	.word	0x000030ac
    14a4:	0000136d 	.word	0x0000136d

000014a8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    14a8:	b510      	push	{r4, lr}
	ASSERT(rb);
    14aa:	4604      	mov	r4, r0
    14ac:	2271      	movs	r2, #113	; 0x71
    14ae:	4905      	ldr	r1, [pc, #20]	; (14c4 <ringbuffer_num+0x1c>)
    14b0:	3000      	adds	r0, #0
    14b2:	bf18      	it	ne
    14b4:	2001      	movne	r0, #1
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <ringbuffer_num+0x20>)
    14b8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    14ba:	68e0      	ldr	r0, [r4, #12]
    14bc:	68a3      	ldr	r3, [r4, #8]
}
    14be:	1ac0      	subs	r0, r0, r3
    14c0:	bd10      	pop	{r4, pc}
    14c2:	bf00      	nop
    14c4:	000030ac 	.word	0x000030ac
    14c8:	0000136d 	.word	0x0000136d

000014cc <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    14cc:	b510      	push	{r4, lr}
	ASSERT(rb);
    14ce:	4604      	mov	r4, r0
    14d0:	227b      	movs	r2, #123	; 0x7b
    14d2:	4905      	ldr	r1, [pc, #20]	; (14e8 <ringbuffer_flush+0x1c>)
    14d4:	3000      	adds	r0, #0
    14d6:	bf18      	it	ne
    14d8:	2001      	movne	r0, #1
    14da:	4b04      	ldr	r3, [pc, #16]	; (14ec <ringbuffer_flush+0x20>)
    14dc:	4798      	blx	r3

	rb->read_index = rb->write_index;
    14de:	68e3      	ldr	r3, [r4, #12]
    14e0:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    14e2:	2000      	movs	r0, #0
    14e4:	bd10      	pop	{r4, pc}
    14e6:	bf00      	nop
    14e8:	000030ac 	.word	0x000030ac
    14ec:	0000136d 	.word	0x0000136d

000014f0 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    14f4:	f44f 7281 	mov.w	r2, #258	; 0x102
    14f8:	4915      	ldr	r1, [pc, #84]	; (1550 <_ac_init+0x60>)
    14fa:	4816      	ldr	r0, [pc, #88]	; (1554 <_ac_init+0x64>)
    14fc:	4284      	cmp	r4, r0
    14fe:	bf14      	ite	ne
    1500:	2000      	movne	r0, #0
    1502:	2001      	moveq	r0, #1
    1504:	4b14      	ldr	r3, [pc, #80]	; (1558 <_ac_init+0x68>)
    1506:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1508:	6a23      	ldr	r3, [r4, #32]
    150a:	f013 0f01 	tst.w	r3, #1
    150e:	d1fb      	bne.n	1508 <_ac_init+0x18>
    1510:	6a23      	ldr	r3, [r4, #32]
    1512:	f013 0f03 	tst.w	r3, #3
    1516:	d1fb      	bne.n	1510 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1518:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    151a:	f013 0f02 	tst.w	r3, #2
    151e:	d114      	bne.n	154a <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1520:	6a23      	ldr	r3, [r4, #32]
    1522:	f013 0f01 	tst.w	r3, #1
    1526:	d1fb      	bne.n	1520 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1528:	7823      	ldrb	r3, [r4, #0]
    152a:	f043 0301 	orr.w	r3, r3, #1
    152e:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1530:	6a23      	ldr	r3, [r4, #32]
    1532:	f013 0f01 	tst.w	r3, #1
    1536:	d1fb      	bne.n	1530 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1538:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    153c:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    153e:	2000      	movs	r0, #0
    1540:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1542:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1544:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1546:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1548:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    154a:	f06f 0010 	mvn.w	r0, #16
}
    154e:	bd10      	pop	{r4, pc}
    1550:	000030d0 	.word	0x000030d0
    1554:	42002000 	.word	0x42002000
    1558:	0000136d 	.word	0x0000136d

0000155c <_ac_sync_init>:
{
    155c:	b538      	push	{r3, r4, r5, lr}
    155e:	460c      	mov	r4, r1
	ASSERT(device);
    1560:	4605      	mov	r5, r0
    1562:	226c      	movs	r2, #108	; 0x6c
    1564:	4905      	ldr	r1, [pc, #20]	; (157c <_ac_sync_init+0x20>)
    1566:	3000      	adds	r0, #0
    1568:	bf18      	it	ne
    156a:	2001      	movne	r0, #1
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <_ac_sync_init+0x24>)
    156e:	4798      	blx	r3
	device->hw = hw;
    1570:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1572:	4620      	mov	r0, r4
    1574:	4b03      	ldr	r3, [pc, #12]	; (1584 <_ac_sync_init+0x28>)
    1576:	4798      	blx	r3
}
    1578:	bd38      	pop	{r3, r4, r5, pc}
    157a:	bf00      	nop
    157c:	000030d0 	.word	0x000030d0
    1580:	0000136d 	.word	0x0000136d
    1584:	000014f1 	.word	0x000014f1

00001588 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1588:	6b03      	ldr	r3, [r0, #48]	; 0x30
    158a:	f013 0f01 	tst.w	r3, #1
    158e:	d1fb      	bne.n	1588 <_adc_init>
    1590:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1592:	f013 0f03 	tst.w	r3, #3
    1596:	d1fb      	bne.n	1590 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1598:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    159a:	f013 0f02 	tst.w	r3, #2
    159e:	d12a      	bne.n	15f6 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15a2:	f013 0f01 	tst.w	r3, #1
    15a6:	d1fb      	bne.n	15a0 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    15a8:	8803      	ldrh	r3, [r0, #0]
    15aa:	b29b      	uxth	r3, r3
    15ac:	f043 0301 	orr.w	r3, r3, #1
    15b0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15b4:	f013 0f01 	tst.w	r3, #1
    15b8:	d1fb      	bne.n	15b2 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    15ba:	2216      	movs	r2, #22
    15bc:	4b0f      	ldr	r3, [pc, #60]	; (15fc <_adc_init+0x74>)
    15be:	fb02 3101 	mla	r1, r2, r1, r3
    15c2:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    15c4:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    15c6:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    15c8:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    15ca:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    15cc:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    15ce:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    15d0:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    15d2:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    15d4:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    15d6:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    15d8:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    15da:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    15dc:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    15de:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    15e0:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    15e2:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    15e4:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    15e6:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    15e8:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    15ea:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    15ec:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    15ee:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    15f0:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    15f2:	2000      	movs	r0, #0
    15f4:	4770      	bx	lr
		return ERR_DENIED;
    15f6:	f06f 0010 	mvn.w	r0, #16
}
    15fa:	4770      	bx	lr
    15fc:	000030e4 	.word	0x000030e4

00001600 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1600:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1604:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1608:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    160c:	b148      	cbz	r0, 1622 <_adc_get_regs+0x22>
    160e:	2801      	cmp	r0, #1
    1610:	d009      	beq.n	1626 <_adc_get_regs+0x26>
{
    1612:	b508      	push	{r3, lr}
	ASSERT(false);
    1614:	2291      	movs	r2, #145	; 0x91
    1616:	4905      	ldr	r1, [pc, #20]	; (162c <_adc_get_regs+0x2c>)
    1618:	2000      	movs	r0, #0
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <_adc_get_regs+0x30>)
    161c:	4798      	blx	r3
	return 0;
    161e:	2000      	movs	r0, #0
    1620:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1622:	2000      	movs	r0, #0
    1624:	4770      	bx	lr
    1626:	2001      	movs	r0, #1
    1628:	4770      	bx	lr
    162a:	bf00      	nop
    162c:	00003110 	.word	0x00003110
    1630:	0000136d 	.word	0x0000136d

00001634 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1634:	b538      	push	{r3, r4, r5, lr}
    1636:	460c      	mov	r4, r1
	ASSERT(device);
    1638:	4605      	mov	r5, r0
    163a:	22d5      	movs	r2, #213	; 0xd5
    163c:	4907      	ldr	r1, [pc, #28]	; (165c <_adc_sync_init+0x28>)
    163e:	3000      	adds	r0, #0
    1640:	bf18      	it	ne
    1642:	2001      	movne	r0, #1
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <_adc_sync_init+0x2c>)
    1646:	4798      	blx	r3

	device->hw = hw;
    1648:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    164a:	4620      	mov	r0, r4
    164c:	4b05      	ldr	r3, [pc, #20]	; (1664 <_adc_sync_init+0x30>)
    164e:	4798      	blx	r3
    1650:	4601      	mov	r1, r0
    1652:	4620      	mov	r0, r4
    1654:	4b04      	ldr	r3, [pc, #16]	; (1668 <_adc_sync_init+0x34>)
    1656:	4798      	blx	r3
}
    1658:	bd38      	pop	{r3, r4, r5, pc}
    165a:	bf00      	nop
    165c:	00003110 	.word	0x00003110
    1660:	0000136d 	.word	0x0000136d
    1664:	00001601 	.word	0x00001601
    1668:	00001589 	.word	0x00001589

0000166c <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    166c:	0943      	lsrs	r3, r0, #5
    166e:	f000 001f 	and.w	r0, r0, #31
    1672:	2201      	movs	r2, #1
    1674:	fa02 f000 	lsl.w	r0, r2, r0
    1678:	3340      	adds	r3, #64	; 0x40
    167a:	4a02      	ldr	r2, [pc, #8]	; (1684 <_irq_set+0x18>)
    167c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1680:	4770      	bx	lr
    1682:	bf00      	nop
    1684:	e000e100 	.word	0xe000e100

00001688 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1688:	f64b 3380 	movw	r3, #48000	; 0xbb80
    168c:	fb03 f000 	mul.w	r0, r3, r0
    1690:	4770      	bx	lr
	...

00001694 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1694:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1696:	4a0c      	ldr	r2, [pc, #48]	; (16c8 <_init_chip+0x34>)
    1698:	8813      	ldrh	r3, [r2, #0]
    169a:	b29b      	uxth	r3, r3
    169c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    169e:	4b0b      	ldr	r3, [pc, #44]	; (16cc <_init_chip+0x38>)
    16a0:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    16a2:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <_init_chip+0x3c>)
    16a4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    16a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    16aa:	4c0a      	ldr	r4, [pc, #40]	; (16d4 <_init_chip+0x40>)
    16ac:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    16ae:	4b0a      	ldr	r3, [pc, #40]	; (16d8 <_init_chip+0x44>)
    16b0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    16b2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    16b6:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    16b8:	4a08      	ldr	r2, [pc, #32]	; (16dc <_init_chip+0x48>)
    16ba:	6913      	ldr	r3, [r2, #16]
    16bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    16c0:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    16c2:	4b07      	ldr	r3, [pc, #28]	; (16e0 <_init_chip+0x4c>)
    16c4:	4798      	blx	r3
    16c6:	bd10      	pop	{r4, pc}
    16c8:	41004000 	.word	0x41004000
    16cc:	00001b65 	.word	0x00001b65
    16d0:	00001a8d 	.word	0x00001a8d
    16d4:	000019e5 	.word	0x000019e5
    16d8:	00001b89 	.word	0x00001b89
    16dc:	40000800 	.word	0x40000800
    16e0:	000017ed 	.word	0x000017ed

000016e4 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    16e8:	22f3      	movs	r2, #243	; 0xf3
    16ea:	4915      	ldr	r1, [pc, #84]	; (1740 <_dac_init+0x5c>)
    16ec:	4815      	ldr	r0, [pc, #84]	; (1744 <_dac_init+0x60>)
    16ee:	4284      	cmp	r4, r0
    16f0:	bf14      	ite	ne
    16f2:	2000      	movne	r0, #0
    16f4:	2001      	moveq	r0, #1
    16f6:	4b14      	ldr	r3, [pc, #80]	; (1748 <_dac_init+0x64>)
    16f8:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16fa:	68a3      	ldr	r3, [r4, #8]
    16fc:	f013 0f01 	tst.w	r3, #1
    1700:	d1fb      	bne.n	16fa <_dac_init+0x16>
    1702:	68a3      	ldr	r3, [r4, #8]
    1704:	f013 0f03 	tst.w	r3, #3
    1708:	d1fb      	bne.n	1702 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    170a:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    170c:	f013 0f02 	tst.w	r3, #2
    1710:	d113      	bne.n	173a <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1712:	68a3      	ldr	r3, [r4, #8]
    1714:	f013 0f01 	tst.w	r3, #1
    1718:	d1fb      	bne.n	1712 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    171a:	7823      	ldrb	r3, [r4, #0]
    171c:	f043 0301 	orr.w	r3, r3, #1
    1720:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1722:	68a3      	ldr	r3, [r4, #8]
    1724:	f013 0f01 	tst.w	r3, #1
    1728:	d1fb      	bne.n	1722 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    172a:	2000      	movs	r0, #0
    172c:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    172e:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    1730:	81a0      	strh	r0, [r4, #12]
    1732:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1734:	2301      	movs	r3, #1
    1736:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1738:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    173a:	f06f 0003 	mvn.w	r0, #3
}
    173e:	bd10      	pop	{r4, pc}
    1740:	00003128 	.word	0x00003128
    1744:	43002400 	.word	0x43002400
    1748:	0000136d 	.word	0x0000136d

0000174c <_dac_sync_init>:
{
    174c:	b538      	push	{r3, r4, r5, lr}
    174e:	460c      	mov	r4, r1
	ASSERT(device);
    1750:	4605      	mov	r5, r0
    1752:	2261      	movs	r2, #97	; 0x61
    1754:	4905      	ldr	r1, [pc, #20]	; (176c <_dac_sync_init+0x20>)
    1756:	3000      	adds	r0, #0
    1758:	bf18      	it	ne
    175a:	2001      	movne	r0, #1
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <_dac_sync_init+0x24>)
    175e:	4798      	blx	r3
	device->hw = hw;
    1760:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1762:	4620      	mov	r0, r4
    1764:	4b03      	ldr	r3, [pc, #12]	; (1774 <_dac_sync_init+0x28>)
    1766:	4798      	blx	r3
}
    1768:	bd38      	pop	{r3, r4, r5, pc}
    176a:	bf00      	nop
    176c:	00003128 	.word	0x00003128
    1770:	0000136d 	.word	0x0000136d
    1774:	000016e5 	.word	0x000016e5

00001778 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1778:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    177a:	4a1a      	ldr	r2, [pc, #104]	; (17e4 <_dmac_handler+0x6c>)
    177c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    177e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1782:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1786:	4818      	ldr	r0, [pc, #96]	; (17e8 <_dmac_handler+0x70>)
    1788:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    178c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1790:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1794:	f012 0f01 	tst.w	r2, #1
    1798:	d10a      	bne.n	17b0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    179a:	011a      	lsls	r2, r3, #4
    179c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17a0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17a4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    17a8:	f012 0f02 	tst.w	r2, #2
    17ac:	d10b      	bne.n	17c6 <_dmac_handler+0x4e>
    17ae:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    17b0:	011a      	lsls	r2, r3, #4
    17b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17b6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17ba:	2101      	movs	r1, #1
    17bc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    17c0:	6843      	ldr	r3, [r0, #4]
    17c2:	4798      	blx	r3
    17c4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    17c6:	011a      	lsls	r2, r3, #4
    17c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17cc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17d0:	2102      	movs	r1, #2
    17d2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    17d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17da:	4a03      	ldr	r2, [pc, #12]	; (17e8 <_dmac_handler+0x70>)
    17dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17e0:	4798      	blx	r3
	}
}
    17e2:	e7e4      	b.n	17ae <_dmac_handler+0x36>
    17e4:	4100a000 	.word	0x4100a000
    17e8:	20000160 	.word	0x20000160

000017ec <_dma_init>:
{
    17ec:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    17ee:	4a33      	ldr	r2, [pc, #204]	; (18bc <_dma_init+0xd0>)
    17f0:	8813      	ldrh	r3, [r2, #0]
    17f2:	f023 0302 	bic.w	r3, r3, #2
    17f6:	041b      	lsls	r3, r3, #16
    17f8:	0c1b      	lsrs	r3, r3, #16
    17fa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    17fc:	8853      	ldrh	r3, [r2, #2]
    17fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1802:	041b      	lsls	r3, r3, #16
    1804:	0c1b      	lsrs	r3, r3, #16
    1806:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1808:	8813      	ldrh	r3, [r2, #0]
    180a:	b29b      	uxth	r3, r3
    180c:	f043 0301 	orr.w	r3, r3, #1
    1810:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1812:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1814:	f013 0f01 	tst.w	r3, #1
    1818:	d1fb      	bne.n	1812 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    181a:	4b28      	ldr	r3, [pc, #160]	; (18bc <_dma_init+0xd0>)
    181c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1820:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1822:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1828:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    182a:	2000      	movs	r0, #0
    182c:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    182e:	4a24      	ldr	r2, [pc, #144]	; (18c0 <_dma_init+0xd4>)
    1830:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1834:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1836:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    183a:	639a      	str	r2, [r3, #56]	; 0x38
    183c:	4b21      	ldr	r3, [pc, #132]	; (18c4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    183e:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1842:	681c      	ldr	r4, [r3, #0]
    1844:	0101      	lsls	r1, r0, #4
    1846:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    184a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    184e:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1850:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1852:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1856:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1858:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    185c:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    185e:	4429      	add	r1, r5
    1860:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    1864:	3001      	adds	r0, #1
    1866:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1868:	2820      	cmp	r0, #32
    186a:	d1ea      	bne.n	1842 <_dma_init+0x56>
    186c:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    186e:	2001      	movs	r0, #1
    1870:	4915      	ldr	r1, [pc, #84]	; (18c8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1872:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1874:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1878:	d00b      	beq.n	1892 <_dma_init+0xa6>
    187a:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    187c:	2b24      	cmp	r3, #36	; 0x24
    187e:	d1f8      	bne.n	1872 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1880:	4a0e      	ldr	r2, [pc, #56]	; (18bc <_dma_init+0xd0>)
    1882:	8813      	ldrh	r3, [r2, #0]
    1884:	b29b      	uxth	r3, r3
    1886:	f043 0302 	orr.w	r3, r3, #2
    188a:	8013      	strh	r3, [r2, #0]
}
    188c:	2000      	movs	r0, #0
    188e:	bc30      	pop	{r4, r5}
    1890:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1892:	095c      	lsrs	r4, r3, #5
    1894:	f002 021f 	and.w	r2, r2, #31
    1898:	fa00 f202 	lsl.w	r2, r0, r2
    189c:	f104 0520 	add.w	r5, r4, #32
    18a0:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    18a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18a8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18ac:	f104 0560 	add.w	r5, r4, #96	; 0x60
    18b0:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18b4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    18b8:	e7df      	b.n	187a <_dma_init+0x8e>
    18ba:	bf00      	nop
    18bc:	4100a000 	.word	0x4100a000
    18c0:	20000160 	.word	0x20000160
    18c4:	00003140 	.word	0x00003140
    18c8:	e000e100 	.word	0xe000e100

000018cc <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    18cc:	b508      	push	{r3, lr}
	_dmac_handler();
    18ce:	4b01      	ldr	r3, [pc, #4]	; (18d4 <DMAC_0_Handler+0x8>)
    18d0:	4798      	blx	r3
    18d2:	bd08      	pop	{r3, pc}
    18d4:	00001779 	.word	0x00001779

000018d8 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    18d8:	b508      	push	{r3, lr}
	_dmac_handler();
    18da:	4b01      	ldr	r3, [pc, #4]	; (18e0 <DMAC_1_Handler+0x8>)
    18dc:	4798      	blx	r3
    18de:	bd08      	pop	{r3, pc}
    18e0:	00001779 	.word	0x00001779

000018e4 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    18e4:	b508      	push	{r3, lr}
	_dmac_handler();
    18e6:	4b01      	ldr	r3, [pc, #4]	; (18ec <DMAC_2_Handler+0x8>)
    18e8:	4798      	blx	r3
    18ea:	bd08      	pop	{r3, pc}
    18ec:	00001779 	.word	0x00001779

000018f0 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    18f0:	b508      	push	{r3, lr}
	_dmac_handler();
    18f2:	4b01      	ldr	r3, [pc, #4]	; (18f8 <DMAC_3_Handler+0x8>)
    18f4:	4798      	blx	r3
    18f6:	bd08      	pop	{r3, pc}
    18f8:	00001779 	.word	0x00001779

000018fc <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    18fc:	b508      	push	{r3, lr}
	_dmac_handler();
    18fe:	4b01      	ldr	r3, [pc, #4]	; (1904 <DMAC_4_Handler+0x8>)
    1900:	4798      	blx	r3
    1902:	bd08      	pop	{r3, pc}
    1904:	00001779 	.word	0x00001779

00001908 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1908:	4a1e      	ldr	r2, [pc, #120]	; (1984 <_ext_irq_init+0x7c>)
    190a:	6853      	ldr	r3, [r2, #4]
    190c:	f013 0f01 	tst.w	r3, #1
    1910:	d1fb      	bne.n	190a <_ext_irq_init+0x2>
    1912:	4a1c      	ldr	r2, [pc, #112]	; (1984 <_ext_irq_init+0x7c>)
    1914:	6853      	ldr	r3, [r2, #4]
    1916:	f013 0f03 	tst.w	r3, #3
    191a:	d1fb      	bne.n	1914 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    191c:	4b19      	ldr	r3, [pc, #100]	; (1984 <_ext_irq_init+0x7c>)
    191e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1920:	f013 0f02 	tst.w	r3, #2
    1924:	d12b      	bne.n	197e <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1926:	4a17      	ldr	r2, [pc, #92]	; (1984 <_ext_irq_init+0x7c>)
    1928:	6853      	ldr	r3, [r2, #4]
    192a:	f013 0f01 	tst.w	r3, #1
    192e:	d1fb      	bne.n	1928 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1930:	4a14      	ldr	r2, [pc, #80]	; (1984 <_ext_irq_init+0x7c>)
    1932:	7813      	ldrb	r3, [r2, #0]
    1934:	f043 0301 	orr.w	r3, r3, #1
    1938:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    193a:	6853      	ldr	r3, [r2, #4]
    193c:	f013 0f01 	tst.w	r3, #1
    1940:	d1fb      	bne.n	193a <_ext_irq_init+0x32>
    1942:	4a10      	ldr	r2, [pc, #64]	; (1984 <_ext_irq_init+0x7c>)
    1944:	6853      	ldr	r3, [r2, #4]
    1946:	f013 0f03 	tst.w	r3, #3
    194a:	d1fb      	bne.n	1944 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    194c:	4b0d      	ldr	r3, [pc, #52]	; (1984 <_ext_irq_init+0x7c>)
    194e:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1950:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1954:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1956:	2200      	movs	r2, #0
    1958:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    195a:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    195c:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    195e:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1960:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1962:	61da      	str	r2, [r3, #28]
    1964:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1966:	461a      	mov	r2, r3
    1968:	6853      	ldr	r3, [r2, #4]
    196a:	f013 0f03 	tst.w	r3, #3
    196e:	d1fb      	bne.n	1968 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1970:	4a04      	ldr	r2, [pc, #16]	; (1984 <_ext_irq_init+0x7c>)
    1972:	7813      	ldrb	r3, [r2, #0]
    1974:	f043 0302 	orr.w	r3, r3, #2
    1978:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    197a:	2000      	movs	r0, #0
    197c:	4770      	bx	lr
		return ERR_DENIED;
    197e:	f06f 0010 	mvn.w	r0, #16
}
    1982:	4770      	bx	lr
    1984:	40002800 	.word	0x40002800

00001988 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1988:	b430      	push	{r4, r5}
    198a:	4814      	ldr	r0, [pc, #80]	; (19dc <_event_system_init+0x54>)
    198c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1990:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1992:	4c13      	ldr	r4, [pc, #76]	; (19e0 <_event_system_init+0x58>)
    1994:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1996:	f813 1b01 	ldrb.w	r1, [r3], #1
    199a:	3248      	adds	r2, #72	; 0x48
    199c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    19a0:	42ab      	cmp	r3, r5
    19a2:	d1f7      	bne.n	1994 <_event_system_init+0xc>
    19a4:	480d      	ldr	r0, [pc, #52]	; (19dc <_event_system_init+0x54>)
    19a6:	f100 0442 	add.w	r4, r0, #66	; 0x42
    19aa:	3080      	adds	r0, #128	; 0x80
    19ac:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    19ae:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    19b2:	00ca      	lsls	r2, r1, #3
    19b4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    19b8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    19bc:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    19be:	f850 3f04 	ldr.w	r3, [r0, #4]!
    19c2:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    19c4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    19c8:	43db      	mvns	r3, r3
    19ca:	b2db      	uxtb	r3, r3
    19cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    19d0:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    19d2:	2920      	cmp	r1, #32
    19d4:	d1eb      	bne.n	19ae <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    19d6:	2000      	movs	r0, #0
    19d8:	bc30      	pop	{r4, r5}
    19da:	4770      	bx	lr
    19dc:	00003240 	.word	0x00003240
    19e0:	4100e000 	.word	0x4100e000

000019e4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    19e4:	f010 0f01 	tst.w	r0, #1
    19e8:	d002      	beq.n	19f0 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    19ea:	4a23      	ldr	r2, [pc, #140]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    19ec:	4b23      	ldr	r3, [pc, #140]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    19ee:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    19f0:	f010 0f02 	tst.w	r0, #2
    19f4:	d002      	beq.n	19fc <_gclk_init_generators_by_fref+0x18>
    19f6:	4a22      	ldr	r2, [pc, #136]	; (1a80 <_gclk_init_generators_by_fref+0x9c>)
    19f8:	4b20      	ldr	r3, [pc, #128]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    19fa:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    19fc:	f010 0f04 	tst.w	r0, #4
    1a00:	d002      	beq.n	1a08 <_gclk_init_generators_by_fref+0x24>
    1a02:	4a1d      	ldr	r2, [pc, #116]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a04:	4b1d      	ldr	r3, [pc, #116]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a06:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    1a08:	f010 0f08 	tst.w	r0, #8
    1a0c:	d002      	beq.n	1a14 <_gclk_init_generators_by_fref+0x30>
    1a0e:	4a1a      	ldr	r2, [pc, #104]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a10:	4b1a      	ldr	r3, [pc, #104]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a12:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    1a14:	f010 0f10 	tst.w	r0, #16
    1a18:	d002      	beq.n	1a20 <_gclk_init_generators_by_fref+0x3c>
    1a1a:	4a17      	ldr	r2, [pc, #92]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a1c:	4b17      	ldr	r3, [pc, #92]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a1e:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    1a20:	f010 0f20 	tst.w	r0, #32
    1a24:	d002      	beq.n	1a2c <_gclk_init_generators_by_fref+0x48>
    1a26:	4a14      	ldr	r2, [pc, #80]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a28:	4b14      	ldr	r3, [pc, #80]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a2a:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1a2c:	f010 0f40 	tst.w	r0, #64	; 0x40
    1a30:	d002      	beq.n	1a38 <_gclk_init_generators_by_fref+0x54>
    1a32:	4a11      	ldr	r2, [pc, #68]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a34:	4b11      	ldr	r3, [pc, #68]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a36:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1a38:	f010 0f80 	tst.w	r0, #128	; 0x80
    1a3c:	d002      	beq.n	1a44 <_gclk_init_generators_by_fref+0x60>
    1a3e:	4a0e      	ldr	r2, [pc, #56]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a40:	4b0e      	ldr	r3, [pc, #56]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a42:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    1a44:	f410 7f80 	tst.w	r0, #256	; 0x100
    1a48:	d002      	beq.n	1a50 <_gclk_init_generators_by_fref+0x6c>
    1a4a:	4a0b      	ldr	r2, [pc, #44]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a4c:	4b0b      	ldr	r3, [pc, #44]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a4e:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    1a50:	f410 7f00 	tst.w	r0, #512	; 0x200
    1a54:	d002      	beq.n	1a5c <_gclk_init_generators_by_fref+0x78>
    1a56:	4a08      	ldr	r2, [pc, #32]	; (1a78 <_gclk_init_generators_by_fref+0x94>)
    1a58:	4b08      	ldr	r3, [pc, #32]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a5a:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    1a5c:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1a60:	d002      	beq.n	1a68 <_gclk_init_generators_by_fref+0x84>
    1a62:	4a08      	ldr	r2, [pc, #32]	; (1a84 <_gclk_init_generators_by_fref+0xa0>)
    1a64:	4b05      	ldr	r3, [pc, #20]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a66:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1a68:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1a6c:	d002      	beq.n	1a74 <_gclk_init_generators_by_fref+0x90>
    1a6e:	4a06      	ldr	r2, [pc, #24]	; (1a88 <_gclk_init_generators_by_fref+0xa4>)
    1a70:	4b02      	ldr	r3, [pc, #8]	; (1a7c <_gclk_init_generators_by_fref+0x98>)
    1a72:	64da      	str	r2, [r3, #76]	; 0x4c
    1a74:	4770      	bx	lr
    1a76:	bf00      	nop
    1a78:	00012b06 	.word	0x00012b06
    1a7c:	40001c00 	.word	0x40001c00
    1a80:	00012306 	.word	0x00012306
    1a84:	00012b05 	.word	0x00012b05
    1a88:	00013b05 	.word	0x00013b05

00001a8c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1a8c:	2201      	movs	r2, #1
    1a8e:	4b01      	ldr	r3, [pc, #4]	; (1a94 <_mclk_init+0x8>)
    1a90:	715a      	strb	r2, [r3, #5]
    1a92:	4770      	bx	lr
    1a94:	40000800 	.word	0x40000800

00001a98 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1a98:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1a9a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1a9c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1a9e:	f012 0f01 	tst.w	r2, #1
    1aa2:	d005      	beq.n	1ab0 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1aa4:	2201      	movs	r2, #1
    1aa6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1aa8:	6803      	ldr	r3, [r0, #0]
    1aaa:	b153      	cbz	r3, 1ac2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1aac:	4798      	blx	r3
    1aae:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1ab0:	8a1a      	ldrh	r2, [r3, #16]
    1ab2:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1ab4:	b12a      	cbz	r2, 1ac2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1ab6:	f240 225e 	movw	r2, #606	; 0x25e
    1aba:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1abc:	6843      	ldr	r3, [r0, #4]
    1abe:	b103      	cbz	r3, 1ac2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1ac0:	4798      	blx	r3
    1ac2:	bd08      	pop	{r3, pc}

00001ac4 <_flash_init>:
{
    1ac4:	b538      	push	{r3, r4, r5, lr}
    1ac6:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1ac8:	4605      	mov	r5, r0
    1aca:	b350      	cbz	r0, 1b22 <_flash_init+0x5e>
    1acc:	4816      	ldr	r0, [pc, #88]	; (1b28 <_flash_init+0x64>)
    1ace:	4281      	cmp	r1, r0
    1ad0:	bf14      	ite	ne
    1ad2:	2000      	movne	r0, #0
    1ad4:	2001      	moveq	r0, #1
    1ad6:	2256      	movs	r2, #86	; 0x56
    1ad8:	4914      	ldr	r1, [pc, #80]	; (1b2c <_flash_init+0x68>)
    1ada:	4b15      	ldr	r3, [pc, #84]	; (1b30 <_flash_init+0x6c>)
    1adc:	4798      	blx	r3
	device->hw = hw;
    1ade:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1ae0:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1ae2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1ae6:	049b      	lsls	r3, r3, #18
    1ae8:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1aea:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1aec:	4b11      	ldr	r3, [pc, #68]	; (1b34 <_flash_init+0x70>)
    1aee:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1af0:	4b11      	ldr	r3, [pc, #68]	; (1b38 <_flash_init+0x74>)
    1af2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1af6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afe:	f3bf 8f6f 	isb	sy
    1b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b0e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b12:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1b16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b1a:	6019      	str	r1, [r3, #0]
    1b1c:	601a      	str	r2, [r3, #0]
}
    1b1e:	2000      	movs	r0, #0
    1b20:	bd38      	pop	{r3, r4, r5, pc}
    1b22:	2000      	movs	r0, #0
    1b24:	e7d7      	b.n	1ad6 <_flash_init+0x12>
    1b26:	bf00      	nop
    1b28:	41004000 	.word	0x41004000
    1b2c:	00003344 	.word	0x00003344
    1b30:	0000136d 	.word	0x0000136d
    1b34:	200006e0 	.word	0x200006e0
    1b38:	e000e100 	.word	0xe000e100

00001b3c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1b3c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b3e:	4b02      	ldr	r3, [pc, #8]	; (1b48 <NVMCTRL_0_Handler+0xc>)
    1b40:	6818      	ldr	r0, [r3, #0]
    1b42:	4b02      	ldr	r3, [pc, #8]	; (1b4c <NVMCTRL_0_Handler+0x10>)
    1b44:	4798      	blx	r3
    1b46:	bd08      	pop	{r3, pc}
    1b48:	200006e0 	.word	0x200006e0
    1b4c:	00001a99 	.word	0x00001a99

00001b50 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1b50:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b52:	4b02      	ldr	r3, [pc, #8]	; (1b5c <NVMCTRL_1_Handler+0xc>)
    1b54:	6818      	ldr	r0, [r3, #0]
    1b56:	4b02      	ldr	r3, [pc, #8]	; (1b60 <NVMCTRL_1_Handler+0x10>)
    1b58:	4798      	blx	r3
    1b5a:	bd08      	pop	{r3, pc}
    1b5c:	200006e0 	.word	0x200006e0
    1b60:	00001a99 	.word	0x00001a99

00001b64 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1b64:	4b07      	ldr	r3, [pc, #28]	; (1b84 <_osc32kctrl_init_sources+0x20>)
    1b66:	f242 024e 	movw	r2, #8270	; 0x204e
    1b6a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1b6c:	2201      	movs	r2, #1
    1b6e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1b70:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1b72:	461a      	mov	r2, r3
    1b74:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1b76:	f013 0f01 	tst.w	r3, #1
    1b7a:	d0fb      	beq.n	1b74 <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1b7c:	2205      	movs	r2, #5
    1b7e:	4b01      	ldr	r3, [pc, #4]	; (1b84 <_osc32kctrl_init_sources+0x20>)
    1b80:	741a      	strb	r2, [r3, #16]
    1b82:	4770      	bx	lr
    1b84:	40001400 	.word	0x40001400

00001b88 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1b88:	4a2b      	ldr	r2, [pc, #172]	; (1c38 <_oscctrl_init_referenced_generators+0xb0>)
    1b8a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1b8c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1b90:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1b94:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b96:	4b29      	ldr	r3, [pc, #164]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1b98:	2200      	movs	r2, #0
    1b9a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1b9c:	4a28      	ldr	r2, [pc, #160]	; (1c40 <_oscctrl_init_referenced_generators+0xb8>)
    1b9e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ba0:	461a      	mov	r2, r3
    1ba2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1ba6:	f013 0f10 	tst.w	r3, #16
    1baa:	d1fa      	bne.n	1ba2 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1bac:	2200      	movs	r2, #0
    1bae:	4b23      	ldr	r3, [pc, #140]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1bb0:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bb4:	461a      	mov	r2, r3
    1bb6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1bba:	f013 0f04 	tst.w	r3, #4
    1bbe:	d1fa      	bne.n	1bb6 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1bc0:	2242      	movs	r2, #66	; 0x42
    1bc2:	4b1e      	ldr	r3, [pc, #120]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1bc4:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bc6:	461a      	mov	r2, r3
    1bc8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1bcc:	f013 0f02 	tst.w	r3, #2
    1bd0:	d1fa      	bne.n	1bc8 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1bd2:	4b1a      	ldr	r3, [pc, #104]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1bd6:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bd8:	461a      	mov	r2, r3
    1bda:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1bde:	f013 0f08 	tst.w	r3, #8
    1be2:	d1fa      	bne.n	1bda <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1be4:	2282      	movs	r2, #130	; 0x82
    1be6:	4b15      	ldr	r3, [pc, #84]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1be8:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bec:	461a      	mov	r2, r3
    1bee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1bf2:	f013 0f04 	tst.w	r3, #4
    1bf6:	d1fa      	bne.n	1bee <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1bf8:	4b10      	ldr	r3, [pc, #64]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1bfe:	f013 0f01 	tst.w	r3, #1
    1c02:	d012      	beq.n	1c2a <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c04:	4a0d      	ldr	r2, [pc, #52]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1c06:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1c08:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1c0c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1c10:	d1f9      	bne.n	1c06 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1c12:	4a09      	ldr	r2, [pc, #36]	; (1c38 <_oscctrl_init_referenced_generators+0xb0>)
    1c14:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1c16:	2b00      	cmp	r3, #0
    1c18:	d1fc      	bne.n	1c14 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c1a:	4a07      	ldr	r2, [pc, #28]	; (1c38 <_oscctrl_init_referenced_generators+0xb0>)
    1c1c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c1e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c22:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c26:	6213      	str	r3, [r2, #32]
    1c28:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c2a:	4a04      	ldr	r2, [pc, #16]	; (1c3c <_oscctrl_init_referenced_generators+0xb4>)
    1c2c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1c2e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1c32:	d0fb      	beq.n	1c2c <_oscctrl_init_referenced_generators+0xa4>
    1c34:	e7ed      	b.n	1c12 <_oscctrl_init_referenced_generators+0x8a>
    1c36:	bf00      	nop
    1c38:	40001c00 	.word	0x40001c00
    1c3c:	40001000 	.word	0x40001000
    1c40:	04010000 	.word	0x04010000

00001c44 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1c44:	b500      	push	{lr}
    1c46:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1c48:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <RAMECC_Handler+0x3c>)
    1c4a:	789b      	ldrb	r3, [r3, #2]
    1c4c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1c4e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	f013 0f02 	tst.w	r3, #2
    1c56:	d006      	beq.n	1c66 <RAMECC_Handler+0x22>
    1c58:	4b0a      	ldr	r3, [pc, #40]	; (1c84 <RAMECC_Handler+0x40>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	b11b      	cbz	r3, 1c66 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1c5e:	4a08      	ldr	r2, [pc, #32]	; (1c80 <RAMECC_Handler+0x3c>)
    1c60:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c62:	4798      	blx	r3
    1c64:	e009      	b.n	1c7a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1c66:	9b01      	ldr	r3, [sp, #4]
    1c68:	f013 0f01 	tst.w	r3, #1
    1c6c:	d005      	beq.n	1c7a <RAMECC_Handler+0x36>
    1c6e:	4b05      	ldr	r3, [pc, #20]	; (1c84 <RAMECC_Handler+0x40>)
    1c70:	685b      	ldr	r3, [r3, #4]
    1c72:	b113      	cbz	r3, 1c7a <RAMECC_Handler+0x36>
    1c74:	4a02      	ldr	r2, [pc, #8]	; (1c80 <RAMECC_Handler+0x3c>)
    1c76:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c78:	4798      	blx	r3
	} else {
		return;
	}
}
    1c7a:	b003      	add	sp, #12
    1c7c:	f85d fb04 	ldr.w	pc, [sp], #4
    1c80:	41020000 	.word	0x41020000
    1c84:	2000120c 	.word	0x2000120c

00001c88 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c88:	b470      	push	{r4, r5, r6}
    1c8a:	b087      	sub	sp, #28
    1c8c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c8e:	466c      	mov	r4, sp
    1c90:	4d0c      	ldr	r5, [pc, #48]	; (1cc4 <_sercom_get_hardware_index+0x3c>)
    1c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c96:	e895 0003 	ldmia.w	r5, {r0, r1}
    1c9a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c9e:	9b00      	ldr	r3, [sp, #0]
    1ca0:	42b3      	cmp	r3, r6
    1ca2:	d00c      	beq.n	1cbe <_sercom_get_hardware_index+0x36>
    1ca4:	4632      	mov	r2, r6
    1ca6:	2001      	movs	r0, #1
    1ca8:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1cac:	4293      	cmp	r3, r2
    1cae:	d007      	beq.n	1cc0 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1cb0:	3001      	adds	r0, #1
    1cb2:	2806      	cmp	r0, #6
    1cb4:	d1f8      	bne.n	1ca8 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1cb6:	2000      	movs	r0, #0
}
    1cb8:	b007      	add	sp, #28
    1cba:	bc70      	pop	{r4, r5, r6}
    1cbc:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1cbe:	2000      	movs	r0, #0
			return i;
    1cc0:	b2c0      	uxtb	r0, r0
    1cc2:	e7f9      	b.n	1cb8 <_sercom_get_hardware_index+0x30>
    1cc4:	00003364 	.word	0x00003364

00001cc8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1cc8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1cca:	4b03      	ldr	r3, [pc, #12]	; (1cd8 <_sercom_get_irq_num+0x10>)
    1ccc:	4798      	blx	r3
    1cce:	0080      	lsls	r0, r0, #2
    1cd0:	302e      	adds	r0, #46	; 0x2e
}
    1cd2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1cd6:	bd08      	pop	{r3, pc}
    1cd8:	00001c89 	.word	0x00001c89

00001cdc <_usart_init>:
{
    1cdc:	b538      	push	{r3, r4, r5, lr}
    1cde:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1ce0:	4b33      	ldr	r3, [pc, #204]	; (1db0 <_usart_init+0xd4>)
    1ce2:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1ce4:	2803      	cmp	r0, #3
    1ce6:	d056      	beq.n	1d96 <_usart_init+0xba>
    1ce8:	2804      	cmp	r0, #4
    1cea:	d052      	beq.n	1d92 <_usart_init+0xb6>
    1cec:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1cee:	bf08      	it	eq
    1cf0:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1cf2:	d006      	beq.n	1d02 <_usart_init+0x26>
	ASSERT(false);
    1cf4:	f240 2262 	movw	r2, #610	; 0x262
    1cf8:	492e      	ldr	r1, [pc, #184]	; (1db4 <_usart_init+0xd8>)
    1cfa:	2000      	movs	r0, #0
    1cfc:	4b2e      	ldr	r3, [pc, #184]	; (1db8 <_usart_init+0xdc>)
    1cfe:	4798      	blx	r3
	return 0;
    1d00:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d02:	69e3      	ldr	r3, [r4, #28]
    1d04:	f013 0f01 	tst.w	r3, #1
    1d08:	d1fb      	bne.n	1d02 <_usart_init+0x26>
    1d0a:	69e3      	ldr	r3, [r4, #28]
    1d0c:	f013 0f03 	tst.w	r3, #3
    1d10:	d1fb      	bne.n	1d0a <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1d12:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1d14:	f013 0f02 	tst.w	r3, #2
    1d18:	d147      	bne.n	1daa <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d1a:	69e3      	ldr	r3, [r4, #28]
    1d1c:	f013 0f01 	tst.w	r3, #1
    1d20:	d1fb      	bne.n	1d1a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	f043 0301 	orr.w	r3, r3, #1
    1d28:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d2a:	69e3      	ldr	r3, [r4, #28]
    1d2c:	f013 0f01 	tst.w	r3, #1
    1d30:	d1fb      	bne.n	1d2a <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d32:	4610      	mov	r0, r2
    1d34:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1d38:	4920      	ldr	r1, [pc, #128]	; (1dbc <_usart_init+0xe0>)
    1d3a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d3e:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d40:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d42:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d44:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1d48:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1d4a:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1d4e:	d024      	beq.n	1d9a <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1d50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d54:	4b19      	ldr	r3, [pc, #100]	; (1dbc <_usart_init+0xe0>)
    1d56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1d5a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1d5c:	89a3      	ldrh	r3, [r4, #12]
    1d5e:	f361 030c 	bfi	r3, r1, #0, #13
    1d62:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1d64:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1d68:	89a3      	ldrh	r3, [r4, #12]
    1d6a:	f362 334f 	bfi	r3, r2, #13, #3
    1d6e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d70:	4b12      	ldr	r3, [pc, #72]	; (1dbc <_usart_init+0xe0>)
    1d72:	0042      	lsls	r2, r0, #1
    1d74:	1811      	adds	r1, r2, r0
    1d76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1d7a:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1d7e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1d80:	4402      	add	r2, r0
    1d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1d8a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1d8e:	2000      	movs	r0, #0
    1d90:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d92:	2201      	movs	r2, #1
    1d94:	e7b5      	b.n	1d02 <_usart_init+0x26>
    1d96:	2200      	movs	r2, #0
    1d98:	e7b3      	b.n	1d02 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <_usart_init+0xe0>)
    1da0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1da4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1da6:	81a3      	strh	r3, [r4, #12]
    1da8:	e7e2      	b.n	1d70 <_usart_init+0x94>
		return ERR_DENIED;
    1daa:	f06f 0010 	mvn.w	r0, #16
}
    1dae:	bd38      	pop	{r3, r4, r5, pc}
    1db0:	00001c89 	.word	0x00001c89
    1db4:	000033f0 	.word	0x000033f0
    1db8:	0000136d 	.word	0x0000136d
    1dbc:	00003364 	.word	0x00003364

00001dc0 <_usart_async_init>:
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
    1dc2:	460d      	mov	r5, r1
	ASSERT(device);
    1dc4:	4606      	mov	r6, r0
    1dc6:	22da      	movs	r2, #218	; 0xda
    1dc8:	4912      	ldr	r1, [pc, #72]	; (1e14 <_usart_async_init+0x54>)
    1dca:	3000      	adds	r0, #0
    1dcc:	bf18      	it	ne
    1dce:	2001      	movne	r0, #1
    1dd0:	4b11      	ldr	r3, [pc, #68]	; (1e18 <_usart_async_init+0x58>)
    1dd2:	4798      	blx	r3
	init_status = _usart_init(hw);
    1dd4:	4628      	mov	r0, r5
    1dd6:	4b11      	ldr	r3, [pc, #68]	; (1e1c <_usart_async_init+0x5c>)
    1dd8:	4798      	blx	r3
	if (init_status) {
    1dda:	4604      	mov	r4, r0
    1ddc:	b9c0      	cbnz	r0, 1e10 <_usart_async_init+0x50>
	device->hw = hw;
    1dde:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1de0:	4628      	mov	r0, r5
    1de2:	4b0f      	ldr	r3, [pc, #60]	; (1e20 <_usart_async_init+0x60>)
    1de4:	4798      	blx	r3
		irq = irq +2;
    1de6:	3002      	adds	r0, #2
    1de8:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1dea:	f000 031f 	and.w	r3, r0, #31
    1dee:	2201      	movs	r2, #1
    1df0:	409a      	lsls	r2, r3
    1df2:	0943      	lsrs	r3, r0, #5
    1df4:	009b      	lsls	r3, r3, #2
    1df6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1dfa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e06:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e0e:	601a      	str	r2, [r3, #0]
}
    1e10:	4620      	mov	r0, r4
    1e12:	bd70      	pop	{r4, r5, r6, pc}
    1e14:	000033f0 	.word	0x000033f0
    1e18:	0000136d 	.word	0x0000136d
    1e1c:	00001cdd 	.word	0x00001cdd
    1e20:	00001cc9 	.word	0x00001cc9

00001e24 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1e24:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e26:	69d3      	ldr	r3, [r2, #28]
    1e28:	f013 0f03 	tst.w	r3, #3
    1e2c:	d1fb      	bne.n	1e26 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e2e:	6813      	ldr	r3, [r2, #0]
    1e30:	f043 0302 	orr.w	r3, r3, #2
    1e34:	6013      	str	r3, [r2, #0]
    1e36:	4770      	bx	lr

00001e38 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1e38:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1e3a:	6299      	str	r1, [r3, #40]	; 0x28
    1e3c:	4770      	bx	lr

00001e3e <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1e3e:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1e40:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1e42:	b2c0      	uxtb	r0, r0
    1e44:	4770      	bx	lr

00001e46 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1e46:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1e48:	7e18      	ldrb	r0, [r3, #24]
}
    1e4a:	f000 0001 	and.w	r0, r0, #1
    1e4e:	4770      	bx	lr

00001e50 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1e50:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1e52:	7e18      	ldrb	r0, [r3, #24]
}
    1e54:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1e58:	4770      	bx	lr
	...

00001e5c <_usart_async_set_irq_state>:
{
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	460c      	mov	r4, r1
    1e60:	4616      	mov	r6, r2
	ASSERT(device);
    1e62:	4605      	mov	r5, r0
    1e64:	f44f 7211 	mov.w	r2, #580	; 0x244
    1e68:	4915      	ldr	r1, [pc, #84]	; (1ec0 <_usart_async_set_irq_state+0x64>)
    1e6a:	3000      	adds	r0, #0
    1e6c:	bf18      	it	ne
    1e6e:	2001      	movne	r0, #1
    1e70:	4b14      	ldr	r3, [pc, #80]	; (1ec4 <_usart_async_set_irq_state+0x68>)
    1e72:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1e74:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1e78:	d10d      	bne.n	1e96 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1e7a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e7c:	b92e      	cbnz	r6, 1e8a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1e7e:	2201      	movs	r2, #1
    1e80:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1e82:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e84:	2202      	movs	r2, #2
    1e86:	751a      	strb	r2, [r3, #20]
    1e88:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1e8a:	2201      	movs	r2, #1
    1e8c:	759a      	strb	r2, [r3, #22]
    1e8e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1e90:	2202      	movs	r2, #2
    1e92:	759a      	strb	r2, [r3, #22]
    1e94:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    1e96:	2c01      	cmp	r4, #1
    1e98:	d002      	beq.n	1ea0 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1e9a:	2c03      	cmp	r4, #3
    1e9c:	d008      	beq.n	1eb0 <_usart_async_set_irq_state+0x54>
    1e9e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1ea0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1ea2:	b916      	cbnz	r6, 1eaa <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1ea4:	2204      	movs	r2, #4
    1ea6:	751a      	strb	r2, [r3, #20]
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1eaa:	2204      	movs	r2, #4
    1eac:	759a      	strb	r2, [r3, #22]
    1eae:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1eb0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1eb2:	b116      	cbz	r6, 1eba <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1eb4:	2280      	movs	r2, #128	; 0x80
    1eb6:	759a      	strb	r2, [r3, #22]
}
    1eb8:	e7f1      	b.n	1e9e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1eba:	2280      	movs	r2, #128	; 0x80
    1ebc:	751a      	strb	r2, [r3, #20]
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
    1ec0:	000033f0 	.word	0x000033f0
    1ec4:	0000136d 	.word	0x0000136d

00001ec8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1ec8:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <_delay_init+0x10>)
    1eca:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1ece:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1ed0:	2205      	movs	r2, #5
    1ed2:	601a      	str	r2, [r3, #0]
    1ed4:	4770      	bx	lr
    1ed6:	bf00      	nop
    1ed8:	e000e010 	.word	0xe000e010

00001edc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1edc:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1ede:	b303      	cbz	r3, 1f22 <_delay_cycles+0x46>
{
    1ee0:	b430      	push	{r4, r5}
    1ee2:	1e5d      	subs	r5, r3, #1
    1ee4:	b2ed      	uxtb	r5, r5
	while (n--) {
    1ee6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1ee8:	4a12      	ldr	r2, [pc, #72]	; (1f34 <_delay_cycles+0x58>)
    1eea:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1eee:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1ef0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ef2:	6813      	ldr	r3, [r2, #0]
    1ef4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ef8:	d0fb      	beq.n	1ef2 <_delay_cycles+0x16>
	while (n--) {
    1efa:	3801      	subs	r0, #1
    1efc:	b2c0      	uxtb	r0, r0
    1efe:	28ff      	cmp	r0, #255	; 0xff
    1f00:	d1f5      	bne.n	1eee <_delay_cycles+0x12>
    1f02:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1f06:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1f0a:	3101      	adds	r1, #1
    1f0c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1f0e:	4b09      	ldr	r3, [pc, #36]	; (1f34 <_delay_cycles+0x58>)
    1f10:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1f12:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1f14:	461a      	mov	r2, r3
    1f16:	6813      	ldr	r3, [r2, #0]
    1f18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f1c:	d0fb      	beq.n	1f16 <_delay_cycles+0x3a>
		;
}
    1f1e:	bc30      	pop	{r4, r5}
    1f20:	4770      	bx	lr
	SysTick->LOAD = buf;
    1f22:	4b04      	ldr	r3, [pc, #16]	; (1f34 <_delay_cycles+0x58>)
    1f24:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1f26:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1f28:	461a      	mov	r2, r3
    1f2a:	6813      	ldr	r3, [r2, #0]
    1f2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f30:	d0fb      	beq.n	1f2a <_delay_cycles+0x4e>
    1f32:	4770      	bx	lr
    1f34:	e000e010 	.word	0xe000e010

00001f38 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    1f38:	b470      	push	{r4, r5, r6}
    1f3a:	b087      	sub	sp, #28
    1f3c:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1f3e:	ac01      	add	r4, sp, #4
    1f40:	4d14      	ldr	r5, [pc, #80]	; (1f94 <_get_irq_num+0x5c>)
    1f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f46:	682b      	ldr	r3, [r5, #0]
    1f48:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1f4a:	42b0      	cmp	r0, r6
    1f4c:	d017      	beq.n	1f7e <_get_irq_num+0x46>
    1f4e:	4631      	mov	r1, r6
    1f50:	2301      	movs	r3, #1
    1f52:	a801      	add	r0, sp, #4
    1f54:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1f58:	428a      	cmp	r2, r1
    1f5a:	d006      	beq.n	1f6a <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1f5c:	3301      	adds	r3, #1
    1f5e:	2b05      	cmp	r3, #5
    1f60:	d1f8      	bne.n	1f54 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    1f62:	2055      	movs	r0, #85	; 0x55
}
    1f64:	b007      	add	sp, #28
    1f66:	bc70      	pop	{r4, r5, r6}
    1f68:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	2b04      	cmp	r3, #4
    1f6e:	d80c      	bhi.n	1f8a <_get_irq_num+0x52>
    1f70:	e8df f003 	tbb	[pc, r3]
    1f74:	070d0305 	.word	0x070d0305
    1f78:	09          	.byte	0x09
    1f79:	00          	.byte	0x00
		return TCC1_0_IRQn;
    1f7a:	205c      	movs	r0, #92	; 0x5c
    1f7c:	e7f2      	b.n	1f64 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    1f7e:	2055      	movs	r0, #85	; 0x55
    1f80:	e7f0      	b.n	1f64 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    1f82:	2065      	movs	r0, #101	; 0x65
    1f84:	e7ee      	b.n	1f64 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    1f86:	2068      	movs	r0, #104	; 0x68
    1f88:	e7ec      	b.n	1f64 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    1f8a:	2089      	movs	r0, #137	; 0x89
    1f8c:	e7ea      	b.n	1f64 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    1f8e:	2061      	movs	r0, #97	; 0x61
    1f90:	e7e8      	b.n	1f64 <_get_irq_num+0x2c>
    1f92:	bf00      	nop
    1f94:	0000340c 	.word	0x0000340c

00001f98 <_tcc_timer_deinit>:
{
    1f98:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1f9a:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1f9c:	4620      	mov	r0, r4
    1f9e:	4b10      	ldr	r3, [pc, #64]	; (1fe0 <_tcc_timer_deinit+0x48>)
    1fa0:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1fa2:	0943      	lsrs	r3, r0, #5
    1fa4:	f000 001f 	and.w	r0, r0, #31
    1fa8:	2201      	movs	r2, #1
    1faa:	fa02 f000 	lsl.w	r0, r2, r0
    1fae:	3320      	adds	r3, #32
    1fb0:	4a0c      	ldr	r2, [pc, #48]	; (1fe4 <_tcc_timer_deinit+0x4c>)
    1fb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1fb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fba:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fbe:	68a3      	ldr	r3, [r4, #8]
    1fc0:	f013 0f03 	tst.w	r3, #3
    1fc4:	d1fb      	bne.n	1fbe <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1fc6:	6823      	ldr	r3, [r4, #0]
    1fc8:	f023 0302 	bic.w	r3, r3, #2
    1fcc:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fce:	68a3      	ldr	r3, [r4, #8]
    1fd0:	f013 0f01 	tst.w	r3, #1
    1fd4:	d1fb      	bne.n	1fce <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1fd6:	6823      	ldr	r3, [r4, #0]
    1fd8:	f043 0301 	orr.w	r3, r3, #1
    1fdc:	6023      	str	r3, [r4, #0]
    1fde:	bd10      	pop	{r4, pc}
    1fe0:	00001f39 	.word	0x00001f39
    1fe4:	e000e100 	.word	0xe000e100

00001fe8 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1fe8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fea:	6893      	ldr	r3, [r2, #8]
    1fec:	f013 0f03 	tst.w	r3, #3
    1ff0:	d1fb      	bne.n	1fea <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1ff2:	6813      	ldr	r3, [r2, #0]
    1ff4:	f043 0302 	orr.w	r3, r3, #2
    1ff8:	6013      	str	r3, [r2, #0]
    1ffa:	4770      	bx	lr

00001ffc <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1ffc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1ffe:	6893      	ldr	r3, [r2, #8]
    2000:	f013 0f03 	tst.w	r3, #3
    2004:	d1fb      	bne.n	1ffe <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2006:	6813      	ldr	r3, [r2, #0]
    2008:	f023 0302 	bic.w	r3, r3, #2
    200c:	6013      	str	r3, [r2, #0]
    200e:	4770      	bx	lr

00002010 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2010:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2012:	6419      	str	r1, [r3, #64]	; 0x40
    2014:	4770      	bx	lr

00002016 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2016:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2018:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    201a:	4770      	bx	lr

0000201c <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    201c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    201e:	6893      	ldr	r3, [r2, #8]
    2020:	f013 0f03 	tst.w	r3, #3
    2024:	d1fb      	bne.n	201e <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2026:	6810      	ldr	r0, [r2, #0]
}
    2028:	f3c0 0040 	ubfx	r0, r0, #1, #1
    202c:	4770      	bx	lr

0000202e <tcc_interrupt_handler>:
{
    202e:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2030:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2034:	f012 0f01 	tst.w	r2, #1
    2038:	d100      	bne.n	203c <tcc_interrupt_handler+0xe>
    203a:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    203c:	2201      	movs	r2, #1
    203e:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2040:	6803      	ldr	r3, [r0, #0]
    2042:	4798      	blx	r3
}
    2044:	e7f9      	b.n	203a <tcc_interrupt_handler+0xc>
	...

00002048 <_tcc_timer_init>:
{
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	b087      	sub	sp, #28
    204c:	4605      	mov	r5, r0
    204e:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2050:	ae01      	add	r6, sp, #4
    2052:	4f4e      	ldr	r7, [pc, #312]	; (218c <_tcc_timer_init+0x144>)
    2054:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2056:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2058:	683b      	ldr	r3, [r7, #0]
    205a:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    205c:	42a0      	cmp	r0, r4
    205e:	d00c      	beq.n	207a <_tcc_timer_init+0x32>
    2060:	4621      	mov	r1, r4
    2062:	2301      	movs	r3, #1
    2064:	a801      	add	r0, sp, #4
    2066:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    206a:	428a      	cmp	r2, r1
    206c:	d006      	beq.n	207c <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    206e:	3301      	adds	r3, #1
    2070:	2b05      	cmp	r3, #5
    2072:	d1f8      	bne.n	2066 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2074:	2600      	movs	r6, #0
			return i;
    2076:	b276      	sxtb	r6, r6
    2078:	e015      	b.n	20a6 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    207a:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    207c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2080:	d073      	beq.n	216a <_tcc_timer_init+0x122>
    2082:	2b01      	cmp	r3, #1
    2084:	d06b      	beq.n	215e <_tcc_timer_init+0x116>
    2086:	2b02      	cmp	r3, #2
    2088:	d06b      	beq.n	2162 <_tcc_timer_init+0x11a>
    208a:	2b03      	cmp	r3, #3
    208c:	d06b      	beq.n	2166 <_tcc_timer_init+0x11e>
    208e:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2090:	bf08      	it	eq
    2092:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2094:	d0ef      	beq.n	2076 <_tcc_timer_init+0x2e>
	ASSERT(false);
    2096:	f240 128b 	movw	r2, #395	; 0x18b
    209a:	493d      	ldr	r1, [pc, #244]	; (2190 <_tcc_timer_init+0x148>)
    209c:	2000      	movs	r0, #0
    209e:	4b3d      	ldr	r3, [pc, #244]	; (2194 <_tcc_timer_init+0x14c>)
    20a0:	4798      	blx	r3
	return -1;
    20a2:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    20a6:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    20a8:	22e4      	movs	r2, #228	; 0xe4
    20aa:	4939      	ldr	r1, [pc, #228]	; (2190 <_tcc_timer_init+0x148>)
    20ac:	2001      	movs	r0, #1
    20ae:	4b39      	ldr	r3, [pc, #228]	; (2194 <_tcc_timer_init+0x14c>)
    20b0:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20b2:	68a3      	ldr	r3, [r4, #8]
    20b4:	f013 0f01 	tst.w	r3, #1
    20b8:	d1fb      	bne.n	20b2 <_tcc_timer_init+0x6a>
    20ba:	68a3      	ldr	r3, [r4, #8]
    20bc:	f013 0f03 	tst.w	r3, #3
    20c0:	d1fb      	bne.n	20ba <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    20c2:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    20c4:	f013 0f02 	tst.w	r3, #2
    20c8:	d15d      	bne.n	2186 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20ca:	68a3      	ldr	r3, [r4, #8]
    20cc:	f013 0f01 	tst.w	r3, #1
    20d0:	d1fb      	bne.n	20ca <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    20d2:	6823      	ldr	r3, [r4, #0]
    20d4:	f043 0301 	orr.w	r3, r3, #1
    20d8:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20da:	68a3      	ldr	r3, [r4, #8]
    20dc:	f013 0f01 	tst.w	r3, #1
    20e0:	d1fb      	bne.n	20da <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    20e2:	4a2a      	ldr	r2, [pc, #168]	; (218c <_tcc_timer_init+0x144>)
    20e4:	00f1      	lsls	r1, r6, #3
    20e6:	198b      	adds	r3, r1, r6
    20e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    20ec:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    20ee:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    20f0:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    20f2:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    20f4:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    20f6:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    20f8:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    20fa:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    20fc:	440e      	add	r6, r1
    20fe:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2102:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2104:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2106:	2301      	movs	r3, #1
    2108:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    210a:	4b23      	ldr	r3, [pc, #140]	; (2198 <_tcc_timer_init+0x150>)
    210c:	429c      	cmp	r4, r3
    210e:	d02e      	beq.n	216e <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2110:	4b22      	ldr	r3, [pc, #136]	; (219c <_tcc_timer_init+0x154>)
    2112:	429c      	cmp	r4, r3
    2114:	d02e      	beq.n	2174 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2116:	4b22      	ldr	r3, [pc, #136]	; (21a0 <_tcc_timer_init+0x158>)
    2118:	429c      	cmp	r4, r3
    211a:	d02e      	beq.n	217a <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    211c:	4b21      	ldr	r3, [pc, #132]	; (21a4 <_tcc_timer_init+0x15c>)
    211e:	429c      	cmp	r4, r3
    2120:	d02e      	beq.n	2180 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2122:	4b21      	ldr	r3, [pc, #132]	; (21a8 <_tcc_timer_init+0x160>)
    2124:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2126:	bf04      	itt	eq
    2128:	4b20      	ldreq	r3, [pc, #128]	; (21ac <_tcc_timer_init+0x164>)
    212a:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    212c:	4620      	mov	r0, r4
    212e:	4b20      	ldr	r3, [pc, #128]	; (21b0 <_tcc_timer_init+0x168>)
    2130:	4798      	blx	r3
    2132:	f000 031f 	and.w	r3, r0, #31
    2136:	2201      	movs	r2, #1
    2138:	409a      	lsls	r2, r3
    213a:	0943      	lsrs	r3, r0, #5
    213c:	009b      	lsls	r3, r3, #2
    213e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2142:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    214a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    214e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2152:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2156:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2158:	2000      	movs	r0, #0
}
    215a:	b007      	add	sp, #28
    215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    215e:	2601      	movs	r6, #1
    2160:	e789      	b.n	2076 <_tcc_timer_init+0x2e>
    2162:	2602      	movs	r6, #2
    2164:	e787      	b.n	2076 <_tcc_timer_init+0x2e>
    2166:	2603      	movs	r6, #3
    2168:	e785      	b.n	2076 <_tcc_timer_init+0x2e>
    216a:	2600      	movs	r6, #0
    216c:	e783      	b.n	2076 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    216e:	4b0f      	ldr	r3, [pc, #60]	; (21ac <_tcc_timer_init+0x164>)
    2170:	601d      	str	r5, [r3, #0]
    2172:	e7d3      	b.n	211c <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2174:	4b0d      	ldr	r3, [pc, #52]	; (21ac <_tcc_timer_init+0x164>)
    2176:	605d      	str	r5, [r3, #4]
    2178:	e7d3      	b.n	2122 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    217a:	4b0c      	ldr	r3, [pc, #48]	; (21ac <_tcc_timer_init+0x164>)
    217c:	609d      	str	r5, [r3, #8]
    217e:	e7d5      	b.n	212c <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2180:	4b0a      	ldr	r3, [pc, #40]	; (21ac <_tcc_timer_init+0x164>)
    2182:	60dd      	str	r5, [r3, #12]
    2184:	e7d2      	b.n	212c <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2186:	f06f 0010 	mvn.w	r0, #16
    218a:	e7e6      	b.n	215a <_tcc_timer_init+0x112>
    218c:	0000340c 	.word	0x0000340c
    2190:	000034d4 	.word	0x000034d4
    2194:	0000136d 	.word	0x0000136d
    2198:	41016000 	.word	0x41016000
    219c:	41018000 	.word	0x41018000
    21a0:	42000c00 	.word	0x42000c00
    21a4:	42001000 	.word	0x42001000
    21a8:	43001000 	.word	0x43001000
    21ac:	200006e4 	.word	0x200006e4
    21b0:	00001f39 	.word	0x00001f39

000021b4 <_tcc_timer_set_irq>:
{
    21b4:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    21b6:	68c0      	ldr	r0, [r0, #12]
    21b8:	4b02      	ldr	r3, [pc, #8]	; (21c4 <_tcc_timer_set_irq+0x10>)
    21ba:	4798      	blx	r3
    21bc:	4b02      	ldr	r3, [pc, #8]	; (21c8 <_tcc_timer_set_irq+0x14>)
    21be:	4798      	blx	r3
    21c0:	bd08      	pop	{r3, pc}
    21c2:	bf00      	nop
    21c4:	00001f39 	.word	0x00001f39
    21c8:	0000166d 	.word	0x0000166d

000021cc <_tcc_get_timer>:
}
    21cc:	4800      	ldr	r0, [pc, #0]	; (21d0 <_tcc_get_timer+0x4>)
    21ce:	4770      	bx	lr
    21d0:	2000003c 	.word	0x2000003c

000021d4 <TCC0_0_Handler>:
{
    21d4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    21d6:	4b02      	ldr	r3, [pc, #8]	; (21e0 <TCC0_0_Handler+0xc>)
    21d8:	6818      	ldr	r0, [r3, #0]
    21da:	4b02      	ldr	r3, [pc, #8]	; (21e4 <TCC0_0_Handler+0x10>)
    21dc:	4798      	blx	r3
    21de:	bd08      	pop	{r3, pc}
    21e0:	200006e4 	.word	0x200006e4
    21e4:	0000202f 	.word	0x0000202f

000021e8 <TCC1_0_Handler>:
{
    21e8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    21ea:	4b02      	ldr	r3, [pc, #8]	; (21f4 <TCC1_0_Handler+0xc>)
    21ec:	6858      	ldr	r0, [r3, #4]
    21ee:	4b02      	ldr	r3, [pc, #8]	; (21f8 <TCC1_0_Handler+0x10>)
    21f0:	4798      	blx	r3
    21f2:	bd08      	pop	{r3, pc}
    21f4:	200006e4 	.word	0x200006e4
    21f8:	0000202f 	.word	0x0000202f

000021fc <TCC2_0_Handler>:
{
    21fc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    21fe:	4b02      	ldr	r3, [pc, #8]	; (2208 <TCC2_0_Handler+0xc>)
    2200:	6898      	ldr	r0, [r3, #8]
    2202:	4b02      	ldr	r3, [pc, #8]	; (220c <TCC2_0_Handler+0x10>)
    2204:	4798      	blx	r3
    2206:	bd08      	pop	{r3, pc}
    2208:	200006e4 	.word	0x200006e4
    220c:	0000202f 	.word	0x0000202f

00002210 <TCC3_0_Handler>:
{
    2210:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2212:	4b02      	ldr	r3, [pc, #8]	; (221c <TCC3_0_Handler+0xc>)
    2214:	68d8      	ldr	r0, [r3, #12]
    2216:	4b02      	ldr	r3, [pc, #8]	; (2220 <TCC3_0_Handler+0x10>)
    2218:	4798      	blx	r3
    221a:	bd08      	pop	{r3, pc}
    221c:	200006e4 	.word	0x200006e4
    2220:	0000202f 	.word	0x0000202f

00002224 <TCC4_0_Handler>:
{
    2224:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2226:	4b02      	ldr	r3, [pc, #8]	; (2230 <TCC4_0_Handler+0xc>)
    2228:	6918      	ldr	r0, [r3, #16]
    222a:	4b02      	ldr	r3, [pc, #8]	; (2234 <TCC4_0_Handler+0x10>)
    222c:	4798      	blx	r3
    222e:	bd08      	pop	{r3, pc}
    2230:	200006e4 	.word	0x200006e4
    2234:	0000202f 	.word	0x0000202f

00002238 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2238:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    223a:	6913      	ldr	r3, [r2, #16]
    223c:	f013 0f03 	tst.w	r3, #3
    2240:	d1fb      	bne.n	223a <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2242:	6813      	ldr	r3, [r2, #0]
    2244:	f043 0302 	orr.w	r3, r3, #2
    2248:	6013      	str	r3, [r2, #0]
    224a:	4770      	bx	lr

0000224c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    224c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    224e:	6913      	ldr	r3, [r2, #16]
    2250:	f013 0f03 	tst.w	r3, #3
    2254:	d1fb      	bne.n	224e <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2256:	6813      	ldr	r3, [r2, #0]
    2258:	f023 0302 	bic.w	r3, r3, #2
    225c:	6013      	str	r3, [r2, #0]
    225e:	4770      	bx	lr

00002260 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2260:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2262:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2264:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2268:	2b02      	cmp	r3, #2
    226a:	d00b      	beq.n	2284 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    226c:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    226e:	f013 0f0c 	tst.w	r3, #12
    2272:	d009      	beq.n	2288 <_tc_timer_set_period+0x28>
    2274:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2276:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    227a:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    227c:	bf04      	itt	eq
    227e:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2280:	76d1      	strbeq	r1, [r2, #27]
    2282:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2284:	61d1      	str	r1, [r2, #28]
    2286:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2288:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    228a:	8391      	strh	r1, [r2, #28]
    228c:	4770      	bx	lr

0000228e <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    228e:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2290:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2292:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2296:	2b02      	cmp	r3, #2
    2298:	d00c      	beq.n	22b4 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    229a:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    229c:	f013 0f0c 	tst.w	r3, #12
    22a0:	d00a      	beq.n	22b8 <_tc_timer_get_period+0x2a>
    22a2:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22a8:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    22aa:	bf06      	itte	eq
    22ac:	7ed0      	ldrbeq	r0, [r2, #27]
    22ae:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    22b0:	2000      	movne	r0, #0
}
    22b2:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    22b4:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    22b6:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    22b8:	8b90      	ldrh	r0, [r2, #28]
    22ba:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    22bc:	4770      	bx	lr

000022be <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    22be:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22c0:	6913      	ldr	r3, [r2, #16]
    22c2:	f013 0f03 	tst.w	r3, #3
    22c6:	d1fb      	bne.n	22c0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    22c8:	6810      	ldr	r0, [r2, #0]
}
    22ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
    22ce:	4770      	bx	lr

000022d0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    22d0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    22d2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    22d4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    22d6:	f012 0f01 	tst.w	r2, #1
    22da:	d100      	bne.n	22de <tc_interrupt_handler+0xe>
    22dc:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    22de:	2201      	movs	r2, #1
    22e0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    22e2:	6803      	ldr	r3, [r0, #0]
    22e4:	4798      	blx	r3
	}
}
    22e6:	e7f9      	b.n	22dc <tc_interrupt_handler+0xc>

000022e8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    22e8:	b538      	push	{r3, r4, r5, lr}
    22ea:	4605      	mov	r5, r0
	void *const hw = device->hw;
    22ec:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    22ee:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    22f0:	f013 0f01 	tst.w	r3, #1
    22f4:	d004      	beq.n	2300 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    22f6:	2301      	movs	r3, #1
    22f8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    22fa:	6803      	ldr	r3, [r0, #0]
    22fc:	b103      	cbz	r3, 2300 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    22fe:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2300:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2302:	f013 0f02 	tst.w	r3, #2
    2306:	d005      	beq.n	2314 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2308:	2302      	movs	r3, #2
    230a:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    230c:	686b      	ldr	r3, [r5, #4]
    230e:	b10b      	cbz	r3, 2314 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2310:	4628      	mov	r0, r5
    2312:	4798      	blx	r3
    2314:	bd38      	pop	{r3, r4, r5, pc}
	...

00002318 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2318:	4b11      	ldr	r3, [pc, #68]	; (2360 <_tc_init_irq_param+0x48>)
    231a:	4298      	cmp	r0, r3
    231c:	d011      	beq.n	2342 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    231e:	4b11      	ldr	r3, [pc, #68]	; (2364 <_tc_init_irq_param+0x4c>)
    2320:	4298      	cmp	r0, r3
    2322:	d011      	beq.n	2348 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2324:	4b10      	ldr	r3, [pc, #64]	; (2368 <_tc_init_irq_param+0x50>)
    2326:	4298      	cmp	r0, r3
    2328:	d011      	beq.n	234e <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    232a:	4b10      	ldr	r3, [pc, #64]	; (236c <_tc_init_irq_param+0x54>)
    232c:	4298      	cmp	r0, r3
    232e:	d011      	beq.n	2354 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2330:	4b0f      	ldr	r3, [pc, #60]	; (2370 <_tc_init_irq_param+0x58>)
    2332:	4298      	cmp	r0, r3
    2334:	d011      	beq.n	235a <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2336:	4b0f      	ldr	r3, [pc, #60]	; (2374 <_tc_init_irq_param+0x5c>)
    2338:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    233a:	bf04      	itt	eq
    233c:	4b0e      	ldreq	r3, [pc, #56]	; (2378 <_tc_init_irq_param+0x60>)
    233e:	6159      	streq	r1, [r3, #20]
    2340:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2342:	4b0d      	ldr	r3, [pc, #52]	; (2378 <_tc_init_irq_param+0x60>)
    2344:	6019      	str	r1, [r3, #0]
    2346:	e7f0      	b.n	232a <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2348:	4b0b      	ldr	r3, [pc, #44]	; (2378 <_tc_init_irq_param+0x60>)
    234a:	6059      	str	r1, [r3, #4]
    234c:	e7f0      	b.n	2330 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    234e:	4b0a      	ldr	r3, [pc, #40]	; (2378 <_tc_init_irq_param+0x60>)
    2350:	6099      	str	r1, [r3, #8]
    2352:	e7f0      	b.n	2336 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2354:	4b08      	ldr	r3, [pc, #32]	; (2378 <_tc_init_irq_param+0x60>)
    2356:	60d9      	str	r1, [r3, #12]
    2358:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    235a:	4b07      	ldr	r3, [pc, #28]	; (2378 <_tc_init_irq_param+0x60>)
    235c:	6119      	str	r1, [r3, #16]
    235e:	4770      	bx	lr
    2360:	40003800 	.word	0x40003800
    2364:	40003c00 	.word	0x40003c00
    2368:	4101a000 	.word	0x4101a000
    236c:	4101c000 	.word	0x4101c000
    2370:	42001400 	.word	0x42001400
    2374:	42001800 	.word	0x42001800
    2378:	200006f8 	.word	0x200006f8

0000237c <get_tc_index>:
{
    237c:	b570      	push	{r4, r5, r6, lr}
    237e:	b086      	sub	sp, #24
    2380:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2382:	466c      	mov	r4, sp
    2384:	4d18      	ldr	r5, [pc, #96]	; (23e8 <get_tc_index+0x6c>)
    2386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    238a:	e895 0003 	ldmia.w	r5, {r0, r1}
    238e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2392:	9b00      	ldr	r3, [sp, #0]
    2394:	42b3      	cmp	r3, r6
    2396:	d021      	beq.n	23dc <get_tc_index+0x60>
    2398:	4631      	mov	r1, r6
    239a:	2301      	movs	r3, #1
    239c:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    23a0:	428a      	cmp	r2, r1
    23a2:	d01c      	beq.n	23de <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23a4:	3301      	adds	r3, #1
    23a6:	2b06      	cmp	r3, #6
    23a8:	d1f8      	bne.n	239c <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    23aa:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    23ac:	4a0f      	ldr	r2, [pc, #60]	; (23ec <get_tc_index+0x70>)
    23ae:	7812      	ldrb	r2, [r2, #0]
    23b0:	429a      	cmp	r2, r3
    23b2:	d016      	beq.n	23e2 <get_tc_index+0x66>
    23b4:	4a0d      	ldr	r2, [pc, #52]	; (23ec <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    23b6:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    23b8:	7d11      	ldrb	r1, [r2, #20]
    23ba:	4299      	cmp	r1, r3
    23bc:	d012      	beq.n	23e4 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    23be:	3001      	adds	r0, #1
    23c0:	b2c0      	uxtb	r0, r0
    23c2:	3214      	adds	r2, #20
    23c4:	2806      	cmp	r0, #6
    23c6:	d1f7      	bne.n	23b8 <get_tc_index+0x3c>
	ASSERT(false);
    23c8:	f240 2227 	movw	r2, #551	; 0x227
    23cc:	4908      	ldr	r1, [pc, #32]	; (23f0 <get_tc_index+0x74>)
    23ce:	2000      	movs	r0, #0
    23d0:	4b08      	ldr	r3, [pc, #32]	; (23f4 <get_tc_index+0x78>)
    23d2:	4798      	blx	r3
	return -1;
    23d4:	f04f 30ff 	mov.w	r0, #4294967295
}
    23d8:	b006      	add	sp, #24
    23da:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23dc:	2300      	movs	r3, #0
			return i;
    23de:	b2db      	uxtb	r3, r3
    23e0:	e7e4      	b.n	23ac <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    23e2:	2000      	movs	r0, #0
			return i;
    23e4:	b240      	sxtb	r0, r0
    23e6:	e7f7      	b.n	23d8 <get_tc_index+0x5c>
    23e8:	000034ec 	.word	0x000034ec
    23ec:	2000005c 	.word	0x2000005c
    23f0:	00003504 	.word	0x00003504
    23f4:	0000136d 	.word	0x0000136d

000023f8 <_tc_timer_init>:
{
    23f8:	b570      	push	{r4, r5, r6, lr}
    23fa:	4606      	mov	r6, r0
    23fc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    23fe:	4608      	mov	r0, r1
    2400:	4b48      	ldr	r3, [pc, #288]	; (2524 <_tc_timer_init+0x12c>)
    2402:	4798      	blx	r3
    2404:	4605      	mov	r5, r0
	device->hw = hw;
    2406:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2408:	22af      	movs	r2, #175	; 0xaf
    240a:	4947      	ldr	r1, [pc, #284]	; (2528 <_tc_timer_init+0x130>)
    240c:	2001      	movs	r0, #1
    240e:	4b47      	ldr	r3, [pc, #284]	; (252c <_tc_timer_init+0x134>)
    2410:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2412:	6923      	ldr	r3, [r4, #16]
    2414:	f013 0f01 	tst.w	r3, #1
    2418:	d1fb      	bne.n	2412 <_tc_timer_init+0x1a>
    241a:	6923      	ldr	r3, [r4, #16]
    241c:	f013 0f03 	tst.w	r3, #3
    2420:	d1fb      	bne.n	241a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2422:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2424:	f013 0f02 	tst.w	r3, #2
    2428:	d175      	bne.n	2516 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    242a:	6923      	ldr	r3, [r4, #16]
    242c:	f013 0f01 	tst.w	r3, #1
    2430:	d1fb      	bne.n	242a <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2432:	6823      	ldr	r3, [r4, #0]
    2434:	f043 0301 	orr.w	r3, r3, #1
    2438:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    243a:	6923      	ldr	r3, [r4, #16]
    243c:	f013 0f01 	tst.w	r3, #1
    2440:	d1fb      	bne.n	243a <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2442:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2446:	4a3a      	ldr	r2, [pc, #232]	; (2530 <_tc_timer_init+0x138>)
    2448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    244c:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    244e:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2450:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2452:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2454:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2456:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2458:	2201      	movs	r2, #1
    245a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    245c:	685b      	ldr	r3, [r3, #4]
    245e:	f003 030c 	and.w	r3, r3, #12
    2462:	2b08      	cmp	r3, #8
    2464:	d03f      	beq.n	24e6 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2466:	2b00      	cmp	r3, #0
    2468:	d147      	bne.n	24fa <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    246a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    246e:	4a30      	ldr	r2, [pc, #192]	; (2530 <_tc_timer_init+0x138>)
    2470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2474:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2476:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2478:	8a1b      	ldrh	r3, [r3, #16]
    247a:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    247c:	2301      	movs	r3, #1
    247e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2480:	4631      	mov	r1, r6
    2482:	4620      	mov	r0, r4
    2484:	4b2b      	ldr	r3, [pc, #172]	; (2534 <_tc_timer_init+0x13c>)
    2486:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2488:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    248c:	4a28      	ldr	r2, [pc, #160]	; (2530 <_tc_timer_init+0x138>)
    248e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2496:	2b00      	cmp	r3, #0
    2498:	db40      	blt.n	251c <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    249a:	095a      	lsrs	r2, r3, #5
    249c:	f003 031f 	and.w	r3, r3, #31
    24a0:	2101      	movs	r1, #1
    24a2:	fa01 f303 	lsl.w	r3, r1, r3
    24a6:	3220      	adds	r2, #32
    24a8:	4923      	ldr	r1, [pc, #140]	; (2538 <_tc_timer_init+0x140>)
    24aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    24ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24b2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    24b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    24ba:	4b1d      	ldr	r3, [pc, #116]	; (2530 <_tc_timer_init+0x138>)
    24bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    24c0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    24c4:	2b00      	cmp	r3, #0
    24c6:	db2b      	blt.n	2520 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24c8:	0959      	lsrs	r1, r3, #5
    24ca:	f003 031f 	and.w	r3, r3, #31
    24ce:	2201      	movs	r2, #1
    24d0:	fa02 f303 	lsl.w	r3, r2, r3
    24d4:	4a18      	ldr	r2, [pc, #96]	; (2538 <_tc_timer_init+0x140>)
    24d6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    24da:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    24e2:	2000      	movs	r0, #0
    24e4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    24e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24ea:	4a11      	ldr	r2, [pc, #68]	; (2530 <_tc_timer_init+0x138>)
    24ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24f0:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    24f2:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    24f4:	691b      	ldr	r3, [r3, #16]
    24f6:	6223      	str	r3, [r4, #32]
    24f8:	e7c0      	b.n	247c <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    24fa:	2b04      	cmp	r3, #4
    24fc:	d1be      	bne.n	247c <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    24fe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2502:	4a0b      	ldr	r2, [pc, #44]	; (2530 <_tc_timer_init+0x138>)
    2504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2508:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    250a:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    250c:	7c1a      	ldrb	r2, [r3, #16]
    250e:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2510:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2512:	76e3      	strb	r3, [r4, #27]
    2514:	e7b2      	b.n	247c <_tc_timer_init+0x84>
		return ERR_DENIED;
    2516:	f06f 0010 	mvn.w	r0, #16
    251a:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    251c:	2000      	movs	r0, #0
    251e:	bd70      	pop	{r4, r5, r6, pc}
    2520:	2000      	movs	r0, #0
}
    2522:	bd70      	pop	{r4, r5, r6, pc}
    2524:	0000237d 	.word	0x0000237d
    2528:	00003504 	.word	0x00003504
    252c:	0000136d 	.word	0x0000136d
    2530:	2000005c 	.word	0x2000005c
    2534:	00002319 	.word	0x00002319
    2538:	e000e100 	.word	0xe000e100

0000253c <_tc_timer_deinit>:
{
    253c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    253e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2540:	4620      	mov	r0, r4
    2542:	4b18      	ldr	r3, [pc, #96]	; (25a4 <_tc_timer_deinit+0x68>)
    2544:	4798      	blx	r3
    2546:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2548:	f240 1201 	movw	r2, #257	; 0x101
    254c:	4916      	ldr	r1, [pc, #88]	; (25a8 <_tc_timer_deinit+0x6c>)
    254e:	2001      	movs	r0, #1
    2550:	4b16      	ldr	r3, [pc, #88]	; (25ac <_tc_timer_deinit+0x70>)
    2552:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2554:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2558:	4b15      	ldr	r3, [pc, #84]	; (25b0 <_tc_timer_deinit+0x74>)
    255a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    255e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2562:	2b00      	cmp	r3, #0
    2564:	db0d      	blt.n	2582 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2566:	095a      	lsrs	r2, r3, #5
    2568:	f003 031f 	and.w	r3, r3, #31
    256c:	2101      	movs	r1, #1
    256e:	fa01 f303 	lsl.w	r3, r1, r3
    2572:	3220      	adds	r2, #32
    2574:	490f      	ldr	r1, [pc, #60]	; (25b4 <_tc_timer_deinit+0x78>)
    2576:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    257a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    257e:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2582:	6923      	ldr	r3, [r4, #16]
    2584:	f013 0f03 	tst.w	r3, #3
    2588:	d1fb      	bne.n	2582 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    258a:	6823      	ldr	r3, [r4, #0]
    258c:	f023 0302 	bic.w	r3, r3, #2
    2590:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2592:	6923      	ldr	r3, [r4, #16]
    2594:	f013 0f01 	tst.w	r3, #1
    2598:	d1fb      	bne.n	2592 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    259a:	6823      	ldr	r3, [r4, #0]
    259c:	f043 0301 	orr.w	r3, r3, #1
    25a0:	6023      	str	r3, [r4, #0]
    25a2:	bd38      	pop	{r3, r4, r5, pc}
    25a4:	0000237d 	.word	0x0000237d
    25a8:	00003504 	.word	0x00003504
    25ac:	0000136d 	.word	0x0000136d
    25b0:	2000005c 	.word	0x2000005c
    25b4:	e000e100 	.word	0xe000e100

000025b8 <_tc_timer_set_irq>:
{
    25b8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    25ba:	68c0      	ldr	r0, [r0, #12]
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <_tc_timer_set_irq+0x28>)
    25be:	4798      	blx	r3
    25c0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    25c2:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    25c6:	4907      	ldr	r1, [pc, #28]	; (25e4 <_tc_timer_set_irq+0x2c>)
    25c8:	2001      	movs	r0, #1
    25ca:	4b07      	ldr	r3, [pc, #28]	; (25e8 <_tc_timer_set_irq+0x30>)
    25cc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    25ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    25d2:	4b06      	ldr	r3, [pc, #24]	; (25ec <_tc_timer_set_irq+0x34>)
    25d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    25d8:	78a0      	ldrb	r0, [r4, #2]
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <_tc_timer_set_irq+0x38>)
    25dc:	4798      	blx	r3
    25de:	bd10      	pop	{r4, pc}
    25e0:	0000237d 	.word	0x0000237d
    25e4:	00003504 	.word	0x00003504
    25e8:	0000136d 	.word	0x0000136d
    25ec:	2000005c 	.word	0x2000005c
    25f0:	0000166d 	.word	0x0000166d

000025f4 <_pwm_init>:
{
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	4606      	mov	r6, r0
    25f8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    25fa:	4608      	mov	r0, r1
    25fc:	4b3f      	ldr	r3, [pc, #252]	; (26fc <_pwm_init+0x108>)
    25fe:	4798      	blx	r3
    2600:	4605      	mov	r5, r0
	device->hw = hw;
    2602:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2604:	6923      	ldr	r3, [r4, #16]
    2606:	f013 0f01 	tst.w	r3, #1
    260a:	d1fb      	bne.n	2604 <_pwm_init+0x10>
    260c:	6923      	ldr	r3, [r4, #16]
    260e:	f013 0f03 	tst.w	r3, #3
    2612:	d1fb      	bne.n	260c <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2614:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2616:	f013 0f02 	tst.w	r3, #2
    261a:	d165      	bne.n	26e8 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    261c:	6923      	ldr	r3, [r4, #16]
    261e:	f013 0f01 	tst.w	r3, #1
    2622:	d1fb      	bne.n	261c <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2624:	6823      	ldr	r3, [r4, #0]
    2626:	f043 0301 	orr.w	r3, r3, #1
    262a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    262c:	6923      	ldr	r3, [r4, #16]
    262e:	f013 0f01 	tst.w	r3, #1
    2632:	d1fb      	bne.n	262c <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2634:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2638:	4a31      	ldr	r2, [pc, #196]	; (2700 <_pwm_init+0x10c>)
    263a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    263e:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2640:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2642:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2644:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2646:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2648:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    264a:	2203      	movs	r2, #3
    264c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    264e:	685b      	ldr	r3, [r3, #4]
    2650:	f003 030c 	and.w	r3, r3, #12
    2654:	2b08      	cmp	r3, #8
    2656:	d03d      	beq.n	26d4 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2658:	2b00      	cmp	r3, #0
    265a:	d148      	bne.n	26ee <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    265c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2660:	4a27      	ldr	r2, [pc, #156]	; (2700 <_pwm_init+0x10c>)
    2662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2666:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2668:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    266a:	8a1b      	ldrh	r3, [r3, #16]
    266c:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    266e:	4631      	mov	r1, r6
    2670:	4620      	mov	r0, r4
    2672:	4b24      	ldr	r3, [pc, #144]	; (2704 <_pwm_init+0x110>)
    2674:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2676:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    267a:	4a21      	ldr	r2, [pc, #132]	; (2700 <_pwm_init+0x10c>)
    267c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2680:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2684:	2b00      	cmp	r3, #0
    2686:	db35      	blt.n	26f4 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2688:	095a      	lsrs	r2, r3, #5
    268a:	f003 031f 	and.w	r3, r3, #31
    268e:	2101      	movs	r1, #1
    2690:	fa01 f303 	lsl.w	r3, r1, r3
    2694:	3220      	adds	r2, #32
    2696:	491c      	ldr	r1, [pc, #112]	; (2708 <_pwm_init+0x114>)
    2698:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    269c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26a0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    26a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    26a8:	4b15      	ldr	r3, [pc, #84]	; (2700 <_pwm_init+0x10c>)
    26aa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    26ae:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    26b2:	2b00      	cmp	r3, #0
    26b4:	db20      	blt.n	26f8 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26b6:	0959      	lsrs	r1, r3, #5
    26b8:	f003 031f 	and.w	r3, r3, #31
    26bc:	2201      	movs	r2, #1
    26be:	fa02 f303 	lsl.w	r3, r2, r3
    26c2:	4a11      	ldr	r2, [pc, #68]	; (2708 <_pwm_init+0x114>)
    26c4:	f101 0060 	add.w	r0, r1, #96	; 0x60
    26c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    26d0:	2000      	movs	r0, #0
    26d2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    26d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26d8:	4a09      	ldr	r2, [pc, #36]	; (2700 <_pwm_init+0x10c>)
    26da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26de:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    26e0:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    26e2:	691b      	ldr	r3, [r3, #16]
    26e4:	6223      	str	r3, [r4, #32]
    26e6:	e7c2      	b.n	266e <_pwm_init+0x7a>
		return ERR_DENIED;
    26e8:	f06f 0010 	mvn.w	r0, #16
    26ec:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    26ee:	f04f 30ff 	mov.w	r0, #4294967295
    26f2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    26f4:	2000      	movs	r0, #0
    26f6:	bd70      	pop	{r4, r5, r6, pc}
    26f8:	2000      	movs	r0, #0
}
    26fa:	bd70      	pop	{r4, r5, r6, pc}
    26fc:	0000237d 	.word	0x0000237d
    2700:	2000005c 	.word	0x2000005c
    2704:	00002319 	.word	0x00002319
    2708:	e000e100 	.word	0xe000e100

0000270c <_tc_get_timer>:
}
    270c:	4800      	ldr	r0, [pc, #0]	; (2710 <_tc_get_timer+0x4>)
    270e:	4770      	bx	lr
    2710:	200000d4 	.word	0x200000d4

00002714 <_tc_get_pwm>:
}
    2714:	2000      	movs	r0, #0
    2716:	4770      	bx	lr

00002718 <TC0_Handler>:
{
    2718:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <TC0_Handler+0xc>)
    271c:	6818      	ldr	r0, [r3, #0]
    271e:	4b02      	ldr	r3, [pc, #8]	; (2728 <TC0_Handler+0x10>)
    2720:	4798      	blx	r3
    2722:	bd08      	pop	{r3, pc}
    2724:	200006f8 	.word	0x200006f8
    2728:	000022e9 	.word	0x000022e9

0000272c <TC1_Handler>:
{
    272c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <TC1_Handler+0xc>)
    2730:	6858      	ldr	r0, [r3, #4]
    2732:	4b02      	ldr	r3, [pc, #8]	; (273c <TC1_Handler+0x10>)
    2734:	4798      	blx	r3
    2736:	bd08      	pop	{r3, pc}
    2738:	200006f8 	.word	0x200006f8
    273c:	000022e9 	.word	0x000022e9

00002740 <TC2_Handler>:
{
    2740:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    2742:	4b02      	ldr	r3, [pc, #8]	; (274c <TC2_Handler+0xc>)
    2744:	6898      	ldr	r0, [r3, #8]
    2746:	4b02      	ldr	r3, [pc, #8]	; (2750 <TC2_Handler+0x10>)
    2748:	4798      	blx	r3
    274a:	bd08      	pop	{r3, pc}
    274c:	200006f8 	.word	0x200006f8
    2750:	000022e9 	.word	0x000022e9

00002754 <TC3_Handler>:
{
    2754:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    2756:	4b02      	ldr	r3, [pc, #8]	; (2760 <TC3_Handler+0xc>)
    2758:	68d8      	ldr	r0, [r3, #12]
    275a:	4b02      	ldr	r3, [pc, #8]	; (2764 <TC3_Handler+0x10>)
    275c:	4798      	blx	r3
    275e:	bd08      	pop	{r3, pc}
    2760:	200006f8 	.word	0x200006f8
    2764:	000022d1 	.word	0x000022d1

00002768 <TC4_Handler>:
{
    2768:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    276a:	4b02      	ldr	r3, [pc, #8]	; (2774 <TC4_Handler+0xc>)
    276c:	6918      	ldr	r0, [r3, #16]
    276e:	4b02      	ldr	r3, [pc, #8]	; (2778 <TC4_Handler+0x10>)
    2770:	4798      	blx	r3
    2772:	bd08      	pop	{r3, pc}
    2774:	200006f8 	.word	0x200006f8
    2778:	000022d1 	.word	0x000022d1

0000277c <TC5_Handler>:
{
    277c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    277e:	4b02      	ldr	r3, [pc, #8]	; (2788 <TC5_Handler+0xc>)
    2780:	6958      	ldr	r0, [r3, #20]
    2782:	4b02      	ldr	r3, [pc, #8]	; (278c <TC5_Handler+0x10>)
    2784:	4798      	blx	r3
    2786:	bd08      	pop	{r3, pc}
    2788:	200006f8 	.word	0x200006f8
    278c:	000022d1 	.word	0x000022d1

00002790 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2790:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2792:	4604      	mov	r4, r0
    2794:	b330      	cbz	r0, 27e4 <_wdt_init+0x54>
    2796:	6800      	ldr	r0, [r0, #0]
    2798:	3000      	adds	r0, #0
    279a:	bf18      	it	ne
    279c:	2001      	movne	r0, #1
    279e:	225a      	movs	r2, #90	; 0x5a
    27a0:	4914      	ldr	r1, [pc, #80]	; (27f4 <_wdt_init+0x64>)
    27a2:	4b15      	ldr	r3, [pc, #84]	; (27f8 <_wdt_init+0x68>)
    27a4:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    27a6:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    27a8:	689a      	ldr	r2, [r3, #8]
    27aa:	f012 0f0e 	tst.w	r2, #14
    27ae:	d1fb      	bne.n	27a8 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    27b0:	781a      	ldrb	r2, [r3, #0]
    27b2:	09d2      	lsrs	r2, r2, #7
    27b4:	d118      	bne.n	27e8 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    27b6:	689a      	ldr	r2, [r3, #8]
    27b8:	f012 0f0e 	tst.w	r2, #14
    27bc:	d1fb      	bne.n	27b6 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    27be:	781a      	ldrb	r2, [r3, #0]
    27c0:	f012 0f02 	tst.w	r2, #2
    27c4:	d113      	bne.n	27ee <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    27c6:	689a      	ldr	r2, [r3, #8]
    27c8:	f012 0f0e 	tst.w	r2, #14
    27cc:	d1fb      	bne.n	27c6 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    27ce:	781a      	ldrb	r2, [r3, #0]
    27d0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    27d4:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    27d6:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    27d8:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    27da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    27de:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    27e0:	2000      	movs	r0, #0
    27e2:	bd10      	pop	{r4, pc}
    27e4:	2000      	movs	r0, #0
    27e6:	e7da      	b.n	279e <_wdt_init+0xe>
		return ERR_DENIED;
    27e8:	f06f 0010 	mvn.w	r0, #16
    27ec:	bd10      	pop	{r4, pc}
    27ee:	f06f 0010 	mvn.w	r0, #16
}
    27f2:	bd10      	pop	{r4, pc}
    27f4:	00003518 	.word	0x00003518
    27f8:	0000136d 	.word	0x0000136d

000027fc <main>:

/* Mile Stone 1 */
/* Started working in Dev Branch */

int main(void)
{
    27fc:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    27fe:	4b08      	ldr	r3, [pc, #32]	; (2820 <main+0x24>)
    2800:	4798      	blx	r3
	
	/* Initialize the HL7618RD modem power signals */
	modemPowerInit();
    2802:	4b08      	ldr	r3, [pc, #32]	; (2824 <main+0x28>)
    2804:	4798      	blx	r3
	/* Initiate the HTTP connection to server */
	//mdmParam_InitiateConnection();
	
	while (1)
	{
		mdmParser_SendCommandToModem(CMD_AT);
    2806:	4e08      	ldr	r6, [pc, #32]	; (2828 <main+0x2c>)
		delay_ms(2000);
    2808:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    280c:	4c07      	ldr	r4, [pc, #28]	; (282c <main+0x30>)
		mdmParser_SendCommandToModem(CMD_AT);
    280e:	2000      	movs	r0, #0
    2810:	47b0      	blx	r6
		delay_ms(2000);
    2812:	4628      	mov	r0, r5
    2814:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
    2816:	4b06      	ldr	r3, [pc, #24]	; (2830 <main+0x34>)
    2818:	4798      	blx	r3
		delay_ms(2000);
    281a:	4628      	mov	r0, r5
    281c:	47a0      	blx	r4
    281e:	e7f6      	b.n	280e <main+0x12>
    2820:	000007e5 	.word	0x000007e5
    2824:	00000639 	.word	0x00000639
    2828:	000002d5 	.word	0x000002d5
    282c:	00001115 	.word	0x00001115
    2830:	00000301 	.word	0x00000301

00002834 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2834:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    2836:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2838:	689a      	ldr	r2, [r3, #8]
    283a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    283c:	689a      	ldr	r2, [r3, #8]
    283e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2840:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2842:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2844:	6803      	ldr	r3, [r0, #0]
    2846:	3301      	adds	r3, #1
    2848:	6003      	str	r3, [r0, #0]
    284a:	4770      	bx	lr

0000284c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    284c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    284e:	6842      	ldr	r2, [r0, #4]
    2850:	6881      	ldr	r1, [r0, #8]
    2852:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2854:	6882      	ldr	r2, [r0, #8]
    2856:	6841      	ldr	r1, [r0, #4]
    2858:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    285a:	685a      	ldr	r2, [r3, #4]
    285c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    285e:	bf04      	itt	eq
    2860:	6882      	ldreq	r2, [r0, #8]
    2862:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2864:	2200      	movs	r2, #0
    2866:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    2868:	681a      	ldr	r2, [r3, #0]
    286a:	3a01      	subs	r2, #1
    286c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    286e:	6818      	ldr	r0, [r3, #0]
}
    2870:	4770      	bx	lr
	...

00002880 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2880:	4b07      	ldr	r3, [pc, #28]	; (28a0 <pxCurrentTCBConst2>)
    2882:	6819      	ldr	r1, [r3, #0]
    2884:	6808      	ldr	r0, [r1, #0]
    2886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    288a:	f380 8809 	msr	PSP, r0
    288e:	f3bf 8f6f 	isb	sy
    2892:	f04f 0000 	mov.w	r0, #0
    2896:	f380 8811 	msr	BASEPRI, r0
    289a:	4770      	bx	lr
    289c:	f3af 8000 	nop.w

000028a0 <pxCurrentTCBConst2>:
    28a0:	200007a8 	.word	0x200007a8
	...

000028b0 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    28b0:	f3ef 8009 	mrs	r0, PSP
    28b4:	f3bf 8f6f 	isb	sy
    28b8:	4b15      	ldr	r3, [pc, #84]	; (2910 <pxCurrentTCBConst>)
    28ba:	681a      	ldr	r2, [r3, #0]
    28bc:	f01e 0f10 	tst.w	lr, #16
    28c0:	bf08      	it	eq
    28c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    28c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ca:	6010      	str	r0, [r2, #0]
    28cc:	e92d 0009 	stmdb	sp!, {r0, r3}
    28d0:	f04f 0080 	mov.w	r0, #128	; 0x80
    28d4:	f380 8811 	msr	BASEPRI, r0
    28d8:	f3bf 8f4f 	dsb	sy
    28dc:	f3bf 8f6f 	isb	sy
    28e0:	f000 f8da 	bl	2a98 <vTaskSwitchContext>
    28e4:	f04f 0000 	mov.w	r0, #0
    28e8:	f380 8811 	msr	BASEPRI, r0
    28ec:	bc09      	pop	{r0, r3}
    28ee:	6819      	ldr	r1, [r3, #0]
    28f0:	6808      	ldr	r0, [r1, #0]
    28f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28f6:	f01e 0f10 	tst.w	lr, #16
    28fa:	bf08      	it	eq
    28fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2900:	f380 8809 	msr	PSP, r0
    2904:	f3bf 8f6f 	isb	sy
    2908:	4770      	bx	lr
    290a:	bf00      	nop
    290c:	f3af 8000 	nop.w

00002910 <pxCurrentTCBConst>:
    2910:	200007a8 	.word	0x200007a8

00002914 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    2914:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2916:	f04f 0380 	mov.w	r3, #128	; 0x80
    291a:	f383 8811 	msr	BASEPRI, r3
    291e:	f3bf 8f6f 	isb	sy
    2922:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    2926:	4b05      	ldr	r3, [pc, #20]	; (293c <SysTick_Handler+0x28>)
    2928:	4798      	blx	r3
    292a:	b118      	cbz	r0, 2934 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    292c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2930:	4b03      	ldr	r3, [pc, #12]	; (2940 <SysTick_Handler+0x2c>)
    2932:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2934:	2300      	movs	r3, #0
    2936:	f383 8811 	msr	BASEPRI, r3
    293a:	bd08      	pop	{r3, pc}
    293c:	00002971 	.word	0x00002971
    2940:	e000ed04 	.word	0xe000ed04

00002944 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2944:	4b09      	ldr	r3, [pc, #36]	; (296c <prvResetNextTaskUnblockTime+0x28>)
    2946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	b143      	cbz	r3, 2960 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    294e:	4b07      	ldr	r3, [pc, #28]	; (296c <prvResetNextTaskUnblockTime+0x28>)
    2950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2954:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2956:	68d2      	ldr	r2, [r2, #12]
    2958:	6852      	ldr	r2, [r2, #4]
    295a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    295e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2960:	f04f 32ff 	mov.w	r2, #4294967295
    2964:	4b01      	ldr	r3, [pc, #4]	; (296c <prvResetNextTaskUnblockTime+0x28>)
    2966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    296a:	4770      	bx	lr
    296c:	20000710 	.word	0x20000710

00002970 <xTaskIncrementTick>:
{
    2970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2974:	4b44      	ldr	r3, [pc, #272]	; (2a88 <xTaskIncrementTick+0x118>)
    2976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    297a:	2b00      	cmp	r3, #0
    297c:	d173      	bne.n	2a66 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    297e:	4b42      	ldr	r3, [pc, #264]	; (2a88 <xTaskIncrementTick+0x118>)
    2980:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    2984:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    2986:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    298a:	b9e6      	cbnz	r6, 29c6 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    298c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	b143      	cbz	r3, 29a6 <xTaskIncrementTick+0x36>
	__asm volatile("	mov %0, %1												\n"
    2994:	f04f 0380 	mov.w	r3, #128	; 0x80
    2998:	f383 8811 	msr	BASEPRI, r3
    299c:	f3bf 8f6f 	isb	sy
    29a0:	f3bf 8f4f 	dsb	sy
    29a4:	e7fe      	b.n	29a4 <xTaskIncrementTick+0x34>
    29a6:	4b38      	ldr	r3, [pc, #224]	; (2a88 <xTaskIncrementTick+0x118>)
    29a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    29ac:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    29b0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    29b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    29b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    29bc:	3201      	adds	r2, #1
    29be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    29c2:	4b32      	ldr	r3, [pc, #200]	; (2a8c <xTaskIncrementTick+0x11c>)
    29c4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    29c6:	4b30      	ldr	r3, [pc, #192]	; (2a88 <xTaskIncrementTick+0x118>)
    29c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    29cc:	429e      	cmp	r6, r3
    29ce:	d20d      	bcs.n	29ec <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    29d0:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    29d2:	4b2d      	ldr	r3, [pc, #180]	; (2a88 <xTaskIncrementTick+0x118>)
    29d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    29d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    29da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    29de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    29e4:	2b02      	cmp	r3, #2
    29e6:	bf28      	it	cs
    29e8:	2401      	movcs	r4, #1
    29ea:	e043      	b.n	2a74 <xTaskIncrementTick+0x104>
    29ec:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    29ee:	4d26      	ldr	r5, [pc, #152]	; (2a88 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    29f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2a94 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    29f4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    29f8:	e021      	b.n	2a3e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    29fa:	f04f 32ff 	mov.w	r2, #4294967295
    29fe:	4b22      	ldr	r3, [pc, #136]	; (2a88 <xTaskIncrementTick+0x118>)
    2a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    2a04:	e7e5      	b.n	29d2 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    2a06:	4a20      	ldr	r2, [pc, #128]	; (2a88 <xTaskIncrementTick+0x118>)
    2a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    2a0c:	e7e1      	b.n	29d2 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    2a0e:	f107 0018 	add.w	r0, r7, #24
    2a12:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    2a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2a16:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2a1a:	4298      	cmp	r0, r3
    2a1c:	bf88      	it	hi
    2a1e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    2a22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2a26:	4649      	mov	r1, r9
    2a28:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    2a2c:	4b18      	ldr	r3, [pc, #96]	; (2a90 <xTaskIncrementTick+0x120>)
    2a2e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2a30:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    2a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    2a38:	429a      	cmp	r2, r3
    2a3a:	bf28      	it	cs
    2a3c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2a3e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d0d8      	beq.n	29fa <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2a48:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2a4c:	68db      	ldr	r3, [r3, #12]
    2a4e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2a50:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    2a52:	429e      	cmp	r6, r3
    2a54:	d3d7      	bcc.n	2a06 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2a56:	f107 0904 	add.w	r9, r7, #4
    2a5a:	4648      	mov	r0, r9
    2a5c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    2a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a60:	2b00      	cmp	r3, #0
    2a62:	d1d4      	bne.n	2a0e <xTaskIncrementTick+0x9e>
    2a64:	e7d6      	b.n	2a14 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    2a66:	4a08      	ldr	r2, [pc, #32]	; (2a88 <xTaskIncrementTick+0x118>)
    2a68:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    2a6c:	3301      	adds	r3, #1
    2a6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    2a72:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2a74:	4b04      	ldr	r3, [pc, #16]	; (2a88 <xTaskIncrementTick+0x118>)
    2a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    2a7a:	2b00      	cmp	r3, #0
}
    2a7c:	bf0c      	ite	eq
    2a7e:	4620      	moveq	r0, r4
    2a80:	2001      	movne	r0, #1
    2a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a86:	bf00      	nop
    2a88:	20000710 	.word	0x20000710
    2a8c:	00002945 	.word	0x00002945
    2a90:	00002835 	.word	0x00002835
    2a94:	0000284d 	.word	0x0000284d

00002a98 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2a98:	4b25      	ldr	r3, [pc, #148]	; (2b30 <vTaskSwitchContext+0x98>)
    2a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2a9e:	b9fb      	cbnz	r3, 2ae0 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    2aa0:	4a23      	ldr	r2, [pc, #140]	; (2b30 <vTaskSwitchContext+0x98>)
    2aa2:	2300      	movs	r3, #0
    2aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2aa8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    2aac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2ab0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2ab4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2ab6:	b9c2      	cbnz	r2, 2aea <vTaskSwitchContext+0x52>
    2ab8:	b14b      	cbz	r3, 2ace <vTaskSwitchContext+0x36>
    2aba:	491d      	ldr	r1, [pc, #116]	; (2b30 <vTaskSwitchContext+0x98>)
    2abc:	3b01      	subs	r3, #1
    2abe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2ac2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2ac6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2ac8:	b97a      	cbnz	r2, 2aea <vTaskSwitchContext+0x52>
    2aca:	2b00      	cmp	r3, #0
    2acc:	d1f6      	bne.n	2abc <vTaskSwitchContext+0x24>
    2ace:	f04f 0380 	mov.w	r3, #128	; 0x80
    2ad2:	f383 8811 	msr	BASEPRI, r3
    2ad6:	f3bf 8f6f 	isb	sy
    2ada:	f3bf 8f4f 	dsb	sy
    2ade:	e7fe      	b.n	2ade <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    2ae0:	2201      	movs	r2, #1
    2ae2:	4b13      	ldr	r3, [pc, #76]	; (2b30 <vTaskSwitchContext+0x98>)
    2ae4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2ae8:	4770      	bx	lr
{
    2aea:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2aec:	4a10      	ldr	r2, [pc, #64]	; (2b30 <vTaskSwitchContext+0x98>)
    2aee:	0099      	lsls	r1, r3, #2
    2af0:	18c8      	adds	r0, r1, r3
    2af2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2af6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2af8:	6864      	ldr	r4, [r4, #4]
    2afa:	62c4      	str	r4, [r0, #44]	; 0x2c
    2afc:	4419      	add	r1, r3
    2afe:	4602      	mov	r2, r0
    2b00:	3230      	adds	r2, #48	; 0x30
    2b02:	4294      	cmp	r4, r2
    2b04:	d00d      	beq.n	2b22 <vTaskSwitchContext+0x8a>
    2b06:	4a0a      	ldr	r2, [pc, #40]	; (2b30 <vTaskSwitchContext+0x98>)
    2b08:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2b0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2b10:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2b12:	68c9      	ldr	r1, [r1, #12]
    2b14:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    2b18:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    2b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b20:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2b22:	6860      	ldr	r0, [r4, #4]
    2b24:	4a02      	ldr	r2, [pc, #8]	; (2b30 <vTaskSwitchContext+0x98>)
    2b26:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2b2a:	62d0      	str	r0, [r2, #44]	; 0x2c
    2b2c:	e7eb      	b.n	2b06 <vTaskSwitchContext+0x6e>
    2b2e:	bf00      	nop
    2b30:	20000710 	.word	0x20000710

00002b34 <__libc_init_array>:
    2b34:	b570      	push	{r4, r5, r6, lr}
    2b36:	4e0d      	ldr	r6, [pc, #52]	; (2b6c <__libc_init_array+0x38>)
    2b38:	4c0d      	ldr	r4, [pc, #52]	; (2b70 <__libc_init_array+0x3c>)
    2b3a:	1ba4      	subs	r4, r4, r6
    2b3c:	10a4      	asrs	r4, r4, #2
    2b3e:	2500      	movs	r5, #0
    2b40:	42a5      	cmp	r5, r4
    2b42:	d109      	bne.n	2b58 <__libc_init_array+0x24>
    2b44:	4e0b      	ldr	r6, [pc, #44]	; (2b74 <__libc_init_array+0x40>)
    2b46:	4c0c      	ldr	r4, [pc, #48]	; (2b78 <__libc_init_array+0x44>)
    2b48:	f000 fcf2 	bl	3530 <_init>
    2b4c:	1ba4      	subs	r4, r4, r6
    2b4e:	10a4      	asrs	r4, r4, #2
    2b50:	2500      	movs	r5, #0
    2b52:	42a5      	cmp	r5, r4
    2b54:	d105      	bne.n	2b62 <__libc_init_array+0x2e>
    2b56:	bd70      	pop	{r4, r5, r6, pc}
    2b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b5c:	4798      	blx	r3
    2b5e:	3501      	adds	r5, #1
    2b60:	e7ee      	b.n	2b40 <__libc_init_array+0xc>
    2b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b66:	4798      	blx	r3
    2b68:	3501      	adds	r5, #1
    2b6a:	e7f2      	b.n	2b52 <__libc_init_array+0x1e>
    2b6c:	0000353c 	.word	0x0000353c
    2b70:	0000353c 	.word	0x0000353c
    2b74:	0000353c 	.word	0x0000353c
    2b78:	00003540 	.word	0x00003540

00002b7c <strcpy>:
    2b7c:	4603      	mov	r3, r0
    2b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2b82:	f803 2b01 	strb.w	r2, [r3], #1
    2b86:	2a00      	cmp	r2, #0
    2b88:	d1f9      	bne.n	2b7e <strcpy+0x2>
    2b8a:	4770      	bx	lr

00002b8c <strncmp>:
    2b8c:	b510      	push	{r4, lr}
    2b8e:	b16a      	cbz	r2, 2bac <strncmp+0x20>
    2b90:	3901      	subs	r1, #1
    2b92:	1884      	adds	r4, r0, r2
    2b94:	f810 3b01 	ldrb.w	r3, [r0], #1
    2b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2b9c:	4293      	cmp	r3, r2
    2b9e:	d103      	bne.n	2ba8 <strncmp+0x1c>
    2ba0:	42a0      	cmp	r0, r4
    2ba2:	d001      	beq.n	2ba8 <strncmp+0x1c>
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d1f5      	bne.n	2b94 <strncmp+0x8>
    2ba8:	1a98      	subs	r0, r3, r2
    2baa:	bd10      	pop	{r4, pc}
    2bac:	4610      	mov	r0, r2
    2bae:	bd10      	pop	{r4, pc}

00002bb0 <ModemCmdData>:
    2bb0:	0000 0000 2e48 0000 0203 0000 02d1 0000     ....H...........
    2bc0:	000b 0000 0001 0000 2e4c 0000 0f08 0000     ........L.......
    2bd0:	02d1 0000 001f 0000 0002 0000 2e58 0000     ............X...
    2be0:	030c 0000 02d1 0000 0014 0000 0003 0000     ................
    2bf0:	2e68 0000 0608 0000 02d1 0000 001d 0000     h...............
    2c00:	0004 0000 2e74 0000 0805 0000 02d1 0000     ....t...........
    2c10:	001e 0000 0005 0000 2e80 0000 0b0a 0000     ................
    2c20:	02d1 0000 001c 0000 0006 0000 2e8c 0000     ................
    2c30:	0e0a 0000 02d1 0000 0026 0000 0007 0000     ........&.......
    2c40:	2e98 0000 0205 0000 02d1 0000 0004 0000     ................
    2c50:	0008 0000 2d68 0000 0000 0000 02d1 0000     ....h-..........
	...
    2d40:	7553 6363 7365 6673 6c75 796c 7020 7261     Successfully par
    2d50:	6573 2064 6874 2065 6f63 6d6d 6e61 2064     sed the command 
    2d60:	7473 6972 676e 0a0d 0000 0000 7553 6363     string......Succ
    2d70:	7365 6673 6c75 796c 7520 6470 7461 6465     essfully updated
    2d80:	7420 6568 6320 646d 7220 7365 6f70 736e      the cmd respons
    2d90:	2065 6164 6174 7420 206f 7562 6666 7265     e data to buffer
    2da0:	0a0d 0000 7553 6363 7365 6673 6c75 796c     ....Successfully
    2db0:	5220 6365 6965 6576 2064 6f6d 6564 206d      Received modem 
    2dc0:	6572 7073 6e6f 6573 6420 7461 0d61 000a     response data...
    2dd0:	6146 6c69 6465 7420 206f 6576 6972 7966     Failed to verify
    2de0:	7420 6568 6320 6d6f 616d 646e 7320 7274      the command str
    2df0:	6e69 0d67 000a 0000 6552 6461 6620 6f72     ing.....Read fro
    2e00:	206d 6f6d 6564 206d 6f63 746e 6f72 6c6c     m modem controll
    2e10:	7265 6920 2073 6166 6c69 6465 0a0d 0000     er is failed....
    2e20:	6146 6c69 6465 7420 206f 6552 6563 7669     Failed to Receiv
    2e30:	2065 6f6d 6564 206d 6572 7073 6e6f 6573     e modem response
    2e40:	6420 7461 0d61 000a 5441 000d 5441 432b      data...AT..AT+C
    2e50:	5347 0d4e 0000 0000 5441 572b 4143 5252     GSN.....AT+WCARR
    2e60:	4549 0d52 0000 0000 5441 492b 5250 0d3f     IER.....AT+IPR?.
    2e70:	0000 0000 5441 432b 4950 3f4e 000d 0000     ....AT+CPIN?....
    2e80:	5441 432b 5247 4745 0d3f 0000 5441 4b2b     AT+CGREG?...AT+K
    2e90:	5347 3d4e 0d33 0000 5441 3145 000d 0000     GSN=3...ATE1....
    2ea0:	4553 4352 4d4f 2033 6f6e 2074 6e69 7469     SERCOM3 not init
    2eb0:	6169 696c 657a 0d64 000a 0000 4f4d 4544     ialized.....MODE
    2ec0:	204d 4144 4154 5520 5241 2054 5328 5245     M DATA UART (SER
    2ed0:	4f43 334d 2029 6e69 7469 6169 696c 657a     COM3) initialize
    2ee0:	0d64 000a 6f4d 6564 206d 6144 6174 5420     d...Modem Data T
    2ef0:	2078 6144 6174 5220 6765 4520 706d 7974     x Data Reg Empty
    2f00:	4320 6c61 426c 6361 0d6b 000a 6f4d 6564      CallBack...Mode
    2f10:	206d 6144 6174 5420 2078 7962 6574 4320     m Data Tx byte C
    2f20:	6d6f 6c70 7465 2065 6143 6c6c 6162 6b63     omplete Callback
    2f30:	0a0d 0000 6f50 6577 2072 6e4f 5720 6961     ....Power On Wai
    2f40:	2074 6954 656d 2072 7845 6970 6572 0d64     t Timer Expired.
    2f50:	000a 0000 6f4d 6564 206d 6f50 6577 2072     ....Modem Power 
    2f60:	6e4f 6920 696e 6974 6c61 7a69 7461 6f69     On initializatio
    2f70:	206e 6f43 706d 656c 6574 0d64 000a 0000     n Completed.....
    2f80:	6f50 6577 4f72 576e 6961 5474 6d69 7265     PowerOnWaitTimer
    2f90:	0000 0000 6f4d 6564 206d 7546 6c6c 2079     ....Modem Fully 
    2fa0:	704f 7265 7461 6f69 616e 2e6c 0a0d 0000     Operational.....
    2fb0:	7854 7320 7265 6169 206c 6544 7562 2067     Tx serial Debug 
    2fc0:	6f44 656e 0a0d 0000 7852 4420 6e6f 0d65     Done....Rx Done.
    2fd0:	000a 0000 2e2e 682f 6c61 692f 636e 756c     ....../hal/inclu
    2fe0:	6564 682f 6c61 775f 7464 682e 0000 0000     de/hal_wdt.h....
    2ff0:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    3000:	5f63 7973 636e 632e 0000 0000 2e2e 682f     c_sync.c....../h
    3010:	6c61 732f 6372 682f 6c61 615f 6364 735f     al/src/hal_adc_s
    3020:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    3030:	6372 682f 6c61 645f 6361 735f 6e79 2e63     rc/hal_dac_sync.
    3040:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
    3050:	6c61 665f 616c 6873 632e 0000 2e2e 682f     al_flash.c..../h
    3060:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    3070:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    3080:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
    3090:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    30a0:	736c 6c5f 7369 2e74 0063 0000 2e2e 682f     ls_list.c...../h
    30b0:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    30c0:	736c 725f 6e69 6267 6675 6566 2e72 0063     ls_ringbuffer.c.
    30d0:	2e2e 682f 6c70 612f 2f63 7068 5f6c 6361     ../hpl/ac/hpl_ac
    30e0:	632e 0000                                   .c..

000030e4 <_adcs>:
    30e4:	0000 00c0 0002 0083 1900 0000 0000 0000     ................
    30f4:	0000 0000 0001 0001 0000 0000 0000 0000     ................
	...
    3110:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    3120:	6364 632e 0000 0000 2e2e 682f 6c70 642f     dc.c....../hpl/d
    3130:	6361 682f 6c70 645f 6361 632e 0000 0000     ac/hpl_dac.c....

00003140 <_cfgs>:
	...

00003240 <user_mux_confs>:
	...

00003284 <channel_confs>:
	...

000032c4 <interrupt_cfg>:
	...
    3344:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    3354:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    3364:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    3374:	0000 4300 0400 4300                         ...C...C

0000337c <_usarts>:
    337c:	0003 0000 0004 4020 0000 0003 0002 0070     ...... @......p.
    338c:	f62b 0000 0000 0000 0004 0000 0184 4030     +.............0@
    339c:	0300 0003 0002 0070 ff2e 0000 0000 0000     ......p.........
    33ac:	0005 0000 0004 4030 0000 0003 0002 0070     ......0@......p.
    33bc:	f62b 0000 0000 0000                         +.......

000033c4 <_i2cms>:
	...

000033dc <sercomspi_regs>:
	...
    33f0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    3400:	5f6c 6573 6372 6d6f 632e 0000 6000 4101     l_sercom.c...`.A
    3410:	8000 4101 0c00 4200 1000 4200 1000 4300     ...A...B...B...C

00003420 <_tccs>:
    3420:	0000 0000 0300 0000 0000 0000 0000 0000     ................
    3430:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    3440:	0000 0000 0001 0000 0300 0000 0000 0000     ................
    3450:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    3468:	0002 0000 0300 0000 0000 0000 0000 0000     ................
    3478:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    3488:	0000 0000 0003 0000 0300 0000 0000 0000     ................
    3498:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    34b0:	0004 0000 0300 0000 0000 0000 0000 0000     ................
    34c0:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    34d0:	0000 0000 2e2e 682f 6c70 742f 6363 682f     ....../hpl/tcc/h
    34e0:	6c70 745f 6363 632e 0000 0000 3800 4000     pl_tcc.c.....8.@
    34f0:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    3500:	1800 4200 2e2e 682f 6c70 742f 2f63 7068     ...B../hpl/tc/hp
    3510:	5f6c 6374 632e 0000 2e2e 682f 6c70 772f     l_tc.c..../hpl/w
    3520:	7464 682f 6c70 775f 7464 632e 0000 0000     dt/hpl_wdt.c....

00003530 <_init>:
    3530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3532:	bf00      	nop
    3534:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3536:	bc08      	pop	{r3}
    3538:	469e      	mov	lr, r3
    353a:	4770      	bx	lr

0000353c <__init_array_start>:
    353c:	00000289 	.word	0x00000289

00003540 <_fini>:
    3540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3542:	bf00      	nop
    3544:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3546:	bc08      	pop	{r3}
    3548:	469e      	mov	lr, r3
    354a:	4770      	bx	lr

0000354c <__fini_array_start>:
    354c:	00000265 	.word	0x00000265
