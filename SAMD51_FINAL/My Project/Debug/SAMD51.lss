
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ce4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000017c  20000000  00004ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002017c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002017c  2**0
                  CONTENTS
  4 .bss          00001404  20000180  00004e70  00020180  2**4
                  ALLOC
  5 .stack        00010004  20001584  00006274  00020180  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201aa  2**0
                  CONTENTS, READONLY
  8 .debug_info   000507dd  00000000  00000000  00020203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000079d9  00000000  00000000  000709e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017ec9  00000000  00000000  000783b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001870  00000000  00000000  00090282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001da0  00000000  00000000  00091af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00016621  00000000  00000000  00093892  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000277b1  00000000  00000000  000a9eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001064eb  00000000  00000000  000d1664  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000041c4  00000000  00000000  001d7b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	88 15 01 20 81 0d 00 00 7d 0d 00 00 7d 0d 00 00     ... ....}...}...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 00 00 00 00     }...}...}.......
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	31 2e 00 00 7d 0d 00 00 00 00 00 00 61 2e 00 00     1...}.......a...
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	c5 2e 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     ....}...}...}...
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      5c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      6c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      7c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      8c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      9c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      ac:	7d 0d 00 00 7d 0d 00 00 ed 20 00 00 01 21 00 00     }...}.... ...!..
      bc:	7d 1e 00 00 89 1e 00 00 95 1e 00 00 a1 1e 00 00     }...............
      cc:	ad 1e 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     ....}...}...}...
      dc:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
      ec:	7d 0d 00 00 00 00 00 00 f5 21 00 00 7d 0d 00 00     }........!..}...
      fc:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     10c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     11c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 69 06 00 00     }...}...}...i...
     12c:	ad 06 00 00 f9 06 00 00 7d 0d 00 00 7d 0d 00 00     ........}...}...
     13c:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     14c:	7d 0d 00 00 1d 0d 00 00 7d 0d 00 00 00 00 00 00     }.......}.......
	...
     180:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     190:	00 00 00 00 85 27 00 00 7d 0d 00 00 7d 0d 00 00     .....'..}...}...
     1a0:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     1b0:	99 27 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     .'..}...}...}...
     1c0:	7d 0d 00 00 ad 27 00 00 7d 0d 00 00 7d 0d 00 00     }....'..}...}...
     1d0:	7d 0d 00 00 c1 27 00 00 7d 0d 00 00 7d 0d 00 00     }....'..}...}...
     1e0:	d5 27 00 00 7d 0d 00 00 7d 0d 00 00 c9 2c 00 00     .'..}...}....,..
     1f0:	dd 2c 00 00 f1 2c 00 00 05 2d 00 00 19 2d 00 00     .,...,...-...-..
     200:	2d 2d 00 00 00 00 00 00 00 00 00 00 7d 0d 00 00     --..........}...
     210:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     220:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     230:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     240:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     250:	7d 0d 00 00 7d 0d 00 00 7d 0d 00 00 7d 0d 00 00     }...}...}...}...
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000180 	.word	0x20000180
     280:	00000000 	.word	0x00000000
     284:	00004ce4 	.word	0x00004ce4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004ce4 	.word	0x00004ce4
     2c4:	20000184 	.word	0x20000184
     2c8:	00004ce4 	.word	0x00004ce4
     2cc:	00000000 	.word	0x00000000

000002d0 <defaultFunctionPointer>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void defaultFunctionPointer(uint8_t* response, uint8_t length)
{
     2d0:	4770      	bx	lr
	...

000002d4 <mdmParser_solicitedCmdParser>:
{
     2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     2d8:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
     2dc:	460c      	mov	r4, r1
	MODEM_CMD_DATA cmdData = ModemCmdData[cmd];
     2de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     2e2:	4b21      	ldr	r3, [pc, #132]	; (368 <mdmParser_solicitedCmdParser+0x94>)
     2e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     2e8:	f8d0 9004 	ldr.w	r9, [r0, #4]
     2ec:	7a07      	ldrb	r7, [r0, #8]
     2ee:	7a45      	ldrb	r5, [r0, #9]
	readStatus = mdmCtrlr_ReadResponseFromModem(dataBuffer,cmdData.ResponseLength);
     2f0:	f890 8010 	ldrb.w	r8, [r0, #16]
     2f4:	4641      	mov	r1, r8
     2f6:	a801      	add	r0, sp, #4
     2f8:	4b1c      	ldr	r3, [pc, #112]	; (36c <mdmParser_solicitedCmdParser+0x98>)
     2fa:	4798      	blx	r3
	if(lastSendATCommand == CMD_AT_KHTTP_GET)
     2fc:	4b1c      	ldr	r3, [pc, #112]	; (370 <mdmParser_solicitedCmdParser+0x9c>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b17      	cmp	r3, #23
     302:	d022      	beq.n	34a <mdmParser_solicitedCmdParser+0x76>
     304:	4606      	mov	r6, r0
	if(readStatus != false)
     306:	b1c8      	cbz	r0, 33c <mdmParser_solicitedCmdParser+0x68>
		if(VERIFIED_EQUAL == strncmp(cmdData.AtString, dataBuffer, cmdData.CmdLength))
     308:	463a      	mov	r2, r7
     30a:	a901      	add	r1, sp, #4
     30c:	4648      	mov	r0, r9
     30e:	4b19      	ldr	r3, [pc, #100]	; (374 <mdmParser_solicitedCmdParser+0xa0>)
     310:	4798      	blx	r3
     312:	bb30      	cbnz	r0, 362 <mdmParser_solicitedCmdParser+0x8e>
			while(parseCnt < cmdData.validDataCnt)
     314:	b31d      	cbz	r5, 35e <mdmParser_solicitedCmdParser+0x8a>
     316:	1cb9      	adds	r1, r7, #2
     318:	b2c9      	uxtb	r1, r1
     31a:	1e4b      	subs	r3, r1, #1
     31c:	aa01      	add	r2, sp, #4
     31e:	4413      	add	r3, r2
     320:	1e62      	subs	r2, r4, #1
     322:	1e68      	subs	r0, r5, #1
     324:	fa51 f180 	uxtab	r1, r1, r0
     328:	a801      	add	r0, sp, #4
     32a:	4408      	add	r0, r1
				response[parseCnt] = dataBuffer[dataStartIndex + parseCnt];
     32c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     330:	f802 1f01 	strb.w	r1, [r2, #1]!
			while(parseCnt < cmdData.validDataCnt)
     334:	4283      	cmp	r3, r0
     336:	d1f9      	bne.n	32c <mdmParser_solicitedCmdParser+0x58>
			response[parseCnt] = '\0';
     338:	2300      	movs	r3, #0
     33a:	5563      	strb	r3, [r4, r5]
	mdmCtrlr_FlushRxBuffer();
     33c:	4b0e      	ldr	r3, [pc, #56]	; (378 <mdmParser_solicitedCmdParser+0xa4>)
     33e:	4798      	blx	r3
}
     340:	4630      	mov	r0, r6
     342:	f50d 7d31 	add.w	sp, sp, #708	; 0x2c4
     346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SerialDebugPrint(dataBuffer,cmdData.ResponseLength);
     34a:	4641      	mov	r1, r8
     34c:	a801      	add	r0, sp, #4
     34e:	4b0b      	ldr	r3, [pc, #44]	; (37c <mdmParser_solicitedCmdParser+0xa8>)
     350:	4798      	blx	r3
		delay_ms(4000);
     352:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
     356:	4b0a      	ldr	r3, [pc, #40]	; (380 <mdmParser_solicitedCmdParser+0xac>)
     358:	4798      	blx	r3
		parseStatus = true;
     35a:	2601      	movs	r6, #1
     35c:	e7ee      	b.n	33c <mdmParser_solicitedCmdParser+0x68>
			while(parseCnt < cmdData.validDataCnt)
     35e:	2500      	movs	r5, #0
     360:	e7ea      	b.n	338 <mdmParser_solicitedCmdParser+0x64>
			parseStatus = false;
     362:	2600      	movs	r6, #0
     364:	e7ea      	b.n	33c <mdmParser_solicitedCmdParser+0x68>
     366:	bf00      	nop
     368:	00003aa0 	.word	0x00003aa0
     36c:	00000755 	.word	0x00000755
     370:	20000000 	.word	0x20000000
     374:	00003385 	.word	0x00003385
     378:	000007ad 	.word	0x000007ad
     37c:	00000c89 	.word	0x00000c89
     380:	000016a1 	.word	0x000016a1

00000384 <mdmParser_SendCommandToModem>:
{
     384:	b570      	push	{r4, r5, r6, lr}
     386:	4604      	mov	r4, r0
	if(atCmd == CMD_AT_KHTTP_GET)
     388:	2817      	cmp	r0, #23
     38a:	d01c      	beq.n	3c6 <mdmParser_SendCommandToModem+0x42>
	mdmCtrlr_FlushRxBuffer();
     38c:	4b10      	ldr	r3, [pc, #64]	; (3d0 <mdmParser_SendCommandToModem+0x4c>)
     38e:	4798      	blx	r3
	SerialDebugPrint(ModemCmdData[atCmd].AtString,ModemCmdData[atCmd].CmdLength);
     390:	4b10      	ldr	r3, [pc, #64]	; (3d4 <mdmParser_SendCommandToModem+0x50>)
     392:	00a2      	lsls	r2, r4, #2
     394:	1911      	adds	r1, r2, r4
     396:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     39a:	684d      	ldr	r5, [r1, #4]
     39c:	7a0e      	ldrb	r6, [r1, #8]
     39e:	4631      	mov	r1, r6
     3a0:	4628      	mov	r0, r5
     3a2:	4b0d      	ldr	r3, [pc, #52]	; (3d8 <mdmParser_SendCommandToModem+0x54>)
     3a4:	4798      	blx	r3
	DEBUG_PRINT("\r\n\n");
     3a6:	480d      	ldr	r0, [pc, #52]	; (3dc <mdmParser_SendCommandToModem+0x58>)
     3a8:	4b0d      	ldr	r3, [pc, #52]	; (3e0 <mdmParser_SendCommandToModem+0x5c>)
     3aa:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData[atCmd].AtString,ModemCmdData[atCmd].CmdLength);
     3ac:	4631      	mov	r1, r6
     3ae:	4628      	mov	r0, r5
     3b0:	4b0c      	ldr	r3, [pc, #48]	; (3e4 <mdmParser_SendCommandToModem+0x60>)
     3b2:	4798      	blx	r3
	lastSendATCommand = atCmd;
     3b4:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <mdmParser_SendCommandToModem+0x64>)
     3b6:	701c      	strb	r4, [r3, #0]
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     3b8:	2200      	movs	r2, #0
     3ba:	705a      	strb	r2, [r3, #1]
	delay_ms(1000);
     3bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     3c0:	4b0a      	ldr	r3, [pc, #40]	; (3ec <mdmParser_SendCommandToModem+0x68>)
     3c2:	4798      	blx	r3
     3c4:	bd70      	pop	{r4, r5, r6, pc}
		SerialDebugPrint("\r\n",2);
     3c6:	2102      	movs	r1, #2
     3c8:	4809      	ldr	r0, [pc, #36]	; (3f0 <mdmParser_SendCommandToModem+0x6c>)
     3ca:	4b03      	ldr	r3, [pc, #12]	; (3d8 <mdmParser_SendCommandToModem+0x54>)
     3cc:	4798      	blx	r3
     3ce:	e7dd      	b.n	38c <mdmParser_SendCommandToModem+0x8>
     3d0:	000007ad 	.word	0x000007ad
     3d4:	00003aa0 	.word	0x00003aa0
     3d8:	00000c89 	.word	0x00000c89
     3dc:	00003f50 	.word	0x00003f50
     3e0:	00000ccd 	.word	0x00000ccd
     3e4:	0000072d 	.word	0x0000072d
     3e8:	20000000 	.word	0x20000000
     3ec:	000016a1 	.word	0x000016a1
     3f0:	00004494 	.word	0x00004494

000003f4 <mdmParser_ProcessModemResponse>:
	MODEM_CMD_DATA cmdData = ModemCmdData[lastSendATCommand];
     3f4:	4b15      	ldr	r3, [pc, #84]	; (44c <mdmParser_ProcessModemResponse+0x58>)
     3f6:	7818      	ldrb	r0, [r3, #0]
	if(lastSendATCommand != CMD_AT_MAX)
     3f8:	2819      	cmp	r0, #25
     3fa:	d026      	beq.n	44a <mdmParser_ProcessModemResponse+0x56>
{
     3fc:	b570      	push	{r4, r5, r6, lr}
	MODEM_CMD_DATA cmdData = ModemCmdData[lastSendATCommand];
     3fe:	4914      	ldr	r1, [pc, #80]	; (450 <mdmParser_ProcessModemResponse+0x5c>)
     400:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     404:	009b      	lsls	r3, r3, #2
     406:	18ca      	adds	r2, r1, r3
     408:	5ccc      	ldrb	r4, [r1, r3]
     40a:	7a56      	ldrb	r6, [r2, #9]
     40c:	68d5      	ldr	r5, [r2, #12]
		if(false != mdmParser_solicitedCmdParser(lastSendATCommand,responseDataBuffer))
     40e:	4911      	ldr	r1, [pc, #68]	; (454 <mdmParser_ProcessModemResponse+0x60>)
     410:	4b11      	ldr	r3, [pc, #68]	; (458 <mdmParser_ProcessModemResponse+0x64>)
     412:	4798      	blx	r3
     414:	b170      	cbz	r0, 434 <mdmParser_ProcessModemResponse+0x40>
			if(lastSendATCommand == cmdData.AtCmd)
     416:	4b0d      	ldr	r3, [pc, #52]	; (44c <mdmParser_ProcessModemResponse+0x58>)
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	42a3      	cmp	r3, r4
     41c:	d003      	beq.n	426 <mdmParser_ProcessModemResponse+0x32>
		lastSendATCommand = CMD_AT_MAX;
     41e:	2219      	movs	r2, #25
     420:	4b0a      	ldr	r3, [pc, #40]	; (44c <mdmParser_ProcessModemResponse+0x58>)
     422:	701a      	strb	r2, [r3, #0]
     424:	bd70      	pop	{r4, r5, r6, pc}
				cmdData.respHandler(responseDataBuffer,cmdData.validDataCnt);
     426:	4631      	mov	r1, r6
     428:	480a      	ldr	r0, [pc, #40]	; (454 <mdmParser_ProcessModemResponse+0x60>)
     42a:	47a8      	blx	r5
	isPrevCmdRespProcessed = status;
     42c:	2201      	movs	r2, #1
     42e:	4b07      	ldr	r3, [pc, #28]	; (44c <mdmParser_ProcessModemResponse+0x58>)
     430:	705a      	strb	r2, [r3, #1]
     432:	e7f4      	b.n	41e <mdmParser_ProcessModemResponse+0x2a>
			DEBUG_PRINT("Expected modem response is not received");
     434:	4809      	ldr	r0, [pc, #36]	; (45c <mdmParser_ProcessModemResponse+0x68>)
     436:	4b0a      	ldr	r3, [pc, #40]	; (460 <mdmParser_ProcessModemResponse+0x6c>)
     438:	4798      	blx	r3
			if (lastSendATCommand == CMD_AT_KHTTP_GET)
     43a:	4b04      	ldr	r3, [pc, #16]	; (44c <mdmParser_ProcessModemResponse+0x58>)
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	2b17      	cmp	r3, #23
     440:	d1ed      	bne.n	41e <mdmParser_ProcessModemResponse+0x2a>
				DEBUG_PRINT("No Response from Web Sever....Posting data to sever is failed");
     442:	4808      	ldr	r0, [pc, #32]	; (464 <mdmParser_ProcessModemResponse+0x70>)
     444:	4b06      	ldr	r3, [pc, #24]	; (460 <mdmParser_ProcessModemResponse+0x6c>)
     446:	4798      	blx	r3
     448:	e7e9      	b.n	41e <mdmParser_ProcessModemResponse+0x2a>
     44a:	4770      	bx	lr
     44c:	20000000 	.word	0x20000000
     450:	00003aa0 	.word	0x00003aa0
     454:	2000019c 	.word	0x2000019c
     458:	000002d5 	.word	0x000002d5
     45c:	00003f54 	.word	0x00003f54
     460:	00000ccd 	.word	0x00000ccd
     464:	00003f7c 	.word	0x00003f7c

00000468 <mdmParser_SetLastCmdProcessed>:
	isPrevCmdRespProcessed = status;
     468:	4b01      	ldr	r3, [pc, #4]	; (470 <mdmParser_SetLastCmdProcessed+0x8>)
     46a:	7058      	strb	r0, [r3, #1]
     46c:	4770      	bx	lr
     46e:	bf00      	nop
     470:	20000000 	.word	0x20000000

00000474 <mdmParser_SetKhttpHeaderString>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetKhttpHeaderString(uint8_t* sessionID)
{
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (*sessionID)
     476:	7803      	ldrb	r3, [r0, #0]
     478:	3b31      	subs	r3, #49	; 0x31
     47a:	2b07      	cmp	r3, #7
     47c:	d875      	bhi.n	56a <mdmParser_SetKhttpHeaderString+0xf6>
     47e:	e8df f003 	tbb	[pc, r3]
     482:	3504      	.short	0x3504
     484:	5950473e 	.word	0x5950473e
     488:	6b62      	.short	0x6b62
	{
		case 49:
		{
			kHttpHeaderString[15] = '1';
     48a:	4b3a      	ldr	r3, [pc, #232]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     48c:	2231      	movs	r2, #49	; 0x31
     48e:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '1';
     490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 1");
     494:	4838      	ldr	r0, [pc, #224]	; (578 <mdmParser_SetKhttpHeaderString+0x104>)
     496:	4b39      	ldr	r3, [pc, #228]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     498:	4798      	blx	r3
			DEBUG_PRINT("Session ID value exceeds the max value");
		}
		break;
	}

	DEBUG_PRINT("KHTTP HEADER String is ");
     49a:	4839      	ldr	r0, [pc, #228]	; (580 <mdmParser_SetKhttpHeaderString+0x10c>)
     49c:	4c37      	ldr	r4, [pc, #220]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     49e:	47a0      	blx	r4
	SerialDebugPrint(kHttpHeaderString,17);
     4a0:	4d34      	ldr	r5, [pc, #208]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     4a2:	2111      	movs	r1, #17
     4a4:	1d28      	adds	r0, r5, #4
     4a6:	4b37      	ldr	r3, [pc, #220]	; (584 <mdmParser_SetKhttpHeaderString+0x110>)
     4a8:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     4aa:	4837      	ldr	r0, [pc, #220]	; (588 <mdmParser_SetKhttpHeaderString+0x114>)
     4ac:	47a0      	blx	r4

	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     4ae:	4c37      	ldr	r4, [pc, #220]	; (58c <mdmParser_SetKhttpHeaderString+0x118>)
     4b0:	220f      	movs	r2, #15
     4b2:	f105 0118 	add.w	r1, r5, #24
     4b6:	4620      	mov	r0, r4
     4b8:	4b35      	ldr	r3, [pc, #212]	; (590 <mdmParser_SetKhttpHeaderString+0x11c>)
     4ba:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     4bc:	4620      	mov	r0, r4
     4be:	4b35      	ldr	r3, [pc, #212]	; (594 <mdmParser_SetKhttpHeaderString+0x120>)
     4c0:	4798      	blx	r3
     4c2:	4d35      	ldr	r5, [pc, #212]	; (598 <mdmParser_SetKhttpHeaderString+0x124>)
     4c4:	4404      	add	r4, r0
     4c6:	f105 0720 	add.w	r7, r5, #32
     4ca:	462e      	mov	r6, r5
     4cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     4ce:	6020      	str	r0, [r4, #0]
     4d0:	6061      	str	r1, [r4, #4]
     4d2:	60a2      	str	r2, [r4, #8]
     4d4:	60e3      	str	r3, [r4, #12]
     4d6:	4635      	mov	r5, r6
     4d8:	3410      	adds	r4, #16
     4da:	42be      	cmp	r6, r7
     4dc:	d1f5      	bne.n	4ca <mdmParser_SetKhttpHeaderString+0x56>
     4de:	cd07      	ldmia	r5!, {r0, r1, r2}
     4e0:	6020      	str	r0, [r4, #0]
     4e2:	6061      	str	r1, [r4, #4]
     4e4:	60a2      	str	r2, [r4, #8]
     4e6:	782b      	ldrb	r3, [r5, #0]
     4e8:	7323      	strb	r3, [r4, #12]
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kHttpHeaderString[15] = '2';
     4ec:	4b21      	ldr	r3, [pc, #132]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     4ee:	2232      	movs	r2, #50	; 0x32
     4f0:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '2';
     4f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 2");
     4f6:	4829      	ldr	r0, [pc, #164]	; (59c <mdmParser_SetKhttpHeaderString+0x128>)
     4f8:	4b20      	ldr	r3, [pc, #128]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     4fa:	4798      	blx	r3
		break;
     4fc:	e7cd      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '3';
     4fe:	4b1d      	ldr	r3, [pc, #116]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     500:	2233      	movs	r2, #51	; 0x33
     502:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '3';
     504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 3");
     508:	4825      	ldr	r0, [pc, #148]	; (5a0 <mdmParser_SetKhttpHeaderString+0x12c>)
     50a:	4b1c      	ldr	r3, [pc, #112]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     50c:	4798      	blx	r3
		break;
     50e:	e7c4      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '4';
     510:	4b18      	ldr	r3, [pc, #96]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     512:	2234      	movs	r2, #52	; 0x34
     514:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '4';
     516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 4");
     51a:	4822      	ldr	r0, [pc, #136]	; (5a4 <mdmParser_SetKhttpHeaderString+0x130>)
     51c:	4b17      	ldr	r3, [pc, #92]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     51e:	4798      	blx	r3
		break;
     520:	e7bb      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '5';
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     524:	2235      	movs	r2, #53	; 0x35
     526:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '5';
     528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 5");
     52c:	481e      	ldr	r0, [pc, #120]	; (5a8 <mdmParser_SetKhttpHeaderString+0x134>)
     52e:	4b13      	ldr	r3, [pc, #76]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     530:	4798      	blx	r3
		break;
     532:	e7b2      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '6';
     534:	4b0f      	ldr	r3, [pc, #60]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     536:	2236      	movs	r2, #54	; 0x36
     538:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '6';
     53a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 6");
     53e:	481b      	ldr	r0, [pc, #108]	; (5ac <mdmParser_SetKhttpHeaderString+0x138>)
     540:	4b0e      	ldr	r3, [pc, #56]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     542:	4798      	blx	r3
		break;
     544:	e7a9      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '7';
     546:	4b0b      	ldr	r3, [pc, #44]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     548:	2237      	movs	r2, #55	; 0x37
     54a:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '7';
     54c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 7");
     550:	4817      	ldr	r0, [pc, #92]	; (5b0 <mdmParser_SetKhttpHeaderString+0x13c>)
     552:	4b0a      	ldr	r3, [pc, #40]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     554:	4798      	blx	r3
		break;
     556:	e7a0      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '8';
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <mdmParser_SetKhttpHeaderString+0x100>)
     55a:	2238      	movs	r2, #56	; 0x38
     55c:	74da      	strb	r2, [r3, #19]
			kHttpGetString[12] = '8';
     55e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			DEBUG_PRINT("Session ID - 8");
     562:	4814      	ldr	r0, [pc, #80]	; (5b4 <mdmParser_SetKhttpHeaderString+0x140>)
     564:	4b05      	ldr	r3, [pc, #20]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     566:	4798      	blx	r3
		break;
     568:	e797      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
			DEBUG_PRINT("Session ID value exceeds the max value");
     56a:	4813      	ldr	r0, [pc, #76]	; (5b8 <mdmParser_SetKhttpHeaderString+0x144>)
     56c:	4b03      	ldr	r3, [pc, #12]	; (57c <mdmParser_SetKhttpHeaderString+0x108>)
     56e:	4798      	blx	r3
		break;
     570:	e793      	b.n	49a <mdmParser_SetKhttpHeaderString+0x26>
     572:	bf00      	nop
     574:	20000000 	.word	0x20000000
     578:	00003fbc 	.word	0x00003fbc
     57c:	00000ccd 	.word	0x00000ccd
     580:	00004064 	.word	0x00004064
     584:	00000c89 	.word	0x00000c89
     588:	00004494 	.word	0x00004494
     58c:	20000458 	.word	0x20000458
     590:	000033a9 	.word	0x000033a9
     594:	00003375 	.word	0x00003375
     598:	0000407c 	.word	0x0000407c
     59c:	00003fcc 	.word	0x00003fcc
     5a0:	00003fdc 	.word	0x00003fdc
     5a4:	00003fec 	.word	0x00003fec
     5a8:	00003ffc 	.word	0x00003ffc
     5ac:	0000400c 	.word	0x0000400c
     5b0:	0000401c 	.word	0x0000401c
     5b4:	0000402c 	.word	0x0000402c
     5b8:	0000403c 	.word	0x0000403c

000005bc <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     5be:	491e      	ldr	r1, [pc, #120]	; (638 <mdmCtrlr_DataCommInit+0x7c>)
     5c0:	481e      	ldr	r0, [pc, #120]	; (63c <mdmCtrlr_DataCommInit+0x80>)
     5c2:	4b1f      	ldr	r3, [pc, #124]	; (640 <mdmCtrlr_DataCommInit+0x84>)
     5c4:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     5c6:	b180      	cbz	r0, 5ea <mdmCtrlr_DataCommInit+0x2e>
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 not initialized\r\n");
     5c8:	4d1e      	ldr	r5, [pc, #120]	; (644 <mdmCtrlr_DataCommInit+0x88>)
     5ca:	4c1f      	ldr	r4, [pc, #124]	; (648 <mdmCtrlr_DataCommInit+0x8c>)
     5cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     5ce:	6028      	str	r0, [r5, #0]
     5d0:	6069      	str	r1, [r5, #4]
     5d2:	60aa      	str	r2, [r5, #8]
     5d4:	60eb      	str	r3, [r5, #12]
     5d6:	cc03      	ldmia	r4!, {r0, r1}
     5d8:	6128      	str	r0, [r5, #16]
     5da:	6169      	str	r1, [r5, #20]
     5dc:	8823      	ldrh	r3, [r4, #0]
     5de:	832b      	strh	r3, [r5, #24]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     5e0:	2128      	movs	r1, #40	; 0x28
     5e2:	4628      	mov	r0, r5
     5e4:	4b19      	ldr	r3, [pc, #100]	; (64c <mdmCtrlr_DataCommInit+0x90>)
     5e6:	4798      	blx	r3
     5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     5ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
     5ee:	4918      	ldr	r1, [pc, #96]	; (650 <mdmCtrlr_DataCommInit+0x94>)
     5f0:	4818      	ldr	r0, [pc, #96]	; (654 <mdmCtrlr_DataCommInit+0x98>)
     5f2:	4b19      	ldr	r3, [pc, #100]	; (658 <mdmCtrlr_DataCommInit+0x9c>)
     5f4:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     5f6:	2800      	cmp	r0, #0
     5f8:	d1e6      	bne.n	5c8 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     5fa:	4c10      	ldr	r4, [pc, #64]	; (63c <mdmCtrlr_DataCommInit+0x80>)
     5fc:	2201      	movs	r2, #1
     5fe:	4611      	mov	r1, r2
     600:	4620      	mov	r0, r4
     602:	4b16      	ldr	r3, [pc, #88]	; (65c <mdmCtrlr_DataCommInit+0xa0>)
     604:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     606:	4620      	mov	r0, r4
     608:	4b15      	ldr	r3, [pc, #84]	; (660 <mdmCtrlr_DataCommInit+0xa4>)
     60a:	4798      	blx	r3
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
     60c:	4c15      	ldr	r4, [pc, #84]	; (664 <mdmCtrlr_DataCommInit+0xa8>)
     60e:	4d0d      	ldr	r5, [pc, #52]	; (644 <mdmCtrlr_DataCommInit+0x88>)
     610:	f104 0720 	add.w	r7, r4, #32
     614:	4626      	mov	r6, r4
     616:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     618:	6028      	str	r0, [r5, #0]
     61a:	6069      	str	r1, [r5, #4]
     61c:	60aa      	str	r2, [r5, #8]
     61e:	60eb      	str	r3, [r5, #12]
     620:	4634      	mov	r4, r6
     622:	3510      	adds	r5, #16
     624:	42be      	cmp	r6, r7
     626:	d1f5      	bne.n	614 <mdmCtrlr_DataCommInit+0x58>
     628:	cc03      	ldmia	r4!, {r0, r1}
     62a:	6028      	str	r0, [r5, #0]
     62c:	6069      	str	r1, [r5, #4]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     62e:	2128      	movs	r1, #40	; 0x28
     630:	4804      	ldr	r0, [pc, #16]	; (644 <mdmCtrlr_DataCommInit+0x88>)
     632:	4b06      	ldr	r3, [pc, #24]	; (64c <mdmCtrlr_DataCommInit+0x90>)
     634:	4798      	blx	r3
     636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     638:	41014000 	.word	0x41014000
     63c:	20000028 	.word	0x20000028
     640:	00002371 	.word	0x00002371
     644:	20001378 	.word	0x20001378
     648:	00004268 	.word	0x00004268
     64c:	00000c89 	.word	0x00000c89
     650:	20000b68 	.word	0x20000b68
     654:	20001368 	.word	0x20001368
     658:	00001961 	.word	0x00001961
     65c:	0000240d 	.word	0x0000240d
     660:	000023d5 	.word	0x000023d5
     664:	00004284 	.word	0x00004284

00000668 <SERCOM3_0_Handler>:
**
** Description:        DRE: TX Data Register Empty Interrupt
**
**===========================================================================*/
void SERCOM3_0_Handler( void )
{
     668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* DRE: TX Data Register Empty */
	sprintf(printBuff,"Modem Data Tx Data Reg Empty CallBack\r\n");
     66a:	4c0c      	ldr	r4, [pc, #48]	; (69c <SERCOM3_0_Handler+0x34>)
     66c:	4d0c      	ldr	r5, [pc, #48]	; (6a0 <SERCOM3_0_Handler+0x38>)
     66e:	f104 0720 	add.w	r7, r4, #32
     672:	4626      	mov	r6, r4
     674:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     676:	6028      	str	r0, [r5, #0]
     678:	6069      	str	r1, [r5, #4]
     67a:	60aa      	str	r2, [r5, #8]
     67c:	60eb      	str	r3, [r5, #12]
     67e:	4634      	mov	r4, r6
     680:	3510      	adds	r5, #16
     682:	42be      	cmp	r6, r7
     684:	d1f5      	bne.n	672 <SERCOM3_0_Handler+0xa>
     686:	cc03      	ldmia	r4!, {r0, r1}
     688:	6028      	str	r0, [r5, #0]
     68a:	6069      	str	r1, [r5, #4]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     68c:	2128      	movs	r1, #40	; 0x28
     68e:	4804      	ldr	r0, [pc, #16]	; (6a0 <SERCOM3_0_Handler+0x38>)
     690:	4b04      	ldr	r3, [pc, #16]	; (6a4 <SERCOM3_0_Handler+0x3c>)
     692:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     694:	2201      	movs	r2, #1
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <SERCOM3_0_Handler+0x40>)
     698:	761a      	strb	r2, [r3, #24]
     69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     69c:	000042ac 	.word	0x000042ac
     6a0:	20001378 	.word	0x20001378
     6a4:	00000c89 	.word	0x00000c89
     6a8:	41014000 	.word	0x41014000

000006ac <SERCOM3_1_Handler>:
**
** Description:        TXC : Transmit Complete Interrupt
**
**===========================================================================*/
void SERCOM3_1_Handler(void )
{
     6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* TXC : Transmit Complete */
	sprintf(printBuff,"Modem Data Tx byte Complete Callback\r\n");
     6ae:	4e0e      	ldr	r6, [pc, #56]	; (6e8 <SERCOM3_1_Handler+0x3c>)
     6b0:	4c0e      	ldr	r4, [pc, #56]	; (6ec <SERCOM3_1_Handler+0x40>)
     6b2:	f106 0720 	add.w	r7, r6, #32
     6b6:	4635      	mov	r5, r6
     6b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     6ba:	6020      	str	r0, [r4, #0]
     6bc:	6061      	str	r1, [r4, #4]
     6be:	60a2      	str	r2, [r4, #8]
     6c0:	60e3      	str	r3, [r4, #12]
     6c2:	462e      	mov	r6, r5
     6c4:	3410      	adds	r4, #16
     6c6:	42bd      	cmp	r5, r7
     6c8:	d1f5      	bne.n	6b6 <SERCOM3_1_Handler+0xa>
     6ca:	6828      	ldr	r0, [r5, #0]
     6cc:	6020      	str	r0, [r4, #0]
     6ce:	88aa      	ldrh	r2, [r5, #4]
     6d0:	79ab      	ldrb	r3, [r5, #6]
     6d2:	80a2      	strh	r2, [r4, #4]
     6d4:	71a3      	strb	r3, [r4, #6]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     6d6:	2128      	movs	r1, #40	; 0x28
     6d8:	4804      	ldr	r0, [pc, #16]	; (6ec <SERCOM3_1_Handler+0x40>)
     6da:	4b05      	ldr	r3, [pc, #20]	; (6f0 <SERCOM3_1_Handler+0x44>)
     6dc:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     6de:	2202      	movs	r2, #2
     6e0:	4b04      	ldr	r3, [pc, #16]	; (6f4 <SERCOM3_1_Handler+0x48>)
     6e2:	761a      	strb	r2, [r3, #24]
     6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6e6:	bf00      	nop
     6e8:	000042d4 	.word	0x000042d4
     6ec:	20001378 	.word	0x20001378
     6f0:	00000c89 	.word	0x00000c89
     6f4:	41014000 	.word	0x41014000

000006f8 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     6f8:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar[2];
	uint8_t rxPrint[2];
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     6fa:	4d07      	ldr	r5, [pc, #28]	; (718 <SERCOM3_2_Handler+0x20>)
     6fc:	4c07      	ldr	r4, [pc, #28]	; (71c <SERCOM3_2_Handler+0x24>)
     6fe:	4628      	mov	r0, r5
     700:	47a0      	blx	r4
     702:	2800      	cmp	r0, #0
     704:	d0fb      	beq.n	6fe <SERCOM3_2_Handler+0x6>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_DATA);
     706:	4804      	ldr	r0, [pc, #16]	; (718 <SERCOM3_2_Handler+0x20>)
     708:	4b05      	ldr	r3, [pc, #20]	; (720 <SERCOM3_2_Handler+0x28>)
     70a:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     70c:	4601      	mov	r1, r0
     70e:	4805      	ldr	r0, [pc, #20]	; (724 <SERCOM3_2_Handler+0x2c>)
     710:	4b05      	ldr	r3, [pc, #20]	; (728 <SERCOM3_2_Handler+0x30>)
     712:	4798      	blx	r3
     714:	bd38      	pop	{r3, r4, r5, pc}
     716:	bf00      	nop
     718:	20000028 	.word	0x20000028
     71c:	00002401 	.word	0x00002401
     720:	000023ef 	.word	0x000023ef
     724:	20001368 	.word	0x20001368
     728:	000019f5 	.word	0x000019f5

0000072c <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     72c:	b570      	push	{r4, r5, r6, lr}
     72e:	4605      	mov	r5, r0
     730:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     732:	4c05      	ldr	r4, [pc, #20]	; (748 <mdmCtrlr_SendDataToModem+0x1c>)
     734:	4620      	mov	r0, r4
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <mdmCtrlr_SendDataToModem+0x20>)
     738:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     73a:	4632      	mov	r2, r6
     73c:	4629      	mov	r1, r5
     73e:	4620      	mov	r0, r4
     740:	4b03      	ldr	r3, [pc, #12]	; (750 <mdmCtrlr_SendDataToModem+0x24>)
     742:	4798      	blx	r3
}
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	bf00      	nop
     748:	20000028 	.word	0x20000028
     74c:	000023d5 	.word	0x000023d5
     750:	00000c05 	.word	0x00000c05

00000754 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     758:	b082      	sub	sp, #8
     75a:	4606      	mov	r6, r0
     75c:	460d      	mov	r5, r1
	bool status = false;
	
	uint8_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     75e:	480e      	ldr	r0, [pc, #56]	; (798 <mdmCtrlr_ReadResponseFromModem+0x44>)
     760:	4b0e      	ldr	r3, [pc, #56]	; (79c <mdmCtrlr_ReadResponseFromModem+0x48>)
     762:	4798      	blx	r3
     764:	42a8      	cmp	r0, r5
     766:	d202      	bcs.n	76e <mdmCtrlr_ReadResponseFromModem+0x1a>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     768:	b002      	add	sp, #8
     76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CRITICAL_SECTION_ENTER()
     76e:	a801      	add	r0, sp, #4
     770:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     772:	4798      	blx	r3
		while (readCnt < length)
     774:	b165      	cbz	r5, 790 <mdmCtrlr_ReadResponseFromModem+0x3c>
     776:	2100      	movs	r1, #0
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     778:	f8df 801c 	ldr.w	r8, [pc, #28]	; 798 <mdmCtrlr_ReadResponseFromModem+0x44>
     77c:	4f09      	ldr	r7, [pc, #36]	; (7a4 <mdmCtrlr_ReadResponseFromModem+0x50>)
     77e:	1c4c      	adds	r4, r1, #1
     780:	b2e4      	uxtb	r4, r4
     782:	4431      	add	r1, r6
     784:	4640      	mov	r0, r8
     786:	47b8      	blx	r7
     788:	4621      	mov	r1, r4
		while (readCnt < length)
     78a:	b2a4      	uxth	r4, r4
     78c:	42a5      	cmp	r5, r4
     78e:	d8f6      	bhi.n	77e <mdmCtrlr_ReadResponseFromModem+0x2a>
		CRITICAL_SECTION_LEAVE()
     790:	a801      	add	r0, sp, #4
     792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <mdmCtrlr_ReadResponseFromModem+0x54>)
     794:	4798      	blx	r3
     796:	e7e7      	b.n	768 <mdmCtrlr_ReadResponseFromModem+0x14>
     798:	20001368 	.word	0x20001368
     79c:	00001a35 	.word	0x00001a35
     7a0:	00001631 	.word	0x00001631
     7a4:	000019b1 	.word	0x000019b1
     7a8:	0000163f 	.word	0x0000163f

000007ac <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     7ac:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     7ae:	4802      	ldr	r0, [pc, #8]	; (7b8 <mdmCtrlr_FlushRxBuffer+0xc>)
     7b0:	4b02      	ldr	r3, [pc, #8]	; (7bc <mdmCtrlr_FlushRxBuffer+0x10>)
     7b2:	4798      	blx	r3
     7b4:	bd08      	pop	{r3, pc}
     7b6:	bf00      	nop
     7b8:	20001368 	.word	0x20001368
     7bc:	00001a59 	.word	0x00001a59

000007c0 <mdmParam_InitiateConnection>:




void mdmParam_InitiateConnection(void)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
}


static void closeExistingConnections(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     7c2:	2009      	movs	r0, #9
     7c4:	4e45      	ldr	r6, [pc, #276]	; (8dc <mdmParam_InitiateConnection+0x11c>)
     7c6:	47b0      	blx	r6
	delay_ms(1000);
     7c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7cc:	4c44      	ldr	r4, [pc, #272]	; (8e0 <mdmParam_InitiateConnection+0x120>)
     7ce:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     7d0:	4d44      	ldr	r5, [pc, #272]	; (8e4 <mdmParam_InitiateConnection+0x124>)
     7d2:	47a8      	blx	r5
	delay_ms(1000);
     7d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7d8:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_2);
     7da:	200a      	movs	r0, #10
     7dc:	47b0      	blx	r6
	delay_ms(1000);
     7de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7e2:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     7e4:	47a8      	blx	r5
	delay_ms(1000);
     7e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7ea:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_3);
     7ec:	200b      	movs	r0, #11
     7ee:	47b0      	blx	r6
	delay_ms(1000);
     7f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7f4:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     7f6:	47a8      	blx	r5
	delay_ms(1000);
     7f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7fc:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_4);
     7fe:	200c      	movs	r0, #12
     800:	47b0      	blx	r6
	delay_ms(1000);
     802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     806:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     808:	47a8      	blx	r5
	delay_ms(1000);
     80a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     80e:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_5);
     810:	200d      	movs	r0, #13
     812:	47b0      	blx	r6
	delay_ms(1000);
     814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     818:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     81a:	47a8      	blx	r5
	delay_ms(1000);
     81c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     820:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_6);
     822:	200e      	movs	r0, #14
     824:	47b0      	blx	r6
	delay_ms(1000);
     826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     82a:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     82c:	47a8      	blx	r5
	delay_ms(1000);
     82e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     832:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_7);
     834:	200f      	movs	r0, #15
     836:	47b0      	blx	r6
	delay_ms(1000);
     838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     83c:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     83e:	47a8      	blx	r5
	delay_ms(1000);
     840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     844:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_8);
     846:	2010      	movs	r0, #16
     848:	47b0      	blx	r6
	delay_ms(1000);
     84a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     84e:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     850:	47a8      	blx	r5
	delay_ms(1000);
     852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     856:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_9);
     858:	2011      	movs	r0, #17
     85a:	47b0      	blx	r6
	delay_ms(1000);
     85c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     860:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     862:	47a8      	blx	r5
	delay_ms(1000);
     864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     868:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_10);
     86a:	2012      	movs	r0, #18
     86c:	47b0      	blx	r6
	delay_ms(1000);
     86e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     872:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     874:	47a8      	blx	r5
	delay_ms(1000);
     876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     87a:	47a0      	blx	r4
	
}

static void sendAT_KPATTERN(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KPATTERN);
     87c:	2013      	movs	r0, #19
     87e:	47b0      	blx	r6
	delay_ms(2000);
     880:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     884:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     886:	47a8      	blx	r5
	delay_ms(2000);
     888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     88c:	47a0      	blx	r4
}

static void sendAT_KCNXCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXCFG);
     88e:	2014      	movs	r0, #20
     890:	47b0      	blx	r6
	delay_ms(2000);
     892:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     896:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     898:	47a8      	blx	r5
	delay_ms(2000);
     89a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     89e:	47a0      	blx	r4
}

static void sendAT_KCNXTIMER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXTIMER);
     8a0:	2015      	movs	r0, #21
     8a2:	47b0      	blx	r6
	delay_ms(2000);
     8a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8a8:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     8aa:	47a8      	blx	r5
	delay_ms(2000);
     8ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8b0:	47a0      	blx	r4
}

static void sendAT_KHTTPCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CFG);
     8b2:	2008      	movs	r0, #8
     8b4:	47b0      	blx	r6
	delay_ms(2000);
     8b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8ba:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     8bc:	47a8      	blx	r5
	delay_ms(2000);
     8be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8c2:	47a0      	blx	r4
}

static void sendAT_KHTTPHEADER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_HEADER);
     8c4:	2016      	movs	r0, #22
     8c6:	47b0      	blx	r6
	delay_ms(2000);
     8c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8cc:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     8ce:	47a8      	blx	r5
	delay_ms(2000);
     8d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8d4:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <mdmParam_InitiateConnection+0x128>)
     8d8:	4798      	blx	r3
     8da:	bd70      	pop	{r4, r5, r6, pc}
     8dc:	00000385 	.word	0x00000385
     8e0:	000016a1 	.word	0x000016a1
     8e4:	000003f5 	.word	0x000003f5
     8e8:	000007ad 	.word	0x000007ad

000008ec <sendPacketToServer>:
{
     8ec:	b510      	push	{r4, lr}
	if (getDataPacketOkStatus() == true)
     8ee:	4b0e      	ldr	r3, [pc, #56]	; (928 <sendPacketToServer+0x3c>)
     8f0:	4798      	blx	r3
     8f2:	2801      	cmp	r0, #1
     8f4:	d004      	beq.n	900 <sendPacketToServer+0x14>
		delay_ms(10000);
     8f6:	f242 7010 	movw	r0, #10000	; 0x2710
     8fa:	4b0c      	ldr	r3, [pc, #48]	; (92c <sendPacketToServer+0x40>)
     8fc:	4798      	blx	r3
     8fe:	bd10      	pop	{r4, pc}
		mdmParser_SendCommandToModem(CMD_AT_KHTTP_GET);
     900:	2017      	movs	r0, #23
     902:	4b0b      	ldr	r3, [pc, #44]	; (930 <sendPacketToServer+0x44>)
     904:	4798      	blx	r3
		delay_ms(9000);
     906:	f242 3028 	movw	r0, #9000	; 0x2328
     90a:	4c08      	ldr	r4, [pc, #32]	; (92c <sendPacketToServer+0x40>)
     90c:	47a0      	blx	r4
		setDataPacketOkStatus(false);
     90e:	2000      	movs	r0, #0
     910:	4b08      	ldr	r3, [pc, #32]	; (934 <sendPacketToServer+0x48>)
     912:	4798      	blx	r3
		DEBUG_PRINT("Posted the data to server...Waiting for Web Server Response");
     914:	4808      	ldr	r0, [pc, #32]	; (938 <sendPacketToServer+0x4c>)
     916:	4b09      	ldr	r3, [pc, #36]	; (93c <sendPacketToServer+0x50>)
     918:	4798      	blx	r3
		mdmParser_ProcessModemResponse();
     91a:	4b09      	ldr	r3, [pc, #36]	; (940 <sendPacketToServer+0x54>)
     91c:	4798      	blx	r3
		delay_ms(2000);
     91e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     922:	47a0      	blx	r4
     924:	bd10      	pop	{r4, pc}
     926:	bf00      	nop
     928:	00000bed 	.word	0x00000bed
     92c:	000016a1 	.word	0x000016a1
     930:	00000385 	.word	0x00000385
     934:	00000bf9 	.word	0x00000bf9
     938:	000043c8 	.word	0x000043c8
     93c:	00000ccd 	.word	0x00000ccd
     940:	000003f5 	.word	0x000003f5

00000944 <modemPowerInit>:

/* Perform the HL7618RD modem power on sequence */
/* I FEEL LIKE SOMETHING WRONG HERE */

void modemPowerInit(void)
{
     944:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     946:	4c1d      	ldr	r4, [pc, #116]	; (9bc <modemPowerInit+0x78>)
     948:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     94c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     954:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     958:	4919      	ldr	r1, [pc, #100]	; (9c0 <modemPowerInit+0x7c>)
     95a:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     95e:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     966:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     96a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     96e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     972:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	62a3      	str	r3, [r4, #40]	; 0x28
     976:	4a13      	ldr	r2, [pc, #76]	; (9c4 <modemPowerInit+0x80>)
     978:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     97e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     982:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     986:	6160      	str	r0, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     988:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     98a:	62a3      	str	r3, [r4, #40]	; 0x28
     98c:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     992:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     996:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     99a:	6165      	str	r5, [r4, #20]
	gpio_set_pin_level(MODEM_RESET,false);

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(500);
     99c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9a0:	4e09      	ldr	r6, [pc, #36]	; (9c8 <modemPowerInit+0x84>)
     9a2:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9a4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Give a short 50 ms positive pulse on MODEM ON Pin */
	gpio_set_pin_level(MODEM_ON,true);
	delay_ms(50);
     9a8:	2032      	movs	r0, #50	; 0x32
     9aa:	47b0      	blx	r6
	
	/* make MODEM ON to default level */
	delay_ms(3000);
     9ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
     9b0:	47b0      	blx	r6
	
	SerialDebugPrint((uint8_t*)"Modem Power On initialization Completed\r\n",41);
     9b2:	2129      	movs	r1, #41	; 0x29
     9b4:	4805      	ldr	r0, [pc, #20]	; (9cc <modemPowerInit+0x88>)
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <modemPowerInit+0x8c>)
     9b8:	4798      	blx	r3
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	41008000 	.word	0x41008000
     9c0:	c0000001 	.word	0xc0000001
     9c4:	c0000008 	.word	0xc0000008
     9c8:	000016a1 	.word	0x000016a1
     9cc:	00004424 	.word	0x00004424
     9d0:	00000c89 	.word	0x00000c89

000009d4 <mdmResp_AtRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_AtRespHandler(uint8_t* response, uint8_t length)
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	4605      	mov	r5, r0
     9d8:	460e      	mov	r6, r1
	SerialDebugPrint("In AT handler\r\n",15);
     9da:	210f      	movs	r1, #15
     9dc:	4804      	ldr	r0, [pc, #16]	; (9f0 <mdmResp_AtRespHandler+0x1c>)
     9de:	4c05      	ldr	r4, [pc, #20]	; (9f4 <mdmResp_AtRespHandler+0x20>)
     9e0:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     9e2:	4631      	mov	r1, r6
     9e4:	4628      	mov	r0, r5
     9e6:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     9e8:	2102      	movs	r1, #2
     9ea:	4803      	ldr	r0, [pc, #12]	; (9f8 <mdmResp_AtRespHandler+0x24>)
     9ec:	47a0      	blx	r4
     9ee:	bd70      	pop	{r4, r5, r6, pc}
     9f0:	00004498 	.word	0x00004498
     9f4:	00000c89 	.word	0x00000c89
     9f8:	00004494 	.word	0x00004494

000009fc <mdmResp_IMEIRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_IMEIRespHandler(uint8_t* response, uint8_t length)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	4605      	mov	r5, r0
     a00:	460e      	mov	r6, r1
	SerialDebugPrint("In CGSN handler\r\n",18);
     a02:	2112      	movs	r1, #18
     a04:	4804      	ldr	r0, [pc, #16]	; (a18 <mdmResp_IMEIRespHandler+0x1c>)
     a06:	4c05      	ldr	r4, [pc, #20]	; (a1c <mdmResp_IMEIRespHandler+0x20>)
     a08:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     a0a:	4631      	mov	r1, r6
     a0c:	4628      	mov	r0, r5
     a0e:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     a10:	2102      	movs	r1, #2
     a12:	4803      	ldr	r0, [pc, #12]	; (a20 <mdmResp_IMEIRespHandler+0x24>)
     a14:	47a0      	blx	r4
     a16:	bd70      	pop	{r4, r5, r6, pc}
     a18:	000044a8 	.word	0x000044a8
     a1c:	00000c89 	.word	0x00000c89
     a20:	00004494 	.word	0x00004494

00000a24 <mdmResp_KhttpCloseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCloseHandler(uint8_t* response, uint8_t length)
{
     a24:	b510      	push	{r4, lr}
	//DEBUG_PRINT("In KHTTP CLOSE handler");

	if(response[0] == 'O')
     a26:	7803      	ldrb	r3, [r0, #0]
     a28:	2b4f      	cmp	r3, #79	; 0x4f
     a2a:	d008      	beq.n	a3e <mdmResp_KhttpCloseHandler+0x1a>
		SerialDebugPrint(response,length);
		DEBUG_PRINT("\r\nClosed an active connection");
	}
	else
	{
		DEBUG_PRINT("There is no connection established with this session ID...");
     a2c:	4807      	ldr	r0, [pc, #28]	; (a4c <mdmResp_KhttpCloseHandler+0x28>)
     a2e:	4c08      	ldr	r4, [pc, #32]	; (a50 <mdmResp_KhttpCloseHandler+0x2c>)
     a30:	47a0      	blx	r4
		DEBUG_PRINT("Checking for an active connection with next session ID...\n");
     a32:	4808      	ldr	r0, [pc, #32]	; (a54 <mdmResp_KhttpCloseHandler+0x30>)
     a34:	47a0      	blx	r4
	}

	DEBUG_PRINT("\r\n");
     a36:	4808      	ldr	r0, [pc, #32]	; (a58 <mdmResp_KhttpCloseHandler+0x34>)
     a38:	4b05      	ldr	r3, [pc, #20]	; (a50 <mdmResp_KhttpCloseHandler+0x2c>)
     a3a:	4798      	blx	r3
     a3c:	bd10      	pop	{r4, pc}
		SerialDebugPrint(response,length);
     a3e:	4b07      	ldr	r3, [pc, #28]	; (a5c <mdmResp_KhttpCloseHandler+0x38>)
     a40:	4798      	blx	r3
		DEBUG_PRINT("\r\nClosed an active connection");
     a42:	4807      	ldr	r0, [pc, #28]	; (a60 <mdmResp_KhttpCloseHandler+0x3c>)
     a44:	4b02      	ldr	r3, [pc, #8]	; (a50 <mdmResp_KhttpCloseHandler+0x2c>)
     a46:	4798      	blx	r3
     a48:	e7f5      	b.n	a36 <mdmResp_KhttpCloseHandler+0x12>
     a4a:	bf00      	nop
     a4c:	000044dc 	.word	0x000044dc
     a50:	00000ccd 	.word	0x00000ccd
     a54:	00004518 	.word	0x00004518
     a58:	00004494 	.word	0x00004494
     a5c:	00000c89 	.word	0x00000c89
     a60:	000044bc 	.word	0x000044bc

00000a64 <mdmResp_KPatternHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KPatternHandler(uint8_t* response, uint8_t length)
{
     a64:	b570      	push	{r4, r5, r6, lr}
     a66:	4605      	mov	r5, r0
     a68:	460e      	mov	r6, r1
	DEBUG_PRINT("In KPATTERN handler");
     a6a:	4805      	ldr	r0, [pc, #20]	; (a80 <mdmResp_KPatternHandler+0x1c>)
     a6c:	4c05      	ldr	r4, [pc, #20]	; (a84 <mdmResp_KPatternHandler+0x20>)
     a6e:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     a70:	4631      	mov	r1, r6
     a72:	4628      	mov	r0, r5
     a74:	4b04      	ldr	r3, [pc, #16]	; (a88 <mdmResp_KPatternHandler+0x24>)
     a76:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     a78:	4804      	ldr	r0, [pc, #16]	; (a8c <mdmResp_KPatternHandler+0x28>)
     a7a:	47a0      	blx	r4
     a7c:	bd70      	pop	{r4, r5, r6, pc}
     a7e:	bf00      	nop
     a80:	00004554 	.word	0x00004554
     a84:	00000ccd 	.word	0x00000ccd
     a88:	00000c89 	.word	0x00000c89
     a8c:	00004494 	.word	0x00004494

00000a90 <mdmResp_KcnxCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxCfgHandler(uint8_t* response, uint8_t length)
{
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	4605      	mov	r5, r0
     a94:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXCFG handler");
     a96:	4805      	ldr	r0, [pc, #20]	; (aac <mdmResp_KcnxCfgHandler+0x1c>)
     a98:	4c05      	ldr	r4, [pc, #20]	; (ab0 <mdmResp_KcnxCfgHandler+0x20>)
     a9a:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     a9c:	4631      	mov	r1, r6
     a9e:	4628      	mov	r0, r5
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <mdmResp_KcnxCfgHandler+0x24>)
     aa2:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     aa4:	4804      	ldr	r0, [pc, #16]	; (ab8 <mdmResp_KcnxCfgHandler+0x28>)
     aa6:	47a0      	blx	r4
     aa8:	bd70      	pop	{r4, r5, r6, pc}
     aaa:	bf00      	nop
     aac:	00004568 	.word	0x00004568
     ab0:	00000ccd 	.word	0x00000ccd
     ab4:	00000c89 	.word	0x00000c89
     ab8:	00004494 	.word	0x00004494

00000abc <mdmResp_KcnxTimerHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxTimerHandler(uint8_t* response, uint8_t length)
{
     abc:	b570      	push	{r4, r5, r6, lr}
     abe:	4605      	mov	r5, r0
     ac0:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXTIMER handler");
     ac2:	4805      	ldr	r0, [pc, #20]	; (ad8 <mdmResp_KcnxTimerHandler+0x1c>)
     ac4:	4c05      	ldr	r4, [pc, #20]	; (adc <mdmResp_KcnxTimerHandler+0x20>)
     ac6:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     ac8:	4631      	mov	r1, r6
     aca:	4628      	mov	r0, r5
     acc:	4b04      	ldr	r3, [pc, #16]	; (ae0 <mdmResp_KcnxTimerHandler+0x24>)
     ace:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     ad0:	4804      	ldr	r0, [pc, #16]	; (ae4 <mdmResp_KcnxTimerHandler+0x28>)
     ad2:	47a0      	blx	r4
     ad4:	bd70      	pop	{r4, r5, r6, pc}
     ad6:	bf00      	nop
     ad8:	0000457c 	.word	0x0000457c
     adc:	00000ccd 	.word	0x00000ccd
     ae0:	00000c89 	.word	0x00000c89
     ae4:	00004494 	.word	0x00004494

00000ae8 <mdmResp_KhttpCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCfgHandler(uint8_t* response, uint8_t length)
{
     ae8:	b570      	push	{r4, r5, r6, lr}
     aea:	4604      	mov	r4, r0
     aec:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTPCFG handler");
     aee:	4807      	ldr	r0, [pc, #28]	; (b0c <mdmResp_KhttpCfgHandler+0x24>)
     af0:	4d07      	ldr	r5, [pc, #28]	; (b10 <mdmResp_KhttpCfgHandler+0x28>)
     af2:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     af4:	4631      	mov	r1, r6
     af6:	4620      	mov	r0, r4
     af8:	4b06      	ldr	r3, [pc, #24]	; (b14 <mdmResp_KhttpCfgHandler+0x2c>)
     afa:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     afc:	4806      	ldr	r0, [pc, #24]	; (b18 <mdmResp_KhttpCfgHandler+0x30>)
     afe:	47a8      	blx	r5

	sessionID = response[11];
     b00:	4806      	ldr	r0, [pc, #24]	; (b1c <mdmResp_KhttpCfgHandler+0x34>)
     b02:	7ae3      	ldrb	r3, [r4, #11]
     b04:	7003      	strb	r3, [r0, #0]
	mdmParser_SetKhttpHeaderString(&sessionID);
     b06:	4b06      	ldr	r3, [pc, #24]	; (b20 <mdmResp_KhttpCfgHandler+0x38>)
     b08:	4798      	blx	r3
     b0a:	bd70      	pop	{r4, r5, r6, pc}
     b0c:	00004594 	.word	0x00004594
     b10:	00000ccd 	.word	0x00000ccd
     b14:	00000c89 	.word	0x00000c89
     b18:	00004494 	.word	0x00004494
     b1c:	20000494 	.word	0x20000494
     b20:	00000475 	.word	0x00000475

00000b24 <mdmResp_KhttpHeaderHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpHeaderHandler(uint8_t* response, uint8_t length)
{
     b24:	b570      	push	{r4, r5, r6, lr}
     b26:	4604      	mov	r4, r0
     b28:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTP HEADER handler");
     b2a:	4814      	ldr	r0, [pc, #80]	; (b7c <mdmResp_KhttpHeaderHandler+0x58>)
     b2c:	4d14      	ldr	r5, [pc, #80]	; (b80 <mdmResp_KhttpHeaderHandler+0x5c>)
     b2e:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     b30:	4631      	mov	r1, r6
     b32:	4620      	mov	r0, r4
     b34:	4b13      	ldr	r3, [pc, #76]	; (b84 <mdmResp_KhttpHeaderHandler+0x60>)
     b36:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     b38:	4813      	ldr	r0, [pc, #76]	; (b88 <mdmResp_KhttpHeaderHandler+0x64>)
     b3a:	47a8      	blx	r5

	if(0==memcmp(response,"CONNECT",7))
     b3c:	2207      	movs	r2, #7
     b3e:	4913      	ldr	r1, [pc, #76]	; (b8c <mdmResp_KhttpHeaderHandler+0x68>)
     b40:	4620      	mov	r0, r4
     b42:	4b13      	ldr	r3, [pc, #76]	; (b90 <mdmResp_KhttpHeaderHandler+0x6c>)
     b44:	4798      	blx	r3
     b46:	b138      	cbz	r0, b58 <mdmResp_KhttpHeaderHandler+0x34>
		mdmCtrlr_FlushRxBuffer();
		dataPacketSentOk = true;
	}
	else
	{
		headerResponseOk = false;
     b48:	4b12      	ldr	r3, [pc, #72]	; (b94 <mdmResp_KhttpHeaderHandler+0x70>)
     b4a:	2200      	movs	r2, #0
     b4c:	705a      	strb	r2, [r3, #1]
		dataPacketSentOk = false;
     b4e:	709a      	strb	r2, [r3, #2]
		DEBUG_PRINT("Header Response Not Ok");
     b50:	4811      	ldr	r0, [pc, #68]	; (b98 <mdmResp_KhttpHeaderHandler+0x74>)
     b52:	4b0b      	ldr	r3, [pc, #44]	; (b80 <mdmResp_KhttpHeaderHandler+0x5c>)
     b54:	4798      	blx	r3
     b56:	bd70      	pop	{r4, r5, r6, pc}
		headerResponseOk = true;
     b58:	4c0e      	ldr	r4, [pc, #56]	; (b94 <mdmResp_KhttpHeaderHandler+0x70>)
     b5a:	2501      	movs	r5, #1
     b5c:	7065      	strb	r5, [r4, #1]
		DEBUG_PRINT("Header Response Ok");
     b5e:	480f      	ldr	r0, [pc, #60]	; (b9c <mdmResp_KhttpHeaderHandler+0x78>)
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <mdmResp_KhttpHeaderHandler+0x5c>)
     b62:	4798      	blx	r3
		mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     b64:	2110      	movs	r1, #16
     b66:	480e      	ldr	r0, [pc, #56]	; (ba0 <mdmResp_KhttpHeaderHandler+0x7c>)
     b68:	4b0e      	ldr	r3, [pc, #56]	; (ba4 <mdmResp_KhttpHeaderHandler+0x80>)
     b6a:	4798      	blx	r3
		delay_ms(1000);
     b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     b70:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <mdmResp_KhttpHeaderHandler+0x84>)
     b72:	4798      	blx	r3
		mdmCtrlr_FlushRxBuffer();
     b74:	4b0d      	ldr	r3, [pc, #52]	; (bac <mdmResp_KhttpHeaderHandler+0x88>)
     b76:	4798      	blx	r3
		dataPacketSentOk = true;
     b78:	70a5      	strb	r5, [r4, #2]
     b7a:	bd70      	pop	{r4, r5, r6, pc}
     b7c:	000045a8 	.word	0x000045a8
     b80:	00000ccd 	.word	0x00000ccd
     b84:	00000c89 	.word	0x00000c89
     b88:	00004494 	.word	0x00004494
     b8c:	000045c0 	.word	0x000045c0
     b90:	0000312d 	.word	0x0000312d
     b94:	20000494 	.word	0x20000494
     b98:	000045dc 	.word	0x000045dc
     b9c:	000045c8 	.word	0x000045c8
     ba0:	00004254 	.word	0x00004254
     ba4:	0000072d 	.word	0x0000072d
     ba8:	000016a1 	.word	0x000016a1
     bac:	000007ad 	.word	0x000007ad

00000bb0 <mdmResp_KhttpGetHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpGetHandler(uint8_t* response, uint8_t length)
{
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	4605      	mov	r5, r0
     bb4:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTP GET handler");
     bb6:	4807      	ldr	r0, [pc, #28]	; (bd4 <mdmResp_KhttpGetHandler+0x24>)
     bb8:	4c07      	ldr	r4, [pc, #28]	; (bd8 <mdmResp_KhttpGetHandler+0x28>)
     bba:	47a0      	blx	r4
	DEBUG_PRINT("RECIEVED RESPONSE FROM WEB SERVER");
     bbc:	4807      	ldr	r0, [pc, #28]	; (bdc <mdmResp_KhttpGetHandler+0x2c>)
     bbe:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     bc0:	4631      	mov	r1, r6
     bc2:	4628      	mov	r0, r5
     bc4:	4b06      	ldr	r3, [pc, #24]	; (be0 <mdmResp_KhttpGetHandler+0x30>)
     bc6:	4798      	blx	r3
	dataPacketSentOk = true;
     bc8:	2201      	movs	r2, #1
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <mdmResp_KhttpGetHandler+0x34>)
     bcc:	709a      	strb	r2, [r3, #2]
	DEBUG_PRINT("\r\n\n");
     bce:	4806      	ldr	r0, [pc, #24]	; (be8 <mdmResp_KhttpGetHandler+0x38>)
     bd0:	47a0      	blx	r4
     bd2:	bd70      	pop	{r4, r5, r6, pc}
     bd4:	000045f4 	.word	0x000045f4
     bd8:	00000ccd 	.word	0x00000ccd
     bdc:	0000460c 	.word	0x0000460c
     be0:	00000c89 	.word	0x00000c89
     be4:	20000494 	.word	0x20000494
     be8:	00003f50 	.word	0x00003f50

00000bec <getDataPacketOkStatus>:
**
**===========================================================================*/
bool getDataPacketOkStatus(void)
{
	return dataPacketSentOk;
}
     bec:	4b01      	ldr	r3, [pc, #4]	; (bf4 <getDataPacketOkStatus+0x8>)
     bee:	7898      	ldrb	r0, [r3, #2]
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	20000494 	.word	0x20000494

00000bf8 <setDataPacketOkStatus>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void setDataPacketOkStatus(bool status)
{
	dataPacketSentOk = status;
     bf8:	4b01      	ldr	r3, [pc, #4]	; (c00 <setDataPacketOkStatus+0x8>)
     bfa:	7098      	strb	r0, [r3, #2]
     bfc:	4770      	bx	lr
     bfe:	bf00      	nop
     c00:	20000494 	.word	0x20000494

00000c04 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c08:	4604      	mov	r4, r0
     c0a:	460e      	mov	r6, r1
     c0c:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     c0e:	4d0e      	ldr	r5, [pc, #56]	; (c48 <usart_async_write+0x44>)
     c10:	4620      	mov	r0, r4
     c12:	47a8      	blx	r5
     c14:	2800      	cmp	r0, #0
     c16:	d0fb      	beq.n	c10 <usart_async_write+0xc>
     c18:	3e01      	subs	r6, #1
     c1a:	f8df 8030 	ldr.w	r8, [pc, #48]	; c4c <usart_async_write+0x48>
     c1e:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     c20:	f8df a02c 	ldr.w	sl, [pc, #44]	; c50 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     c24:	4d08      	ldr	r5, [pc, #32]	; (c48 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     c26:	7873      	ldrb	r3, [r6, #1]
     c28:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     c30:	4620      	mov	r0, r4
     c32:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     c34:	4620      	mov	r0, r4
     c36:	47a8      	blx	r5
     c38:	2800      	cmp	r0, #0
     c3a:	d0fb      	beq.n	c34 <usart_async_write+0x30>
		;
	} while (++offset < length);
     c3c:	3701      	adds	r7, #1
     c3e:	454f      	cmp	r7, r9
     c40:	d3f1      	bcc.n	c26 <usart_async_write+0x22>

	return (int32_t)offset;
}
     c42:	4638      	mov	r0, r7
     c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c48:	000023f7 	.word	0x000023f7
     c4c:	20000498 	.word	0x20000498
     c50:	000023e9 	.word	0x000023e9

00000c54 <SerialDebugTxByteSentCallBack>:
     c54:	2302      	movs	r3, #2
     c56:	7603      	strb	r3, [r0, #24]
     c58:	4770      	bx	lr

00000c5a <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	7603      	strb	r3, [r0, #24]
     c5e:	4770      	bx	lr

00000c60 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     c60:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     c62:	4c05      	ldr	r4, [pc, #20]	; (c78 <SerialDebugPrintInit+0x18>)
     c64:	4905      	ldr	r1, [pc, #20]	; (c7c <SerialDebugPrintInit+0x1c>)
     c66:	4620      	mov	r0, r4
     c68:	4b05      	ldr	r3, [pc, #20]	; (c80 <SerialDebugPrintInit+0x20>)
     c6a:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     c6c:	2201      	movs	r2, #1
     c6e:	4611      	mov	r1, r2
     c70:	4620      	mov	r0, r4
     c72:	4b04      	ldr	r3, [pc, #16]	; (c84 <SerialDebugPrintInit+0x24>)
     c74:	4798      	blx	r3
     c76:	bd10      	pop	{r4, pc}
     c78:	20000044 	.word	0x20000044
     c7c:	43000400 	.word	0x43000400
     c80:	00002371 	.word	0x00002371
     c84:	0000240d 	.word	0x0000240d

00000c88 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     c88:	b570      	push	{r4, r5, r6, lr}
     c8a:	4605      	mov	r5, r0
     c8c:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     c8e:	4c05      	ldr	r4, [pc, #20]	; (ca4 <SerialDebugPrint+0x1c>)
     c90:	4620      	mov	r0, r4
     c92:	4b05      	ldr	r3, [pc, #20]	; (ca8 <SerialDebugPrint+0x20>)
     c94:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     c96:	4632      	mov	r2, r6
     c98:	4629      	mov	r1, r5
     c9a:	4620      	mov	r0, r4
     c9c:	4b03      	ldr	r3, [pc, #12]	; (cac <SerialDebugPrint+0x24>)
     c9e:	4798      	blx	r3
     ca0:	bd70      	pop	{r4, r5, r6, pc}
     ca2:	bf00      	nop
     ca4:	20000044 	.word	0x20000044
     ca8:	000023d5 	.word	0x000023d5
     cac:	00000c05 	.word	0x00000c05

00000cb0 <SerialDebugTxDoneCallBack>:
{
     cb0:	b510      	push	{r4, lr}
     cb2:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     cb4:	2116      	movs	r1, #22
     cb6:	4803      	ldr	r0, [pc, #12]	; (cc4 <SerialDebugTxDoneCallBack+0x14>)
     cb8:	4b03      	ldr	r3, [pc, #12]	; (cc8 <SerialDebugTxDoneCallBack+0x18>)
     cba:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     cbc:	2301      	movs	r3, #1
     cbe:	7623      	strb	r3, [r4, #24]
     cc0:	bd10      	pop	{r4, pc}
     cc2:	bf00      	nop
     cc4:	0000464c 	.word	0x0000464c
     cc8:	00000c89 	.word	0x00000c89

00000ccc <ConsoleDebugPrint>:
}


void ConsoleDebugPrint(const uint8_t *const dataToPrint)
{
     ccc:	b510      	push	{r4, lr}
     cce:	b09a      	sub	sp, #104	; 0x68
     cd0:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     cd2:	2264      	movs	r2, #100	; 0x64
     cd4:	2100      	movs	r1, #0
     cd6:	a801      	add	r0, sp, #4
     cd8:	4b09      	ldr	r3, [pc, #36]	; (d00 <ConsoleDebugPrint+0x34>)
     cda:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
     cdc:	4b09      	ldr	r3, [pc, #36]	; (d04 <ConsoleDebugPrint+0x38>)
     cde:	4622      	mov	r2, r4
     ce0:	4909      	ldr	r1, [pc, #36]	; (d08 <ConsoleDebugPrint+0x3c>)
     ce2:	a801      	add	r0, sp, #4
     ce4:	4c09      	ldr	r4, [pc, #36]	; (d0c <ConsoleDebugPrint+0x40>)
     ce6:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     ce8:	a801      	add	r0, sp, #4
     cea:	4b09      	ldr	r3, [pc, #36]	; (d10 <ConsoleDebugPrint+0x44>)
     cec:	4798      	blx	r3
     cee:	b281      	uxth	r1, r0
     cf0:	a801      	add	r0, sp, #4
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <ConsoleDebugPrint+0x48>)
     cf4:	4798      	blx	r3
	delay_ms(250);
     cf6:	20fa      	movs	r0, #250	; 0xfa
     cf8:	4b07      	ldr	r3, [pc, #28]	; (d18 <ConsoleDebugPrint+0x4c>)
     cfa:	4798      	blx	r3
}
     cfc:	b01a      	add	sp, #104	; 0x68
     cfe:	bd10      	pop	{r4, pc}
     d00:	00003195 	.word	0x00003195
     d04:	00004494 	.word	0x00004494
     d08:	00004670 	.word	0x00004670
     d0c:	0000331d 	.word	0x0000331d
     d10:	00003375 	.word	0x00003375
     d14:	00000c89 	.word	0x00000c89
     d18:	000016a1 	.word	0x000016a1

00000d1c <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     d1c:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     d1e:	2204      	movs	r2, #4
     d20:	4b0b      	ldr	r3, [pc, #44]	; (d50 <SERCOM5_2_Handler+0x34>)
     d22:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
     d24:	4d0b      	ldr	r5, [pc, #44]	; (d54 <SERCOM5_2_Handler+0x38>)
     d26:	4c0c      	ldr	r4, [pc, #48]	; (d58 <SERCOM5_2_Handler+0x3c>)
     d28:	4628      	mov	r0, r5
     d2a:	47a0      	blx	r4
     d2c:	2800      	cmp	r0, #0
     d2e:	d0fb      	beq.n	d28 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
     d30:	4808      	ldr	r0, [pc, #32]	; (d54 <SERCOM5_2_Handler+0x38>)
     d32:	4b0a      	ldr	r3, [pc, #40]	; (d5c <SERCOM5_2_Handler+0x40>)
     d34:	4798      	blx	r3
     d36:	490a      	ldr	r1, [pc, #40]	; (d60 <SERCOM5_2_Handler+0x44>)
     d38:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     d3a:	2300      	movs	r3, #0
     d3c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     d3e:	4c09      	ldr	r4, [pc, #36]	; (d64 <SERCOM5_2_Handler+0x48>)
     d40:	4620      	mov	r0, r4
     d42:	4b09      	ldr	r3, [pc, #36]	; (d68 <SERCOM5_2_Handler+0x4c>)
     d44:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     d46:	2105      	movs	r1, #5
     d48:	4620      	mov	r0, r4
     d4a:	4b08      	ldr	r3, [pc, #32]	; (d6c <SERCOM5_2_Handler+0x50>)
     d4c:	4798      	blx	r3
     d4e:	bd38      	pop	{r3, r4, r5, pc}
     d50:	43000400 	.word	0x43000400
     d54:	20000044 	.word	0x20000044
     d58:	00002401 	.word	0x00002401
     d5c:	000023ef 	.word	0x000023ef
     d60:	200013b8 	.word	0x200013b8
     d64:	200013bc 	.word	0x200013bc
     d68:	00003365 	.word	0x00003365
     d6c:	00000c89 	.word	0x00000c89

00000d70 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     d70:	b508      	push	{r3, lr}
	system_init();
     d72:	4b01      	ldr	r3, [pc, #4]	; (d78 <atmel_start_init+0x8>)
     d74:	4798      	blx	r3
     d76:	bd08      	pop	{r3, pc}
     d78:	000014b1 	.word	0x000014b1

00000d7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     d7c:	e7fe      	b.n	d7c <Dummy_Handler>
	...

00000d80 <Reset_Handler>:
{
     d80:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     d82:	4b1c      	ldr	r3, [pc, #112]	; (df4 <Reset_Handler+0x74>)
     d84:	4a1c      	ldr	r2, [pc, #112]	; (df8 <Reset_Handler+0x78>)
     d86:	429a      	cmp	r2, r3
     d88:	d010      	beq.n	dac <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     d8a:	4b1c      	ldr	r3, [pc, #112]	; (dfc <Reset_Handler+0x7c>)
     d8c:	4a19      	ldr	r2, [pc, #100]	; (df4 <Reset_Handler+0x74>)
     d8e:	429a      	cmp	r2, r3
     d90:	d20c      	bcs.n	dac <Reset_Handler+0x2c>
     d92:	3b01      	subs	r3, #1
     d94:	1a9b      	subs	r3, r3, r2
     d96:	f023 0303 	bic.w	r3, r3, #3
     d9a:	3304      	adds	r3, #4
     d9c:	4413      	add	r3, r2
     d9e:	4916      	ldr	r1, [pc, #88]	; (df8 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     da0:	f851 0b04 	ldr.w	r0, [r1], #4
     da4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     da8:	429a      	cmp	r2, r3
     daa:	d1f9      	bne.n	da0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     dac:	4b14      	ldr	r3, [pc, #80]	; (e00 <Reset_Handler+0x80>)
     dae:	4a15      	ldr	r2, [pc, #84]	; (e04 <Reset_Handler+0x84>)
     db0:	429a      	cmp	r2, r3
     db2:	d20a      	bcs.n	dca <Reset_Handler+0x4a>
     db4:	3b01      	subs	r3, #1
     db6:	1a9b      	subs	r3, r3, r2
     db8:	f023 0303 	bic.w	r3, r3, #3
     dbc:	3304      	adds	r3, #4
     dbe:	4413      	add	r3, r2
                *pDest++ = 0;
     dc0:	2100      	movs	r1, #0
     dc2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     dc6:	4293      	cmp	r3, r2
     dc8:	d1fb      	bne.n	dc2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     dca:	4b0f      	ldr	r3, [pc, #60]	; (e08 <Reset_Handler+0x88>)
     dcc:	4a0f      	ldr	r2, [pc, #60]	; (e0c <Reset_Handler+0x8c>)
     dce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     dd2:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     dd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     dd8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     de4:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     de8:	4b09      	ldr	r3, [pc, #36]	; (e10 <Reset_Handler+0x90>)
     dea:	4798      	blx	r3
        main();
     dec:	4b09      	ldr	r3, [pc, #36]	; (e14 <Reset_Handler+0x94>)
     dee:	4798      	blx	r3
     df0:	e7fe      	b.n	df0 <Reset_Handler+0x70>
     df2:	bf00      	nop
     df4:	20000000 	.word	0x20000000
     df8:	00004ce4 	.word	0x00004ce4
     dfc:	2000017c 	.word	0x2000017c
     e00:	20001584 	.word	0x20001584
     e04:	20000180 	.word	0x20000180
     e08:	e000ed00 	.word	0xe000ed00
     e0c:	00000000 	.word	0x00000000
     e10:	000030e5 	.word	0x000030e5
     e14:	00002dad 	.word	0x00002dad

00000e18 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     e18:	4a04      	ldr	r2, [pc, #16]	; (e2c <AC_0_CLOCK_init+0x14>)
     e1a:	69d3      	ldr	r3, [r2, #28]
     e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e20:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     e22:	2240      	movs	r2, #64	; 0x40
     e24:	4b02      	ldr	r3, [pc, #8]	; (e30 <AC_0_CLOCK_init+0x18>)
     e26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     e2a:	4770      	bx	lr
     e2c:	40000800 	.word	0x40000800
     e30:	40001c00 	.word	0x40001c00

00000e34 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     e34:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     e36:	4b03      	ldr	r3, [pc, #12]	; (e44 <AC_0_init+0x10>)
     e38:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     e3a:	4903      	ldr	r1, [pc, #12]	; (e48 <AC_0_init+0x14>)
     e3c:	4803      	ldr	r0, [pc, #12]	; (e4c <AC_0_init+0x18>)
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <AC_0_init+0x1c>)
     e40:	4798      	blx	r3
     e42:	bd08      	pop	{r3, pc}
     e44:	00000e19 	.word	0x00000e19
     e48:	42002000 	.word	0x42002000
     e4c:	20001464 	.word	0x20001464
     e50:	000015d1 	.word	0x000015d1

00000e54 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e54:	4b5d      	ldr	r3, [pc, #372]	; (fcc <ADC_0_PORT_init+0x178>)
     e56:	2204      	movs	r2, #4
     e58:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e5e:	629a      	str	r2, [r3, #40]	; 0x28
     e60:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e64:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e6e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e72:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e76:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e7a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e7e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e82:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e86:	2108      	movs	r1, #8
     e88:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e8e:	6299      	str	r1, [r3, #40]	; 0x28
     e90:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e92:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     e96:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e9a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ea2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ea6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     eaa:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eae:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
     eb6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ebe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ec2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ec6:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     eca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ece:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ed2:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ed6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     eda:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ede:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ee2:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
     eea:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ef2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     ef6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     efa:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     efe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f02:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f06:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f0a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f0e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f12:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f16:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f1a:	2110      	movs	r1, #16
     f1c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f22:	6299      	str	r1, [r3, #40]	; 0x28
     f24:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f26:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     f2a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f2e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f32:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f36:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f3a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f3e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f42:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f46:	2120      	movs	r1, #32
     f48:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f4a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f4e:	6299      	str	r1, [r3, #40]	; 0x28
     f50:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f52:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     f56:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f5a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f5e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f62:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f66:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f6a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f6e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f72:	2140      	movs	r1, #64	; 0x40
     f74:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f7a:	6299      	str	r1, [r3, #40]	; 0x28
     f7c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f7e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     f82:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f86:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f8e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f92:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f96:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f9a:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f9e:	2180      	movs	r1, #128	; 0x80
     fa0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     fa6:	6299      	str	r1, [r3, #40]	; 0x28
     fa8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     faa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     fae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fb2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fba:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     fbe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     fc2:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fc6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     fca:	4770      	bx	lr
     fcc:	41008000 	.word	0x41008000

00000fd0 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     fd0:	4a04      	ldr	r2, [pc, #16]	; (fe4 <ADC_0_CLOCK_init+0x14>)
     fd2:	6a13      	ldr	r3, [r2, #32]
     fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fd8:	6213      	str	r3, [r2, #32]
     fda:	2241      	movs	r2, #65	; 0x41
     fdc:	4b02      	ldr	r3, [pc, #8]	; (fe8 <ADC_0_CLOCK_init+0x18>)
     fde:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     fe2:	4770      	bx	lr
     fe4:	40000800 	.word	0x40000800
     fe8:	40001c00 	.word	0x40001c00

00000fec <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     fec:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <ADC_0_init+0x18>)
     ff0:	4798      	blx	r3
	ADC_0_PORT_init();
     ff2:	4b05      	ldr	r3, [pc, #20]	; (1008 <ADC_0_init+0x1c>)
     ff4:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     ff6:	2200      	movs	r2, #0
     ff8:	4904      	ldr	r1, [pc, #16]	; (100c <ADC_0_init+0x20>)
     ffa:	4805      	ldr	r0, [pc, #20]	; (1010 <ADC_0_init+0x24>)
     ffc:	4b05      	ldr	r3, [pc, #20]	; (1014 <ADC_0_init+0x28>)
     ffe:	4798      	blx	r3
    1000:	bd08      	pop	{r3, pc}
    1002:	bf00      	nop
    1004:	00000fd1 	.word	0x00000fd1
    1008:	00000e55 	.word	0x00000e55
    100c:	43001c00 	.word	0x43001c00
    1010:	20001474 	.word	0x20001474
    1014:	00001601 	.word	0x00001601

00001018 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    1018:	4a04      	ldr	r2, [pc, #16]	; (102c <ADC_1_CLOCK_init+0x14>)
    101a:	6a13      	ldr	r3, [r2, #32]
    101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1020:	6213      	str	r3, [r2, #32]
    1022:	2240      	movs	r2, #64	; 0x40
    1024:	4b02      	ldr	r3, [pc, #8]	; (1030 <ADC_1_CLOCK_init+0x18>)
    1026:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    102a:	4770      	bx	lr
    102c:	40000800 	.word	0x40000800
    1030:	40001c00 	.word	0x40001c00

00001034 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1034:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1036:	4b04      	ldr	r3, [pc, #16]	; (1048 <ADC_1_init+0x14>)
    1038:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    103a:	2200      	movs	r2, #0
    103c:	4903      	ldr	r1, [pc, #12]	; (104c <ADC_1_init+0x18>)
    103e:	4804      	ldr	r0, [pc, #16]	; (1050 <ADC_1_init+0x1c>)
    1040:	4b04      	ldr	r3, [pc, #16]	; (1054 <ADC_1_init+0x20>)
    1042:	4798      	blx	r3
    1044:	bd08      	pop	{r3, pc}
    1046:	bf00      	nop
    1048:	00001019 	.word	0x00001019
    104c:	43002000 	.word	0x43002000
    1050:	2000152c 	.word	0x2000152c
    1054:	00001601 	.word	0x00001601

00001058 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    1058:	4a04      	ldr	r2, [pc, #16]	; (106c <DAC_0_CLOCK_init+0x14>)
    105a:	6a13      	ldr	r3, [r2, #32]
    105c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1060:	6213      	str	r3, [r2, #32]
    1062:	2240      	movs	r2, #64	; 0x40
    1064:	4b02      	ldr	r3, [pc, #8]	; (1070 <DAC_0_CLOCK_init+0x18>)
    1066:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    106a:	4770      	bx	lr
    106c:	40000800 	.word	0x40000800
    1070:	40001c00 	.word	0x40001c00

00001074 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    1074:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    1076:	4b03      	ldr	r3, [pc, #12]	; (1084 <DAC_0_init+0x10>)
    1078:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    107a:	4903      	ldr	r1, [pc, #12]	; (1088 <DAC_0_init+0x14>)
    107c:	4803      	ldr	r0, [pc, #12]	; (108c <DAC_0_init+0x18>)
    107e:	4b04      	ldr	r3, [pc, #16]	; (1090 <DAC_0_init+0x1c>)
    1080:	4798      	blx	r3
    1082:	bd08      	pop	{r3, pc}
    1084:	00001059 	.word	0x00001059
    1088:	43002400 	.word	0x43002400
    108c:	2000149c 	.word	0x2000149c
    1090:	0000164d 	.word	0x0000164d

00001094 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    1094:	b508      	push	{r3, lr}
    1096:	2240      	movs	r2, #64	; 0x40
    1098:	4b05      	ldr	r3, [pc, #20]	; (10b0 <EXTERNAL_IRQ_0_init+0x1c>)
    109a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    109e:	4a05      	ldr	r2, [pc, #20]	; (10b4 <EXTERNAL_IRQ_0_init+0x20>)
    10a0:	6953      	ldr	r3, [r2, #20]
    10a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    10a6:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    10a8:	4b03      	ldr	r3, [pc, #12]	; (10b8 <EXTERNAL_IRQ_0_init+0x24>)
    10aa:	4798      	blx	r3
    10ac:	bd08      	pop	{r3, pc}
    10ae:	bf00      	nop
    10b0:	40001c00 	.word	0x40001c00
    10b4:	40000800 	.word	0x40000800
    10b8:	00001705 	.word	0x00001705

000010bc <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    10bc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    10be:	4a04      	ldr	r2, [pc, #16]	; (10d0 <EVENT_SYSTEM_0_init+0x14>)
    10c0:	6993      	ldr	r3, [r2, #24]
    10c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    10c6:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    10c8:	4b02      	ldr	r3, [pc, #8]	; (10d4 <EVENT_SYSTEM_0_init+0x18>)
    10ca:	4798      	blx	r3
    10cc:	bd08      	pop	{r3, pc}
    10ce:	bf00      	nop
    10d0:	40000800 	.word	0x40000800
    10d4:	000016c1 	.word	0x000016c1

000010d8 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    10d8:	4a02      	ldr	r2, [pc, #8]	; (10e4 <FLASH_0_CLOCK_init+0xc>)
    10da:	6913      	ldr	r3, [r2, #16]
    10dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10e0:	6113      	str	r3, [r2, #16]
    10e2:	4770      	bx	lr
    10e4:	40000800 	.word	0x40000800

000010e8 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    10e8:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    10ea:	4b03      	ldr	r3, [pc, #12]	; (10f8 <FLASH_0_init+0x10>)
    10ec:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    10ee:	4903      	ldr	r1, [pc, #12]	; (10fc <FLASH_0_init+0x14>)
    10f0:	4803      	ldr	r0, [pc, #12]	; (1100 <FLASH_0_init+0x18>)
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <FLASH_0_init+0x1c>)
    10f4:	4798      	blx	r3
    10f6:	bd08      	pop	{r3, pc}
    10f8:	000010d9 	.word	0x000010d9
    10fc:	41004000 	.word	0x41004000
    1100:	20001428 	.word	0x20001428
    1104:	0000173d 	.word	0x0000173d

00001108 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1108:	4b10      	ldr	r3, [pc, #64]	; (114c <ModemData_PORT_init+0x44>)
    110a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    110e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1112:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    111a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    111e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1122:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    112a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    112e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1132:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1136:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    113a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    113e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1142:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    114a:	4770      	bx	lr
    114c:	41008000 	.word	0x41008000

00001150 <ModemData_CLOCK_init>:
    1150:	4b06      	ldr	r3, [pc, #24]	; (116c <ModemData_CLOCK_init+0x1c>)
    1152:	2240      	movs	r2, #64	; 0x40
    1154:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1158:	224a      	movs	r2, #74	; 0x4a
    115a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    115e:	4a04      	ldr	r2, [pc, #16]	; (1170 <ModemData_CLOCK_init+0x20>)
    1160:	6993      	ldr	r3, [r2, #24]
    1162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1166:	6193      	str	r3, [r2, #24]
    1168:	4770      	bx	lr
    116a:	bf00      	nop
    116c:	40001c00 	.word	0x40001c00
    1170:	40000800 	.word	0x40000800

00001174 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    1174:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    1176:	4b03      	ldr	r3, [pc, #12]	; (1184 <ModemData_init+0x10>)
    1178:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <ModemData_init+0x14>)
    117c:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <ModemData_init+0x18>)
    1180:	4798      	blx	r3
    1182:	bd08      	pop	{r3, pc}
    1184:	00001151 	.word	0x00001151
    1188:	000005bd 	.word	0x000005bd
    118c:	00001109 	.word	0x00001109

00001190 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1190:	4b10      	ldr	r3, [pc, #64]	; (11d4 <SerialDebug_PORT_init+0x44>)
    1192:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1196:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    119a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    119e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11a2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11aa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11ae:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11b2:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    11b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11be:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11c2:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11ca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11ce:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    11d2:	4770      	bx	lr
    11d4:	41008000 	.word	0x41008000

000011d8 <SerialDebug_CLOCK_init>:
    11d8:	4b06      	ldr	r3, [pc, #24]	; (11f4 <SerialDebug_CLOCK_init+0x1c>)
    11da:	2240      	movs	r2, #64	; 0x40
    11dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    11e0:	224a      	movs	r2, #74	; 0x4a
    11e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    11e6:	4a04      	ldr	r2, [pc, #16]	; (11f8 <SerialDebug_CLOCK_init+0x20>)
    11e8:	6a13      	ldr	r3, [r2, #32]
    11ea:	f043 0302 	orr.w	r3, r3, #2
    11ee:	6213      	str	r3, [r2, #32]
    11f0:	4770      	bx	lr
    11f2:	bf00      	nop
    11f4:	40001c00 	.word	0x40001c00
    11f8:	40000800 	.word	0x40000800

000011fc <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    11fc:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    11fe:	4b03      	ldr	r3, [pc, #12]	; (120c <SerialDebug_init+0x10>)
    1200:	4798      	blx	r3
	SerialDebugPrintInit();
    1202:	4b03      	ldr	r3, [pc, #12]	; (1210 <SerialDebug_init+0x14>)
    1204:	4798      	blx	r3
	SerialDebug_PORT_init();
    1206:	4b03      	ldr	r3, [pc, #12]	; (1214 <SerialDebug_init+0x18>)
    1208:	4798      	blx	r3
    120a:	bd08      	pop	{r3, pc}
    120c:	000011d9 	.word	0x000011d9
    1210:	00000c61 	.word	0x00000c61
    1214:	00001191 	.word	0x00001191

00001218 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1218:	b508      	push	{r3, lr}
	delay_init(SysTick);
    121a:	4802      	ldr	r0, [pc, #8]	; (1224 <delay_driver_init+0xc>)
    121c:	4b02      	ldr	r3, [pc, #8]	; (1228 <delay_driver_init+0x10>)
    121e:	4798      	blx	r3
    1220:	bd08      	pop	{r3, pc}
    1222:	bf00      	nop
    1224:	e000e010 	.word	0xe000e010
    1228:	0000168d 	.word	0x0000168d

0000122c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    122c:	4a04      	ldr	r2, [pc, #16]	; (1240 <PWM_0_CLOCK_init+0x14>)
    122e:	6953      	ldr	r3, [r2, #20]
    1230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1234:	6153      	str	r3, [r2, #20]
    1236:	2240      	movs	r2, #64	; 0x40
    1238:	4b02      	ldr	r3, [pc, #8]	; (1244 <PWM_0_CLOCK_init+0x18>)
    123a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    123e:	4770      	bx	lr
    1240:	40000800 	.word	0x40000800
    1244:	40001c00 	.word	0x40001c00

00001248 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    1248:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    124a:	4b05      	ldr	r3, [pc, #20]	; (1260 <PWM_0_init+0x18>)
    124c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    124e:	4b05      	ldr	r3, [pc, #20]	; (1264 <PWM_0_init+0x1c>)
    1250:	4798      	blx	r3
    1252:	4602      	mov	r2, r0
    1254:	4904      	ldr	r1, [pc, #16]	; (1268 <PWM_0_init+0x20>)
    1256:	4805      	ldr	r0, [pc, #20]	; (126c <PWM_0_init+0x24>)
    1258:	4b05      	ldr	r3, [pc, #20]	; (1270 <PWM_0_init+0x28>)
    125a:	4798      	blx	r3
    125c:	bd08      	pop	{r3, pc}
    125e:	bf00      	nop
    1260:	0000122d 	.word	0x0000122d
    1264:	00002cc5 	.word	0x00002cc5
    1268:	40003800 	.word	0x40003800
    126c:	200013f0 	.word	0x200013f0
    1270:	00001799 	.word	0x00001799

00001274 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1274:	4a04      	ldr	r2, [pc, #16]	; (1288 <PWM_1_CLOCK_init+0x14>)
    1276:	6953      	ldr	r3, [r2, #20]
    1278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    127c:	6153      	str	r3, [r2, #20]
    127e:	2240      	movs	r2, #64	; 0x40
    1280:	4b02      	ldr	r3, [pc, #8]	; (128c <PWM_1_CLOCK_init+0x18>)
    1282:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1286:	4770      	bx	lr
    1288:	40000800 	.word	0x40000800
    128c:	40001c00 	.word	0x40001c00

00001290 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    1290:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    1292:	4b05      	ldr	r3, [pc, #20]	; (12a8 <PWM_1_init+0x18>)
    1294:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    1296:	4b05      	ldr	r3, [pc, #20]	; (12ac <PWM_1_init+0x1c>)
    1298:	4798      	blx	r3
    129a:	4602      	mov	r2, r0
    129c:	4904      	ldr	r1, [pc, #16]	; (12b0 <PWM_1_init+0x20>)
    129e:	4805      	ldr	r0, [pc, #20]	; (12b4 <PWM_1_init+0x24>)
    12a0:	4b05      	ldr	r3, [pc, #20]	; (12b8 <PWM_1_init+0x28>)
    12a2:	4798      	blx	r3
    12a4:	bd08      	pop	{r3, pc}
    12a6:	bf00      	nop
    12a8:	00001275 	.word	0x00001275
    12ac:	00002cc5 	.word	0x00002cc5
    12b0:	40003c00 	.word	0x40003c00
    12b4:	20001510 	.word	0x20001510
    12b8:	00001799 	.word	0x00001799

000012bc <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    12bc:	4a04      	ldr	r2, [pc, #16]	; (12d0 <PWM_2_CLOCK_init+0x14>)
    12be:	6993      	ldr	r3, [r2, #24]
    12c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    12c4:	6193      	str	r3, [r2, #24]
    12c6:	2240      	movs	r2, #64	; 0x40
    12c8:	4b02      	ldr	r3, [pc, #8]	; (12d4 <PWM_2_CLOCK_init+0x18>)
    12ca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    12ce:	4770      	bx	lr
    12d0:	40000800 	.word	0x40000800
    12d4:	40001c00 	.word	0x40001c00

000012d8 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    12d8:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <PWM_2_init+0x18>)
    12dc:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    12de:	4b05      	ldr	r3, [pc, #20]	; (12f4 <PWM_2_init+0x1c>)
    12e0:	4798      	blx	r3
    12e2:	4602      	mov	r2, r0
    12e4:	4904      	ldr	r1, [pc, #16]	; (12f8 <PWM_2_init+0x20>)
    12e6:	4805      	ldr	r0, [pc, #20]	; (12fc <PWM_2_init+0x24>)
    12e8:	4b05      	ldr	r3, [pc, #20]	; (1300 <PWM_2_init+0x28>)
    12ea:	4798      	blx	r3
    12ec:	bd08      	pop	{r3, pc}
    12ee:	bf00      	nop
    12f0:	000012bd 	.word	0x000012bd
    12f4:	00002cc5 	.word	0x00002cc5
    12f8:	4101a000 	.word	0x4101a000
    12fc:	2000140c 	.word	0x2000140c
    1300:	00001799 	.word	0x00001799

00001304 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1304:	4a04      	ldr	r2, [pc, #16]	; (1318 <TIMER_3_CLOCK_init+0x14>)
    1306:	6993      	ldr	r3, [r2, #24]
    1308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    130c:	6193      	str	r3, [r2, #24]
    130e:	2240      	movs	r2, #64	; 0x40
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <TIMER_3_CLOCK_init+0x18>)
    1312:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1316:	4770      	bx	lr
    1318:	40000800 	.word	0x40000800
    131c:	40001c00 	.word	0x40001c00

00001320 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1320:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1322:	4b05      	ldr	r3, [pc, #20]	; (1338 <TIMER_3_init+0x18>)
    1324:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <TIMER_3_init+0x1c>)
    1328:	4798      	blx	r3
    132a:	4602      	mov	r2, r0
    132c:	4904      	ldr	r1, [pc, #16]	; (1340 <TIMER_3_init+0x20>)
    132e:	4805      	ldr	r0, [pc, #20]	; (1344 <TIMER_3_init+0x24>)
    1330:	4b05      	ldr	r3, [pc, #20]	; (1348 <TIMER_3_init+0x28>)
    1332:	4798      	blx	r3
    1334:	bd08      	pop	{r3, pc}
    1336:	bf00      	nop
    1338:	00001305 	.word	0x00001305
    133c:	0000277d 	.word	0x0000277d
    1340:	41016000 	.word	0x41016000
    1344:	20001530 	.word	0x20001530
    1348:	000018b5 	.word	0x000018b5

0000134c <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    134c:	4a04      	ldr	r2, [pc, #16]	; (1360 <TIMER_4_CLOCK_init+0x14>)
    134e:	6993      	ldr	r3, [r2, #24]
    1350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1354:	6193      	str	r3, [r2, #24]
    1356:	2240      	movs	r2, #64	; 0x40
    1358:	4b02      	ldr	r3, [pc, #8]	; (1364 <TIMER_4_CLOCK_init+0x18>)
    135a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    135e:	4770      	bx	lr
    1360:	40000800 	.word	0x40000800
    1364:	40001c00 	.word	0x40001c00

00001368 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    1368:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <TIMER_4_init+0x18>)
    136c:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <TIMER_4_init+0x1c>)
    1370:	4798      	blx	r3
    1372:	4602      	mov	r2, r0
    1374:	4904      	ldr	r1, [pc, #16]	; (1388 <TIMER_4_init+0x20>)
    1376:	4805      	ldr	r0, [pc, #20]	; (138c <TIMER_4_init+0x24>)
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <TIMER_4_init+0x28>)
    137a:	4798      	blx	r3
    137c:	bd08      	pop	{r3, pc}
    137e:	bf00      	nop
    1380:	0000134d 	.word	0x0000134d
    1384:	0000277d 	.word	0x0000277d
    1388:	41018000 	.word	0x41018000
    138c:	20001478 	.word	0x20001478
    1390:	000018b5 	.word	0x000018b5

00001394 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1394:	4a04      	ldr	r2, [pc, #16]	; (13a8 <TIMER_5_CLOCK_init+0x14>)
    1396:	69d3      	ldr	r3, [r2, #28]
    1398:	f043 0308 	orr.w	r3, r3, #8
    139c:	61d3      	str	r3, [r2, #28]
    139e:	2240      	movs	r2, #64	; 0x40
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <TIMER_5_CLOCK_init+0x18>)
    13a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    13a6:	4770      	bx	lr
    13a8:	40000800 	.word	0x40000800
    13ac:	40001c00 	.word	0x40001c00

000013b0 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    13b0:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <TIMER_5_init+0x18>)
    13b4:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    13b6:	4b05      	ldr	r3, [pc, #20]	; (13cc <TIMER_5_init+0x1c>)
    13b8:	4798      	blx	r3
    13ba:	4602      	mov	r2, r0
    13bc:	4904      	ldr	r1, [pc, #16]	; (13d0 <TIMER_5_init+0x20>)
    13be:	4805      	ldr	r0, [pc, #20]	; (13d4 <TIMER_5_init+0x24>)
    13c0:	4b05      	ldr	r3, [pc, #20]	; (13d8 <TIMER_5_init+0x28>)
    13c2:	4798      	blx	r3
    13c4:	bd08      	pop	{r3, pc}
    13c6:	bf00      	nop
    13c8:	00001395 	.word	0x00001395
    13cc:	0000277d 	.word	0x0000277d
    13d0:	42000c00 	.word	0x42000c00
    13d4:	200014d0 	.word	0x200014d0
    13d8:	000018b5 	.word	0x000018b5

000013dc <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    13dc:	4a04      	ldr	r2, [pc, #16]	; (13f0 <TIMER_6_CLOCK_init+0x14>)
    13de:	69d3      	ldr	r3, [r2, #28]
    13e0:	f043 0310 	orr.w	r3, r3, #16
    13e4:	61d3      	str	r3, [r2, #28]
    13e6:	2240      	movs	r2, #64	; 0x40
    13e8:	4b02      	ldr	r3, [pc, #8]	; (13f4 <TIMER_6_CLOCK_init+0x18>)
    13ea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    13ee:	4770      	bx	lr
    13f0:	40000800 	.word	0x40000800
    13f4:	40001c00 	.word	0x40001c00

000013f8 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    13f8:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    13fa:	4b05      	ldr	r3, [pc, #20]	; (1410 <TIMER_6_init+0x18>)
    13fc:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    13fe:	4b05      	ldr	r3, [pc, #20]	; (1414 <TIMER_6_init+0x1c>)
    1400:	4798      	blx	r3
    1402:	4602      	mov	r2, r0
    1404:	4904      	ldr	r1, [pc, #16]	; (1418 <TIMER_6_init+0x20>)
    1406:	4805      	ldr	r0, [pc, #20]	; (141c <TIMER_6_init+0x24>)
    1408:	4b05      	ldr	r3, [pc, #20]	; (1420 <TIMER_6_init+0x28>)
    140a:	4798      	blx	r3
    140c:	bd08      	pop	{r3, pc}
    140e:	bf00      	nop
    1410:	000013dd 	.word	0x000013dd
    1414:	0000277d 	.word	0x0000277d
    1418:	42001000 	.word	0x42001000
    141c:	200014f0 	.word	0x200014f0
    1420:	000018b5 	.word	0x000018b5

00001424 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1424:	4a04      	ldr	r2, [pc, #16]	; (1438 <TIMER_7_CLOCK_init+0x14>)
    1426:	6a13      	ldr	r3, [r2, #32]
    1428:	f043 0310 	orr.w	r3, r3, #16
    142c:	6213      	str	r3, [r2, #32]
    142e:	2240      	movs	r2, #64	; 0x40
    1430:	4b02      	ldr	r3, [pc, #8]	; (143c <TIMER_7_CLOCK_init+0x18>)
    1432:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1436:	4770      	bx	lr
    1438:	40000800 	.word	0x40000800
    143c:	40001c00 	.word	0x40001c00

00001440 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1440:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <TIMER_7_init+0x18>)
    1444:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    1446:	4b05      	ldr	r3, [pc, #20]	; (145c <TIMER_7_init+0x1c>)
    1448:	4798      	blx	r3
    144a:	4602      	mov	r2, r0
    144c:	4904      	ldr	r1, [pc, #16]	; (1460 <TIMER_7_init+0x20>)
    144e:	4805      	ldr	r0, [pc, #20]	; (1464 <TIMER_7_init+0x24>)
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <TIMER_7_init+0x28>)
    1452:	4798      	blx	r3
    1454:	bd08      	pop	{r3, pc}
    1456:	bf00      	nop
    1458:	00001425 	.word	0x00001425
    145c:	0000277d 	.word	0x0000277d
    1460:	43001000 	.word	0x43001000
    1464:	20001444 	.word	0x20001444
    1468:	000018b5 	.word	0x000018b5

0000146c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    146c:	4a02      	ldr	r2, [pc, #8]	; (1478 <WDT_0_CLOCK_init+0xc>)
    146e:	6953      	ldr	r3, [r2, #20]
    1470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1474:	6153      	str	r3, [r2, #20]
    1476:	4770      	bx	lr
    1478:	40000800 	.word	0x40000800

0000147c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    147c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    147e:	4b06      	ldr	r3, [pc, #24]	; (1498 <WDT_0_init+0x1c>)
    1480:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    1482:	2252      	movs	r2, #82	; 0x52
    1484:	4905      	ldr	r1, [pc, #20]	; (149c <WDT_0_init+0x20>)
    1486:	2001      	movs	r0, #1
    1488:	4b05      	ldr	r3, [pc, #20]	; (14a0 <WDT_0_init+0x24>)
    148a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    148c:	4805      	ldr	r0, [pc, #20]	; (14a4 <WDT_0_init+0x28>)
    148e:	4b06      	ldr	r3, [pc, #24]	; (14a8 <WDT_0_init+0x2c>)
    1490:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    1492:	4b06      	ldr	r3, [pc, #24]	; (14ac <WDT_0_init+0x30>)
    1494:	4798      	blx	r3
    1496:	bd08      	pop	{r3, pc}
    1498:	0000146d 	.word	0x0000146d
    149c:	00004678 	.word	0x00004678
    14a0:	000018f9 	.word	0x000018f9
    14a4:	20001498 	.word	0x20001498
    14a8:	40002000 	.word	0x40002000
    14ac:	00002d41 	.word	0x00002d41

000014b0 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
    14b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    14b4:	4b28      	ldr	r3, [pc, #160]	; (1558 <system_init+0xa8>)
    14b6:	4798      	blx	r3
	init_mcu();

	AC_0_init();
    14b8:	4b28      	ldr	r3, [pc, #160]	; (155c <system_init+0xac>)
    14ba:	4798      	blx	r3

	ADC_0_init();
    14bc:	4b28      	ldr	r3, [pc, #160]	; (1560 <system_init+0xb0>)
    14be:	4798      	blx	r3

	ADC_1_init();
    14c0:	4b28      	ldr	r3, [pc, #160]	; (1564 <system_init+0xb4>)
    14c2:	4798      	blx	r3

	DAC_0_init();
    14c4:	4b28      	ldr	r3, [pc, #160]	; (1568 <system_init+0xb8>)
    14c6:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    14c8:	4b28      	ldr	r3, [pc, #160]	; (156c <system_init+0xbc>)
    14ca:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    14cc:	4b28      	ldr	r3, [pc, #160]	; (1570 <system_init+0xc0>)
    14ce:	4798      	blx	r3

	FLASH_0_init();
    14d0:	4b28      	ldr	r3, [pc, #160]	; (1574 <system_init+0xc4>)
    14d2:	4798      	blx	r3

	SerialDebug_init();
    14d4:	4b28      	ldr	r3, [pc, #160]	; (1578 <system_init+0xc8>)
    14d6:	4798      	blx	r3
	
	ModemData_init();
    14d8:	4b28      	ldr	r3, [pc, #160]	; (157c <system_init+0xcc>)
    14da:	4798      	blx	r3

	delay_driver_init();
    14dc:	4b28      	ldr	r3, [pc, #160]	; (1580 <system_init+0xd0>)
    14de:	4798      	blx	r3

	PWM_0_init();
    14e0:	4b28      	ldr	r3, [pc, #160]	; (1584 <system_init+0xd4>)
    14e2:	4798      	blx	r3

	PWM_1_init();
    14e4:	4b28      	ldr	r3, [pc, #160]	; (1588 <system_init+0xd8>)
    14e6:	4798      	blx	r3

	PWM_2_init();
    14e8:	4b28      	ldr	r3, [pc, #160]	; (158c <system_init+0xdc>)
    14ea:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    14ec:	4c28      	ldr	r4, [pc, #160]	; (1590 <system_init+0xe0>)
    14ee:	69a3      	ldr	r3, [r4, #24]
    14f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    14f4:	61a3      	str	r3, [r4, #24]
    14f6:	4f27      	ldr	r7, [pc, #156]	; (1594 <system_init+0xe4>)
    14f8:	f04f 0840 	mov.w	r8, #64	; 0x40
    14fc:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    1500:	4e25      	ldr	r6, [pc, #148]	; (1598 <system_init+0xe8>)
    1502:	47b0      	blx	r6
    1504:	4602      	mov	r2, r0
    1506:	4925      	ldr	r1, [pc, #148]	; (159c <system_init+0xec>)
    1508:	4825      	ldr	r0, [pc, #148]	; (15a0 <system_init+0xf0>)
    150a:	4d26      	ldr	r5, [pc, #152]	; (15a4 <system_init+0xf4>)
    150c:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    150e:	69e3      	ldr	r3, [r4, #28]
    1510:	f043 0320 	orr.w	r3, r3, #32
    1514:	61e3      	str	r3, [r4, #28]
    1516:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    151a:	47b0      	blx	r6
    151c:	4602      	mov	r2, r0
    151e:	4922      	ldr	r1, [pc, #136]	; (15a8 <system_init+0xf8>)
    1520:	4822      	ldr	r0, [pc, #136]	; (15ac <system_init+0xfc>)
    1522:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1524:	69e3      	ldr	r3, [r4, #28]
    1526:	ea43 0308 	orr.w	r3, r3, r8
    152a:	61e3      	str	r3, [r4, #28]
    152c:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1530:	47b0      	blx	r6
    1532:	4602      	mov	r2, r0
    1534:	491e      	ldr	r1, [pc, #120]	; (15b0 <system_init+0x100>)
    1536:	481f      	ldr	r0, [pc, #124]	; (15b4 <system_init+0x104>)
    1538:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    153a:	4b1f      	ldr	r3, [pc, #124]	; (15b8 <system_init+0x108>)
    153c:	4798      	blx	r3

	TIMER_4_init();
    153e:	4b1f      	ldr	r3, [pc, #124]	; (15bc <system_init+0x10c>)
    1540:	4798      	blx	r3

	TIMER_5_init();
    1542:	4b1f      	ldr	r3, [pc, #124]	; (15c0 <system_init+0x110>)
    1544:	4798      	blx	r3

	TIMER_6_init();
    1546:	4b1f      	ldr	r3, [pc, #124]	; (15c4 <system_init+0x114>)
    1548:	4798      	blx	r3

	TIMER_7_init();
    154a:	4b1f      	ldr	r3, [pc, #124]	; (15c8 <system_init+0x118>)
    154c:	4798      	blx	r3

	WDT_0_init();
    154e:	4b1f      	ldr	r3, [pc, #124]	; (15cc <system_init+0x11c>)
    1550:	4798      	blx	r3
    1552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1556:	bf00      	nop
    1558:	00001c45 	.word	0x00001c45
    155c:	00000e35 	.word	0x00000e35
    1560:	00000fed 	.word	0x00000fed
    1564:	00001035 	.word	0x00001035
    1568:	00001075 	.word	0x00001075
    156c:	00001095 	.word	0x00001095
    1570:	000010bd 	.word	0x000010bd
    1574:	000010e9 	.word	0x000010e9
    1578:	000011fd 	.word	0x000011fd
    157c:	00001175 	.word	0x00001175
    1580:	00001219 	.word	0x00001219
    1584:	00001249 	.word	0x00001249
    1588:	00001291 	.word	0x00001291
    158c:	000012d9 	.word	0x000012d9
    1590:	40000800 	.word	0x40000800
    1594:	40001c00 	.word	0x40001c00
    1598:	00002cbd 	.word	0x00002cbd
    159c:	4101c000 	.word	0x4101c000
    15a0:	20001550 	.word	0x20001550
    15a4:	000018b5 	.word	0x000018b5
    15a8:	42001400 	.word	0x42001400
    15ac:	200014b0 	.word	0x200014b0
    15b0:	42001800 	.word	0x42001800
    15b4:	200013d0 	.word	0x200013d0
    15b8:	00001321 	.word	0x00001321
    15bc:	00001369 	.word	0x00001369
    15c0:	000013b1 	.word	0x000013b1
    15c4:	000013f9 	.word	0x000013f9
    15c8:	00001441 	.word	0x00001441
    15cc:	0000147d 	.word	0x0000147d

000015d0 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    15d0:	b538      	push	{r3, r4, r5, lr}
    15d2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    15d4:	4605      	mov	r5, r0
    15d6:	b158      	cbz	r0, 15f0 <ac_sync_init+0x20>
    15d8:	1c08      	adds	r0, r1, #0
    15da:	bf18      	it	ne
    15dc:	2001      	movne	r0, #1
    15de:	223b      	movs	r2, #59	; 0x3b
    15e0:	4904      	ldr	r1, [pc, #16]	; (15f4 <ac_sync_init+0x24>)
    15e2:	4b05      	ldr	r3, [pc, #20]	; (15f8 <ac_sync_init+0x28>)
    15e4:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    15e6:	4621      	mov	r1, r4
    15e8:	4628      	mov	r0, r5
    15ea:	4b04      	ldr	r3, [pc, #16]	; (15fc <ac_sync_init+0x2c>)
    15ec:	4798      	blx	r3
}
    15ee:	bd38      	pop	{r3, r4, r5, pc}
    15f0:	2000      	movs	r0, #0
    15f2:	e7f4      	b.n	15de <ac_sync_init+0xe>
    15f4:	00004694 	.word	0x00004694
    15f8:	000018f9 	.word	0x000018f9
    15fc:	00001b0d 	.word	0x00001b0d

00001600 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1600:	b538      	push	{r3, r4, r5, lr}
    1602:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1604:	4605      	mov	r5, r0
    1606:	b158      	cbz	r0, 1620 <adc_sync_init+0x20>
    1608:	1c08      	adds	r0, r1, #0
    160a:	bf18      	it	ne
    160c:	2001      	movne	r0, #1
    160e:	2243      	movs	r2, #67	; 0x43
    1610:	4904      	ldr	r1, [pc, #16]	; (1624 <adc_sync_init+0x24>)
    1612:	4b05      	ldr	r3, [pc, #20]	; (1628 <adc_sync_init+0x28>)
    1614:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1616:	4621      	mov	r1, r4
    1618:	4628      	mov	r0, r5
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <adc_sync_init+0x2c>)
    161c:	4798      	blx	r3
}
    161e:	bd38      	pop	{r3, r4, r5, pc}
    1620:	2000      	movs	r0, #0
    1622:	e7f4      	b.n	160e <adc_sync_init+0xe>
    1624:	000046b0 	.word	0x000046b0
    1628:	000018f9 	.word	0x000018f9
    162c:	00001be5 	.word	0x00001be5

00001630 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1630:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1634:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1636:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1638:	f3bf 8f5f 	dmb	sy
    163c:	4770      	bx	lr

0000163e <atomic_leave_critical>:
    163e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1642:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1644:	f383 8810 	msr	PRIMASK, r3
    1648:	4770      	bx	lr
	...

0000164c <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    164c:	b538      	push	{r3, r4, r5, lr}
    164e:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1650:	4604      	mov	r4, r0
    1652:	b198      	cbz	r0, 167c <dac_sync_init+0x30>
    1654:	1c08      	adds	r0, r1, #0
    1656:	bf18      	it	ne
    1658:	2001      	movne	r0, #1
    165a:	223c      	movs	r2, #60	; 0x3c
    165c:	4908      	ldr	r1, [pc, #32]	; (1680 <dac_sync_init+0x34>)
    165e:	4b09      	ldr	r3, [pc, #36]	; (1684 <dac_sync_init+0x38>)
    1660:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1662:	4629      	mov	r1, r5
    1664:	4620      	mov	r0, r4
    1666:	4b08      	ldr	r3, [pc, #32]	; (1688 <dac_sync_init+0x3c>)
    1668:	4798      	blx	r3
	if (rc) {
    166a:	4602      	mov	r2, r0
    166c:	b920      	cbnz	r0, 1678 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    166e:	2300      	movs	r3, #0
    1670:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1672:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1674:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1676:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1678:	4610      	mov	r0, r2
    167a:	bd38      	pop	{r3, r4, r5, pc}
    167c:	2000      	movs	r0, #0
    167e:	e7ec      	b.n	165a <dac_sync_init+0xe>
    1680:	000046cc 	.word	0x000046cc
    1684:	000018f9 	.word	0x000018f9
    1688:	00001cfd 	.word	0x00001cfd

0000168c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    168c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    168e:	4b02      	ldr	r3, [pc, #8]	; (1698 <delay_init+0xc>)
    1690:	6018      	str	r0, [r3, #0]
    1692:	4b02      	ldr	r3, [pc, #8]	; (169c <delay_init+0x10>)
    1694:	4798      	blx	r3
    1696:	bd08      	pop	{r3, pc}
    1698:	200004a4 	.word	0x200004a4
    169c:	00002479 	.word	0x00002479

000016a0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    16a0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <delay_ms+0x14>)
    16a4:	681c      	ldr	r4, [r3, #0]
    16a6:	4b04      	ldr	r3, [pc, #16]	; (16b8 <delay_ms+0x18>)
    16a8:	4798      	blx	r3
    16aa:	4601      	mov	r1, r0
    16ac:	4620      	mov	r0, r4
    16ae:	4b03      	ldr	r3, [pc, #12]	; (16bc <delay_ms+0x1c>)
    16b0:	4798      	blx	r3
    16b2:	bd10      	pop	{r4, pc}
    16b4:	200004a4 	.word	0x200004a4
    16b8:	00001c39 	.word	0x00001c39
    16bc:	0000248d 	.word	0x0000248d

000016c0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    16c0:	b508      	push	{r3, lr}
	return _event_system_init();
    16c2:	4b01      	ldr	r3, [pc, #4]	; (16c8 <event_system_init+0x8>)
    16c4:	4798      	blx	r3
}
    16c6:	bd08      	pop	{r3, pc}
    16c8:	00001f39 	.word	0x00001f39

000016cc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    16cc:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    16ce:	4b0c      	ldr	r3, [pc, #48]	; (1700 <process_ext_irq+0x34>)
    16d0:	685c      	ldr	r4, [r3, #4]
    16d2:	42a0      	cmp	r0, r4
    16d4:	d00e      	beq.n	16f4 <process_ext_irq+0x28>
    16d6:	2301      	movs	r3, #1
    16d8:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    16da:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    16dc:	25ff      	movs	r5, #255	; 0xff
    16de:	e003      	b.n	16e8 <process_ext_irq+0x1c>
    16e0:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    16e2:	185a      	adds	r2, r3, r1
    16e4:	0852      	lsrs	r2, r2, #1
    16e6:	d104      	bne.n	16f2 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    16e8:	42a0      	cmp	r0, r4
    16ea:	d9f9      	bls.n	16e0 <process_ext_irq+0x14>
	while (upper >= lower) {
    16ec:	b13b      	cbz	r3, 16fe <process_ext_irq+0x32>
			lower = middle + 1;
    16ee:	4631      	mov	r1, r6
    16f0:	e7f7      	b.n	16e2 <process_ext_irq+0x16>
    16f2:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    16f4:	4b02      	ldr	r3, [pc, #8]	; (1700 <process_ext_irq+0x34>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	b10b      	cbz	r3, 16fe <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    16fa:	4798      	blx	r3
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	bd70      	pop	{r4, r5, r6, pc}
    1700:	200004a8 	.word	0x200004a8

00001704 <ext_irq_init>:
{
    1704:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <ext_irq_init+0x18>)
    1708:	f04f 32ff 	mov.w	r2, #4294967295
    170c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    170e:	2200      	movs	r2, #0
    1710:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1712:	4803      	ldr	r0, [pc, #12]	; (1720 <ext_irq_init+0x1c>)
    1714:	4b03      	ldr	r3, [pc, #12]	; (1724 <ext_irq_init+0x20>)
    1716:	4798      	blx	r3
}
    1718:	bd08      	pop	{r3, pc}
    171a:	bf00      	nop
    171c:	200004a8 	.word	0x200004a8
    1720:	000016cd 	.word	0x000016cd
    1724:	00001eb9 	.word	0x00001eb9

00001728 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1728:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    172a:	6943      	ldr	r3, [r0, #20]
    172c:	b103      	cbz	r3, 1730 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    172e:	4798      	blx	r3
    1730:	bd08      	pop	{r3, pc}

00001732 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1732:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1734:	6983      	ldr	r3, [r0, #24]
    1736:	b103      	cbz	r3, 173a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1738:	4798      	blx	r3
    173a:	bd08      	pop	{r3, pc}

0000173c <flash_init>:
{
    173c:	b538      	push	{r3, r4, r5, lr}
    173e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1740:	4604      	mov	r4, r0
    1742:	b190      	cbz	r0, 176a <flash_init+0x2e>
    1744:	1c08      	adds	r0, r1, #0
    1746:	bf18      	it	ne
    1748:	2001      	movne	r0, #1
    174a:	2242      	movs	r2, #66	; 0x42
    174c:	4908      	ldr	r1, [pc, #32]	; (1770 <flash_init+0x34>)
    174e:	4b09      	ldr	r3, [pc, #36]	; (1774 <flash_init+0x38>)
    1750:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1752:	4629      	mov	r1, r5
    1754:	4620      	mov	r0, r4
    1756:	4b08      	ldr	r3, [pc, #32]	; (1778 <flash_init+0x3c>)
    1758:	4798      	blx	r3
	if (rc) {
    175a:	4603      	mov	r3, r0
    175c:	b918      	cbnz	r0, 1766 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <flash_init+0x40>)
    1760:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1762:	4a07      	ldr	r2, [pc, #28]	; (1780 <flash_init+0x44>)
    1764:	6062      	str	r2, [r4, #4]
}
    1766:	4618      	mov	r0, r3
    1768:	bd38      	pop	{r3, r4, r5, pc}
    176a:	2000      	movs	r0, #0
    176c:	e7ed      	b.n	174a <flash_init+0xe>
    176e:	bf00      	nop
    1770:	000046e8 	.word	0x000046e8
    1774:	000018f9 	.word	0x000018f9
    1778:	00002075 	.word	0x00002075
    177c:	00001729 	.word	0x00001729
    1780:	00001733 	.word	0x00001733

00001784 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1784:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1786:	6943      	ldr	r3, [r0, #20]
    1788:	b103      	cbz	r3, 178c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    178a:	4798      	blx	r3
    178c:	bd08      	pop	{r3, pc}

0000178e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    178e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1790:	6983      	ldr	r3, [r0, #24]
    1792:	b103      	cbz	r3, 1796 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1794:	4798      	blx	r3
    1796:	bd08      	pop	{r3, pc}

00001798 <pwm_init>:
{
    1798:	b538      	push	{r3, r4, r5, lr}
    179a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    179c:	4604      	mov	r4, r0
    179e:	b180      	cbz	r0, 17c2 <pwm_init+0x2a>
    17a0:	1c08      	adds	r0, r1, #0
    17a2:	bf18      	it	ne
    17a4:	2001      	movne	r0, #1
    17a6:	223d      	movs	r2, #61	; 0x3d
    17a8:	4907      	ldr	r1, [pc, #28]	; (17c8 <pwm_init+0x30>)
    17aa:	4b08      	ldr	r3, [pc, #32]	; (17cc <pwm_init+0x34>)
    17ac:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    17ae:	4629      	mov	r1, r5
    17b0:	4620      	mov	r0, r4
    17b2:	4b07      	ldr	r3, [pc, #28]	; (17d0 <pwm_init+0x38>)
    17b4:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    17b6:	4b07      	ldr	r3, [pc, #28]	; (17d4 <pwm_init+0x3c>)
    17b8:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    17ba:	4b07      	ldr	r3, [pc, #28]	; (17d8 <pwm_init+0x40>)
    17bc:	6063      	str	r3, [r4, #4]
}
    17be:	2000      	movs	r0, #0
    17c0:	bd38      	pop	{r3, r4, r5, pc}
    17c2:	2000      	movs	r0, #0
    17c4:	e7ef      	b.n	17a6 <pwm_init+0xe>
    17c6:	bf00      	nop
    17c8:	00004700 	.word	0x00004700
    17cc:	000018f9 	.word	0x000018f9
    17d0:	00002ba5 	.word	0x00002ba5
    17d4:	00001785 	.word	0x00001785
    17d8:	0000178f 	.word	0x0000178f

000017dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    17dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17de:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    17e0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    17e2:	b12f      	cbz	r7, 17f0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    17e4:	688d      	ldr	r5, [r1, #8]
    17e6:	463c      	mov	r4, r7
    17e8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    17ea:	f1c2 0e01 	rsb	lr, r2, #1
    17ee:	e00b      	b.n	1808 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    17f0:	4b0e      	ldr	r3, [pc, #56]	; (182c <timer_add_timer_task+0x50>)
    17f2:	4798      	blx	r3
		return;
    17f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    17f6:	4473      	add	r3, lr
    17f8:	68a0      	ldr	r0, [r4, #8]
    17fa:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    17fc:	42ab      	cmp	r3, r5
    17fe:	d20a      	bcs.n	1816 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1800:	6823      	ldr	r3, [r4, #0]
    1802:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1804:	b153      	cbz	r3, 181c <timer_add_timer_task+0x40>
    1806:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1808:	6863      	ldr	r3, [r4, #4]
    180a:	4293      	cmp	r3, r2
    180c:	d8f3      	bhi.n	17f6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    180e:	68a0      	ldr	r0, [r4, #8]
    1810:	4403      	add	r3, r0
    1812:	1a9b      	subs	r3, r3, r2
    1814:	e7f2      	b.n	17fc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1816:	42a7      	cmp	r7, r4
    1818:	d004      	beq.n	1824 <timer_add_timer_task+0x48>
    181a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    181c:	4620      	mov	r0, r4
    181e:	4b04      	ldr	r3, [pc, #16]	; (1830 <timer_add_timer_task+0x54>)
    1820:	4798      	blx	r3
    1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1824:	4660      	mov	r0, ip
    1826:	4b01      	ldr	r3, [pc, #4]	; (182c <timer_add_timer_task+0x50>)
    1828:	4798      	blx	r3
    182a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    182c:	00001921 	.word	0x00001921
    1830:	0000194d 	.word	0x0000194d

00001834 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1838:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    183a:	6907      	ldr	r7, [r0, #16]
    183c:	3701      	adds	r7, #1
    183e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1840:	7e03      	ldrb	r3, [r0, #24]
    1842:	f013 0f01 	tst.w	r3, #1
    1846:	d113      	bne.n	1870 <timer_process_counted+0x3c>
    1848:	7e03      	ldrb	r3, [r0, #24]
    184a:	f013 0f02 	tst.w	r3, #2
    184e:	d10f      	bne.n	1870 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1850:	b354      	cbz	r4, 18a8 <timer_process_counted+0x74>
    1852:	6863      	ldr	r3, [r4, #4]
    1854:	1afb      	subs	r3, r7, r3
    1856:	68a2      	ldr	r2, [r4, #8]
    1858:	4293      	cmp	r3, r2
    185a:	d307      	bcc.n	186c <timer_process_counted+0x38>
    185c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    185e:	f100 0814 	add.w	r8, r0, #20
    1862:	f8df 9048 	ldr.w	r9, [pc, #72]	; 18ac <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1866:	f8df a048 	ldr.w	sl, [pc, #72]	; 18b0 <timer_process_counted+0x7c>
    186a:	e012      	b.n	1892 <timer_process_counted+0x5e>
    186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1870:	7e03      	ldrb	r3, [r0, #24]
    1872:	f043 0302 	orr.w	r3, r3, #2
    1876:	7603      	strb	r3, [r0, #24]
		return;
    1878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    187c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    187e:	68e3      	ldr	r3, [r4, #12]
    1880:	4620      	mov	r0, r4
    1882:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1884:	b185      	cbz	r5, 18a8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1886:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1888:	686b      	ldr	r3, [r5, #4]
    188a:	1afb      	subs	r3, r7, r3
    188c:	68aa      	ldr	r2, [r5, #8]
    188e:	4293      	cmp	r3, r2
    1890:	d30a      	bcc.n	18a8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1892:	4640      	mov	r0, r8
    1894:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1896:	7c23      	ldrb	r3, [r4, #16]
    1898:	2b01      	cmp	r3, #1
    189a:	d1ef      	bne.n	187c <timer_process_counted+0x48>
			tmp->time_label = time;
    189c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    189e:	463a      	mov	r2, r7
    18a0:	4621      	mov	r1, r4
    18a2:	4640      	mov	r0, r8
    18a4:	47d0      	blx	sl
    18a6:	e7e9      	b.n	187c <timer_process_counted+0x48>
    18a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18ac:	00001955 	.word	0x00001955
    18b0:	000017dd 	.word	0x000017dd

000018b4 <timer_init>:
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	460e      	mov	r6, r1
    18b8:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    18ba:	4604      	mov	r4, r0
    18bc:	b190      	cbz	r0, 18e4 <timer_init+0x30>
    18be:	b199      	cbz	r1, 18e8 <timer_init+0x34>
    18c0:	1c10      	adds	r0, r2, #0
    18c2:	bf18      	it	ne
    18c4:	2001      	movne	r0, #1
    18c6:	2245      	movs	r2, #69	; 0x45
    18c8:	4908      	ldr	r1, [pc, #32]	; (18ec <timer_init+0x38>)
    18ca:	4b09      	ldr	r3, [pc, #36]	; (18f0 <timer_init+0x3c>)
    18cc:	4798      	blx	r3
	descr->func = func;
    18ce:	4620      	mov	r0, r4
    18d0:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    18d4:	682b      	ldr	r3, [r5, #0]
    18d6:	4631      	mov	r1, r6
    18d8:	4798      	blx	r3
	descr->time                           = 0;
    18da:	2000      	movs	r0, #0
    18dc:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <timer_init+0x40>)
    18e0:	6063      	str	r3, [r4, #4]
}
    18e2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    18e4:	2000      	movs	r0, #0
    18e6:	e7ee      	b.n	18c6 <timer_init+0x12>
    18e8:	2000      	movs	r0, #0
    18ea:	e7ec      	b.n	18c6 <timer_init+0x12>
    18ec:	00004718 	.word	0x00004718
    18f0:	000018f9 	.word	0x000018f9
    18f4:	00001835 	.word	0x00001835

000018f8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    18f8:	b900      	cbnz	r0, 18fc <assert+0x4>
		__asm("BKPT #0");
    18fa:	be00      	bkpt	0x0000
    18fc:	4770      	bx	lr

000018fe <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    18fe:	6803      	ldr	r3, [r0, #0]
    1900:	b14b      	cbz	r3, 1916 <is_list_element+0x18>
		if (it == element) {
    1902:	428b      	cmp	r3, r1
    1904:	d009      	beq.n	191a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	b11b      	cbz	r3, 1912 <is_list_element+0x14>
		if (it == element) {
    190a:	4299      	cmp	r1, r3
    190c:	d1fb      	bne.n	1906 <is_list_element+0x8>
			return true;
    190e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1910:	4770      	bx	lr
	return false;
    1912:	2000      	movs	r0, #0
    1914:	4770      	bx	lr
    1916:	2000      	movs	r0, #0
    1918:	4770      	bx	lr
			return true;
    191a:	2001      	movs	r0, #1
    191c:	4770      	bx	lr
	...

00001920 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1920:	b538      	push	{r3, r4, r5, lr}
    1922:	4604      	mov	r4, r0
    1924:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1926:	4b06      	ldr	r3, [pc, #24]	; (1940 <list_insert_as_head+0x20>)
    1928:	4798      	blx	r3
    192a:	f080 0001 	eor.w	r0, r0, #1
    192e:	2243      	movs	r2, #67	; 0x43
    1930:	4904      	ldr	r1, [pc, #16]	; (1944 <list_insert_as_head+0x24>)
    1932:	b2c0      	uxtb	r0, r0
    1934:	4b04      	ldr	r3, [pc, #16]	; (1948 <list_insert_as_head+0x28>)
    1936:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1938:	6823      	ldr	r3, [r4, #0]
    193a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    193c:	6025      	str	r5, [r4, #0]
    193e:	bd38      	pop	{r3, r4, r5, pc}
    1940:	000018ff 	.word	0x000018ff
    1944:	00004730 	.word	0x00004730
    1948:	000018f9 	.word	0x000018f9

0000194c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    194c:	6803      	ldr	r3, [r0, #0]
    194e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1950:	6001      	str	r1, [r0, #0]
    1952:	4770      	bx	lr

00001954 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1954:	6803      	ldr	r3, [r0, #0]
    1956:	b10b      	cbz	r3, 195c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1958:	681a      	ldr	r2, [r3, #0]
    195a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    195c:	4618      	mov	r0, r3
    195e:	4770      	bx	lr

00001960 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1960:	b570      	push	{r4, r5, r6, lr}
    1962:	460e      	mov	r6, r1
    1964:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1966:	4604      	mov	r4, r0
    1968:	b178      	cbz	r0, 198a <ringbuffer_init+0x2a>
    196a:	b181      	cbz	r1, 198e <ringbuffer_init+0x2e>
    196c:	b1a2      	cbz	r2, 1998 <ringbuffer_init+0x38>
    196e:	2001      	movs	r0, #1
    1970:	2232      	movs	r2, #50	; 0x32
    1972:	490d      	ldr	r1, [pc, #52]	; (19a8 <ringbuffer_init+0x48>)
    1974:	4b0d      	ldr	r3, [pc, #52]	; (19ac <ringbuffer_init+0x4c>)
    1976:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1978:	1e6b      	subs	r3, r5, #1
    197a:	421d      	tst	r5, r3
    197c:	d109      	bne.n	1992 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    197e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1980:	2000      	movs	r0, #0
    1982:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1984:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1986:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1988:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    198a:	2000      	movs	r0, #0
    198c:	e7f0      	b.n	1970 <ringbuffer_init+0x10>
    198e:	2000      	movs	r0, #0
    1990:	e7ee      	b.n	1970 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1992:	f06f 000c 	mvn.w	r0, #12
    1996:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1998:	2232      	movs	r2, #50	; 0x32
    199a:	4903      	ldr	r1, [pc, #12]	; (19a8 <ringbuffer_init+0x48>)
    199c:	2000      	movs	r0, #0
    199e:	4b03      	ldr	r3, [pc, #12]	; (19ac <ringbuffer_init+0x4c>)
    19a0:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    19a2:	1e6b      	subs	r3, r5, #1
    19a4:	e7eb      	b.n	197e <ringbuffer_init+0x1e>
    19a6:	bf00      	nop
    19a8:	00004750 	.word	0x00004750
    19ac:	000018f9 	.word	0x000018f9

000019b0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    19b0:	b538      	push	{r3, r4, r5, lr}
    19b2:	460d      	mov	r5, r1
	ASSERT(rb && data);
    19b4:	4604      	mov	r4, r0
    19b6:	b1a0      	cbz	r0, 19e2 <ringbuffer_get+0x32>
    19b8:	1c08      	adds	r0, r1, #0
    19ba:	bf18      	it	ne
    19bc:	2001      	movne	r0, #1
    19be:	224a      	movs	r2, #74	; 0x4a
    19c0:	490a      	ldr	r1, [pc, #40]	; (19ec <ringbuffer_get+0x3c>)
    19c2:	4b0b      	ldr	r3, [pc, #44]	; (19f0 <ringbuffer_get+0x40>)
    19c4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    19c6:	68a3      	ldr	r3, [r4, #8]
    19c8:	68e2      	ldr	r2, [r4, #12]
    19ca:	429a      	cmp	r2, r3
    19cc:	d00b      	beq.n	19e6 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    19ce:	6862      	ldr	r2, [r4, #4]
    19d0:	4013      	ands	r3, r2
    19d2:	6822      	ldr	r2, [r4, #0]
    19d4:	5cd3      	ldrb	r3, [r2, r3]
    19d6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    19d8:	68a3      	ldr	r3, [r4, #8]
    19da:	3301      	adds	r3, #1
    19dc:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    19de:	2000      	movs	r0, #0
    19e0:	bd38      	pop	{r3, r4, r5, pc}
    19e2:	2000      	movs	r0, #0
    19e4:	e7eb      	b.n	19be <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    19e6:	f06f 0009 	mvn.w	r0, #9
}
    19ea:	bd38      	pop	{r3, r4, r5, pc}
    19ec:	00004750 	.word	0x00004750
    19f0:	000018f9 	.word	0x000018f9

000019f4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    19f4:	b538      	push	{r3, r4, r5, lr}
    19f6:	460d      	mov	r5, r1
	ASSERT(rb);
    19f8:	4604      	mov	r4, r0
    19fa:	225b      	movs	r2, #91	; 0x5b
    19fc:	490b      	ldr	r1, [pc, #44]	; (1a2c <ringbuffer_put+0x38>)
    19fe:	3000      	adds	r0, #0
    1a00:	bf18      	it	ne
    1a02:	2001      	movne	r0, #1
    1a04:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <ringbuffer_put+0x3c>)
    1a06:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1a08:	68e3      	ldr	r3, [r4, #12]
    1a0a:	6862      	ldr	r2, [r4, #4]
    1a0c:	4013      	ands	r3, r2
    1a0e:	6822      	ldr	r2, [r4, #0]
    1a10:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1a12:	68e3      	ldr	r3, [r4, #12]
    1a14:	6861      	ldr	r1, [r4, #4]
    1a16:	68a2      	ldr	r2, [r4, #8]
    1a18:	1a9a      	subs	r2, r3, r2
    1a1a:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1a1c:	bf84      	itt	hi
    1a1e:	1a59      	subhi	r1, r3, r1
    1a20:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1a22:	3301      	adds	r3, #1
    1a24:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1a26:	2000      	movs	r0, #0
    1a28:	bd38      	pop	{r3, r4, r5, pc}
    1a2a:	bf00      	nop
    1a2c:	00004750 	.word	0x00004750
    1a30:	000018f9 	.word	0x000018f9

00001a34 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1a34:	b510      	push	{r4, lr}
	ASSERT(rb);
    1a36:	4604      	mov	r4, r0
    1a38:	2271      	movs	r2, #113	; 0x71
    1a3a:	4905      	ldr	r1, [pc, #20]	; (1a50 <ringbuffer_num+0x1c>)
    1a3c:	3000      	adds	r0, #0
    1a3e:	bf18      	it	ne
    1a40:	2001      	movne	r0, #1
    1a42:	4b04      	ldr	r3, [pc, #16]	; (1a54 <ringbuffer_num+0x20>)
    1a44:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1a46:	68e0      	ldr	r0, [r4, #12]
    1a48:	68a3      	ldr	r3, [r4, #8]
}
    1a4a:	1ac0      	subs	r0, r0, r3
    1a4c:	bd10      	pop	{r4, pc}
    1a4e:	bf00      	nop
    1a50:	00004750 	.word	0x00004750
    1a54:	000018f9 	.word	0x000018f9

00001a58 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1a58:	b510      	push	{r4, lr}
	ASSERT(rb);
    1a5a:	4604      	mov	r4, r0
    1a5c:	227b      	movs	r2, #123	; 0x7b
    1a5e:	4905      	ldr	r1, [pc, #20]	; (1a74 <ringbuffer_flush+0x1c>)
    1a60:	3000      	adds	r0, #0
    1a62:	bf18      	it	ne
    1a64:	2001      	movne	r0, #1
    1a66:	4b04      	ldr	r3, [pc, #16]	; (1a78 <ringbuffer_flush+0x20>)
    1a68:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1a6a:	68e3      	ldr	r3, [r4, #12]
    1a6c:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1a6e:	2000      	movs	r0, #0
    1a70:	bd10      	pop	{r4, pc}
    1a72:	bf00      	nop
    1a74:	00004750 	.word	0x00004750
    1a78:	000018f9 	.word	0x000018f9

00001a7c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1a7c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1a7e:	4a06      	ldr	r2, [pc, #24]	; (1a98 <_sbrk+0x1c>)
    1a80:	6812      	ldr	r2, [r2, #0]
    1a82:	b122      	cbz	r2, 1a8e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a84:	4a04      	ldr	r2, [pc, #16]	; (1a98 <_sbrk+0x1c>)
    1a86:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a88:	4403      	add	r3, r0
    1a8a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1a8c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a8e:	4903      	ldr	r1, [pc, #12]	; (1a9c <_sbrk+0x20>)
    1a90:	4a01      	ldr	r2, [pc, #4]	; (1a98 <_sbrk+0x1c>)
    1a92:	6011      	str	r1, [r2, #0]
    1a94:	e7f6      	b.n	1a84 <_sbrk+0x8>
    1a96:	bf00      	nop
    1a98:	200004b0 	.word	0x200004b0
    1a9c:	20011588 	.word	0x20011588

00001aa0 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1aa4:	f44f 7281 	mov.w	r2, #258	; 0x102
    1aa8:	4915      	ldr	r1, [pc, #84]	; (1b00 <_ac_init+0x60>)
    1aaa:	4816      	ldr	r0, [pc, #88]	; (1b04 <_ac_init+0x64>)
    1aac:	4284      	cmp	r4, r0
    1aae:	bf14      	ite	ne
    1ab0:	2000      	movne	r0, #0
    1ab2:	2001      	moveq	r0, #1
    1ab4:	4b14      	ldr	r3, [pc, #80]	; (1b08 <_ac_init+0x68>)
    1ab6:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1ab8:	6a23      	ldr	r3, [r4, #32]
    1aba:	f013 0f01 	tst.w	r3, #1
    1abe:	d1fb      	bne.n	1ab8 <_ac_init+0x18>
    1ac0:	6a23      	ldr	r3, [r4, #32]
    1ac2:	f013 0f03 	tst.w	r3, #3
    1ac6:	d1fb      	bne.n	1ac0 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1ac8:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1aca:	f013 0f02 	tst.w	r3, #2
    1ace:	d114      	bne.n	1afa <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1ad0:	6a23      	ldr	r3, [r4, #32]
    1ad2:	f013 0f01 	tst.w	r3, #1
    1ad6:	d1fb      	bne.n	1ad0 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1ad8:	7823      	ldrb	r3, [r4, #0]
    1ada:	f043 0301 	orr.w	r3, r3, #1
    1ade:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1ae0:	6a23      	ldr	r3, [r4, #32]
    1ae2:	f013 0f01 	tst.w	r3, #1
    1ae6:	d1fb      	bne.n	1ae0 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1ae8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1aec:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1aee:	2000      	movs	r0, #0
    1af0:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1af2:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1af4:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1af6:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1af8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1afa:	f06f 0010 	mvn.w	r0, #16
}
    1afe:	bd10      	pop	{r4, pc}
    1b00:	00004774 	.word	0x00004774
    1b04:	42002000 	.word	0x42002000
    1b08:	000018f9 	.word	0x000018f9

00001b0c <_ac_sync_init>:
{
    1b0c:	b538      	push	{r3, r4, r5, lr}
    1b0e:	460c      	mov	r4, r1
	ASSERT(device);
    1b10:	4605      	mov	r5, r0
    1b12:	226c      	movs	r2, #108	; 0x6c
    1b14:	4905      	ldr	r1, [pc, #20]	; (1b2c <_ac_sync_init+0x20>)
    1b16:	3000      	adds	r0, #0
    1b18:	bf18      	it	ne
    1b1a:	2001      	movne	r0, #1
    1b1c:	4b04      	ldr	r3, [pc, #16]	; (1b30 <_ac_sync_init+0x24>)
    1b1e:	4798      	blx	r3
	device->hw = hw;
    1b20:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1b22:	4620      	mov	r0, r4
    1b24:	4b03      	ldr	r3, [pc, #12]	; (1b34 <_ac_sync_init+0x28>)
    1b26:	4798      	blx	r3
}
    1b28:	bd38      	pop	{r3, r4, r5, pc}
    1b2a:	bf00      	nop
    1b2c:	00004774 	.word	0x00004774
    1b30:	000018f9 	.word	0x000018f9
    1b34:	00001aa1 	.word	0x00001aa1

00001b38 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b38:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b3a:	f013 0f01 	tst.w	r3, #1
    1b3e:	d1fb      	bne.n	1b38 <_adc_init>
    1b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b42:	f013 0f03 	tst.w	r3, #3
    1b46:	d1fb      	bne.n	1b40 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1b48:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1b4a:	f013 0f02 	tst.w	r3, #2
    1b4e:	d12a      	bne.n	1ba6 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b50:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b52:	f013 0f01 	tst.w	r3, #1
    1b56:	d1fb      	bne.n	1b50 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1b58:	8803      	ldrh	r3, [r0, #0]
    1b5a:	b29b      	uxth	r3, r3
    1b5c:	f043 0301 	orr.w	r3, r3, #1
    1b60:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1b64:	f013 0f01 	tst.w	r3, #1
    1b68:	d1fb      	bne.n	1b62 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1b6a:	2216      	movs	r2, #22
    1b6c:	4b0f      	ldr	r3, [pc, #60]	; (1bac <_adc_init+0x74>)
    1b6e:	fb02 3101 	mla	r1, r2, r1, r3
    1b72:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1b74:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1b76:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1b78:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1b7a:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1b7c:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1b7e:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1b80:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1b82:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1b84:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1b86:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1b88:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1b8a:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1b8c:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1b8e:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1b90:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1b92:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1b94:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1b96:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1b98:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1b9a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1b9c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1b9e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1ba0:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    1ba2:	2000      	movs	r0, #0
    1ba4:	4770      	bx	lr
		return ERR_DENIED;
    1ba6:	f06f 0010 	mvn.w	r0, #16
}
    1baa:	4770      	bx	lr
    1bac:	00004788 	.word	0x00004788

00001bb0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1bb0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1bb4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1bb8:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1bbc:	b148      	cbz	r0, 1bd2 <_adc_get_regs+0x22>
    1bbe:	2801      	cmp	r0, #1
    1bc0:	d009      	beq.n	1bd6 <_adc_get_regs+0x26>
{
    1bc2:	b508      	push	{r3, lr}
	ASSERT(false);
    1bc4:	2291      	movs	r2, #145	; 0x91
    1bc6:	4905      	ldr	r1, [pc, #20]	; (1bdc <_adc_get_regs+0x2c>)
    1bc8:	2000      	movs	r0, #0
    1bca:	4b05      	ldr	r3, [pc, #20]	; (1be0 <_adc_get_regs+0x30>)
    1bcc:	4798      	blx	r3
	return 0;
    1bce:	2000      	movs	r0, #0
    1bd0:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1bd2:	2000      	movs	r0, #0
    1bd4:	4770      	bx	lr
    1bd6:	2001      	movs	r0, #1
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop
    1bdc:	000047b4 	.word	0x000047b4
    1be0:	000018f9 	.word	0x000018f9

00001be4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1be4:	b538      	push	{r3, r4, r5, lr}
    1be6:	460c      	mov	r4, r1
	ASSERT(device);
    1be8:	4605      	mov	r5, r0
    1bea:	22d5      	movs	r2, #213	; 0xd5
    1bec:	4907      	ldr	r1, [pc, #28]	; (1c0c <_adc_sync_init+0x28>)
    1bee:	3000      	adds	r0, #0
    1bf0:	bf18      	it	ne
    1bf2:	2001      	movne	r0, #1
    1bf4:	4b06      	ldr	r3, [pc, #24]	; (1c10 <_adc_sync_init+0x2c>)
    1bf6:	4798      	blx	r3

	device->hw = hw;
    1bf8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1bfa:	4620      	mov	r0, r4
    1bfc:	4b05      	ldr	r3, [pc, #20]	; (1c14 <_adc_sync_init+0x30>)
    1bfe:	4798      	blx	r3
    1c00:	4601      	mov	r1, r0
    1c02:	4620      	mov	r0, r4
    1c04:	4b04      	ldr	r3, [pc, #16]	; (1c18 <_adc_sync_init+0x34>)
    1c06:	4798      	blx	r3
}
    1c08:	bd38      	pop	{r3, r4, r5, pc}
    1c0a:	bf00      	nop
    1c0c:	000047b4 	.word	0x000047b4
    1c10:	000018f9 	.word	0x000018f9
    1c14:	00001bb1 	.word	0x00001bb1
    1c18:	00001b39 	.word	0x00001b39

00001c1c <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c1c:	0943      	lsrs	r3, r0, #5
    1c1e:	f000 001f 	and.w	r0, r0, #31
    1c22:	2201      	movs	r2, #1
    1c24:	fa02 f000 	lsl.w	r0, r2, r0
    1c28:	3340      	adds	r3, #64	; 0x40
    1c2a:	4a02      	ldr	r2, [pc, #8]	; (1c34 <_irq_set+0x18>)
    1c2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1c30:	4770      	bx	lr
    1c32:	bf00      	nop
    1c34:	e000e100 	.word	0xe000e100

00001c38 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c38:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1c3c:	fb03 f000 	mul.w	r0, r3, r0
    1c40:	4770      	bx	lr
	...

00001c44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c44:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1c46:	4a0c      	ldr	r2, [pc, #48]	; (1c78 <_init_chip+0x34>)
    1c48:	8813      	ldrh	r3, [r2, #0]
    1c4a:	b29b      	uxth	r3, r3
    1c4c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1c4e:	4b0b      	ldr	r3, [pc, #44]	; (1c7c <_init_chip+0x38>)
    1c50:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    1c52:	4b0b      	ldr	r3, [pc, #44]	; (1c80 <_init_chip+0x3c>)
    1c54:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1c56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1c5a:	4c0a      	ldr	r4, [pc, #40]	; (1c84 <_init_chip+0x40>)
    1c5c:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1c5e:	4b0a      	ldr	r3, [pc, #40]	; (1c88 <_init_chip+0x44>)
    1c60:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c62:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1c66:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1c68:	4a08      	ldr	r2, [pc, #32]	; (1c8c <_init_chip+0x48>)
    1c6a:	6913      	ldr	r3, [r2, #16]
    1c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1c70:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1c72:	4b07      	ldr	r3, [pc, #28]	; (1c90 <_init_chip+0x4c>)
    1c74:	4798      	blx	r3
    1c76:	bd10      	pop	{r4, pc}
    1c78:	41004000 	.word	0x41004000
    1c7c:	00002115 	.word	0x00002115
    1c80:	0000203d 	.word	0x0000203d
    1c84:	00001f95 	.word	0x00001f95
    1c88:	00002139 	.word	0x00002139
    1c8c:	40000800 	.word	0x40000800
    1c90:	00001d9d 	.word	0x00001d9d

00001c94 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    1c94:	b510      	push	{r4, lr}
    1c96:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    1c98:	22f3      	movs	r2, #243	; 0xf3
    1c9a:	4915      	ldr	r1, [pc, #84]	; (1cf0 <_dac_init+0x5c>)
    1c9c:	4815      	ldr	r0, [pc, #84]	; (1cf4 <_dac_init+0x60>)
    1c9e:	4284      	cmp	r4, r0
    1ca0:	bf14      	ite	ne
    1ca2:	2000      	movne	r0, #0
    1ca4:	2001      	moveq	r0, #1
    1ca6:	4b14      	ldr	r3, [pc, #80]	; (1cf8 <_dac_init+0x64>)
    1ca8:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1caa:	68a3      	ldr	r3, [r4, #8]
    1cac:	f013 0f01 	tst.w	r3, #1
    1cb0:	d1fb      	bne.n	1caa <_dac_init+0x16>
    1cb2:	68a3      	ldr	r3, [r4, #8]
    1cb4:	f013 0f03 	tst.w	r3, #3
    1cb8:	d1fb      	bne.n	1cb2 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1cba:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1cbc:	f013 0f02 	tst.w	r3, #2
    1cc0:	d113      	bne.n	1cea <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1cc2:	68a3      	ldr	r3, [r4, #8]
    1cc4:	f013 0f01 	tst.w	r3, #1
    1cc8:	d1fb      	bne.n	1cc2 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    1cca:	7823      	ldrb	r3, [r4, #0]
    1ccc:	f043 0301 	orr.w	r3, r3, #1
    1cd0:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1cd2:	68a3      	ldr	r3, [r4, #8]
    1cd4:	f013 0f01 	tst.w	r3, #1
    1cd8:	d1fb      	bne.n	1cd2 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    1cda:	2000      	movs	r0, #0
    1cdc:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1cde:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    1ce0:	81a0      	strh	r0, [r4, #12]
    1ce2:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1ce4:	2301      	movs	r3, #1
    1ce6:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1ce8:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    1cea:	f06f 0003 	mvn.w	r0, #3
}
    1cee:	bd10      	pop	{r4, pc}
    1cf0:	000047cc 	.word	0x000047cc
    1cf4:	43002400 	.word	0x43002400
    1cf8:	000018f9 	.word	0x000018f9

00001cfc <_dac_sync_init>:
{
    1cfc:	b538      	push	{r3, r4, r5, lr}
    1cfe:	460c      	mov	r4, r1
	ASSERT(device);
    1d00:	4605      	mov	r5, r0
    1d02:	2261      	movs	r2, #97	; 0x61
    1d04:	4905      	ldr	r1, [pc, #20]	; (1d1c <_dac_sync_init+0x20>)
    1d06:	3000      	adds	r0, #0
    1d08:	bf18      	it	ne
    1d0a:	2001      	movne	r0, #1
    1d0c:	4b04      	ldr	r3, [pc, #16]	; (1d20 <_dac_sync_init+0x24>)
    1d0e:	4798      	blx	r3
	device->hw = hw;
    1d10:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1d12:	4620      	mov	r0, r4
    1d14:	4b03      	ldr	r3, [pc, #12]	; (1d24 <_dac_sync_init+0x28>)
    1d16:	4798      	blx	r3
}
    1d18:	bd38      	pop	{r3, r4, r5, pc}
    1d1a:	bf00      	nop
    1d1c:	000047cc 	.word	0x000047cc
    1d20:	000018f9 	.word	0x000018f9
    1d24:	00001c95 	.word	0x00001c95

00001d28 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1d28:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1d2a:	4a1a      	ldr	r2, [pc, #104]	; (1d94 <_dmac_handler+0x6c>)
    1d2c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1d2e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1d32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1d36:	4818      	ldr	r0, [pc, #96]	; (1d98 <_dmac_handler+0x70>)
    1d38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1d3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1d40:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1d44:	f012 0f01 	tst.w	r2, #1
    1d48:	d10a      	bne.n	1d60 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1d4a:	011a      	lsls	r2, r3, #4
    1d4c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d50:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1d54:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1d58:	f012 0f02 	tst.w	r2, #2
    1d5c:	d10b      	bne.n	1d76 <_dmac_handler+0x4e>
    1d5e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1d60:	011a      	lsls	r2, r3, #4
    1d62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d66:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1d6a:	2101      	movs	r1, #1
    1d6c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1d70:	6843      	ldr	r3, [r0, #4]
    1d72:	4798      	blx	r3
    1d74:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1d76:	011a      	lsls	r2, r3, #4
    1d78:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1d7c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1d80:	2102      	movs	r1, #2
    1d82:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1d86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d8a:	4a03      	ldr	r2, [pc, #12]	; (1d98 <_dmac_handler+0x70>)
    1d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d90:	4798      	blx	r3
	}
}
    1d92:	e7e4      	b.n	1d5e <_dmac_handler+0x36>
    1d94:	4100a000 	.word	0x4100a000
    1d98:	200004c0 	.word	0x200004c0

00001d9c <_dma_init>:
{
    1d9c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1d9e:	4a33      	ldr	r2, [pc, #204]	; (1e6c <_dma_init+0xd0>)
    1da0:	8813      	ldrh	r3, [r2, #0]
    1da2:	f023 0302 	bic.w	r3, r3, #2
    1da6:	041b      	lsls	r3, r3, #16
    1da8:	0c1b      	lsrs	r3, r3, #16
    1daa:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1dac:	8853      	ldrh	r3, [r2, #2]
    1dae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1db2:	041b      	lsls	r3, r3, #16
    1db4:	0c1b      	lsrs	r3, r3, #16
    1db6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1db8:	8813      	ldrh	r3, [r2, #0]
    1dba:	b29b      	uxth	r3, r3
    1dbc:	f043 0301 	orr.w	r3, r3, #1
    1dc0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1dc2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1dc4:	f013 0f01 	tst.w	r3, #1
    1dc8:	d1fb      	bne.n	1dc2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1dca:	4b28      	ldr	r3, [pc, #160]	; (1e6c <_dma_init+0xd0>)
    1dcc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1dd0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1dd2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1dd8:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1dda:	2000      	movs	r0, #0
    1ddc:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1dde:	4a24      	ldr	r2, [pc, #144]	; (1e70 <_dma_init+0xd4>)
    1de0:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1de4:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1de6:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1dea:	639a      	str	r2, [r3, #56]	; 0x38
    1dec:	4b21      	ldr	r3, [pc, #132]	; (1e74 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1dee:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1df2:	681c      	ldr	r4, [r3, #0]
    1df4:	0101      	lsls	r1, r0, #4
    1df6:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    1dfa:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1dfe:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1e00:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1e02:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1e06:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1e08:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1e0c:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1e0e:	4429      	add	r1, r5
    1e10:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    1e14:	3001      	adds	r0, #1
    1e16:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1e18:	2820      	cmp	r0, #32
    1e1a:	d1ea      	bne.n	1df2 <_dma_init+0x56>
    1e1c:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e1e:	2001      	movs	r0, #1
    1e20:	4915      	ldr	r1, [pc, #84]	; (1e78 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1e22:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1e24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1e28:	d00b      	beq.n	1e42 <_dma_init+0xa6>
    1e2a:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1e2c:	2b24      	cmp	r3, #36	; 0x24
    1e2e:	d1f8      	bne.n	1e22 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1e30:	4a0e      	ldr	r2, [pc, #56]	; (1e6c <_dma_init+0xd0>)
    1e32:	8813      	ldrh	r3, [r2, #0]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f043 0302 	orr.w	r3, r3, #2
    1e3a:	8013      	strh	r3, [r2, #0]
}
    1e3c:	2000      	movs	r0, #0
    1e3e:	bc30      	pop	{r4, r5}
    1e40:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e42:	095c      	lsrs	r4, r3, #5
    1e44:	f002 021f 	and.w	r2, r2, #31
    1e48:	fa00 f202 	lsl.w	r2, r0, r2
    1e4c:	f104 0520 	add.w	r5, r4, #32
    1e50:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1e54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e58:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e5c:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1e60:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e64:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1e68:	e7df      	b.n	1e2a <_dma_init+0x8e>
    1e6a:	bf00      	nop
    1e6c:	4100a000 	.word	0x4100a000
    1e70:	200004c0 	.word	0x200004c0
    1e74:	000047e4 	.word	0x000047e4
    1e78:	e000e100 	.word	0xe000e100

00001e7c <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1e7c:	b508      	push	{r3, lr}
	_dmac_handler();
    1e7e:	4b01      	ldr	r3, [pc, #4]	; (1e84 <DMAC_0_Handler+0x8>)
    1e80:	4798      	blx	r3
    1e82:	bd08      	pop	{r3, pc}
    1e84:	00001d29 	.word	0x00001d29

00001e88 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1e88:	b508      	push	{r3, lr}
	_dmac_handler();
    1e8a:	4b01      	ldr	r3, [pc, #4]	; (1e90 <DMAC_1_Handler+0x8>)
    1e8c:	4798      	blx	r3
    1e8e:	bd08      	pop	{r3, pc}
    1e90:	00001d29 	.word	0x00001d29

00001e94 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    1e94:	b508      	push	{r3, lr}
	_dmac_handler();
    1e96:	4b01      	ldr	r3, [pc, #4]	; (1e9c <DMAC_2_Handler+0x8>)
    1e98:	4798      	blx	r3
    1e9a:	bd08      	pop	{r3, pc}
    1e9c:	00001d29 	.word	0x00001d29

00001ea0 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    1ea0:	b508      	push	{r3, lr}
	_dmac_handler();
    1ea2:	4b01      	ldr	r3, [pc, #4]	; (1ea8 <DMAC_3_Handler+0x8>)
    1ea4:	4798      	blx	r3
    1ea6:	bd08      	pop	{r3, pc}
    1ea8:	00001d29 	.word	0x00001d29

00001eac <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1eac:	b508      	push	{r3, lr}
	_dmac_handler();
    1eae:	4b01      	ldr	r3, [pc, #4]	; (1eb4 <DMAC_4_Handler+0x8>)
    1eb0:	4798      	blx	r3
    1eb2:	bd08      	pop	{r3, pc}
    1eb4:	00001d29 	.word	0x00001d29

00001eb8 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1eb8:	4a1e      	ldr	r2, [pc, #120]	; (1f34 <_ext_irq_init+0x7c>)
    1eba:	6853      	ldr	r3, [r2, #4]
    1ebc:	f013 0f01 	tst.w	r3, #1
    1ec0:	d1fb      	bne.n	1eba <_ext_irq_init+0x2>
    1ec2:	4a1c      	ldr	r2, [pc, #112]	; (1f34 <_ext_irq_init+0x7c>)
    1ec4:	6853      	ldr	r3, [r2, #4]
    1ec6:	f013 0f03 	tst.w	r3, #3
    1eca:	d1fb      	bne.n	1ec4 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1ecc:	4b19      	ldr	r3, [pc, #100]	; (1f34 <_ext_irq_init+0x7c>)
    1ece:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1ed0:	f013 0f02 	tst.w	r3, #2
    1ed4:	d12b      	bne.n	1f2e <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ed6:	4a17      	ldr	r2, [pc, #92]	; (1f34 <_ext_irq_init+0x7c>)
    1ed8:	6853      	ldr	r3, [r2, #4]
    1eda:	f013 0f01 	tst.w	r3, #1
    1ede:	d1fb      	bne.n	1ed8 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1ee0:	4a14      	ldr	r2, [pc, #80]	; (1f34 <_ext_irq_init+0x7c>)
    1ee2:	7813      	ldrb	r3, [r2, #0]
    1ee4:	f043 0301 	orr.w	r3, r3, #1
    1ee8:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1eea:	6853      	ldr	r3, [r2, #4]
    1eec:	f013 0f01 	tst.w	r3, #1
    1ef0:	d1fb      	bne.n	1eea <_ext_irq_init+0x32>
    1ef2:	4a10      	ldr	r2, [pc, #64]	; (1f34 <_ext_irq_init+0x7c>)
    1ef4:	6853      	ldr	r3, [r2, #4]
    1ef6:	f013 0f03 	tst.w	r3, #3
    1efa:	d1fb      	bne.n	1ef4 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <_ext_irq_init+0x7c>)
    1efe:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1f00:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1f04:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1f06:	2200      	movs	r2, #0
    1f08:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1f0a:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1f0c:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1f0e:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1f10:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1f12:	61da      	str	r2, [r3, #28]
    1f14:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1f16:	461a      	mov	r2, r3
    1f18:	6853      	ldr	r3, [r2, #4]
    1f1a:	f013 0f03 	tst.w	r3, #3
    1f1e:	d1fb      	bne.n	1f18 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1f20:	4a04      	ldr	r2, [pc, #16]	; (1f34 <_ext_irq_init+0x7c>)
    1f22:	7813      	ldrb	r3, [r2, #0]
    1f24:	f043 0302 	orr.w	r3, r3, #2
    1f28:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    1f2a:	2000      	movs	r0, #0
    1f2c:	4770      	bx	lr
		return ERR_DENIED;
    1f2e:	f06f 0010 	mvn.w	r0, #16
}
    1f32:	4770      	bx	lr
    1f34:	40002800 	.word	0x40002800

00001f38 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1f38:	b430      	push	{r4, r5}
    1f3a:	4814      	ldr	r0, [pc, #80]	; (1f8c <_event_system_init+0x54>)
    1f3c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1f40:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1f42:	4c13      	ldr	r4, [pc, #76]	; (1f90 <_event_system_init+0x58>)
    1f44:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1f46:	f813 1b01 	ldrb.w	r1, [r3], #1
    1f4a:	3248      	adds	r2, #72	; 0x48
    1f4c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1f50:	42ab      	cmp	r3, r5
    1f52:	d1f7      	bne.n	1f44 <_event_system_init+0xc>
    1f54:	480d      	ldr	r0, [pc, #52]	; (1f8c <_event_system_init+0x54>)
    1f56:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1f5a:	3080      	adds	r0, #128	; 0x80
    1f5c:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1f5e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1f62:	00ca      	lsls	r2, r1, #3
    1f64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f68:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1f6c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1f6e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1f72:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1f74:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1f78:	43db      	mvns	r3, r3
    1f7a:	b2db      	uxtb	r3, r3
    1f7c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1f80:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1f82:	2920      	cmp	r1, #32
    1f84:	d1eb      	bne.n	1f5e <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1f86:	2000      	movs	r0, #0
    1f88:	bc30      	pop	{r4, r5}
    1f8a:	4770      	bx	lr
    1f8c:	000048e4 	.word	0x000048e4
    1f90:	4100e000 	.word	0x4100e000

00001f94 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    1f94:	f010 0f01 	tst.w	r0, #1
    1f98:	d002      	beq.n	1fa0 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f9a:	4a23      	ldr	r2, [pc, #140]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1f9c:	4b23      	ldr	r3, [pc, #140]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1f9e:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    1fa0:	f010 0f02 	tst.w	r0, #2
    1fa4:	d002      	beq.n	1fac <_gclk_init_generators_by_fref+0x18>
    1fa6:	4a22      	ldr	r2, [pc, #136]	; (2030 <_gclk_init_generators_by_fref+0x9c>)
    1fa8:	4b20      	ldr	r3, [pc, #128]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1faa:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    1fac:	f010 0f04 	tst.w	r0, #4
    1fb0:	d002      	beq.n	1fb8 <_gclk_init_generators_by_fref+0x24>
    1fb2:	4a1d      	ldr	r2, [pc, #116]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1fb4:	4b1d      	ldr	r3, [pc, #116]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1fb6:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    1fb8:	f010 0f08 	tst.w	r0, #8
    1fbc:	d002      	beq.n	1fc4 <_gclk_init_generators_by_fref+0x30>
    1fbe:	4a1a      	ldr	r2, [pc, #104]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1fc0:	4b1a      	ldr	r3, [pc, #104]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1fc2:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    1fc4:	f010 0f10 	tst.w	r0, #16
    1fc8:	d002      	beq.n	1fd0 <_gclk_init_generators_by_fref+0x3c>
    1fca:	4a17      	ldr	r2, [pc, #92]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1fcc:	4b17      	ldr	r3, [pc, #92]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1fce:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    1fd0:	f010 0f20 	tst.w	r0, #32
    1fd4:	d002      	beq.n	1fdc <_gclk_init_generators_by_fref+0x48>
    1fd6:	4a14      	ldr	r2, [pc, #80]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1fd8:	4b14      	ldr	r3, [pc, #80]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1fda:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
    1fe0:	d002      	beq.n	1fe8 <_gclk_init_generators_by_fref+0x54>
    1fe2:	4a11      	ldr	r2, [pc, #68]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1fe4:	4b11      	ldr	r3, [pc, #68]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1fe6:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1fe8:	f010 0f80 	tst.w	r0, #128	; 0x80
    1fec:	d002      	beq.n	1ff4 <_gclk_init_generators_by_fref+0x60>
    1fee:	4a0e      	ldr	r2, [pc, #56]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1ff0:	4b0e      	ldr	r3, [pc, #56]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1ff2:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    1ff4:	f410 7f80 	tst.w	r0, #256	; 0x100
    1ff8:	d002      	beq.n	2000 <_gclk_init_generators_by_fref+0x6c>
    1ffa:	4a0b      	ldr	r2, [pc, #44]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    1ffc:	4b0b      	ldr	r3, [pc, #44]	; (202c <_gclk_init_generators_by_fref+0x98>)
    1ffe:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    2000:	f410 7f00 	tst.w	r0, #512	; 0x200
    2004:	d002      	beq.n	200c <_gclk_init_generators_by_fref+0x78>
    2006:	4a08      	ldr	r2, [pc, #32]	; (2028 <_gclk_init_generators_by_fref+0x94>)
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <_gclk_init_generators_by_fref+0x98>)
    200a:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    200c:	f410 6f80 	tst.w	r0, #1024	; 0x400
    2010:	d002      	beq.n	2018 <_gclk_init_generators_by_fref+0x84>
    2012:	4a08      	ldr	r2, [pc, #32]	; (2034 <_gclk_init_generators_by_fref+0xa0>)
    2014:	4b05      	ldr	r3, [pc, #20]	; (202c <_gclk_init_generators_by_fref+0x98>)
    2016:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2018:	f410 6f00 	tst.w	r0, #2048	; 0x800
    201c:	d002      	beq.n	2024 <_gclk_init_generators_by_fref+0x90>
    201e:	4a06      	ldr	r2, [pc, #24]	; (2038 <_gclk_init_generators_by_fref+0xa4>)
    2020:	4b02      	ldr	r3, [pc, #8]	; (202c <_gclk_init_generators_by_fref+0x98>)
    2022:	64da      	str	r2, [r3, #76]	; 0x4c
    2024:	4770      	bx	lr
    2026:	bf00      	nop
    2028:	00012b06 	.word	0x00012b06
    202c:	40001c00 	.word	0x40001c00
    2030:	00012306 	.word	0x00012306
    2034:	00012b05 	.word	0x00012b05
    2038:	00013b05 	.word	0x00013b05

0000203c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    203c:	2201      	movs	r2, #1
    203e:	4b01      	ldr	r3, [pc, #4]	; (2044 <_mclk_init+0x8>)
    2040:	715a      	strb	r2, [r3, #5]
    2042:	4770      	bx	lr
    2044:	40000800 	.word	0x40000800

00002048 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2048:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    204a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    204c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    204e:	f012 0f01 	tst.w	r2, #1
    2052:	d005      	beq.n	2060 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2054:	2201      	movs	r2, #1
    2056:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2058:	6803      	ldr	r3, [r0, #0]
    205a:	b153      	cbz	r3, 2072 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    205c:	4798      	blx	r3
    205e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2060:	8a1a      	ldrh	r2, [r3, #16]
    2062:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2064:	b12a      	cbz	r2, 2072 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2066:	f240 225e 	movw	r2, #606	; 0x25e
    206a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    206c:	6843      	ldr	r3, [r0, #4]
    206e:	b103      	cbz	r3, 2072 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2070:	4798      	blx	r3
    2072:	bd08      	pop	{r3, pc}

00002074 <_flash_init>:
{
    2074:	b538      	push	{r3, r4, r5, lr}
    2076:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2078:	4605      	mov	r5, r0
    207a:	b350      	cbz	r0, 20d2 <_flash_init+0x5e>
    207c:	4816      	ldr	r0, [pc, #88]	; (20d8 <_flash_init+0x64>)
    207e:	4281      	cmp	r1, r0
    2080:	bf14      	ite	ne
    2082:	2000      	movne	r0, #0
    2084:	2001      	moveq	r0, #1
    2086:	2256      	movs	r2, #86	; 0x56
    2088:	4914      	ldr	r1, [pc, #80]	; (20dc <_flash_init+0x68>)
    208a:	4b15      	ldr	r3, [pc, #84]	; (20e0 <_flash_init+0x6c>)
    208c:	4798      	blx	r3
	device->hw = hw;
    208e:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2090:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2092:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2096:	049b      	lsls	r3, r3, #18
    2098:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    209a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    209c:	4b11      	ldr	r3, [pc, #68]	; (20e4 <_flash_init+0x70>)
    209e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20a0:	4b11      	ldr	r3, [pc, #68]	; (20e8 <_flash_init+0x74>)
    20a2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    20a6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20ae:	f3bf 8f6f 	isb	sy
    20b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    20b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    20ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20be:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    20c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20ca:	6019      	str	r1, [r3, #0]
    20cc:	601a      	str	r2, [r3, #0]
}
    20ce:	2000      	movs	r0, #0
    20d0:	bd38      	pop	{r3, r4, r5, pc}
    20d2:	2000      	movs	r0, #0
    20d4:	e7d7      	b.n	2086 <_flash_init+0x12>
    20d6:	bf00      	nop
    20d8:	41004000 	.word	0x41004000
    20dc:	000049e8 	.word	0x000049e8
    20e0:	000018f9 	.word	0x000018f9
    20e4:	20000a40 	.word	0x20000a40
    20e8:	e000e100 	.word	0xe000e100

000020ec <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    20ec:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    20ee:	4b02      	ldr	r3, [pc, #8]	; (20f8 <NVMCTRL_0_Handler+0xc>)
    20f0:	6818      	ldr	r0, [r3, #0]
    20f2:	4b02      	ldr	r3, [pc, #8]	; (20fc <NVMCTRL_0_Handler+0x10>)
    20f4:	4798      	blx	r3
    20f6:	bd08      	pop	{r3, pc}
    20f8:	20000a40 	.word	0x20000a40
    20fc:	00002049 	.word	0x00002049

00002100 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2100:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2102:	4b02      	ldr	r3, [pc, #8]	; (210c <NVMCTRL_1_Handler+0xc>)
    2104:	6818      	ldr	r0, [r3, #0]
    2106:	4b02      	ldr	r3, [pc, #8]	; (2110 <NVMCTRL_1_Handler+0x10>)
    2108:	4798      	blx	r3
    210a:	bd08      	pop	{r3, pc}
    210c:	20000a40 	.word	0x20000a40
    2110:	00002049 	.word	0x00002049

00002114 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2114:	4b07      	ldr	r3, [pc, #28]	; (2134 <_osc32kctrl_init_sources+0x20>)
    2116:	f242 024e 	movw	r2, #8270	; 0x204e
    211a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    211c:	2201      	movs	r2, #1
    211e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2120:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2122:	461a      	mov	r2, r3
    2124:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2126:	f013 0f01 	tst.w	r3, #1
    212a:	d0fb      	beq.n	2124 <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    212c:	2205      	movs	r2, #5
    212e:	4b01      	ldr	r3, [pc, #4]	; (2134 <_osc32kctrl_init_sources+0x20>)
    2130:	741a      	strb	r2, [r3, #16]
    2132:	4770      	bx	lr
    2134:	40001400 	.word	0x40001400

00002138 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2138:	4a2b      	ldr	r2, [pc, #172]	; (21e8 <_oscctrl_init_referenced_generators+0xb0>)
    213a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    213c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2140:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2144:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2146:	4b29      	ldr	r3, [pc, #164]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    2148:	2200      	movs	r2, #0
    214a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    214c:	4a28      	ldr	r2, [pc, #160]	; (21f0 <_oscctrl_init_referenced_generators+0xb8>)
    214e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2150:	461a      	mov	r2, r3
    2152:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    2156:	f013 0f10 	tst.w	r3, #16
    215a:	d1fa      	bne.n	2152 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    215c:	2200      	movs	r2, #0
    215e:	4b23      	ldr	r3, [pc, #140]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    2160:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2164:	461a      	mov	r2, r3
    2166:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    216a:	f013 0f04 	tst.w	r3, #4
    216e:	d1fa      	bne.n	2166 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2170:	2242      	movs	r2, #66	; 0x42
    2172:	4b1e      	ldr	r3, [pc, #120]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    2174:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2176:	461a      	mov	r2, r3
    2178:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    217c:	f013 0f02 	tst.w	r3, #2
    2180:	d1fa      	bne.n	2178 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2182:	4b1a      	ldr	r3, [pc, #104]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    2184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2186:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2188:	461a      	mov	r2, r3
    218a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    218e:	f013 0f08 	tst.w	r3, #8
    2192:	d1fa      	bne.n	218a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2194:	2282      	movs	r2, #130	; 0x82
    2196:	4b15      	ldr	r3, [pc, #84]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    2198:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    219c:	461a      	mov	r2, r3
    219e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    21a2:	f013 0f04 	tst.w	r3, #4
    21a6:	d1fa      	bne.n	219e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    21a8:	4b10      	ldr	r3, [pc, #64]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    21aa:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    21ae:	f013 0f01 	tst.w	r3, #1
    21b2:	d012      	beq.n	21da <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    21b4:	4a0d      	ldr	r2, [pc, #52]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    21b6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    21b8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    21bc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    21c0:	d1f9      	bne.n	21b6 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    21c2:	4a09      	ldr	r2, [pc, #36]	; (21e8 <_oscctrl_init_referenced_generators+0xb0>)
    21c4:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    21c6:	2b00      	cmp	r3, #0
    21c8:	d1fc      	bne.n	21c4 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    21ca:	4a07      	ldr	r2, [pc, #28]	; (21e8 <_oscctrl_init_referenced_generators+0xb0>)
    21cc:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    21ce:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    21d2:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    21d6:	6213      	str	r3, [r2, #32]
    21d8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <_oscctrl_init_referenced_generators+0xb4>)
    21dc:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    21de:	f413 7f80 	tst.w	r3, #256	; 0x100
    21e2:	d0fb      	beq.n	21dc <_oscctrl_init_referenced_generators+0xa4>
    21e4:	e7ed      	b.n	21c2 <_oscctrl_init_referenced_generators+0x8a>
    21e6:	bf00      	nop
    21e8:	40001c00 	.word	0x40001c00
    21ec:	40001000 	.word	0x40001000
    21f0:	04010000 	.word	0x04010000

000021f4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    21f4:	b500      	push	{lr}
    21f6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    21f8:	4b0d      	ldr	r3, [pc, #52]	; (2230 <RAMECC_Handler+0x3c>)
    21fa:	789b      	ldrb	r3, [r3, #2]
    21fc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    21fe:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2200:	9b01      	ldr	r3, [sp, #4]
    2202:	f013 0f02 	tst.w	r3, #2
    2206:	d006      	beq.n	2216 <RAMECC_Handler+0x22>
    2208:	4b0a      	ldr	r3, [pc, #40]	; (2234 <RAMECC_Handler+0x40>)
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	b11b      	cbz	r3, 2216 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    220e:	4a08      	ldr	r2, [pc, #32]	; (2230 <RAMECC_Handler+0x3c>)
    2210:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2212:	4798      	blx	r3
    2214:	e009      	b.n	222a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	f013 0f01 	tst.w	r3, #1
    221c:	d005      	beq.n	222a <RAMECC_Handler+0x36>
    221e:	4b05      	ldr	r3, [pc, #20]	; (2234 <RAMECC_Handler+0x40>)
    2220:	685b      	ldr	r3, [r3, #4]
    2222:	b113      	cbz	r3, 222a <RAMECC_Handler+0x36>
    2224:	4a02      	ldr	r2, [pc, #8]	; (2230 <RAMECC_Handler+0x3c>)
    2226:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2228:	4798      	blx	r3
	} else {
		return;
	}
}
    222a:	b003      	add	sp, #12
    222c:	f85d fb04 	ldr.w	pc, [sp], #4
    2230:	41020000 	.word	0x41020000
    2234:	20001570 	.word	0x20001570

00002238 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2238:	b470      	push	{r4, r5, r6}
    223a:	b087      	sub	sp, #28
    223c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    223e:	466c      	mov	r4, sp
    2240:	4d0c      	ldr	r5, [pc, #48]	; (2274 <_sercom_get_hardware_index+0x3c>)
    2242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2246:	e895 0003 	ldmia.w	r5, {r0, r1}
    224a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    224e:	9b00      	ldr	r3, [sp, #0]
    2250:	42b3      	cmp	r3, r6
    2252:	d00c      	beq.n	226e <_sercom_get_hardware_index+0x36>
    2254:	4632      	mov	r2, r6
    2256:	2001      	movs	r0, #1
    2258:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    225c:	4293      	cmp	r3, r2
    225e:	d007      	beq.n	2270 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2260:	3001      	adds	r0, #1
    2262:	2806      	cmp	r0, #6
    2264:	d1f8      	bne.n	2258 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    2266:	2000      	movs	r0, #0
}
    2268:	b007      	add	sp, #28
    226a:	bc70      	pop	{r4, r5, r6}
    226c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    226e:	2000      	movs	r0, #0
			return i;
    2270:	b2c0      	uxtb	r0, r0
    2272:	e7f9      	b.n	2268 <_sercom_get_hardware_index+0x30>
    2274:	00004a08 	.word	0x00004a08

00002278 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2278:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    227a:	4b03      	ldr	r3, [pc, #12]	; (2288 <_sercom_get_irq_num+0x10>)
    227c:	4798      	blx	r3
    227e:	0080      	lsls	r0, r0, #2
    2280:	302e      	adds	r0, #46	; 0x2e
}
    2282:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2286:	bd08      	pop	{r3, pc}
    2288:	00002239 	.word	0x00002239

0000228c <_usart_init>:
{
    228c:	b538      	push	{r3, r4, r5, lr}
    228e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2290:	4b33      	ldr	r3, [pc, #204]	; (2360 <_usart_init+0xd4>)
    2292:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2294:	2803      	cmp	r0, #3
    2296:	d056      	beq.n	2346 <_usart_init+0xba>
    2298:	2804      	cmp	r0, #4
    229a:	d052      	beq.n	2342 <_usart_init+0xb6>
    229c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    229e:	bf08      	it	eq
    22a0:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    22a2:	d006      	beq.n	22b2 <_usart_init+0x26>
	ASSERT(false);
    22a4:	f240 2262 	movw	r2, #610	; 0x262
    22a8:	492e      	ldr	r1, [pc, #184]	; (2364 <_usart_init+0xd8>)
    22aa:	2000      	movs	r0, #0
    22ac:	4b2e      	ldr	r3, [pc, #184]	; (2368 <_usart_init+0xdc>)
    22ae:	4798      	blx	r3
	return 0;
    22b0:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    22b2:	69e3      	ldr	r3, [r4, #28]
    22b4:	f013 0f01 	tst.w	r3, #1
    22b8:	d1fb      	bne.n	22b2 <_usart_init+0x26>
    22ba:	69e3      	ldr	r3, [r4, #28]
    22bc:	f013 0f03 	tst.w	r3, #3
    22c0:	d1fb      	bne.n	22ba <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    22c2:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    22c4:	f013 0f02 	tst.w	r3, #2
    22c8:	d147      	bne.n	235a <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    22ca:	69e3      	ldr	r3, [r4, #28]
    22cc:	f013 0f01 	tst.w	r3, #1
    22d0:	d1fb      	bne.n	22ca <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    22d2:	6823      	ldr	r3, [r4, #0]
    22d4:	f043 0301 	orr.w	r3, r3, #1
    22d8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    22da:	69e3      	ldr	r3, [r4, #28]
    22dc:	f013 0f01 	tst.w	r3, #1
    22e0:	d1fb      	bne.n	22da <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    22e2:	4610      	mov	r0, r2
    22e4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    22e8:	4920      	ldr	r1, [pc, #128]	; (236c <_usart_init+0xe0>)
    22ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    22ee:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    22f0:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    22f2:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    22f4:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    22f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    22f8:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    22fa:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    22fe:	d024      	beq.n	234a <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2300:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2304:	4b19      	ldr	r3, [pc, #100]	; (236c <_usart_init+0xe0>)
    2306:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    230a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    230c:	89a3      	ldrh	r3, [r4, #12]
    230e:	f361 030c 	bfi	r3, r1, #0, #13
    2312:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2314:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    2318:	89a3      	ldrh	r3, [r4, #12]
    231a:	f362 334f 	bfi	r3, r2, #13, #3
    231e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2320:	4b12      	ldr	r3, [pc, #72]	; (236c <_usart_init+0xe0>)
    2322:	0042      	lsls	r2, r0, #1
    2324:	1811      	adds	r1, r2, r0
    2326:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    232a:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    232e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2330:	4402      	add	r2, r0
    2332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2336:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    233a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    233e:	2000      	movs	r0, #0
    2340:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2342:	2201      	movs	r2, #1
    2344:	e7b5      	b.n	22b2 <_usart_init+0x26>
    2346:	2200      	movs	r2, #0
    2348:	e7b3      	b.n	22b2 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    234a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    234e:	4b07      	ldr	r3, [pc, #28]	; (236c <_usart_init+0xe0>)
    2350:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2354:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2356:	81a3      	strh	r3, [r4, #12]
    2358:	e7e2      	b.n	2320 <_usart_init+0x94>
		return ERR_DENIED;
    235a:	f06f 0010 	mvn.w	r0, #16
}
    235e:	bd38      	pop	{r3, r4, r5, pc}
    2360:	00002239 	.word	0x00002239
    2364:	00004a94 	.word	0x00004a94
    2368:	000018f9 	.word	0x000018f9
    236c:	00004a08 	.word	0x00004a08

00002370 <_usart_async_init>:
{
    2370:	b570      	push	{r4, r5, r6, lr}
    2372:	460d      	mov	r5, r1
	ASSERT(device);
    2374:	4606      	mov	r6, r0
    2376:	22da      	movs	r2, #218	; 0xda
    2378:	4912      	ldr	r1, [pc, #72]	; (23c4 <_usart_async_init+0x54>)
    237a:	3000      	adds	r0, #0
    237c:	bf18      	it	ne
    237e:	2001      	movne	r0, #1
    2380:	4b11      	ldr	r3, [pc, #68]	; (23c8 <_usart_async_init+0x58>)
    2382:	4798      	blx	r3
	init_status = _usart_init(hw);
    2384:	4628      	mov	r0, r5
    2386:	4b11      	ldr	r3, [pc, #68]	; (23cc <_usart_async_init+0x5c>)
    2388:	4798      	blx	r3
	if (init_status) {
    238a:	4604      	mov	r4, r0
    238c:	b9c0      	cbnz	r0, 23c0 <_usart_async_init+0x50>
	device->hw = hw;
    238e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    2390:	4628      	mov	r0, r5
    2392:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <_usart_async_init+0x60>)
    2394:	4798      	blx	r3
		irq = irq +2;
    2396:	3002      	adds	r0, #2
    2398:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    239a:	f000 031f 	and.w	r3, r0, #31
    239e:	2201      	movs	r2, #1
    23a0:	409a      	lsls	r2, r3
    23a2:	0943      	lsrs	r3, r0, #5
    23a4:	009b      	lsls	r3, r3, #2
    23a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    23aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    23ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    23b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23be:	601a      	str	r2, [r3, #0]
}
    23c0:	4620      	mov	r0, r4
    23c2:	bd70      	pop	{r4, r5, r6, pc}
    23c4:	00004a94 	.word	0x00004a94
    23c8:	000018f9 	.word	0x000018f9
    23cc:	0000228d 	.word	0x0000228d
    23d0:	00002279 	.word	0x00002279

000023d4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    23d4:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    23d6:	69d3      	ldr	r3, [r2, #28]
    23d8:	f013 0f03 	tst.w	r3, #3
    23dc:	d1fb      	bne.n	23d6 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    23de:	6813      	ldr	r3, [r2, #0]
    23e0:	f043 0302 	orr.w	r3, r3, #2
    23e4:	6013      	str	r3, [r2, #0]
    23e6:	4770      	bx	lr

000023e8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    23e8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    23ea:	6299      	str	r1, [r3, #40]	; 0x28
    23ec:	4770      	bx	lr

000023ee <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    23ee:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    23f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    23f2:	b2c0      	uxtb	r0, r0
    23f4:	4770      	bx	lr

000023f6 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    23f6:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    23f8:	7e18      	ldrb	r0, [r3, #24]
}
    23fa:	f000 0001 	and.w	r0, r0, #1
    23fe:	4770      	bx	lr

00002400 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2400:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2402:	7e18      	ldrb	r0, [r3, #24]
}
    2404:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2408:	4770      	bx	lr
	...

0000240c <_usart_async_set_irq_state>:
{
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	460c      	mov	r4, r1
    2410:	4616      	mov	r6, r2
	ASSERT(device);
    2412:	4605      	mov	r5, r0
    2414:	f44f 7211 	mov.w	r2, #580	; 0x244
    2418:	4915      	ldr	r1, [pc, #84]	; (2470 <_usart_async_set_irq_state+0x64>)
    241a:	3000      	adds	r0, #0
    241c:	bf18      	it	ne
    241e:	2001      	movne	r0, #1
    2420:	4b14      	ldr	r3, [pc, #80]	; (2474 <_usart_async_set_irq_state+0x68>)
    2422:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2424:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    2428:	d10d      	bne.n	2446 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    242a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    242c:	b92e      	cbnz	r6, 243a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    242e:	2201      	movs	r2, #1
    2430:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2432:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2434:	2202      	movs	r2, #2
    2436:	751a      	strb	r2, [r3, #20]
    2438:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    243a:	2201      	movs	r2, #1
    243c:	759a      	strb	r2, [r3, #22]
    243e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2440:	2202      	movs	r2, #2
    2442:	759a      	strb	r2, [r3, #22]
    2444:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    2446:	2c01      	cmp	r4, #1
    2448:	d002      	beq.n	2450 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    244a:	2c03      	cmp	r4, #3
    244c:	d008      	beq.n	2460 <_usart_async_set_irq_state+0x54>
    244e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2450:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2452:	b916      	cbnz	r6, 245a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2454:	2204      	movs	r2, #4
    2456:	751a      	strb	r2, [r3, #20]
    2458:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    245a:	2204      	movs	r2, #4
    245c:	759a      	strb	r2, [r3, #22]
    245e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2460:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2462:	b116      	cbz	r6, 246a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	759a      	strb	r2, [r3, #22]
}
    2468:	e7f1      	b.n	244e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    246a:	2280      	movs	r2, #128	; 0x80
    246c:	751a      	strb	r2, [r3, #20]
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	00004a94 	.word	0x00004a94
    2474:	000018f9 	.word	0x000018f9

00002478 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2478:	4b03      	ldr	r3, [pc, #12]	; (2488 <_delay_init+0x10>)
    247a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    247e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2480:	2205      	movs	r2, #5
    2482:	601a      	str	r2, [r3, #0]
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	e000e010 	.word	0xe000e010

0000248c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    248c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    248e:	b303      	cbz	r3, 24d2 <_delay_cycles+0x46>
{
    2490:	b430      	push	{r4, r5}
    2492:	1e5d      	subs	r5, r3, #1
    2494:	b2ed      	uxtb	r5, r5
	while (n--) {
    2496:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2498:	4a12      	ldr	r2, [pc, #72]	; (24e4 <_delay_cycles+0x58>)
    249a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    249e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    24a0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    24a2:	6813      	ldr	r3, [r2, #0]
    24a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    24a8:	d0fb      	beq.n	24a2 <_delay_cycles+0x16>
	while (n--) {
    24aa:	3801      	subs	r0, #1
    24ac:	b2c0      	uxtb	r0, r0
    24ae:	28ff      	cmp	r0, #255	; 0xff
    24b0:	d1f5      	bne.n	249e <_delay_cycles+0x12>
    24b2:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    24b6:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    24ba:	3101      	adds	r1, #1
    24bc:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    24be:	4b09      	ldr	r3, [pc, #36]	; (24e4 <_delay_cycles+0x58>)
    24c0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    24c2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    24c4:	461a      	mov	r2, r3
    24c6:	6813      	ldr	r3, [r2, #0]
    24c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    24cc:	d0fb      	beq.n	24c6 <_delay_cycles+0x3a>
		;
}
    24ce:	bc30      	pop	{r4, r5}
    24d0:	4770      	bx	lr
	SysTick->LOAD = buf;
    24d2:	4b04      	ldr	r3, [pc, #16]	; (24e4 <_delay_cycles+0x58>)
    24d4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    24d6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    24d8:	461a      	mov	r2, r3
    24da:	6813      	ldr	r3, [r2, #0]
    24dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    24e0:	d0fb      	beq.n	24da <_delay_cycles+0x4e>
    24e2:	4770      	bx	lr
    24e4:	e000e010 	.word	0xe000e010

000024e8 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    24e8:	b470      	push	{r4, r5, r6}
    24ea:	b087      	sub	sp, #28
    24ec:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    24ee:	ac01      	add	r4, sp, #4
    24f0:	4d14      	ldr	r5, [pc, #80]	; (2544 <_get_irq_num+0x5c>)
    24f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    24f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24f6:	682b      	ldr	r3, [r5, #0]
    24f8:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    24fa:	42b0      	cmp	r0, r6
    24fc:	d017      	beq.n	252e <_get_irq_num+0x46>
    24fe:	4631      	mov	r1, r6
    2500:	2301      	movs	r3, #1
    2502:	a801      	add	r0, sp, #4
    2504:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2508:	428a      	cmp	r2, r1
    250a:	d006      	beq.n	251a <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    250c:	3301      	adds	r3, #1
    250e:	2b05      	cmp	r3, #5
    2510:	d1f8      	bne.n	2504 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2512:	2055      	movs	r0, #85	; 0x55
}
    2514:	b007      	add	sp, #28
    2516:	bc70      	pop	{r4, r5, r6}
    2518:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    251a:	b2db      	uxtb	r3, r3
    251c:	2b04      	cmp	r3, #4
    251e:	d80c      	bhi.n	253a <_get_irq_num+0x52>
    2520:	e8df f003 	tbb	[pc, r3]
    2524:	070d0305 	.word	0x070d0305
    2528:	09          	.byte	0x09
    2529:	00          	.byte	0x00
		return TCC1_0_IRQn;
    252a:	205c      	movs	r0, #92	; 0x5c
    252c:	e7f2      	b.n	2514 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    252e:	2055      	movs	r0, #85	; 0x55
    2530:	e7f0      	b.n	2514 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    2532:	2065      	movs	r0, #101	; 0x65
    2534:	e7ee      	b.n	2514 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    2536:	2068      	movs	r0, #104	; 0x68
    2538:	e7ec      	b.n	2514 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    253a:	2089      	movs	r0, #137	; 0x89
    253c:	e7ea      	b.n	2514 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    253e:	2061      	movs	r0, #97	; 0x61
    2540:	e7e8      	b.n	2514 <_get_irq_num+0x2c>
    2542:	bf00      	nop
    2544:	00004ab0 	.word	0x00004ab0

00002548 <_tcc_timer_deinit>:
{
    2548:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    254a:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    254c:	4620      	mov	r0, r4
    254e:	4b10      	ldr	r3, [pc, #64]	; (2590 <_tcc_timer_deinit+0x48>)
    2550:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2552:	0943      	lsrs	r3, r0, #5
    2554:	f000 001f 	and.w	r0, r0, #31
    2558:	2201      	movs	r2, #1
    255a:	fa02 f000 	lsl.w	r0, r2, r0
    255e:	3320      	adds	r3, #32
    2560:	4a0c      	ldr	r2, [pc, #48]	; (2594 <_tcc_timer_deinit+0x4c>)
    2562:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2566:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    256a:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    256e:	68a3      	ldr	r3, [r4, #8]
    2570:	f013 0f03 	tst.w	r3, #3
    2574:	d1fb      	bne.n	256e <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2576:	6823      	ldr	r3, [r4, #0]
    2578:	f023 0302 	bic.w	r3, r3, #2
    257c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    257e:	68a3      	ldr	r3, [r4, #8]
    2580:	f013 0f01 	tst.w	r3, #1
    2584:	d1fb      	bne.n	257e <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2586:	6823      	ldr	r3, [r4, #0]
    2588:	f043 0301 	orr.w	r3, r3, #1
    258c:	6023      	str	r3, [r4, #0]
    258e:	bd10      	pop	{r4, pc}
    2590:	000024e9 	.word	0x000024e9
    2594:	e000e100 	.word	0xe000e100

00002598 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2598:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    259a:	6893      	ldr	r3, [r2, #8]
    259c:	f013 0f03 	tst.w	r3, #3
    25a0:	d1fb      	bne.n	259a <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    25a2:	6813      	ldr	r3, [r2, #0]
    25a4:	f043 0302 	orr.w	r3, r3, #2
    25a8:	6013      	str	r3, [r2, #0]
    25aa:	4770      	bx	lr

000025ac <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    25ac:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    25ae:	6893      	ldr	r3, [r2, #8]
    25b0:	f013 0f03 	tst.w	r3, #3
    25b4:	d1fb      	bne.n	25ae <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    25b6:	6813      	ldr	r3, [r2, #0]
    25b8:	f023 0302 	bic.w	r3, r3, #2
    25bc:	6013      	str	r3, [r2, #0]
    25be:	4770      	bx	lr

000025c0 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    25c0:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    25c2:	6419      	str	r1, [r3, #64]	; 0x40
    25c4:	4770      	bx	lr

000025c6 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    25c6:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    25c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    25ca:	4770      	bx	lr

000025cc <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    25cc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    25ce:	6893      	ldr	r3, [r2, #8]
    25d0:	f013 0f03 	tst.w	r3, #3
    25d4:	d1fb      	bne.n	25ce <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    25d6:	6810      	ldr	r0, [r2, #0]
}
    25d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    25dc:	4770      	bx	lr

000025de <tcc_interrupt_handler>:
{
    25de:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    25e0:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    25e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    25e4:	f012 0f01 	tst.w	r2, #1
    25e8:	d100      	bne.n	25ec <tcc_interrupt_handler+0xe>
    25ea:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    25ec:	2201      	movs	r2, #1
    25ee:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    25f0:	6803      	ldr	r3, [r0, #0]
    25f2:	4798      	blx	r3
}
    25f4:	e7f9      	b.n	25ea <tcc_interrupt_handler+0xc>
	...

000025f8 <_tcc_timer_init>:
{
    25f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fa:	b087      	sub	sp, #28
    25fc:	4605      	mov	r5, r0
    25fe:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2600:	ae01      	add	r6, sp, #4
    2602:	4f4e      	ldr	r7, [pc, #312]	; (273c <_tcc_timer_init+0x144>)
    2604:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2606:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2608:	683b      	ldr	r3, [r7, #0]
    260a:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    260c:	42a0      	cmp	r0, r4
    260e:	d00c      	beq.n	262a <_tcc_timer_init+0x32>
    2610:	4621      	mov	r1, r4
    2612:	2301      	movs	r3, #1
    2614:	a801      	add	r0, sp, #4
    2616:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    261a:	428a      	cmp	r2, r1
    261c:	d006      	beq.n	262c <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    261e:	3301      	adds	r3, #1
    2620:	2b05      	cmp	r3, #5
    2622:	d1f8      	bne.n	2616 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2624:	2600      	movs	r6, #0
			return i;
    2626:	b276      	sxtb	r6, r6
    2628:	e015      	b.n	2656 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    262a:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    262c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2630:	d073      	beq.n	271a <_tcc_timer_init+0x122>
    2632:	2b01      	cmp	r3, #1
    2634:	d06b      	beq.n	270e <_tcc_timer_init+0x116>
    2636:	2b02      	cmp	r3, #2
    2638:	d06b      	beq.n	2712 <_tcc_timer_init+0x11a>
    263a:	2b03      	cmp	r3, #3
    263c:	d06b      	beq.n	2716 <_tcc_timer_init+0x11e>
    263e:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2640:	bf08      	it	eq
    2642:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2644:	d0ef      	beq.n	2626 <_tcc_timer_init+0x2e>
	ASSERT(false);
    2646:	f240 128b 	movw	r2, #395	; 0x18b
    264a:	493d      	ldr	r1, [pc, #244]	; (2740 <_tcc_timer_init+0x148>)
    264c:	2000      	movs	r0, #0
    264e:	4b3d      	ldr	r3, [pc, #244]	; (2744 <_tcc_timer_init+0x14c>)
    2650:	4798      	blx	r3
	return -1;
    2652:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2656:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2658:	22e4      	movs	r2, #228	; 0xe4
    265a:	4939      	ldr	r1, [pc, #228]	; (2740 <_tcc_timer_init+0x148>)
    265c:	2001      	movs	r0, #1
    265e:	4b39      	ldr	r3, [pc, #228]	; (2744 <_tcc_timer_init+0x14c>)
    2660:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2662:	68a3      	ldr	r3, [r4, #8]
    2664:	f013 0f01 	tst.w	r3, #1
    2668:	d1fb      	bne.n	2662 <_tcc_timer_init+0x6a>
    266a:	68a3      	ldr	r3, [r4, #8]
    266c:	f013 0f03 	tst.w	r3, #3
    2670:	d1fb      	bne.n	266a <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2672:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2674:	f013 0f02 	tst.w	r3, #2
    2678:	d15d      	bne.n	2736 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    267a:	68a3      	ldr	r3, [r4, #8]
    267c:	f013 0f01 	tst.w	r3, #1
    2680:	d1fb      	bne.n	267a <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2682:	6823      	ldr	r3, [r4, #0]
    2684:	f043 0301 	orr.w	r3, r3, #1
    2688:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    268a:	68a3      	ldr	r3, [r4, #8]
    268c:	f013 0f01 	tst.w	r3, #1
    2690:	d1fb      	bne.n	268a <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2692:	4a2a      	ldr	r2, [pc, #168]	; (273c <_tcc_timer_init+0x144>)
    2694:	00f1      	lsls	r1, r6, #3
    2696:	198b      	adds	r3, r1, r6
    2698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    269c:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    269e:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    26a0:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    26a2:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    26a4:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    26a6:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    26a8:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    26aa:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    26ac:	440e      	add	r6, r1
    26ae:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    26b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    26b4:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    26b6:	2301      	movs	r3, #1
    26b8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    26ba:	4b23      	ldr	r3, [pc, #140]	; (2748 <_tcc_timer_init+0x150>)
    26bc:	429c      	cmp	r4, r3
    26be:	d02e      	beq.n	271e <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    26c0:	4b22      	ldr	r3, [pc, #136]	; (274c <_tcc_timer_init+0x154>)
    26c2:	429c      	cmp	r4, r3
    26c4:	d02e      	beq.n	2724 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    26c6:	4b22      	ldr	r3, [pc, #136]	; (2750 <_tcc_timer_init+0x158>)
    26c8:	429c      	cmp	r4, r3
    26ca:	d02e      	beq.n	272a <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    26cc:	4b21      	ldr	r3, [pc, #132]	; (2754 <_tcc_timer_init+0x15c>)
    26ce:	429c      	cmp	r4, r3
    26d0:	d02e      	beq.n	2730 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    26d2:	4b21      	ldr	r3, [pc, #132]	; (2758 <_tcc_timer_init+0x160>)
    26d4:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    26d6:	bf04      	itt	eq
    26d8:	4b20      	ldreq	r3, [pc, #128]	; (275c <_tcc_timer_init+0x164>)
    26da:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    26dc:	4620      	mov	r0, r4
    26de:	4b20      	ldr	r3, [pc, #128]	; (2760 <_tcc_timer_init+0x168>)
    26e0:	4798      	blx	r3
    26e2:	f000 031f 	and.w	r3, r0, #31
    26e6:	2201      	movs	r2, #1
    26e8:	409a      	lsls	r2, r3
    26ea:	0943      	lsrs	r3, r0, #5
    26ec:	009b      	lsls	r3, r3, #2
    26ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    26f2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    26f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    26fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26fe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2702:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2706:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2708:	2000      	movs	r0, #0
}
    270a:	b007      	add	sp, #28
    270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    270e:	2601      	movs	r6, #1
    2710:	e789      	b.n	2626 <_tcc_timer_init+0x2e>
    2712:	2602      	movs	r6, #2
    2714:	e787      	b.n	2626 <_tcc_timer_init+0x2e>
    2716:	2603      	movs	r6, #3
    2718:	e785      	b.n	2626 <_tcc_timer_init+0x2e>
    271a:	2600      	movs	r6, #0
    271c:	e783      	b.n	2626 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    271e:	4b0f      	ldr	r3, [pc, #60]	; (275c <_tcc_timer_init+0x164>)
    2720:	601d      	str	r5, [r3, #0]
    2722:	e7d3      	b.n	26cc <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2724:	4b0d      	ldr	r3, [pc, #52]	; (275c <_tcc_timer_init+0x164>)
    2726:	605d      	str	r5, [r3, #4]
    2728:	e7d3      	b.n	26d2 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    272a:	4b0c      	ldr	r3, [pc, #48]	; (275c <_tcc_timer_init+0x164>)
    272c:	609d      	str	r5, [r3, #8]
    272e:	e7d5      	b.n	26dc <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2730:	4b0a      	ldr	r3, [pc, #40]	; (275c <_tcc_timer_init+0x164>)
    2732:	60dd      	str	r5, [r3, #12]
    2734:	e7d2      	b.n	26dc <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2736:	f06f 0010 	mvn.w	r0, #16
    273a:	e7e6      	b.n	270a <_tcc_timer_init+0x112>
    273c:	00004ab0 	.word	0x00004ab0
    2740:	00004b78 	.word	0x00004b78
    2744:	000018f9 	.word	0x000018f9
    2748:	41016000 	.word	0x41016000
    274c:	41018000 	.word	0x41018000
    2750:	42000c00 	.word	0x42000c00
    2754:	42001000 	.word	0x42001000
    2758:	43001000 	.word	0x43001000
    275c:	20000a44 	.word	0x20000a44
    2760:	000024e9 	.word	0x000024e9

00002764 <_tcc_timer_set_irq>:
{
    2764:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2766:	68c0      	ldr	r0, [r0, #12]
    2768:	4b02      	ldr	r3, [pc, #8]	; (2774 <_tcc_timer_set_irq+0x10>)
    276a:	4798      	blx	r3
    276c:	4b02      	ldr	r3, [pc, #8]	; (2778 <_tcc_timer_set_irq+0x14>)
    276e:	4798      	blx	r3
    2770:	bd08      	pop	{r3, pc}
    2772:	bf00      	nop
    2774:	000024e9 	.word	0x000024e9
    2778:	00001c1d 	.word	0x00001c1d

0000277c <_tcc_get_timer>:
}
    277c:	4800      	ldr	r0, [pc, #0]	; (2780 <_tcc_get_timer+0x4>)
    277e:	4770      	bx	lr
    2780:	20000060 	.word	0x20000060

00002784 <TCC0_0_Handler>:
{
    2784:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2786:	4b02      	ldr	r3, [pc, #8]	; (2790 <TCC0_0_Handler+0xc>)
    2788:	6818      	ldr	r0, [r3, #0]
    278a:	4b02      	ldr	r3, [pc, #8]	; (2794 <TCC0_0_Handler+0x10>)
    278c:	4798      	blx	r3
    278e:	bd08      	pop	{r3, pc}
    2790:	20000a44 	.word	0x20000a44
    2794:	000025df 	.word	0x000025df

00002798 <TCC1_0_Handler>:
{
    2798:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <TCC1_0_Handler+0xc>)
    279c:	6858      	ldr	r0, [r3, #4]
    279e:	4b02      	ldr	r3, [pc, #8]	; (27a8 <TCC1_0_Handler+0x10>)
    27a0:	4798      	blx	r3
    27a2:	bd08      	pop	{r3, pc}
    27a4:	20000a44 	.word	0x20000a44
    27a8:	000025df 	.word	0x000025df

000027ac <TCC2_0_Handler>:
{
    27ac:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    27ae:	4b02      	ldr	r3, [pc, #8]	; (27b8 <TCC2_0_Handler+0xc>)
    27b0:	6898      	ldr	r0, [r3, #8]
    27b2:	4b02      	ldr	r3, [pc, #8]	; (27bc <TCC2_0_Handler+0x10>)
    27b4:	4798      	blx	r3
    27b6:	bd08      	pop	{r3, pc}
    27b8:	20000a44 	.word	0x20000a44
    27bc:	000025df 	.word	0x000025df

000027c0 <TCC3_0_Handler>:
{
    27c0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    27c2:	4b02      	ldr	r3, [pc, #8]	; (27cc <TCC3_0_Handler+0xc>)
    27c4:	68d8      	ldr	r0, [r3, #12]
    27c6:	4b02      	ldr	r3, [pc, #8]	; (27d0 <TCC3_0_Handler+0x10>)
    27c8:	4798      	blx	r3
    27ca:	bd08      	pop	{r3, pc}
    27cc:	20000a44 	.word	0x20000a44
    27d0:	000025df 	.word	0x000025df

000027d4 <TCC4_0_Handler>:
{
    27d4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <TCC4_0_Handler+0xc>)
    27d8:	6918      	ldr	r0, [r3, #16]
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <TCC4_0_Handler+0x10>)
    27dc:	4798      	blx	r3
    27de:	bd08      	pop	{r3, pc}
    27e0:	20000a44 	.word	0x20000a44
    27e4:	000025df 	.word	0x000025df

000027e8 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    27e8:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27ea:	6913      	ldr	r3, [r2, #16]
    27ec:	f013 0f03 	tst.w	r3, #3
    27f0:	d1fb      	bne.n	27ea <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    27f2:	6813      	ldr	r3, [r2, #0]
    27f4:	f043 0302 	orr.w	r3, r3, #2
    27f8:	6013      	str	r3, [r2, #0]
    27fa:	4770      	bx	lr

000027fc <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    27fc:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27fe:	6913      	ldr	r3, [r2, #16]
    2800:	f013 0f03 	tst.w	r3, #3
    2804:	d1fb      	bne.n	27fe <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2806:	6813      	ldr	r3, [r2, #0]
    2808:	f023 0302 	bic.w	r3, r3, #2
    280c:	6013      	str	r3, [r2, #0]
    280e:	4770      	bx	lr

00002810 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2810:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2812:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2814:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2818:	2b02      	cmp	r3, #2
    281a:	d00b      	beq.n	2834 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    281c:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    281e:	f013 0f0c 	tst.w	r3, #12
    2822:	d009      	beq.n	2838 <_tc_timer_set_period+0x28>
    2824:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2826:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    282a:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    282c:	bf04      	itt	eq
    282e:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2830:	76d1      	strbeq	r1, [r2, #27]
    2832:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2834:	61d1      	str	r1, [r2, #28]
    2836:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2838:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    283a:	8391      	strh	r1, [r2, #28]
    283c:	4770      	bx	lr

0000283e <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    283e:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2840:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2842:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2846:	2b02      	cmp	r3, #2
    2848:	d00c      	beq.n	2864 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    284a:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    284c:	f013 0f0c 	tst.w	r3, #12
    2850:	d00a      	beq.n	2868 <_tc_timer_get_period+0x2a>
    2852:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2854:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2858:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    285a:	bf06      	itte	eq
    285c:	7ed0      	ldrbeq	r0, [r2, #27]
    285e:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2860:	2000      	movne	r0, #0
}
    2862:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2864:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2866:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2868:	8b90      	ldrh	r0, [r2, #28]
    286a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    286c:	4770      	bx	lr

0000286e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    286e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2870:	6913      	ldr	r3, [r2, #16]
    2872:	f013 0f03 	tst.w	r3, #3
    2876:	d1fb      	bne.n	2870 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2878:	6810      	ldr	r0, [r2, #0]
}
    287a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    287e:	4770      	bx	lr

00002880 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2880:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2882:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2884:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2886:	f012 0f01 	tst.w	r2, #1
    288a:	d100      	bne.n	288e <tc_interrupt_handler+0xe>
    288c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    288e:	2201      	movs	r2, #1
    2890:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2892:	6803      	ldr	r3, [r0, #0]
    2894:	4798      	blx	r3
	}
}
    2896:	e7f9      	b.n	288c <tc_interrupt_handler+0xc>

00002898 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2898:	b538      	push	{r3, r4, r5, lr}
    289a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    289c:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    289e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    28a0:	f013 0f01 	tst.w	r3, #1
    28a4:	d004      	beq.n	28b0 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    28a6:	2301      	movs	r3, #1
    28a8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    28aa:	6803      	ldr	r3, [r0, #0]
    28ac:	b103      	cbz	r3, 28b0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    28ae:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    28b0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    28b2:	f013 0f02 	tst.w	r3, #2
    28b6:	d005      	beq.n	28c4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    28b8:	2302      	movs	r3, #2
    28ba:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    28bc:	686b      	ldr	r3, [r5, #4]
    28be:	b10b      	cbz	r3, 28c4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    28c0:	4628      	mov	r0, r5
    28c2:	4798      	blx	r3
    28c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000028c8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    28c8:	4b11      	ldr	r3, [pc, #68]	; (2910 <_tc_init_irq_param+0x48>)
    28ca:	4298      	cmp	r0, r3
    28cc:	d011      	beq.n	28f2 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    28ce:	4b11      	ldr	r3, [pc, #68]	; (2914 <_tc_init_irq_param+0x4c>)
    28d0:	4298      	cmp	r0, r3
    28d2:	d011      	beq.n	28f8 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    28d4:	4b10      	ldr	r3, [pc, #64]	; (2918 <_tc_init_irq_param+0x50>)
    28d6:	4298      	cmp	r0, r3
    28d8:	d011      	beq.n	28fe <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    28da:	4b10      	ldr	r3, [pc, #64]	; (291c <_tc_init_irq_param+0x54>)
    28dc:	4298      	cmp	r0, r3
    28de:	d011      	beq.n	2904 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    28e0:	4b0f      	ldr	r3, [pc, #60]	; (2920 <_tc_init_irq_param+0x58>)
    28e2:	4298      	cmp	r0, r3
    28e4:	d011      	beq.n	290a <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    28e6:	4b0f      	ldr	r3, [pc, #60]	; (2924 <_tc_init_irq_param+0x5c>)
    28e8:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    28ea:	bf04      	itt	eq
    28ec:	4b0e      	ldreq	r3, [pc, #56]	; (2928 <_tc_init_irq_param+0x60>)
    28ee:	6159      	streq	r1, [r3, #20]
    28f0:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    28f2:	4b0d      	ldr	r3, [pc, #52]	; (2928 <_tc_init_irq_param+0x60>)
    28f4:	6019      	str	r1, [r3, #0]
    28f6:	e7f0      	b.n	28da <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <_tc_init_irq_param+0x60>)
    28fa:	6059      	str	r1, [r3, #4]
    28fc:	e7f0      	b.n	28e0 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    28fe:	4b0a      	ldr	r3, [pc, #40]	; (2928 <_tc_init_irq_param+0x60>)
    2900:	6099      	str	r1, [r3, #8]
    2902:	e7f0      	b.n	28e6 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2904:	4b08      	ldr	r3, [pc, #32]	; (2928 <_tc_init_irq_param+0x60>)
    2906:	60d9      	str	r1, [r3, #12]
    2908:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    290a:	4b07      	ldr	r3, [pc, #28]	; (2928 <_tc_init_irq_param+0x60>)
    290c:	6119      	str	r1, [r3, #16]
    290e:	4770      	bx	lr
    2910:	40003800 	.word	0x40003800
    2914:	40003c00 	.word	0x40003c00
    2918:	4101a000 	.word	0x4101a000
    291c:	4101c000 	.word	0x4101c000
    2920:	42001400 	.word	0x42001400
    2924:	42001800 	.word	0x42001800
    2928:	20000a58 	.word	0x20000a58

0000292c <get_tc_index>:
{
    292c:	b570      	push	{r4, r5, r6, lr}
    292e:	b086      	sub	sp, #24
    2930:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2932:	466c      	mov	r4, sp
    2934:	4d18      	ldr	r5, [pc, #96]	; (2998 <get_tc_index+0x6c>)
    2936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    293a:	e895 0003 	ldmia.w	r5, {r0, r1}
    293e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2942:	9b00      	ldr	r3, [sp, #0]
    2944:	42b3      	cmp	r3, r6
    2946:	d021      	beq.n	298c <get_tc_index+0x60>
    2948:	4631      	mov	r1, r6
    294a:	2301      	movs	r3, #1
    294c:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2950:	428a      	cmp	r2, r1
    2952:	d01c      	beq.n	298e <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2954:	3301      	adds	r3, #1
    2956:	2b06      	cmp	r3, #6
    2958:	d1f8      	bne.n	294c <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    295a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    295c:	4a0f      	ldr	r2, [pc, #60]	; (299c <get_tc_index+0x70>)
    295e:	7812      	ldrb	r2, [r2, #0]
    2960:	429a      	cmp	r2, r3
    2962:	d016      	beq.n	2992 <get_tc_index+0x66>
    2964:	4a0d      	ldr	r2, [pc, #52]	; (299c <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2966:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2968:	7d11      	ldrb	r1, [r2, #20]
    296a:	4299      	cmp	r1, r3
    296c:	d012      	beq.n	2994 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    296e:	3001      	adds	r0, #1
    2970:	b2c0      	uxtb	r0, r0
    2972:	3214      	adds	r2, #20
    2974:	2806      	cmp	r0, #6
    2976:	d1f7      	bne.n	2968 <get_tc_index+0x3c>
	ASSERT(false);
    2978:	f240 2227 	movw	r2, #551	; 0x227
    297c:	4908      	ldr	r1, [pc, #32]	; (29a0 <get_tc_index+0x74>)
    297e:	2000      	movs	r0, #0
    2980:	4b08      	ldr	r3, [pc, #32]	; (29a4 <get_tc_index+0x78>)
    2982:	4798      	blx	r3
	return -1;
    2984:	f04f 30ff 	mov.w	r0, #4294967295
}
    2988:	b006      	add	sp, #24
    298a:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    298c:	2300      	movs	r3, #0
			return i;
    298e:	b2db      	uxtb	r3, r3
    2990:	e7e4      	b.n	295c <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2992:	2000      	movs	r0, #0
			return i;
    2994:	b240      	sxtb	r0, r0
    2996:	e7f7      	b.n	2988 <get_tc_index+0x5c>
    2998:	00004b90 	.word	0x00004b90
    299c:	20000080 	.word	0x20000080
    29a0:	00004ba8 	.word	0x00004ba8
    29a4:	000018f9 	.word	0x000018f9

000029a8 <_tc_timer_init>:
{
    29a8:	b570      	push	{r4, r5, r6, lr}
    29aa:	4606      	mov	r6, r0
    29ac:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    29ae:	4608      	mov	r0, r1
    29b0:	4b48      	ldr	r3, [pc, #288]	; (2ad4 <_tc_timer_init+0x12c>)
    29b2:	4798      	blx	r3
    29b4:	4605      	mov	r5, r0
	device->hw = hw;
    29b6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    29b8:	22af      	movs	r2, #175	; 0xaf
    29ba:	4947      	ldr	r1, [pc, #284]	; (2ad8 <_tc_timer_init+0x130>)
    29bc:	2001      	movs	r0, #1
    29be:	4b47      	ldr	r3, [pc, #284]	; (2adc <_tc_timer_init+0x134>)
    29c0:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29c2:	6923      	ldr	r3, [r4, #16]
    29c4:	f013 0f01 	tst.w	r3, #1
    29c8:	d1fb      	bne.n	29c2 <_tc_timer_init+0x1a>
    29ca:	6923      	ldr	r3, [r4, #16]
    29cc:	f013 0f03 	tst.w	r3, #3
    29d0:	d1fb      	bne.n	29ca <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    29d2:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    29d4:	f013 0f02 	tst.w	r3, #2
    29d8:	d175      	bne.n	2ac6 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29da:	6923      	ldr	r3, [r4, #16]
    29dc:	f013 0f01 	tst.w	r3, #1
    29e0:	d1fb      	bne.n	29da <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    29e2:	6823      	ldr	r3, [r4, #0]
    29e4:	f043 0301 	orr.w	r3, r3, #1
    29e8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29ea:	6923      	ldr	r3, [r4, #16]
    29ec:	f013 0f01 	tst.w	r3, #1
    29f0:	d1fb      	bne.n	29ea <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    29f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    29f6:	4a3a      	ldr	r2, [pc, #232]	; (2ae0 <_tc_timer_init+0x138>)
    29f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29fc:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    29fe:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2a00:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2a02:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2a04:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2a06:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2a08:	2201      	movs	r2, #1
    2a0a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2a0c:	685b      	ldr	r3, [r3, #4]
    2a0e:	f003 030c 	and.w	r3, r3, #12
    2a12:	2b08      	cmp	r3, #8
    2a14:	d03f      	beq.n	2a96 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2a16:	2b00      	cmp	r3, #0
    2a18:	d147      	bne.n	2aaa <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2a1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a1e:	4a30      	ldr	r2, [pc, #192]	; (2ae0 <_tc_timer_init+0x138>)
    2a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a24:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a26:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2a28:	8a1b      	ldrh	r3, [r3, #16]
    2a2a:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2a2c:	2301      	movs	r3, #1
    2a2e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2a30:	4631      	mov	r1, r6
    2a32:	4620      	mov	r0, r4
    2a34:	4b2b      	ldr	r3, [pc, #172]	; (2ae4 <_tc_timer_init+0x13c>)
    2a36:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2a38:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a3c:	4a28      	ldr	r2, [pc, #160]	; (2ae0 <_tc_timer_init+0x138>)
    2a3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2a46:	2b00      	cmp	r3, #0
    2a48:	db40      	blt.n	2acc <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a4a:	095a      	lsrs	r2, r3, #5
    2a4c:	f003 031f 	and.w	r3, r3, #31
    2a50:	2101      	movs	r1, #1
    2a52:	fa01 f303 	lsl.w	r3, r1, r3
    2a56:	3220      	adds	r2, #32
    2a58:	4923      	ldr	r1, [pc, #140]	; (2ae8 <_tc_timer_init+0x140>)
    2a5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a62:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2a66:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2a6a:	4b1d      	ldr	r3, [pc, #116]	; (2ae0 <_tc_timer_init+0x138>)
    2a6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2a70:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2a74:	2b00      	cmp	r3, #0
    2a76:	db2b      	blt.n	2ad0 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a78:	0959      	lsrs	r1, r3, #5
    2a7a:	f003 031f 	and.w	r3, r3, #31
    2a7e:	2201      	movs	r2, #1
    2a80:	fa02 f303 	lsl.w	r3, r2, r3
    2a84:	4a18      	ldr	r2, [pc, #96]	; (2ae8 <_tc_timer_init+0x140>)
    2a86:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2a8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2a92:	2000      	movs	r0, #0
    2a94:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2a96:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a9a:	4a11      	ldr	r2, [pc, #68]	; (2ae0 <_tc_timer_init+0x138>)
    2a9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2aa0:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2aa2:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2aa4:	691b      	ldr	r3, [r3, #16]
    2aa6:	6223      	str	r3, [r4, #32]
    2aa8:	e7c0      	b.n	2a2c <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2aaa:	2b04      	cmp	r3, #4
    2aac:	d1be      	bne.n	2a2c <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2aae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ab2:	4a0b      	ldr	r2, [pc, #44]	; (2ae0 <_tc_timer_init+0x138>)
    2ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ab8:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2aba:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2abc:	7c1a      	ldrb	r2, [r3, #16]
    2abe:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2ac0:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2ac2:	76e3      	strb	r3, [r4, #27]
    2ac4:	e7b2      	b.n	2a2c <_tc_timer_init+0x84>
		return ERR_DENIED;
    2ac6:	f06f 0010 	mvn.w	r0, #16
    2aca:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2acc:	2000      	movs	r0, #0
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    2ad0:	2000      	movs	r0, #0
}
    2ad2:	bd70      	pop	{r4, r5, r6, pc}
    2ad4:	0000292d 	.word	0x0000292d
    2ad8:	00004ba8 	.word	0x00004ba8
    2adc:	000018f9 	.word	0x000018f9
    2ae0:	20000080 	.word	0x20000080
    2ae4:	000028c9 	.word	0x000028c9
    2ae8:	e000e100 	.word	0xe000e100

00002aec <_tc_timer_deinit>:
{
    2aec:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2aee:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2af0:	4620      	mov	r0, r4
    2af2:	4b18      	ldr	r3, [pc, #96]	; (2b54 <_tc_timer_deinit+0x68>)
    2af4:	4798      	blx	r3
    2af6:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2af8:	f240 1201 	movw	r2, #257	; 0x101
    2afc:	4916      	ldr	r1, [pc, #88]	; (2b58 <_tc_timer_deinit+0x6c>)
    2afe:	2001      	movs	r0, #1
    2b00:	4b16      	ldr	r3, [pc, #88]	; (2b5c <_tc_timer_deinit+0x70>)
    2b02:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2b04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b08:	4b15      	ldr	r3, [pc, #84]	; (2b60 <_tc_timer_deinit+0x74>)
    2b0a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2b0e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2b12:	2b00      	cmp	r3, #0
    2b14:	db0d      	blt.n	2b32 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b16:	095a      	lsrs	r2, r3, #5
    2b18:	f003 031f 	and.w	r3, r3, #31
    2b1c:	2101      	movs	r1, #1
    2b1e:	fa01 f303 	lsl.w	r3, r1, r3
    2b22:	3220      	adds	r2, #32
    2b24:	490f      	ldr	r1, [pc, #60]	; (2b64 <_tc_timer_deinit+0x78>)
    2b26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b2e:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b32:	6923      	ldr	r3, [r4, #16]
    2b34:	f013 0f03 	tst.w	r3, #3
    2b38:	d1fb      	bne.n	2b32 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2b3a:	6823      	ldr	r3, [r4, #0]
    2b3c:	f023 0302 	bic.w	r3, r3, #2
    2b40:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b42:	6923      	ldr	r3, [r4, #16]
    2b44:	f013 0f01 	tst.w	r3, #1
    2b48:	d1fb      	bne.n	2b42 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2b4a:	6823      	ldr	r3, [r4, #0]
    2b4c:	f043 0301 	orr.w	r3, r3, #1
    2b50:	6023      	str	r3, [r4, #0]
    2b52:	bd38      	pop	{r3, r4, r5, pc}
    2b54:	0000292d 	.word	0x0000292d
    2b58:	00004ba8 	.word	0x00004ba8
    2b5c:	000018f9 	.word	0x000018f9
    2b60:	20000080 	.word	0x20000080
    2b64:	e000e100 	.word	0xe000e100

00002b68 <_tc_timer_set_irq>:
{
    2b68:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2b6a:	68c0      	ldr	r0, [r0, #12]
    2b6c:	4b08      	ldr	r3, [pc, #32]	; (2b90 <_tc_timer_set_irq+0x28>)
    2b6e:	4798      	blx	r3
    2b70:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2b72:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    2b76:	4907      	ldr	r1, [pc, #28]	; (2b94 <_tc_timer_set_irq+0x2c>)
    2b78:	2001      	movs	r0, #1
    2b7a:	4b07      	ldr	r3, [pc, #28]	; (2b98 <_tc_timer_set_irq+0x30>)
    2b7c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2b7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <_tc_timer_set_irq+0x34>)
    2b84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2b88:	78a0      	ldrb	r0, [r4, #2]
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <_tc_timer_set_irq+0x38>)
    2b8c:	4798      	blx	r3
    2b8e:	bd10      	pop	{r4, pc}
    2b90:	0000292d 	.word	0x0000292d
    2b94:	00004ba8 	.word	0x00004ba8
    2b98:	000018f9 	.word	0x000018f9
    2b9c:	20000080 	.word	0x20000080
    2ba0:	00001c1d 	.word	0x00001c1d

00002ba4 <_pwm_init>:
{
    2ba4:	b570      	push	{r4, r5, r6, lr}
    2ba6:	4606      	mov	r6, r0
    2ba8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2baa:	4608      	mov	r0, r1
    2bac:	4b3f      	ldr	r3, [pc, #252]	; (2cac <_pwm_init+0x108>)
    2bae:	4798      	blx	r3
    2bb0:	4605      	mov	r5, r0
	device->hw = hw;
    2bb2:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bb4:	6923      	ldr	r3, [r4, #16]
    2bb6:	f013 0f01 	tst.w	r3, #1
    2bba:	d1fb      	bne.n	2bb4 <_pwm_init+0x10>
    2bbc:	6923      	ldr	r3, [r4, #16]
    2bbe:	f013 0f03 	tst.w	r3, #3
    2bc2:	d1fb      	bne.n	2bbc <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2bc4:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2bc6:	f013 0f02 	tst.w	r3, #2
    2bca:	d165      	bne.n	2c98 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bcc:	6923      	ldr	r3, [r4, #16]
    2bce:	f013 0f01 	tst.w	r3, #1
    2bd2:	d1fb      	bne.n	2bcc <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2bd4:	6823      	ldr	r3, [r4, #0]
    2bd6:	f043 0301 	orr.w	r3, r3, #1
    2bda:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bdc:	6923      	ldr	r3, [r4, #16]
    2bde:	f013 0f01 	tst.w	r3, #1
    2be2:	d1fb      	bne.n	2bdc <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2be4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2be8:	4a31      	ldr	r2, [pc, #196]	; (2cb0 <_pwm_init+0x10c>)
    2bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2bee:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2bf0:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2bf2:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2bf4:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2bf6:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2bf8:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2bfa:	2203      	movs	r2, #3
    2bfc:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	f003 030c 	and.w	r3, r3, #12
    2c04:	2b08      	cmp	r3, #8
    2c06:	d03d      	beq.n	2c84 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d148      	bne.n	2c9e <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2c0c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c10:	4a27      	ldr	r2, [pc, #156]	; (2cb0 <_pwm_init+0x10c>)
    2c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c16:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2c18:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2c1a:	8a1b      	ldrh	r3, [r3, #16]
    2c1c:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2c1e:	4631      	mov	r1, r6
    2c20:	4620      	mov	r0, r4
    2c22:	4b24      	ldr	r3, [pc, #144]	; (2cb4 <_pwm_init+0x110>)
    2c24:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2c26:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c2a:	4a21      	ldr	r2, [pc, #132]	; (2cb0 <_pwm_init+0x10c>)
    2c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2c34:	2b00      	cmp	r3, #0
    2c36:	db35      	blt.n	2ca4 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c38:	095a      	lsrs	r2, r3, #5
    2c3a:	f003 031f 	and.w	r3, r3, #31
    2c3e:	2101      	movs	r1, #1
    2c40:	fa01 f303 	lsl.w	r3, r1, r3
    2c44:	3220      	adds	r2, #32
    2c46:	491c      	ldr	r1, [pc, #112]	; (2cb8 <_pwm_init+0x114>)
    2c48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c50:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2c54:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2c58:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <_pwm_init+0x10c>)
    2c5a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2c5e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2c62:	2b00      	cmp	r3, #0
    2c64:	db20      	blt.n	2ca8 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c66:	0959      	lsrs	r1, r3, #5
    2c68:	f003 031f 	and.w	r3, r3, #31
    2c6c:	2201      	movs	r2, #1
    2c6e:	fa02 f303 	lsl.w	r3, r2, r3
    2c72:	4a11      	ldr	r2, [pc, #68]	; (2cb8 <_pwm_init+0x114>)
    2c74:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2c78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2c80:	2000      	movs	r0, #0
    2c82:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2c84:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c88:	4a09      	ldr	r2, [pc, #36]	; (2cb0 <_pwm_init+0x10c>)
    2c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c8e:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2c90:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2c92:	691b      	ldr	r3, [r3, #16]
    2c94:	6223      	str	r3, [r4, #32]
    2c96:	e7c2      	b.n	2c1e <_pwm_init+0x7a>
		return ERR_DENIED;
    2c98:	f06f 0010 	mvn.w	r0, #16
    2c9c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2c9e:	f04f 30ff 	mov.w	r0, #4294967295
    2ca2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2ca4:	2000      	movs	r0, #0
    2ca6:	bd70      	pop	{r4, r5, r6, pc}
    2ca8:	2000      	movs	r0, #0
}
    2caa:	bd70      	pop	{r4, r5, r6, pc}
    2cac:	0000292d 	.word	0x0000292d
    2cb0:	20000080 	.word	0x20000080
    2cb4:	000028c9 	.word	0x000028c9
    2cb8:	e000e100 	.word	0xe000e100

00002cbc <_tc_get_timer>:
}
    2cbc:	4800      	ldr	r0, [pc, #0]	; (2cc0 <_tc_get_timer+0x4>)
    2cbe:	4770      	bx	lr
    2cc0:	200000f8 	.word	0x200000f8

00002cc4 <_tc_get_pwm>:
}
    2cc4:	2000      	movs	r0, #0
    2cc6:	4770      	bx	lr

00002cc8 <TC0_Handler>:
{
    2cc8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2cca:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <TC0_Handler+0xc>)
    2ccc:	6818      	ldr	r0, [r3, #0]
    2cce:	4b02      	ldr	r3, [pc, #8]	; (2cd8 <TC0_Handler+0x10>)
    2cd0:	4798      	blx	r3
    2cd2:	bd08      	pop	{r3, pc}
    2cd4:	20000a58 	.word	0x20000a58
    2cd8:	00002899 	.word	0x00002899

00002cdc <TC1_Handler>:
{
    2cdc:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    2cde:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <TC1_Handler+0xc>)
    2ce0:	6858      	ldr	r0, [r3, #4]
    2ce2:	4b02      	ldr	r3, [pc, #8]	; (2cec <TC1_Handler+0x10>)
    2ce4:	4798      	blx	r3
    2ce6:	bd08      	pop	{r3, pc}
    2ce8:	20000a58 	.word	0x20000a58
    2cec:	00002899 	.word	0x00002899

00002cf0 <TC2_Handler>:
{
    2cf0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    2cf2:	4b02      	ldr	r3, [pc, #8]	; (2cfc <TC2_Handler+0xc>)
    2cf4:	6898      	ldr	r0, [r3, #8]
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <TC2_Handler+0x10>)
    2cf8:	4798      	blx	r3
    2cfa:	bd08      	pop	{r3, pc}
    2cfc:	20000a58 	.word	0x20000a58
    2d00:	00002899 	.word	0x00002899

00002d04 <TC3_Handler>:
{
    2d04:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    2d06:	4b02      	ldr	r3, [pc, #8]	; (2d10 <TC3_Handler+0xc>)
    2d08:	68d8      	ldr	r0, [r3, #12]
    2d0a:	4b02      	ldr	r3, [pc, #8]	; (2d14 <TC3_Handler+0x10>)
    2d0c:	4798      	blx	r3
    2d0e:	bd08      	pop	{r3, pc}
    2d10:	20000a58 	.word	0x20000a58
    2d14:	00002881 	.word	0x00002881

00002d18 <TC4_Handler>:
{
    2d18:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    2d1a:	4b02      	ldr	r3, [pc, #8]	; (2d24 <TC4_Handler+0xc>)
    2d1c:	6918      	ldr	r0, [r3, #16]
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <TC4_Handler+0x10>)
    2d20:	4798      	blx	r3
    2d22:	bd08      	pop	{r3, pc}
    2d24:	20000a58 	.word	0x20000a58
    2d28:	00002881 	.word	0x00002881

00002d2c <TC5_Handler>:
{
    2d2c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    2d2e:	4b02      	ldr	r3, [pc, #8]	; (2d38 <TC5_Handler+0xc>)
    2d30:	6958      	ldr	r0, [r3, #20]
    2d32:	4b02      	ldr	r3, [pc, #8]	; (2d3c <TC5_Handler+0x10>)
    2d34:	4798      	blx	r3
    2d36:	bd08      	pop	{r3, pc}
    2d38:	20000a58 	.word	0x20000a58
    2d3c:	00002881 	.word	0x00002881

00002d40 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2d40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2d42:	4604      	mov	r4, r0
    2d44:	b330      	cbz	r0, 2d94 <_wdt_init+0x54>
    2d46:	6800      	ldr	r0, [r0, #0]
    2d48:	3000      	adds	r0, #0
    2d4a:	bf18      	it	ne
    2d4c:	2001      	movne	r0, #1
    2d4e:	225a      	movs	r2, #90	; 0x5a
    2d50:	4914      	ldr	r1, [pc, #80]	; (2da4 <_wdt_init+0x64>)
    2d52:	4b15      	ldr	r3, [pc, #84]	; (2da8 <_wdt_init+0x68>)
    2d54:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    2d56:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2d58:	689a      	ldr	r2, [r3, #8]
    2d5a:	f012 0f0e 	tst.w	r2, #14
    2d5e:	d1fb      	bne.n	2d58 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	09d2      	lsrs	r2, r2, #7
    2d64:	d118      	bne.n	2d98 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2d66:	689a      	ldr	r2, [r3, #8]
    2d68:	f012 0f0e 	tst.w	r2, #14
    2d6c:	d1fb      	bne.n	2d66 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2d6e:	781a      	ldrb	r2, [r3, #0]
    2d70:	f012 0f02 	tst.w	r2, #2
    2d74:	d113      	bne.n	2d9e <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2d76:	689a      	ldr	r2, [r3, #8]
    2d78:	f012 0f0e 	tst.w	r2, #14
    2d7c:	d1fb      	bne.n	2d76 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    2d7e:	781a      	ldrb	r2, [r3, #0]
    2d80:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2d84:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    2d86:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2d88:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2d8e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2d90:	2000      	movs	r0, #0
    2d92:	bd10      	pop	{r4, pc}
    2d94:	2000      	movs	r0, #0
    2d96:	e7da      	b.n	2d4e <_wdt_init+0xe>
		return ERR_DENIED;
    2d98:	f06f 0010 	mvn.w	r0, #16
    2d9c:	bd10      	pop	{r4, pc}
    2d9e:	f06f 0010 	mvn.w	r0, #16
}
    2da2:	bd10      	pop	{r4, pc}
    2da4:	00004bbc 	.word	0x00004bbc
    2da8:	000018f9 	.word	0x000018f9

00002dac <main>:

/* Mile Stone 1 */
/* Started working in Dev Branch */

int main(void)
{
    2dac:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2dae:	4b07      	ldr	r3, [pc, #28]	; (2dcc <main+0x20>)
    2db0:	4798      	blx	r3
	
	/* Reset the modem */
	//performModemReset();

	/* Initialize the HL7618RD modem power signals */
	modemPowerInit();
    2db2:	4b07      	ldr	r3, [pc, #28]	; (2dd0 <main+0x24>)
    2db4:	4798      	blx	r3
	
	mdmParser_SetLastCmdProcessed(true);
    2db6:	2001      	movs	r0, #1
    2db8:	4b06      	ldr	r3, [pc, #24]	; (2dd4 <main+0x28>)
    2dba:	4798      	blx	r3

	mdmParam_InitiateConnection();
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <main+0x2c>)
    2dbe:	4798      	blx	r3

	DEBUG_PRINT("Successfully Completed the connection initialization. HTTP Connection is established..\r\n\n");
    2dc0:	4806      	ldr	r0, [pc, #24]	; (2ddc <main+0x30>)
    2dc2:	4b07      	ldr	r3, [pc, #28]	; (2de0 <main+0x34>)
    2dc4:	4798      	blx	r3

	while (1)
	{
		sendPacketToServer();
    2dc6:	4c07      	ldr	r4, [pc, #28]	; (2de4 <main+0x38>)
    2dc8:	47a0      	blx	r4
    2dca:	e7fd      	b.n	2dc8 <main+0x1c>
    2dcc:	00000d71 	.word	0x00000d71
    2dd0:	00000945 	.word	0x00000945
    2dd4:	00000469 	.word	0x00000469
    2dd8:	000007c1 	.word	0x000007c1
    2ddc:	00004bd4 	.word	0x00004bd4
    2de0:	00000ccd 	.word	0x00000ccd
    2de4:	000008ed 	.word	0x000008ed

00002de8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2de8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    2dea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2dec:	689a      	ldr	r2, [r3, #8]
    2dee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2df0:	689a      	ldr	r2, [r3, #8]
    2df2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2df4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2df6:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2df8:	6803      	ldr	r3, [r0, #0]
    2dfa:	3301      	adds	r3, #1
    2dfc:	6003      	str	r3, [r0, #0]
    2dfe:	4770      	bx	lr

00002e00 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    2e00:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e02:	6842      	ldr	r2, [r0, #4]
    2e04:	6881      	ldr	r1, [r0, #8]
    2e06:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2e08:	6882      	ldr	r2, [r0, #8]
    2e0a:	6841      	ldr	r1, [r0, #4]
    2e0c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    2e0e:	685a      	ldr	r2, [r3, #4]
    2e10:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2e12:	bf04      	itt	eq
    2e14:	6882      	ldreq	r2, [r0, #8]
    2e16:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2e18:	2200      	movs	r2, #0
    2e1a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    2e1c:	681a      	ldr	r2, [r3, #0]
    2e1e:	3a01      	subs	r2, #1
    2e20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2e22:	6818      	ldr	r0, [r3, #0]
}
    2e24:	4770      	bx	lr
	...

00002e30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2e30:	4b07      	ldr	r3, [pc, #28]	; (2e50 <pxCurrentTCBConst2>)
    2e32:	6819      	ldr	r1, [r3, #0]
    2e34:	6808      	ldr	r0, [r1, #0]
    2e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e3a:	f380 8809 	msr	PSP, r0
    2e3e:	f3bf 8f6f 	isb	sy
    2e42:	f04f 0000 	mov.w	r0, #0
    2e46:	f380 8811 	msr	BASEPRI, r0
    2e4a:	4770      	bx	lr
    2e4c:	f3af 8000 	nop.w

00002e50 <pxCurrentTCBConst2>:
    2e50:	20000b08 	.word	0x20000b08
	...

00002e60 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    2e60:	f3ef 8009 	mrs	r0, PSP
    2e64:	f3bf 8f6f 	isb	sy
    2e68:	4b15      	ldr	r3, [pc, #84]	; (2ec0 <pxCurrentTCBConst>)
    2e6a:	681a      	ldr	r2, [r3, #0]
    2e6c:	f01e 0f10 	tst.w	lr, #16
    2e70:	bf08      	it	eq
    2e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    2e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e7a:	6010      	str	r0, [r2, #0]
    2e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
    2e80:	f04f 0080 	mov.w	r0, #128	; 0x80
    2e84:	f380 8811 	msr	BASEPRI, r0
    2e88:	f3bf 8f4f 	dsb	sy
    2e8c:	f3bf 8f6f 	isb	sy
    2e90:	f000 f8da 	bl	3048 <vTaskSwitchContext>
    2e94:	f04f 0000 	mov.w	r0, #0
    2e98:	f380 8811 	msr	BASEPRI, r0
    2e9c:	bc09      	pop	{r0, r3}
    2e9e:	6819      	ldr	r1, [r3, #0]
    2ea0:	6808      	ldr	r0, [r1, #0]
    2ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ea6:	f01e 0f10 	tst.w	lr, #16
    2eaa:	bf08      	it	eq
    2eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2eb0:	f380 8809 	msr	PSP, r0
    2eb4:	f3bf 8f6f 	isb	sy
    2eb8:	4770      	bx	lr
    2eba:	bf00      	nop
    2ebc:	f3af 8000 	nop.w

00002ec0 <pxCurrentTCBConst>:
    2ec0:	20000b08 	.word	0x20000b08

00002ec4 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    2ec4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
    2eca:	f383 8811 	msr	BASEPRI, r3
    2ece:	f3bf 8f6f 	isb	sy
    2ed2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    2ed6:	4b05      	ldr	r3, [pc, #20]	; (2eec <SysTick_Handler+0x28>)
    2ed8:	4798      	blx	r3
    2eda:	b118      	cbz	r0, 2ee4 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    2edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2ee0:	4b03      	ldr	r3, [pc, #12]	; (2ef0 <SysTick_Handler+0x2c>)
    2ee2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2ee4:	2300      	movs	r3, #0
    2ee6:	f383 8811 	msr	BASEPRI, r3
    2eea:	bd08      	pop	{r3, pc}
    2eec:	00002f21 	.word	0x00002f21
    2ef0:	e000ed04 	.word	0xe000ed04

00002ef4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2ef4:	4b09      	ldr	r3, [pc, #36]	; (2f1c <prvResetNextTaskUnblockTime+0x28>)
    2ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	b143      	cbz	r3, 2f10 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2efe:	4b07      	ldr	r3, [pc, #28]	; (2f1c <prvResetNextTaskUnblockTime+0x28>)
    2f00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2f04:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2f06:	68d2      	ldr	r2, [r2, #12]
    2f08:	6852      	ldr	r2, [r2, #4]
    2f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2f0e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2f10:	f04f 32ff 	mov.w	r2, #4294967295
    2f14:	4b01      	ldr	r3, [pc, #4]	; (2f1c <prvResetNextTaskUnblockTime+0x28>)
    2f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2f1a:	4770      	bx	lr
    2f1c:	20000a70 	.word	0x20000a70

00002f20 <xTaskIncrementTick>:
{
    2f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2f24:	4b44      	ldr	r3, [pc, #272]	; (3038 <xTaskIncrementTick+0x118>)
    2f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d173      	bne.n	3016 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    2f2e:	4b42      	ldr	r3, [pc, #264]	; (3038 <xTaskIncrementTick+0x118>)
    2f30:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    2f34:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    2f36:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    2f3a:	b9e6      	cbnz	r6, 2f76 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    2f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2f40:	681b      	ldr	r3, [r3, #0]
    2f42:	b143      	cbz	r3, 2f56 <xTaskIncrementTick+0x36>
	__asm volatile("	mov %0, %1												\n"
    2f44:	f04f 0380 	mov.w	r3, #128	; 0x80
    2f48:	f383 8811 	msr	BASEPRI, r3
    2f4c:	f3bf 8f6f 	isb	sy
    2f50:	f3bf 8f4f 	dsb	sy
    2f54:	e7fe      	b.n	2f54 <xTaskIncrementTick+0x34>
    2f56:	4b38      	ldr	r3, [pc, #224]	; (3038 <xTaskIncrementTick+0x118>)
    2f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2f5c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    2f60:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    2f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    2f68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    2f6c:	3201      	adds	r2, #1
    2f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2f72:	4b32      	ldr	r3, [pc, #200]	; (303c <xTaskIncrementTick+0x11c>)
    2f74:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2f76:	4b30      	ldr	r3, [pc, #192]	; (3038 <xTaskIncrementTick+0x118>)
    2f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    2f7c:	429e      	cmp	r6, r3
    2f7e:	d20d      	bcs.n	2f9c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    2f80:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    2f82:	4b2d      	ldr	r3, [pc, #180]	; (3038 <xTaskIncrementTick+0x118>)
    2f84:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2f8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2f8e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    2f94:	2b02      	cmp	r3, #2
    2f96:	bf28      	it	cs
    2f98:	2401      	movcs	r4, #1
    2f9a:	e043      	b.n	3024 <xTaskIncrementTick+0x104>
    2f9c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2f9e:	4d26      	ldr	r5, [pc, #152]	; (3038 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2fa0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3044 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    2fa4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    2fa8:	e021      	b.n	2fee <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2faa:	f04f 32ff 	mov.w	r2, #4294967295
    2fae:	4b22      	ldr	r3, [pc, #136]	; (3038 <xTaskIncrementTick+0x118>)
    2fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    2fb4:	e7e5      	b.n	2f82 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    2fb6:	4a20      	ldr	r2, [pc, #128]	; (3038 <xTaskIncrementTick+0x118>)
    2fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    2fbc:	e7e1      	b.n	2f82 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    2fbe:	f107 0018 	add.w	r0, r7, #24
    2fc2:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    2fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2fc6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2fca:	4298      	cmp	r0, r3
    2fcc:	bf88      	it	hi
    2fce:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    2fd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2fd6:	4649      	mov	r1, r9
    2fd8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    2fdc:	4b18      	ldr	r3, [pc, #96]	; (3040 <xTaskIncrementTick+0x120>)
    2fde:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2fe0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    2fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    2fe8:	429a      	cmp	r2, r3
    2fea:	bf28      	it	cs
    2fec:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2fee:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d0d8      	beq.n	2faa <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2ff8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2ffc:	68db      	ldr	r3, [r3, #12]
    2ffe:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    3000:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    3002:	429e      	cmp	r6, r3
    3004:	d3d7      	bcc.n	2fb6 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    3006:	f107 0904 	add.w	r9, r7, #4
    300a:	4648      	mov	r0, r9
    300c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3010:	2b00      	cmp	r3, #0
    3012:	d1d4      	bne.n	2fbe <xTaskIncrementTick+0x9e>
    3014:	e7d6      	b.n	2fc4 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    3016:	4a08      	ldr	r2, [pc, #32]	; (3038 <xTaskIncrementTick+0x118>)
    3018:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    301c:	3301      	adds	r3, #1
    301e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    3022:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    3024:	4b04      	ldr	r3, [pc, #16]	; (3038 <xTaskIncrementTick+0x118>)
    3026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    302a:	2b00      	cmp	r3, #0
}
    302c:	bf0c      	ite	eq
    302e:	4620      	moveq	r0, r4
    3030:	2001      	movne	r0, #1
    3032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3036:	bf00      	nop
    3038:	20000a70 	.word	0x20000a70
    303c:	00002ef5 	.word	0x00002ef5
    3040:	00002de9 	.word	0x00002de9
    3044:	00002e01 	.word	0x00002e01

00003048 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    3048:	4b25      	ldr	r3, [pc, #148]	; (30e0 <vTaskSwitchContext+0x98>)
    304a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    304e:	b9fb      	cbnz	r3, 3090 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    3050:	4a23      	ldr	r2, [pc, #140]	; (30e0 <vTaskSwitchContext+0x98>)
    3052:	2300      	movs	r3, #0
    3054:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3058:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    305c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    3060:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3064:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3066:	b9c2      	cbnz	r2, 309a <vTaskSwitchContext+0x52>
    3068:	b14b      	cbz	r3, 307e <vTaskSwitchContext+0x36>
    306a:	491d      	ldr	r1, [pc, #116]	; (30e0 <vTaskSwitchContext+0x98>)
    306c:	3b01      	subs	r3, #1
    306e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3072:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3076:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3078:	b97a      	cbnz	r2, 309a <vTaskSwitchContext+0x52>
    307a:	2b00      	cmp	r3, #0
    307c:	d1f6      	bne.n	306c <vTaskSwitchContext+0x24>
    307e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3082:	f383 8811 	msr	BASEPRI, r3
    3086:	f3bf 8f6f 	isb	sy
    308a:	f3bf 8f4f 	dsb	sy
    308e:	e7fe      	b.n	308e <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    3090:	2201      	movs	r2, #1
    3092:	4b13      	ldr	r3, [pc, #76]	; (30e0 <vTaskSwitchContext+0x98>)
    3094:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    3098:	4770      	bx	lr
{
    309a:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    309c:	4a10      	ldr	r2, [pc, #64]	; (30e0 <vTaskSwitchContext+0x98>)
    309e:	0099      	lsls	r1, r3, #2
    30a0:	18c8      	adds	r0, r1, r3
    30a2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    30a6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    30a8:	6864      	ldr	r4, [r4, #4]
    30aa:	62c4      	str	r4, [r0, #44]	; 0x2c
    30ac:	4419      	add	r1, r3
    30ae:	4602      	mov	r2, r0
    30b0:	3230      	adds	r2, #48	; 0x30
    30b2:	4294      	cmp	r4, r2
    30b4:	d00d      	beq.n	30d2 <vTaskSwitchContext+0x8a>
    30b6:	4a0a      	ldr	r2, [pc, #40]	; (30e0 <vTaskSwitchContext+0x98>)
    30b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    30bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    30c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    30c2:	68c9      	ldr	r1, [r1, #12]
    30c4:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    30c8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    30cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    30d0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    30d2:	6860      	ldr	r0, [r4, #4]
    30d4:	4a02      	ldr	r2, [pc, #8]	; (30e0 <vTaskSwitchContext+0x98>)
    30d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    30da:	62d0      	str	r0, [r2, #44]	; 0x2c
    30dc:	e7eb      	b.n	30b6 <vTaskSwitchContext+0x6e>
    30de:	bf00      	nop
    30e0:	20000a70 	.word	0x20000a70

000030e4 <__libc_init_array>:
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	4e0d      	ldr	r6, [pc, #52]	; (311c <__libc_init_array+0x38>)
    30e8:	4c0d      	ldr	r4, [pc, #52]	; (3120 <__libc_init_array+0x3c>)
    30ea:	1ba4      	subs	r4, r4, r6
    30ec:	10a4      	asrs	r4, r4, #2
    30ee:	2500      	movs	r5, #0
    30f0:	42a5      	cmp	r5, r4
    30f2:	d109      	bne.n	3108 <__libc_init_array+0x24>
    30f4:	4e0b      	ldr	r6, [pc, #44]	; (3124 <__libc_init_array+0x40>)
    30f6:	4c0c      	ldr	r4, [pc, #48]	; (3128 <__libc_init_array+0x44>)
    30f8:	f001 fde4 	bl	4cc4 <_init>
    30fc:	1ba4      	subs	r4, r4, r6
    30fe:	10a4      	asrs	r4, r4, #2
    3100:	2500      	movs	r5, #0
    3102:	42a5      	cmp	r5, r4
    3104:	d105      	bne.n	3112 <__libc_init_array+0x2e>
    3106:	bd70      	pop	{r4, r5, r6, pc}
    3108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    310c:	4798      	blx	r3
    310e:	3501      	adds	r5, #1
    3110:	e7ee      	b.n	30f0 <__libc_init_array+0xc>
    3112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3116:	4798      	blx	r3
    3118:	3501      	adds	r5, #1
    311a:	e7f2      	b.n	3102 <__libc_init_array+0x1e>
    311c:	00004cd0 	.word	0x00004cd0
    3120:	00004cd0 	.word	0x00004cd0
    3124:	00004cd0 	.word	0x00004cd0
    3128:	00004cd4 	.word	0x00004cd4

0000312c <memcmp>:
    312c:	b510      	push	{r4, lr}
    312e:	3901      	subs	r1, #1
    3130:	4402      	add	r2, r0
    3132:	4290      	cmp	r0, r2
    3134:	d101      	bne.n	313a <memcmp+0xe>
    3136:	2000      	movs	r0, #0
    3138:	bd10      	pop	{r4, pc}
    313a:	f810 3b01 	ldrb.w	r3, [r0], #1
    313e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3142:	42a3      	cmp	r3, r4
    3144:	d0f5      	beq.n	3132 <memcmp+0x6>
    3146:	1b18      	subs	r0, r3, r4
    3148:	bd10      	pop	{r4, pc}

0000314a <memcpy>:
    314a:	b510      	push	{r4, lr}
    314c:	1e43      	subs	r3, r0, #1
    314e:	440a      	add	r2, r1
    3150:	4291      	cmp	r1, r2
    3152:	d100      	bne.n	3156 <memcpy+0xc>
    3154:	bd10      	pop	{r4, pc}
    3156:	f811 4b01 	ldrb.w	r4, [r1], #1
    315a:	f803 4f01 	strb.w	r4, [r3, #1]!
    315e:	e7f7      	b.n	3150 <memcpy+0x6>

00003160 <memmove>:
    3160:	4288      	cmp	r0, r1
    3162:	b510      	push	{r4, lr}
    3164:	eb01 0302 	add.w	r3, r1, r2
    3168:	d803      	bhi.n	3172 <memmove+0x12>
    316a:	1e42      	subs	r2, r0, #1
    316c:	4299      	cmp	r1, r3
    316e:	d10c      	bne.n	318a <memmove+0x2a>
    3170:	bd10      	pop	{r4, pc}
    3172:	4298      	cmp	r0, r3
    3174:	d2f9      	bcs.n	316a <memmove+0xa>
    3176:	1881      	adds	r1, r0, r2
    3178:	1ad2      	subs	r2, r2, r3
    317a:	42d3      	cmn	r3, r2
    317c:	d100      	bne.n	3180 <memmove+0x20>
    317e:	bd10      	pop	{r4, pc}
    3180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3184:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3188:	e7f7      	b.n	317a <memmove+0x1a>
    318a:	f811 4b01 	ldrb.w	r4, [r1], #1
    318e:	f802 4f01 	strb.w	r4, [r2, #1]!
    3192:	e7eb      	b.n	316c <memmove+0xc>

00003194 <memset>:
    3194:	4402      	add	r2, r0
    3196:	4603      	mov	r3, r0
    3198:	4293      	cmp	r3, r2
    319a:	d100      	bne.n	319e <memset+0xa>
    319c:	4770      	bx	lr
    319e:	f803 1b01 	strb.w	r1, [r3], #1
    31a2:	e7f9      	b.n	3198 <memset+0x4>

000031a4 <_free_r>:
    31a4:	b538      	push	{r3, r4, r5, lr}
    31a6:	4605      	mov	r5, r0
    31a8:	2900      	cmp	r1, #0
    31aa:	d045      	beq.n	3238 <_free_r+0x94>
    31ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
    31b0:	1f0c      	subs	r4, r1, #4
    31b2:	2b00      	cmp	r3, #0
    31b4:	bfb8      	it	lt
    31b6:	18e4      	addlt	r4, r4, r3
    31b8:	f000 f90b 	bl	33d2 <__malloc_lock>
    31bc:	4a1f      	ldr	r2, [pc, #124]	; (323c <_free_r+0x98>)
    31be:	6813      	ldr	r3, [r2, #0]
    31c0:	4610      	mov	r0, r2
    31c2:	b933      	cbnz	r3, 31d2 <_free_r+0x2e>
    31c4:	6063      	str	r3, [r4, #4]
    31c6:	6014      	str	r4, [r2, #0]
    31c8:	4628      	mov	r0, r5
    31ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    31ce:	f000 b901 	b.w	33d4 <__malloc_unlock>
    31d2:	42a3      	cmp	r3, r4
    31d4:	d90c      	bls.n	31f0 <_free_r+0x4c>
    31d6:	6821      	ldr	r1, [r4, #0]
    31d8:	1862      	adds	r2, r4, r1
    31da:	4293      	cmp	r3, r2
    31dc:	bf04      	itt	eq
    31de:	681a      	ldreq	r2, [r3, #0]
    31e0:	685b      	ldreq	r3, [r3, #4]
    31e2:	6063      	str	r3, [r4, #4]
    31e4:	bf04      	itt	eq
    31e6:	1852      	addeq	r2, r2, r1
    31e8:	6022      	streq	r2, [r4, #0]
    31ea:	6004      	str	r4, [r0, #0]
    31ec:	e7ec      	b.n	31c8 <_free_r+0x24>
    31ee:	4613      	mov	r3, r2
    31f0:	685a      	ldr	r2, [r3, #4]
    31f2:	b10a      	cbz	r2, 31f8 <_free_r+0x54>
    31f4:	42a2      	cmp	r2, r4
    31f6:	d9fa      	bls.n	31ee <_free_r+0x4a>
    31f8:	6819      	ldr	r1, [r3, #0]
    31fa:	1858      	adds	r0, r3, r1
    31fc:	42a0      	cmp	r0, r4
    31fe:	d10b      	bne.n	3218 <_free_r+0x74>
    3200:	6820      	ldr	r0, [r4, #0]
    3202:	4401      	add	r1, r0
    3204:	1858      	adds	r0, r3, r1
    3206:	4282      	cmp	r2, r0
    3208:	6019      	str	r1, [r3, #0]
    320a:	d1dd      	bne.n	31c8 <_free_r+0x24>
    320c:	6810      	ldr	r0, [r2, #0]
    320e:	6852      	ldr	r2, [r2, #4]
    3210:	605a      	str	r2, [r3, #4]
    3212:	4401      	add	r1, r0
    3214:	6019      	str	r1, [r3, #0]
    3216:	e7d7      	b.n	31c8 <_free_r+0x24>
    3218:	d902      	bls.n	3220 <_free_r+0x7c>
    321a:	230c      	movs	r3, #12
    321c:	602b      	str	r3, [r5, #0]
    321e:	e7d3      	b.n	31c8 <_free_r+0x24>
    3220:	6820      	ldr	r0, [r4, #0]
    3222:	1821      	adds	r1, r4, r0
    3224:	428a      	cmp	r2, r1
    3226:	bf04      	itt	eq
    3228:	6811      	ldreq	r1, [r2, #0]
    322a:	6852      	ldreq	r2, [r2, #4]
    322c:	6062      	str	r2, [r4, #4]
    322e:	bf04      	itt	eq
    3230:	1809      	addeq	r1, r1, r0
    3232:	6021      	streq	r1, [r4, #0]
    3234:	605c      	str	r4, [r3, #4]
    3236:	e7c7      	b.n	31c8 <_free_r+0x24>
    3238:	bd38      	pop	{r3, r4, r5, pc}
    323a:	bf00      	nop
    323c:	20000b5c 	.word	0x20000b5c

00003240 <_malloc_r>:
    3240:	b570      	push	{r4, r5, r6, lr}
    3242:	1ccd      	adds	r5, r1, #3
    3244:	f025 0503 	bic.w	r5, r5, #3
    3248:	3508      	adds	r5, #8
    324a:	2d0c      	cmp	r5, #12
    324c:	bf38      	it	cc
    324e:	250c      	movcc	r5, #12
    3250:	2d00      	cmp	r5, #0
    3252:	4606      	mov	r6, r0
    3254:	db01      	blt.n	325a <_malloc_r+0x1a>
    3256:	42a9      	cmp	r1, r5
    3258:	d903      	bls.n	3262 <_malloc_r+0x22>
    325a:	230c      	movs	r3, #12
    325c:	6033      	str	r3, [r6, #0]
    325e:	2000      	movs	r0, #0
    3260:	bd70      	pop	{r4, r5, r6, pc}
    3262:	f000 f8b6 	bl	33d2 <__malloc_lock>
    3266:	4a23      	ldr	r2, [pc, #140]	; (32f4 <_malloc_r+0xb4>)
    3268:	6814      	ldr	r4, [r2, #0]
    326a:	4621      	mov	r1, r4
    326c:	b991      	cbnz	r1, 3294 <_malloc_r+0x54>
    326e:	4c22      	ldr	r4, [pc, #136]	; (32f8 <_malloc_r+0xb8>)
    3270:	6823      	ldr	r3, [r4, #0]
    3272:	b91b      	cbnz	r3, 327c <_malloc_r+0x3c>
    3274:	4630      	mov	r0, r6
    3276:	f000 f841 	bl	32fc <_sbrk_r>
    327a:	6020      	str	r0, [r4, #0]
    327c:	4629      	mov	r1, r5
    327e:	4630      	mov	r0, r6
    3280:	f000 f83c 	bl	32fc <_sbrk_r>
    3284:	1c43      	adds	r3, r0, #1
    3286:	d126      	bne.n	32d6 <_malloc_r+0x96>
    3288:	230c      	movs	r3, #12
    328a:	6033      	str	r3, [r6, #0]
    328c:	4630      	mov	r0, r6
    328e:	f000 f8a1 	bl	33d4 <__malloc_unlock>
    3292:	e7e4      	b.n	325e <_malloc_r+0x1e>
    3294:	680b      	ldr	r3, [r1, #0]
    3296:	1b5b      	subs	r3, r3, r5
    3298:	d41a      	bmi.n	32d0 <_malloc_r+0x90>
    329a:	2b0b      	cmp	r3, #11
    329c:	d90f      	bls.n	32be <_malloc_r+0x7e>
    329e:	600b      	str	r3, [r1, #0]
    32a0:	50cd      	str	r5, [r1, r3]
    32a2:	18cc      	adds	r4, r1, r3
    32a4:	4630      	mov	r0, r6
    32a6:	f000 f895 	bl	33d4 <__malloc_unlock>
    32aa:	f104 000b 	add.w	r0, r4, #11
    32ae:	1d23      	adds	r3, r4, #4
    32b0:	f020 0007 	bic.w	r0, r0, #7
    32b4:	1ac3      	subs	r3, r0, r3
    32b6:	d01b      	beq.n	32f0 <_malloc_r+0xb0>
    32b8:	425a      	negs	r2, r3
    32ba:	50e2      	str	r2, [r4, r3]
    32bc:	bd70      	pop	{r4, r5, r6, pc}
    32be:	428c      	cmp	r4, r1
    32c0:	bf0d      	iteet	eq
    32c2:	6863      	ldreq	r3, [r4, #4]
    32c4:	684b      	ldrne	r3, [r1, #4]
    32c6:	6063      	strne	r3, [r4, #4]
    32c8:	6013      	streq	r3, [r2, #0]
    32ca:	bf18      	it	ne
    32cc:	460c      	movne	r4, r1
    32ce:	e7e9      	b.n	32a4 <_malloc_r+0x64>
    32d0:	460c      	mov	r4, r1
    32d2:	6849      	ldr	r1, [r1, #4]
    32d4:	e7ca      	b.n	326c <_malloc_r+0x2c>
    32d6:	1cc4      	adds	r4, r0, #3
    32d8:	f024 0403 	bic.w	r4, r4, #3
    32dc:	42a0      	cmp	r0, r4
    32de:	d005      	beq.n	32ec <_malloc_r+0xac>
    32e0:	1a21      	subs	r1, r4, r0
    32e2:	4630      	mov	r0, r6
    32e4:	f000 f80a 	bl	32fc <_sbrk_r>
    32e8:	3001      	adds	r0, #1
    32ea:	d0cd      	beq.n	3288 <_malloc_r+0x48>
    32ec:	6025      	str	r5, [r4, #0]
    32ee:	e7d9      	b.n	32a4 <_malloc_r+0x64>
    32f0:	bd70      	pop	{r4, r5, r6, pc}
    32f2:	bf00      	nop
    32f4:	20000b5c 	.word	0x20000b5c
    32f8:	20000b60 	.word	0x20000b60

000032fc <_sbrk_r>:
    32fc:	b538      	push	{r3, r4, r5, lr}
    32fe:	4c06      	ldr	r4, [pc, #24]	; (3318 <_sbrk_r+0x1c>)
    3300:	2300      	movs	r3, #0
    3302:	4605      	mov	r5, r0
    3304:	4608      	mov	r0, r1
    3306:	6023      	str	r3, [r4, #0]
    3308:	f7fe fbb8 	bl	1a7c <_sbrk>
    330c:	1c43      	adds	r3, r0, #1
    330e:	d102      	bne.n	3316 <_sbrk_r+0x1a>
    3310:	6823      	ldr	r3, [r4, #0]
    3312:	b103      	cbz	r3, 3316 <_sbrk_r+0x1a>
    3314:	602b      	str	r3, [r5, #0]
    3316:	bd38      	pop	{r3, r4, r5, pc}
    3318:	20001580 	.word	0x20001580

0000331c <siprintf>:
    331c:	b40e      	push	{r1, r2, r3}
    331e:	b500      	push	{lr}
    3320:	b09c      	sub	sp, #112	; 0x70
    3322:	f44f 7102 	mov.w	r1, #520	; 0x208
    3326:	ab1d      	add	r3, sp, #116	; 0x74
    3328:	f8ad 1014 	strh.w	r1, [sp, #20]
    332c:	9002      	str	r0, [sp, #8]
    332e:	9006      	str	r0, [sp, #24]
    3330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3334:	480a      	ldr	r0, [pc, #40]	; (3360 <siprintf+0x44>)
    3336:	9104      	str	r1, [sp, #16]
    3338:	9107      	str	r1, [sp, #28]
    333a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    333e:	f853 2b04 	ldr.w	r2, [r3], #4
    3342:	f8ad 1016 	strh.w	r1, [sp, #22]
    3346:	6800      	ldr	r0, [r0, #0]
    3348:	9301      	str	r3, [sp, #4]
    334a:	a902      	add	r1, sp, #8
    334c:	f000 f89e 	bl	348c <_svfiprintf_r>
    3350:	9b02      	ldr	r3, [sp, #8]
    3352:	2200      	movs	r2, #0
    3354:	701a      	strb	r2, [r3, #0]
    3356:	b01c      	add	sp, #112	; 0x70
    3358:	f85d eb04 	ldr.w	lr, [sp], #4
    335c:	b003      	add	sp, #12
    335e:	4770      	bx	lr
    3360:	20000118 	.word	0x20000118

00003364 <strcpy>:
    3364:	4603      	mov	r3, r0
    3366:	f811 2b01 	ldrb.w	r2, [r1], #1
    336a:	f803 2b01 	strb.w	r2, [r3], #1
    336e:	2a00      	cmp	r2, #0
    3370:	d1f9      	bne.n	3366 <strcpy+0x2>
    3372:	4770      	bx	lr

00003374 <strlen>:
    3374:	4603      	mov	r3, r0
    3376:	f813 2b01 	ldrb.w	r2, [r3], #1
    337a:	2a00      	cmp	r2, #0
    337c:	d1fb      	bne.n	3376 <strlen+0x2>
    337e:	1a18      	subs	r0, r3, r0
    3380:	3801      	subs	r0, #1
    3382:	4770      	bx	lr

00003384 <strncmp>:
    3384:	b510      	push	{r4, lr}
    3386:	b16a      	cbz	r2, 33a4 <strncmp+0x20>
    3388:	3901      	subs	r1, #1
    338a:	1884      	adds	r4, r0, r2
    338c:	f810 3b01 	ldrb.w	r3, [r0], #1
    3390:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3394:	4293      	cmp	r3, r2
    3396:	d103      	bne.n	33a0 <strncmp+0x1c>
    3398:	42a0      	cmp	r0, r4
    339a:	d001      	beq.n	33a0 <strncmp+0x1c>
    339c:	2b00      	cmp	r3, #0
    339e:	d1f5      	bne.n	338c <strncmp+0x8>
    33a0:	1a98      	subs	r0, r3, r2
    33a2:	bd10      	pop	{r4, pc}
    33a4:	4610      	mov	r0, r2
    33a6:	bd10      	pop	{r4, pc}

000033a8 <strncpy>:
    33a8:	b570      	push	{r4, r5, r6, lr}
    33aa:	4604      	mov	r4, r0
    33ac:	b902      	cbnz	r2, 33b0 <strncpy+0x8>
    33ae:	bd70      	pop	{r4, r5, r6, pc}
    33b0:	4623      	mov	r3, r4
    33b2:	f811 5b01 	ldrb.w	r5, [r1], #1
    33b6:	f803 5b01 	strb.w	r5, [r3], #1
    33ba:	1e56      	subs	r6, r2, #1
    33bc:	b91d      	cbnz	r5, 33c6 <strncpy+0x1e>
    33be:	4414      	add	r4, r2
    33c0:	42a3      	cmp	r3, r4
    33c2:	d103      	bne.n	33cc <strncpy+0x24>
    33c4:	bd70      	pop	{r4, r5, r6, pc}
    33c6:	461c      	mov	r4, r3
    33c8:	4632      	mov	r2, r6
    33ca:	e7ef      	b.n	33ac <strncpy+0x4>
    33cc:	f803 5b01 	strb.w	r5, [r3], #1
    33d0:	e7f6      	b.n	33c0 <strncpy+0x18>

000033d2 <__malloc_lock>:
    33d2:	4770      	bx	lr

000033d4 <__malloc_unlock>:
    33d4:	4770      	bx	lr

000033d6 <__ssputs_r>:
    33d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33da:	688e      	ldr	r6, [r1, #8]
    33dc:	429e      	cmp	r6, r3
    33de:	4682      	mov	sl, r0
    33e0:	460c      	mov	r4, r1
    33e2:	4691      	mov	r9, r2
    33e4:	4698      	mov	r8, r3
    33e6:	d835      	bhi.n	3454 <__ssputs_r+0x7e>
    33e8:	898a      	ldrh	r2, [r1, #12]
    33ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
    33ee:	d031      	beq.n	3454 <__ssputs_r+0x7e>
    33f0:	6825      	ldr	r5, [r4, #0]
    33f2:	6909      	ldr	r1, [r1, #16]
    33f4:	1a6f      	subs	r7, r5, r1
    33f6:	6965      	ldr	r5, [r4, #20]
    33f8:	2302      	movs	r3, #2
    33fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    33fe:	fb95 f5f3 	sdiv	r5, r5, r3
    3402:	f108 0301 	add.w	r3, r8, #1
    3406:	443b      	add	r3, r7
    3408:	429d      	cmp	r5, r3
    340a:	bf38      	it	cc
    340c:	461d      	movcc	r5, r3
    340e:	0553      	lsls	r3, r2, #21
    3410:	d531      	bpl.n	3476 <__ssputs_r+0xa0>
    3412:	4629      	mov	r1, r5
    3414:	f7ff ff14 	bl	3240 <_malloc_r>
    3418:	4606      	mov	r6, r0
    341a:	b950      	cbnz	r0, 3432 <__ssputs_r+0x5c>
    341c:	230c      	movs	r3, #12
    341e:	f8ca 3000 	str.w	r3, [sl]
    3422:	89a3      	ldrh	r3, [r4, #12]
    3424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3428:	81a3      	strh	r3, [r4, #12]
    342a:	f04f 30ff 	mov.w	r0, #4294967295
    342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3432:	463a      	mov	r2, r7
    3434:	6921      	ldr	r1, [r4, #16]
    3436:	f7ff fe88 	bl	314a <memcpy>
    343a:	89a3      	ldrh	r3, [r4, #12]
    343c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    3440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3444:	81a3      	strh	r3, [r4, #12]
    3446:	6126      	str	r6, [r4, #16]
    3448:	6165      	str	r5, [r4, #20]
    344a:	443e      	add	r6, r7
    344c:	1bed      	subs	r5, r5, r7
    344e:	6026      	str	r6, [r4, #0]
    3450:	60a5      	str	r5, [r4, #8]
    3452:	4646      	mov	r6, r8
    3454:	4546      	cmp	r6, r8
    3456:	bf28      	it	cs
    3458:	4646      	movcs	r6, r8
    345a:	4632      	mov	r2, r6
    345c:	4649      	mov	r1, r9
    345e:	6820      	ldr	r0, [r4, #0]
    3460:	f7ff fe7e 	bl	3160 <memmove>
    3464:	68a3      	ldr	r3, [r4, #8]
    3466:	1b9b      	subs	r3, r3, r6
    3468:	60a3      	str	r3, [r4, #8]
    346a:	6823      	ldr	r3, [r4, #0]
    346c:	441e      	add	r6, r3
    346e:	6026      	str	r6, [r4, #0]
    3470:	2000      	movs	r0, #0
    3472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3476:	462a      	mov	r2, r5
    3478:	f000 fae2 	bl	3a40 <_realloc_r>
    347c:	4606      	mov	r6, r0
    347e:	2800      	cmp	r0, #0
    3480:	d1e1      	bne.n	3446 <__ssputs_r+0x70>
    3482:	6921      	ldr	r1, [r4, #16]
    3484:	4650      	mov	r0, sl
    3486:	f7ff fe8d 	bl	31a4 <_free_r>
    348a:	e7c7      	b.n	341c <__ssputs_r+0x46>

0000348c <_svfiprintf_r>:
    348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3490:	b09d      	sub	sp, #116	; 0x74
    3492:	4680      	mov	r8, r0
    3494:	9303      	str	r3, [sp, #12]
    3496:	898b      	ldrh	r3, [r1, #12]
    3498:	061c      	lsls	r4, r3, #24
    349a:	460d      	mov	r5, r1
    349c:	4616      	mov	r6, r2
    349e:	d50f      	bpl.n	34c0 <_svfiprintf_r+0x34>
    34a0:	690b      	ldr	r3, [r1, #16]
    34a2:	b96b      	cbnz	r3, 34c0 <_svfiprintf_r+0x34>
    34a4:	2140      	movs	r1, #64	; 0x40
    34a6:	f7ff fecb 	bl	3240 <_malloc_r>
    34aa:	6028      	str	r0, [r5, #0]
    34ac:	6128      	str	r0, [r5, #16]
    34ae:	b928      	cbnz	r0, 34bc <_svfiprintf_r+0x30>
    34b0:	230c      	movs	r3, #12
    34b2:	f8c8 3000 	str.w	r3, [r8]
    34b6:	f04f 30ff 	mov.w	r0, #4294967295
    34ba:	e0c5      	b.n	3648 <_svfiprintf_r+0x1bc>
    34bc:	2340      	movs	r3, #64	; 0x40
    34be:	616b      	str	r3, [r5, #20]
    34c0:	2300      	movs	r3, #0
    34c2:	9309      	str	r3, [sp, #36]	; 0x24
    34c4:	2320      	movs	r3, #32
    34c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    34ca:	2330      	movs	r3, #48	; 0x30
    34cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    34d0:	f04f 0b01 	mov.w	fp, #1
    34d4:	4637      	mov	r7, r6
    34d6:	463c      	mov	r4, r7
    34d8:	f814 3b01 	ldrb.w	r3, [r4], #1
    34dc:	2b00      	cmp	r3, #0
    34de:	d13c      	bne.n	355a <_svfiprintf_r+0xce>
    34e0:	ebb7 0a06 	subs.w	sl, r7, r6
    34e4:	d00b      	beq.n	34fe <_svfiprintf_r+0x72>
    34e6:	4653      	mov	r3, sl
    34e8:	4632      	mov	r2, r6
    34ea:	4629      	mov	r1, r5
    34ec:	4640      	mov	r0, r8
    34ee:	f7ff ff72 	bl	33d6 <__ssputs_r>
    34f2:	3001      	adds	r0, #1
    34f4:	f000 80a3 	beq.w	363e <_svfiprintf_r+0x1b2>
    34f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    34fa:	4453      	add	r3, sl
    34fc:	9309      	str	r3, [sp, #36]	; 0x24
    34fe:	783b      	ldrb	r3, [r7, #0]
    3500:	2b00      	cmp	r3, #0
    3502:	f000 809c 	beq.w	363e <_svfiprintf_r+0x1b2>
    3506:	2300      	movs	r3, #0
    3508:	f04f 32ff 	mov.w	r2, #4294967295
    350c:	9304      	str	r3, [sp, #16]
    350e:	9307      	str	r3, [sp, #28]
    3510:	9205      	str	r2, [sp, #20]
    3512:	9306      	str	r3, [sp, #24]
    3514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3518:	931a      	str	r3, [sp, #104]	; 0x68
    351a:	2205      	movs	r2, #5
    351c:	7821      	ldrb	r1, [r4, #0]
    351e:	4850      	ldr	r0, [pc, #320]	; (3660 <_svfiprintf_r+0x1d4>)
    3520:	f000 fa3e 	bl	39a0 <memchr>
    3524:	1c67      	adds	r7, r4, #1
    3526:	9b04      	ldr	r3, [sp, #16]
    3528:	b9d8      	cbnz	r0, 3562 <_svfiprintf_r+0xd6>
    352a:	06d9      	lsls	r1, r3, #27
    352c:	bf44      	itt	mi
    352e:	2220      	movmi	r2, #32
    3530:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3534:	071a      	lsls	r2, r3, #28
    3536:	bf44      	itt	mi
    3538:	222b      	movmi	r2, #43	; 0x2b
    353a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    353e:	7822      	ldrb	r2, [r4, #0]
    3540:	2a2a      	cmp	r2, #42	; 0x2a
    3542:	d016      	beq.n	3572 <_svfiprintf_r+0xe6>
    3544:	9a07      	ldr	r2, [sp, #28]
    3546:	2100      	movs	r1, #0
    3548:	200a      	movs	r0, #10
    354a:	4627      	mov	r7, r4
    354c:	3401      	adds	r4, #1
    354e:	783b      	ldrb	r3, [r7, #0]
    3550:	3b30      	subs	r3, #48	; 0x30
    3552:	2b09      	cmp	r3, #9
    3554:	d951      	bls.n	35fa <_svfiprintf_r+0x16e>
    3556:	b1c9      	cbz	r1, 358c <_svfiprintf_r+0x100>
    3558:	e011      	b.n	357e <_svfiprintf_r+0xf2>
    355a:	2b25      	cmp	r3, #37	; 0x25
    355c:	d0c0      	beq.n	34e0 <_svfiprintf_r+0x54>
    355e:	4627      	mov	r7, r4
    3560:	e7b9      	b.n	34d6 <_svfiprintf_r+0x4a>
    3562:	4a3f      	ldr	r2, [pc, #252]	; (3660 <_svfiprintf_r+0x1d4>)
    3564:	1a80      	subs	r0, r0, r2
    3566:	fa0b f000 	lsl.w	r0, fp, r0
    356a:	4318      	orrs	r0, r3
    356c:	9004      	str	r0, [sp, #16]
    356e:	463c      	mov	r4, r7
    3570:	e7d3      	b.n	351a <_svfiprintf_r+0x8e>
    3572:	9a03      	ldr	r2, [sp, #12]
    3574:	1d11      	adds	r1, r2, #4
    3576:	6812      	ldr	r2, [r2, #0]
    3578:	9103      	str	r1, [sp, #12]
    357a:	2a00      	cmp	r2, #0
    357c:	db01      	blt.n	3582 <_svfiprintf_r+0xf6>
    357e:	9207      	str	r2, [sp, #28]
    3580:	e004      	b.n	358c <_svfiprintf_r+0x100>
    3582:	4252      	negs	r2, r2
    3584:	f043 0302 	orr.w	r3, r3, #2
    3588:	9207      	str	r2, [sp, #28]
    358a:	9304      	str	r3, [sp, #16]
    358c:	783b      	ldrb	r3, [r7, #0]
    358e:	2b2e      	cmp	r3, #46	; 0x2e
    3590:	d10e      	bne.n	35b0 <_svfiprintf_r+0x124>
    3592:	787b      	ldrb	r3, [r7, #1]
    3594:	2b2a      	cmp	r3, #42	; 0x2a
    3596:	f107 0101 	add.w	r1, r7, #1
    359a:	d132      	bne.n	3602 <_svfiprintf_r+0x176>
    359c:	9b03      	ldr	r3, [sp, #12]
    359e:	1d1a      	adds	r2, r3, #4
    35a0:	681b      	ldr	r3, [r3, #0]
    35a2:	9203      	str	r2, [sp, #12]
    35a4:	2b00      	cmp	r3, #0
    35a6:	bfb8      	it	lt
    35a8:	f04f 33ff 	movlt.w	r3, #4294967295
    35ac:	3702      	adds	r7, #2
    35ae:	9305      	str	r3, [sp, #20]
    35b0:	4c2c      	ldr	r4, [pc, #176]	; (3664 <_svfiprintf_r+0x1d8>)
    35b2:	7839      	ldrb	r1, [r7, #0]
    35b4:	2203      	movs	r2, #3
    35b6:	4620      	mov	r0, r4
    35b8:	f000 f9f2 	bl	39a0 <memchr>
    35bc:	b138      	cbz	r0, 35ce <_svfiprintf_r+0x142>
    35be:	2340      	movs	r3, #64	; 0x40
    35c0:	1b00      	subs	r0, r0, r4
    35c2:	fa03 f000 	lsl.w	r0, r3, r0
    35c6:	9b04      	ldr	r3, [sp, #16]
    35c8:	4303      	orrs	r3, r0
    35ca:	9304      	str	r3, [sp, #16]
    35cc:	3701      	adds	r7, #1
    35ce:	7839      	ldrb	r1, [r7, #0]
    35d0:	4825      	ldr	r0, [pc, #148]	; (3668 <_svfiprintf_r+0x1dc>)
    35d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    35d6:	2206      	movs	r2, #6
    35d8:	1c7e      	adds	r6, r7, #1
    35da:	f000 f9e1 	bl	39a0 <memchr>
    35de:	2800      	cmp	r0, #0
    35e0:	d035      	beq.n	364e <_svfiprintf_r+0x1c2>
    35e2:	4b22      	ldr	r3, [pc, #136]	; (366c <_svfiprintf_r+0x1e0>)
    35e4:	b9fb      	cbnz	r3, 3626 <_svfiprintf_r+0x19a>
    35e6:	9b03      	ldr	r3, [sp, #12]
    35e8:	3307      	adds	r3, #7
    35ea:	f023 0307 	bic.w	r3, r3, #7
    35ee:	3308      	adds	r3, #8
    35f0:	9303      	str	r3, [sp, #12]
    35f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35f4:	444b      	add	r3, r9
    35f6:	9309      	str	r3, [sp, #36]	; 0x24
    35f8:	e76c      	b.n	34d4 <_svfiprintf_r+0x48>
    35fa:	fb00 3202 	mla	r2, r0, r2, r3
    35fe:	2101      	movs	r1, #1
    3600:	e7a3      	b.n	354a <_svfiprintf_r+0xbe>
    3602:	2300      	movs	r3, #0
    3604:	9305      	str	r3, [sp, #20]
    3606:	4618      	mov	r0, r3
    3608:	240a      	movs	r4, #10
    360a:	460f      	mov	r7, r1
    360c:	3101      	adds	r1, #1
    360e:	783a      	ldrb	r2, [r7, #0]
    3610:	3a30      	subs	r2, #48	; 0x30
    3612:	2a09      	cmp	r2, #9
    3614:	d903      	bls.n	361e <_svfiprintf_r+0x192>
    3616:	2b00      	cmp	r3, #0
    3618:	d0ca      	beq.n	35b0 <_svfiprintf_r+0x124>
    361a:	9005      	str	r0, [sp, #20]
    361c:	e7c8      	b.n	35b0 <_svfiprintf_r+0x124>
    361e:	fb04 2000 	mla	r0, r4, r0, r2
    3622:	2301      	movs	r3, #1
    3624:	e7f1      	b.n	360a <_svfiprintf_r+0x17e>
    3626:	ab03      	add	r3, sp, #12
    3628:	9300      	str	r3, [sp, #0]
    362a:	462a      	mov	r2, r5
    362c:	4b10      	ldr	r3, [pc, #64]	; (3670 <_svfiprintf_r+0x1e4>)
    362e:	a904      	add	r1, sp, #16
    3630:	4640      	mov	r0, r8
    3632:	f3af 8000 	nop.w
    3636:	f1b0 3fff 	cmp.w	r0, #4294967295
    363a:	4681      	mov	r9, r0
    363c:	d1d9      	bne.n	35f2 <_svfiprintf_r+0x166>
    363e:	89ab      	ldrh	r3, [r5, #12]
    3640:	065b      	lsls	r3, r3, #25
    3642:	f53f af38 	bmi.w	34b6 <_svfiprintf_r+0x2a>
    3646:	9809      	ldr	r0, [sp, #36]	; 0x24
    3648:	b01d      	add	sp, #116	; 0x74
    364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    364e:	ab03      	add	r3, sp, #12
    3650:	9300      	str	r3, [sp, #0]
    3652:	462a      	mov	r2, r5
    3654:	4b06      	ldr	r3, [pc, #24]	; (3670 <_svfiprintf_r+0x1e4>)
    3656:	a904      	add	r1, sp, #16
    3658:	4640      	mov	r0, r8
    365a:	f000 f881 	bl	3760 <_printf_i>
    365e:	e7ea      	b.n	3636 <_svfiprintf_r+0x1aa>
    3660:	00004c90 	.word	0x00004c90
    3664:	00004c96 	.word	0x00004c96
    3668:	00004c9a 	.word	0x00004c9a
    366c:	00000000 	.word	0x00000000
    3670:	000033d7 	.word	0x000033d7

00003674 <_printf_common>:
    3674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3678:	4691      	mov	r9, r2
    367a:	461f      	mov	r7, r3
    367c:	688a      	ldr	r2, [r1, #8]
    367e:	690b      	ldr	r3, [r1, #16]
    3680:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3684:	4293      	cmp	r3, r2
    3686:	bfb8      	it	lt
    3688:	4613      	movlt	r3, r2
    368a:	f8c9 3000 	str.w	r3, [r9]
    368e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3692:	4606      	mov	r6, r0
    3694:	460c      	mov	r4, r1
    3696:	b112      	cbz	r2, 369e <_printf_common+0x2a>
    3698:	3301      	adds	r3, #1
    369a:	f8c9 3000 	str.w	r3, [r9]
    369e:	6823      	ldr	r3, [r4, #0]
    36a0:	0699      	lsls	r1, r3, #26
    36a2:	bf42      	ittt	mi
    36a4:	f8d9 3000 	ldrmi.w	r3, [r9]
    36a8:	3302      	addmi	r3, #2
    36aa:	f8c9 3000 	strmi.w	r3, [r9]
    36ae:	6825      	ldr	r5, [r4, #0]
    36b0:	f015 0506 	ands.w	r5, r5, #6
    36b4:	d107      	bne.n	36c6 <_printf_common+0x52>
    36b6:	f104 0a19 	add.w	sl, r4, #25
    36ba:	68e3      	ldr	r3, [r4, #12]
    36bc:	f8d9 2000 	ldr.w	r2, [r9]
    36c0:	1a9b      	subs	r3, r3, r2
    36c2:	429d      	cmp	r5, r3
    36c4:	db29      	blt.n	371a <_printf_common+0xa6>
    36c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    36ca:	6822      	ldr	r2, [r4, #0]
    36cc:	3300      	adds	r3, #0
    36ce:	bf18      	it	ne
    36d0:	2301      	movne	r3, #1
    36d2:	0692      	lsls	r2, r2, #26
    36d4:	d42e      	bmi.n	3734 <_printf_common+0xc0>
    36d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    36da:	4639      	mov	r1, r7
    36dc:	4630      	mov	r0, r6
    36de:	47c0      	blx	r8
    36e0:	3001      	adds	r0, #1
    36e2:	d021      	beq.n	3728 <_printf_common+0xb4>
    36e4:	6823      	ldr	r3, [r4, #0]
    36e6:	68e5      	ldr	r5, [r4, #12]
    36e8:	f8d9 2000 	ldr.w	r2, [r9]
    36ec:	f003 0306 	and.w	r3, r3, #6
    36f0:	2b04      	cmp	r3, #4
    36f2:	bf08      	it	eq
    36f4:	1aad      	subeq	r5, r5, r2
    36f6:	68a3      	ldr	r3, [r4, #8]
    36f8:	6922      	ldr	r2, [r4, #16]
    36fa:	bf0c      	ite	eq
    36fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3700:	2500      	movne	r5, #0
    3702:	4293      	cmp	r3, r2
    3704:	bfc4      	itt	gt
    3706:	1a9b      	subgt	r3, r3, r2
    3708:	18ed      	addgt	r5, r5, r3
    370a:	f04f 0900 	mov.w	r9, #0
    370e:	341a      	adds	r4, #26
    3710:	454d      	cmp	r5, r9
    3712:	d11b      	bne.n	374c <_printf_common+0xd8>
    3714:	2000      	movs	r0, #0
    3716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    371a:	2301      	movs	r3, #1
    371c:	4652      	mov	r2, sl
    371e:	4639      	mov	r1, r7
    3720:	4630      	mov	r0, r6
    3722:	47c0      	blx	r8
    3724:	3001      	adds	r0, #1
    3726:	d103      	bne.n	3730 <_printf_common+0xbc>
    3728:	f04f 30ff 	mov.w	r0, #4294967295
    372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3730:	3501      	adds	r5, #1
    3732:	e7c2      	b.n	36ba <_printf_common+0x46>
    3734:	18e1      	adds	r1, r4, r3
    3736:	1c5a      	adds	r2, r3, #1
    3738:	2030      	movs	r0, #48	; 0x30
    373a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    373e:	4422      	add	r2, r4
    3740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3748:	3302      	adds	r3, #2
    374a:	e7c4      	b.n	36d6 <_printf_common+0x62>
    374c:	2301      	movs	r3, #1
    374e:	4622      	mov	r2, r4
    3750:	4639      	mov	r1, r7
    3752:	4630      	mov	r0, r6
    3754:	47c0      	blx	r8
    3756:	3001      	adds	r0, #1
    3758:	d0e6      	beq.n	3728 <_printf_common+0xb4>
    375a:	f109 0901 	add.w	r9, r9, #1
    375e:	e7d7      	b.n	3710 <_printf_common+0x9c>

00003760 <_printf_i>:
    3760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3764:	4617      	mov	r7, r2
    3766:	7e0a      	ldrb	r2, [r1, #24]
    3768:	b085      	sub	sp, #20
    376a:	2a6e      	cmp	r2, #110	; 0x6e
    376c:	4698      	mov	r8, r3
    376e:	4606      	mov	r6, r0
    3770:	460c      	mov	r4, r1
    3772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3774:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    3778:	f000 80bc 	beq.w	38f4 <_printf_i+0x194>
    377c:	d81a      	bhi.n	37b4 <_printf_i+0x54>
    377e:	2a63      	cmp	r2, #99	; 0x63
    3780:	d02e      	beq.n	37e0 <_printf_i+0x80>
    3782:	d80a      	bhi.n	379a <_printf_i+0x3a>
    3784:	2a00      	cmp	r2, #0
    3786:	f000 80c8 	beq.w	391a <_printf_i+0x1ba>
    378a:	2a58      	cmp	r2, #88	; 0x58
    378c:	f000 808a 	beq.w	38a4 <_printf_i+0x144>
    3790:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3794:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    3798:	e02a      	b.n	37f0 <_printf_i+0x90>
    379a:	2a64      	cmp	r2, #100	; 0x64
    379c:	d001      	beq.n	37a2 <_printf_i+0x42>
    379e:	2a69      	cmp	r2, #105	; 0x69
    37a0:	d1f6      	bne.n	3790 <_printf_i+0x30>
    37a2:	6821      	ldr	r1, [r4, #0]
    37a4:	681a      	ldr	r2, [r3, #0]
    37a6:	f011 0f80 	tst.w	r1, #128	; 0x80
    37aa:	d023      	beq.n	37f4 <_printf_i+0x94>
    37ac:	1d11      	adds	r1, r2, #4
    37ae:	6019      	str	r1, [r3, #0]
    37b0:	6813      	ldr	r3, [r2, #0]
    37b2:	e027      	b.n	3804 <_printf_i+0xa4>
    37b4:	2a73      	cmp	r2, #115	; 0x73
    37b6:	f000 80b4 	beq.w	3922 <_printf_i+0x1c2>
    37ba:	d808      	bhi.n	37ce <_printf_i+0x6e>
    37bc:	2a6f      	cmp	r2, #111	; 0x6f
    37be:	d02a      	beq.n	3816 <_printf_i+0xb6>
    37c0:	2a70      	cmp	r2, #112	; 0x70
    37c2:	d1e5      	bne.n	3790 <_printf_i+0x30>
    37c4:	680a      	ldr	r2, [r1, #0]
    37c6:	f042 0220 	orr.w	r2, r2, #32
    37ca:	600a      	str	r2, [r1, #0]
    37cc:	e003      	b.n	37d6 <_printf_i+0x76>
    37ce:	2a75      	cmp	r2, #117	; 0x75
    37d0:	d021      	beq.n	3816 <_printf_i+0xb6>
    37d2:	2a78      	cmp	r2, #120	; 0x78
    37d4:	d1dc      	bne.n	3790 <_printf_i+0x30>
    37d6:	2278      	movs	r2, #120	; 0x78
    37d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    37dc:	496e      	ldr	r1, [pc, #440]	; (3998 <_printf_i+0x238>)
    37de:	e064      	b.n	38aa <_printf_i+0x14a>
    37e0:	681a      	ldr	r2, [r3, #0]
    37e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    37e6:	1d11      	adds	r1, r2, #4
    37e8:	6019      	str	r1, [r3, #0]
    37ea:	6813      	ldr	r3, [r2, #0]
    37ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    37f0:	2301      	movs	r3, #1
    37f2:	e0a3      	b.n	393c <_printf_i+0x1dc>
    37f4:	f011 0f40 	tst.w	r1, #64	; 0x40
    37f8:	f102 0104 	add.w	r1, r2, #4
    37fc:	6019      	str	r1, [r3, #0]
    37fe:	d0d7      	beq.n	37b0 <_printf_i+0x50>
    3800:	f9b2 3000 	ldrsh.w	r3, [r2]
    3804:	2b00      	cmp	r3, #0
    3806:	da03      	bge.n	3810 <_printf_i+0xb0>
    3808:	222d      	movs	r2, #45	; 0x2d
    380a:	425b      	negs	r3, r3
    380c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3810:	4962      	ldr	r1, [pc, #392]	; (399c <_printf_i+0x23c>)
    3812:	220a      	movs	r2, #10
    3814:	e017      	b.n	3846 <_printf_i+0xe6>
    3816:	6820      	ldr	r0, [r4, #0]
    3818:	6819      	ldr	r1, [r3, #0]
    381a:	f010 0f80 	tst.w	r0, #128	; 0x80
    381e:	d003      	beq.n	3828 <_printf_i+0xc8>
    3820:	1d08      	adds	r0, r1, #4
    3822:	6018      	str	r0, [r3, #0]
    3824:	680b      	ldr	r3, [r1, #0]
    3826:	e006      	b.n	3836 <_printf_i+0xd6>
    3828:	f010 0f40 	tst.w	r0, #64	; 0x40
    382c:	f101 0004 	add.w	r0, r1, #4
    3830:	6018      	str	r0, [r3, #0]
    3832:	d0f7      	beq.n	3824 <_printf_i+0xc4>
    3834:	880b      	ldrh	r3, [r1, #0]
    3836:	4959      	ldr	r1, [pc, #356]	; (399c <_printf_i+0x23c>)
    3838:	2a6f      	cmp	r2, #111	; 0x6f
    383a:	bf14      	ite	ne
    383c:	220a      	movne	r2, #10
    383e:	2208      	moveq	r2, #8
    3840:	2000      	movs	r0, #0
    3842:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3846:	6865      	ldr	r5, [r4, #4]
    3848:	60a5      	str	r5, [r4, #8]
    384a:	2d00      	cmp	r5, #0
    384c:	f2c0 809c 	blt.w	3988 <_printf_i+0x228>
    3850:	6820      	ldr	r0, [r4, #0]
    3852:	f020 0004 	bic.w	r0, r0, #4
    3856:	6020      	str	r0, [r4, #0]
    3858:	2b00      	cmp	r3, #0
    385a:	d13f      	bne.n	38dc <_printf_i+0x17c>
    385c:	2d00      	cmp	r5, #0
    385e:	f040 8095 	bne.w	398c <_printf_i+0x22c>
    3862:	4675      	mov	r5, lr
    3864:	2a08      	cmp	r2, #8
    3866:	d10b      	bne.n	3880 <_printf_i+0x120>
    3868:	6823      	ldr	r3, [r4, #0]
    386a:	07da      	lsls	r2, r3, #31
    386c:	d508      	bpl.n	3880 <_printf_i+0x120>
    386e:	6923      	ldr	r3, [r4, #16]
    3870:	6862      	ldr	r2, [r4, #4]
    3872:	429a      	cmp	r2, r3
    3874:	bfde      	ittt	le
    3876:	2330      	movle	r3, #48	; 0x30
    3878:	f805 3c01 	strble.w	r3, [r5, #-1]
    387c:	f105 35ff 	addle.w	r5, r5, #4294967295
    3880:	ebae 0305 	sub.w	r3, lr, r5
    3884:	6123      	str	r3, [r4, #16]
    3886:	f8cd 8000 	str.w	r8, [sp]
    388a:	463b      	mov	r3, r7
    388c:	aa03      	add	r2, sp, #12
    388e:	4621      	mov	r1, r4
    3890:	4630      	mov	r0, r6
    3892:	f7ff feef 	bl	3674 <_printf_common>
    3896:	3001      	adds	r0, #1
    3898:	d155      	bne.n	3946 <_printf_i+0x1e6>
    389a:	f04f 30ff 	mov.w	r0, #4294967295
    389e:	b005      	add	sp, #20
    38a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    38a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    38a8:	493c      	ldr	r1, [pc, #240]	; (399c <_printf_i+0x23c>)
    38aa:	6822      	ldr	r2, [r4, #0]
    38ac:	6818      	ldr	r0, [r3, #0]
    38ae:	f012 0f80 	tst.w	r2, #128	; 0x80
    38b2:	f100 0504 	add.w	r5, r0, #4
    38b6:	601d      	str	r5, [r3, #0]
    38b8:	d001      	beq.n	38be <_printf_i+0x15e>
    38ba:	6803      	ldr	r3, [r0, #0]
    38bc:	e002      	b.n	38c4 <_printf_i+0x164>
    38be:	0655      	lsls	r5, r2, #25
    38c0:	d5fb      	bpl.n	38ba <_printf_i+0x15a>
    38c2:	8803      	ldrh	r3, [r0, #0]
    38c4:	07d0      	lsls	r0, r2, #31
    38c6:	bf44      	itt	mi
    38c8:	f042 0220 	orrmi.w	r2, r2, #32
    38cc:	6022      	strmi	r2, [r4, #0]
    38ce:	b91b      	cbnz	r3, 38d8 <_printf_i+0x178>
    38d0:	6822      	ldr	r2, [r4, #0]
    38d2:	f022 0220 	bic.w	r2, r2, #32
    38d6:	6022      	str	r2, [r4, #0]
    38d8:	2210      	movs	r2, #16
    38da:	e7b1      	b.n	3840 <_printf_i+0xe0>
    38dc:	4675      	mov	r5, lr
    38de:	fbb3 f0f2 	udiv	r0, r3, r2
    38e2:	fb02 3310 	mls	r3, r2, r0, r3
    38e6:	5ccb      	ldrb	r3, [r1, r3]
    38e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    38ec:	4603      	mov	r3, r0
    38ee:	2800      	cmp	r0, #0
    38f0:	d1f5      	bne.n	38de <_printf_i+0x17e>
    38f2:	e7b7      	b.n	3864 <_printf_i+0x104>
    38f4:	6808      	ldr	r0, [r1, #0]
    38f6:	681a      	ldr	r2, [r3, #0]
    38f8:	6949      	ldr	r1, [r1, #20]
    38fa:	f010 0f80 	tst.w	r0, #128	; 0x80
    38fe:	d004      	beq.n	390a <_printf_i+0x1aa>
    3900:	1d10      	adds	r0, r2, #4
    3902:	6018      	str	r0, [r3, #0]
    3904:	6813      	ldr	r3, [r2, #0]
    3906:	6019      	str	r1, [r3, #0]
    3908:	e007      	b.n	391a <_printf_i+0x1ba>
    390a:	f010 0f40 	tst.w	r0, #64	; 0x40
    390e:	f102 0004 	add.w	r0, r2, #4
    3912:	6018      	str	r0, [r3, #0]
    3914:	6813      	ldr	r3, [r2, #0]
    3916:	d0f6      	beq.n	3906 <_printf_i+0x1a6>
    3918:	8019      	strh	r1, [r3, #0]
    391a:	2300      	movs	r3, #0
    391c:	6123      	str	r3, [r4, #16]
    391e:	4675      	mov	r5, lr
    3920:	e7b1      	b.n	3886 <_printf_i+0x126>
    3922:	681a      	ldr	r2, [r3, #0]
    3924:	1d11      	adds	r1, r2, #4
    3926:	6019      	str	r1, [r3, #0]
    3928:	6815      	ldr	r5, [r2, #0]
    392a:	6862      	ldr	r2, [r4, #4]
    392c:	2100      	movs	r1, #0
    392e:	4628      	mov	r0, r5
    3930:	f000 f836 	bl	39a0 <memchr>
    3934:	b108      	cbz	r0, 393a <_printf_i+0x1da>
    3936:	1b40      	subs	r0, r0, r5
    3938:	6060      	str	r0, [r4, #4]
    393a:	6863      	ldr	r3, [r4, #4]
    393c:	6123      	str	r3, [r4, #16]
    393e:	2300      	movs	r3, #0
    3940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3944:	e79f      	b.n	3886 <_printf_i+0x126>
    3946:	6923      	ldr	r3, [r4, #16]
    3948:	462a      	mov	r2, r5
    394a:	4639      	mov	r1, r7
    394c:	4630      	mov	r0, r6
    394e:	47c0      	blx	r8
    3950:	3001      	adds	r0, #1
    3952:	d0a2      	beq.n	389a <_printf_i+0x13a>
    3954:	6823      	ldr	r3, [r4, #0]
    3956:	079b      	lsls	r3, r3, #30
    3958:	d507      	bpl.n	396a <_printf_i+0x20a>
    395a:	2500      	movs	r5, #0
    395c:	f104 0919 	add.w	r9, r4, #25
    3960:	68e3      	ldr	r3, [r4, #12]
    3962:	9a03      	ldr	r2, [sp, #12]
    3964:	1a9b      	subs	r3, r3, r2
    3966:	429d      	cmp	r5, r3
    3968:	db05      	blt.n	3976 <_printf_i+0x216>
    396a:	68e0      	ldr	r0, [r4, #12]
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	4298      	cmp	r0, r3
    3970:	bfb8      	it	lt
    3972:	4618      	movlt	r0, r3
    3974:	e793      	b.n	389e <_printf_i+0x13e>
    3976:	2301      	movs	r3, #1
    3978:	464a      	mov	r2, r9
    397a:	4639      	mov	r1, r7
    397c:	4630      	mov	r0, r6
    397e:	47c0      	blx	r8
    3980:	3001      	adds	r0, #1
    3982:	d08a      	beq.n	389a <_printf_i+0x13a>
    3984:	3501      	adds	r5, #1
    3986:	e7eb      	b.n	3960 <_printf_i+0x200>
    3988:	2b00      	cmp	r3, #0
    398a:	d1a7      	bne.n	38dc <_printf_i+0x17c>
    398c:	780b      	ldrb	r3, [r1, #0]
    398e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3992:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3996:	e765      	b.n	3864 <_printf_i+0x104>
    3998:	00004cb2 	.word	0x00004cb2
    399c:	00004ca1 	.word	0x00004ca1

000039a0 <memchr>:
    39a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    39a4:	2a10      	cmp	r2, #16
    39a6:	db2b      	blt.n	3a00 <memchr+0x60>
    39a8:	f010 0f07 	tst.w	r0, #7
    39ac:	d008      	beq.n	39c0 <memchr+0x20>
    39ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    39b2:	3a01      	subs	r2, #1
    39b4:	428b      	cmp	r3, r1
    39b6:	d02d      	beq.n	3a14 <memchr+0x74>
    39b8:	f010 0f07 	tst.w	r0, #7
    39bc:	b342      	cbz	r2, 3a10 <memchr+0x70>
    39be:	d1f6      	bne.n	39ae <memchr+0xe>
    39c0:	b4f0      	push	{r4, r5, r6, r7}
    39c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    39c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    39ca:	f022 0407 	bic.w	r4, r2, #7
    39ce:	f07f 0700 	mvns.w	r7, #0
    39d2:	2300      	movs	r3, #0
    39d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    39d8:	3c08      	subs	r4, #8
    39da:	ea85 0501 	eor.w	r5, r5, r1
    39de:	ea86 0601 	eor.w	r6, r6, r1
    39e2:	fa85 f547 	uadd8	r5, r5, r7
    39e6:	faa3 f587 	sel	r5, r3, r7
    39ea:	fa86 f647 	uadd8	r6, r6, r7
    39ee:	faa5 f687 	sel	r6, r5, r7
    39f2:	b98e      	cbnz	r6, 3a18 <memchr+0x78>
    39f4:	d1ee      	bne.n	39d4 <memchr+0x34>
    39f6:	bcf0      	pop	{r4, r5, r6, r7}
    39f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    39fc:	f002 0207 	and.w	r2, r2, #7
    3a00:	b132      	cbz	r2, 3a10 <memchr+0x70>
    3a02:	f810 3b01 	ldrb.w	r3, [r0], #1
    3a06:	3a01      	subs	r2, #1
    3a08:	ea83 0301 	eor.w	r3, r3, r1
    3a0c:	b113      	cbz	r3, 3a14 <memchr+0x74>
    3a0e:	d1f8      	bne.n	3a02 <memchr+0x62>
    3a10:	2000      	movs	r0, #0
    3a12:	4770      	bx	lr
    3a14:	3801      	subs	r0, #1
    3a16:	4770      	bx	lr
    3a18:	2d00      	cmp	r5, #0
    3a1a:	bf06      	itte	eq
    3a1c:	4635      	moveq	r5, r6
    3a1e:	3803      	subeq	r0, #3
    3a20:	3807      	subne	r0, #7
    3a22:	f015 0f01 	tst.w	r5, #1
    3a26:	d107      	bne.n	3a38 <memchr+0x98>
    3a28:	3001      	adds	r0, #1
    3a2a:	f415 7f80 	tst.w	r5, #256	; 0x100
    3a2e:	bf02      	ittt	eq
    3a30:	3001      	addeq	r0, #1
    3a32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3a36:	3001      	addeq	r0, #1
    3a38:	bcf0      	pop	{r4, r5, r6, r7}
    3a3a:	3801      	subs	r0, #1
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop

00003a40 <_realloc_r>:
    3a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a42:	4607      	mov	r7, r0
    3a44:	4614      	mov	r4, r2
    3a46:	460e      	mov	r6, r1
    3a48:	b921      	cbnz	r1, 3a54 <_realloc_r+0x14>
    3a4a:	4611      	mov	r1, r2
    3a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3a50:	f7ff bbf6 	b.w	3240 <_malloc_r>
    3a54:	b922      	cbnz	r2, 3a60 <_realloc_r+0x20>
    3a56:	f7ff fba5 	bl	31a4 <_free_r>
    3a5a:	4625      	mov	r5, r4
    3a5c:	4628      	mov	r0, r5
    3a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a60:	f000 f814 	bl	3a8c <_malloc_usable_size_r>
    3a64:	4284      	cmp	r4, r0
    3a66:	d90f      	bls.n	3a88 <_realloc_r+0x48>
    3a68:	4621      	mov	r1, r4
    3a6a:	4638      	mov	r0, r7
    3a6c:	f7ff fbe8 	bl	3240 <_malloc_r>
    3a70:	4605      	mov	r5, r0
    3a72:	2800      	cmp	r0, #0
    3a74:	d0f2      	beq.n	3a5c <_realloc_r+0x1c>
    3a76:	4631      	mov	r1, r6
    3a78:	4622      	mov	r2, r4
    3a7a:	f7ff fb66 	bl	314a <memcpy>
    3a7e:	4631      	mov	r1, r6
    3a80:	4638      	mov	r0, r7
    3a82:	f7ff fb8f 	bl	31a4 <_free_r>
    3a86:	e7e9      	b.n	3a5c <_realloc_r+0x1c>
    3a88:	4635      	mov	r5, r6
    3a8a:	e7e7      	b.n	3a5c <_realloc_r+0x1c>

00003a8c <_malloc_usable_size_r>:
    3a8c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    3a90:	2800      	cmp	r0, #0
    3a92:	f1a0 0004 	sub.w	r0, r0, #4
    3a96:	bfbc      	itt	lt
    3a98:	580b      	ldrlt	r3, [r1, r0]
    3a9a:	18c0      	addlt	r0, r0, r3
    3a9c:	4770      	bx	lr
	...

00003aa0 <ModemCmdData>:
    3aa0:	0000 0000 40ac 0000 0203 0000 09d5 0000     .....@..........
    3ab0:	0009 0000 0001 0000 40b0 0000 0f08 0000     .........@......
    3ac0:	09fd 0000 001b 0000 0002 0000 40bc 0000     .............@..
    3ad0:	030c 0000 02d1 0000 0013 0000 0003 0000     ................
    3ae0:	40cc 0000 0c08 0000 02d1 0000 0018 0000     .@..............
    3af0:	0004 0000 40d8 0000 0805 0000 02d1 0000     .....@..........
    3b00:	0011 0000 0005 0000 40e4 0000 0b0a 0000     .........@......
    3b10:	02d1 0000 0019 0000 0006 0000 40f0 0000     .............@..
    3b20:	150a 0000 02d1 0000 0023 0000 0007 0000     ........#.......
    3b30:	40fc 0000 0205 0000 02d1 0000 000b 0000     .@..............
    3b40:	0008 0000 4104 0000 0c27 0000 0ae9 0000     .....A..'.......
    3b50:	0037 0000 0009 0000 412c 0000 0212 0000     7.......,A......
    3b60:	0a25 0000 0018 0000 000a 0000 4140 0000     %...........@A..
    3b70:	0212 0000 0a25 0000 0018 0000 000b 0000     ....%...........
    3b80:	4154 0000 0212 0000 0a25 0000 0018 0000     TA......%.......
    3b90:	000c 0000 4168 0000 0212 0000 0a25 0000     ....hA......%...
    3ba0:	0018 0000 000d 0000 417c 0000 0212 0000     ........|A......
    3bb0:	0a25 0000 0018 0000 000e 0000 4190 0000     %............A..
    3bc0:	0212 0000 0a25 0000 0018 0000 000f 0000     ....%...........
    3bd0:	41a4 0000 0212 0000 0a25 0000 0018 0000     .A......%.......
    3be0:	0010 0000 41b8 0000 0212 0000 0a25 0000     .....A......%...
    3bf0:	0018 0000 0011 0000 41cc 0000 0212 0000     .........A......
    3c00:	0a25 0000 0018 0000 0012 0000 41e0 0000     %............A..
    3c10:	0213 0000 0a25 0000 0019 0000 0013 0000     ....%...........
    3c20:	41f4 0000 021f 0000 0a65 0000 0025 0000     .A......e...%...
    3c30:	0014 0000 4214 0000 0223 0000 0a91 0000     .....B..#.......
    3c40:	0029 0000 0015 0000 4238 0000 021a 0000     ).......8B......
    3c50:	0abd 0000 0020 0000 0016 0000 0004 2000     .... .......... 
    3c60:	0711 0000 0b25 0000 001c 0000 0017 0000     ....%...........
    3c70:	0458 2000 f43a 0000 0bb1 0000 0032 0000     X.. :.......2...
    3c80:	0018 0000 4254 0000 0210 0000 0bb1 0000     ....TB..........
    3c90:	0016 0000 0019 0000 4394 0000 0000 0000     .........C......
    3ca0:	02d1 0000 0000 0000 0000 0000 0000 0000     ................
	...
    3f50:	0a0d 000a 7845 6570 7463 6465 6d20 646f     ....Expected mod
    3f60:	6d65 7220 7365 6f70 736e 2065 7369 6e20     em response is n
    3f70:	746f 7220 6365 6965 6576 0064 6f4e 5220     ot received.No R
    3f80:	7365 6f70 736e 2065 7266 6d6f 5720 6265     esponse from Web
    3f90:	5320 7665 7265 2e2e 2e2e 6f50 7473 6e69      Sever....Postin
    3fa0:	2067 6164 6174 7420 206f 6573 6576 2072     g data to sever 
    3fb0:	7369 6620 6961 656c 0064 0000 6553 7373     is failed...Sess
    3fc0:	6f69 206e 4449 2d20 3120 0000 6553 7373     ion ID - 1..Sess
    3fd0:	6f69 206e 4449 2d20 3220 0000 6553 7373     ion ID - 2..Sess
    3fe0:	6f69 206e 4449 2d20 3320 0000 6553 7373     ion ID - 3..Sess
    3ff0:	6f69 206e 4449 2d20 3420 0000 6553 7373     ion ID - 4..Sess
    4000:	6f69 206e 4449 2d20 3520 0000 6553 7373     ion ID - 5..Sess
    4010:	6f69 206e 4449 2d20 3620 0000 6553 7373     ion ID - 6..Sess
    4020:	6f69 206e 4449 2d20 3720 0000 6553 7373     ion ID - 7..Sess
    4030:	6f69 206e 4449 2d20 3820 0000 6553 7373     ion ID - 8..Sess
    4040:	6f69 206e 4449 7620 6c61 6575 6520 6378     ion ID value exc
    4050:	6565 7364 7420 6568 6d20 7861 7620 6c61     eeds the max val
    4060:	6575 0000 484b 5454 2050 4548 4441 5245     ue..KHTTP HEADER
    4070:	5320 7274 6e69 2067 7369 0020 3f22 3d69      String is ."?i=
    4080:	3533 3939 3839 3730 3230 3832 3637 2634     359998070228764&
    4090:	3d64 3141 3559 5832 3241 3359 2636 3d62     d=A1Y52XA2Y36&b=
    40a0:	3633 7326 323d 0d22 0000 0000 5441 000d     36&s=2".....AT..
    40b0:	5441 432b 5347 0d4e 0000 0000 5441 572b     AT+CGSN.....AT+W
    40c0:	4143 5252 4549 0d52 0000 0000 5441 492b     CARRIER.....AT+I
    40d0:	5250 0d3f 0000 0000 5441 432b 4950 3f4e     PR?.....AT+CPIN?
    40e0:	000d 0000 5441 432b 5247 4745 0d3f 0000     ....AT+CGREG?...
    40f0:	5441 4b2b 5347 3d4e 0d33 0000 5441 3145     AT+KGSN=3...ATE1
    4100:	000d 0000 5441 4b2b 5448 5054 4643 3d47     ....AT+KHTTPCFG=
    4110:	2c33 6922 676e 7365 3174 722e 7365 6f70     3,"ingest1.respo
    4120:	736e 2e65 6c63 756f 2264 000d 5441 4b2b     nse.cloud"..AT+K
    4130:	5448 5054 4c43 534f 3d45 2c31 0d30 0000     HTTPCLOSE=1,0...
    4140:	5441 4b2b 5448 5054 4c43 534f 3d45 2c32     AT+KHTTPCLOSE=2,
    4150:	0d30 0000 5441 4b2b 5448 5054 4c43 534f     0...AT+KHTTPCLOS
    4160:	3d45 2c33 0d30 0000 5441 4b2b 5448 5054     E=3,0...AT+KHTTP
    4170:	4c43 534f 3d45 2c34 0d30 0000 5441 4b2b     CLOSE=4,0...AT+K
    4180:	5448 5054 4c43 534f 3d45 2c35 0d30 0000     HTTPCLOSE=5,0...
    4190:	5441 4b2b 5448 5054 4c43 534f 3d45 2c36     AT+KHTTPCLOSE=6,
    41a0:	0d30 0000 5441 4b2b 5448 5054 4c43 534f     0...AT+KHTTPCLOS
    41b0:	3d45 2c37 0d30 0000 5441 4b2b 5448 5054     E=7,0...AT+KHTTP
    41c0:	4c43 534f 3d45 2c38 0d30 0000 5441 4b2b     CLOSE=8,0...AT+K
    41d0:	5448 5054 4c43 534f 3d45 2c39 0d30 0000     HTTPCLOSE=9,0...
    41e0:	5441 4b2b 5448 5054 4c43 534f 3d45 3031     AT+KHTTPCLOSE=10
    41f0:	302c 000d 5441 4b2b 4150 5454 5245 3d4e     ,0..AT+KPATTERN=
    4200:	2d22 452d 464f 2d2d 6150 7474 7265 2d6e     "--EOF--Pattern-
    4210:	222d 000d 5441 4b2b 4e43 4358 4746 333d     -"..AT+KCNXCFG=3
    4220:	202c 4722 5250 2253 222c 5a56 4957 544e     , "GPRS","VZWINT
    4230:	5245 454e 2254 000d 5441 4b2b 4e43 5458     ERNET"..AT+KCNXT
    4240:	4d49 5245 333d 362c 2c30 2c32 3037 362c     IMER=3,60,2,70,6
    4250:	0d30 0000 2d2d 4f45 2d46 502d 7461 6574     0...--EOF--Patte
    4260:	6e72 2d2d 0000 0000 4553 4352 4d4f 2033     rn--....SERCOM3 
    4270:	6f6e 2074 6e69 7469 6169 696c 657a 0d64     not initialized.
    4280:	000a 0000 4f4d 4544 204d 4144 4154 5520     ....MODEM DATA U
    4290:	5241 2054 5328 5245 4f43 334d 2029 6e69     ART (SERCOM3) in
    42a0:	7469 6169 696c 657a 0d64 000a 6f4d 6564     itialized...Mode
    42b0:	206d 6144 6174 5420 2078 6144 6174 5220     m Data Tx Data R
    42c0:	6765 4520 706d 7974 4320 6c61 426c 6361     eg Empty CallBac
    42d0:	0d6b 000a 6f4d 6564 206d 6144 6174 5420     k...Modem Data T
    42e0:	2078 7962 6574 4320 6d6f 6c70 7465 2065     x byte Complete 
    42f0:	6143 6c6c 6162 6b63 0a0d 0000 4b4f 0000     Callback....OK..
    4300:	6556 6972 6966 6465 7420 6568 5520 5241     Verified the UAR
    4310:	2054 6f43 6d6d 6e75 6369 7461 6f69 206e     T Communication 
    4320:	6977 6874 4d20 646f 6d65 0d2e 000a 0000     with Modem......
    4330:	6f4e 2074 6261 656c 7420 206f 6576 6972     Not able to veri
    4340:	7966 7420 6568 5520 5241 2054 6f43 6d6d     fy the UART Comm
    4350:	6e75 6369 7461 6f69 206e 6977 6874 4d20     unication with M
    4360:	646f 6d65 0d2e 000a 4552 4441 0059 0000     odem....READY...
    4370:	6556 6972 6966 6465 7420 6568 4e20 7465     Verified the Net
    4380:	6f77 6b72 5220 6765 7369 7274 7461 6f69     work Registratio
    4390:	2e6e 0a0d 0000 0000 6f4e 2074 6261 656c     n.......Not able
    43a0:	7420 206f 6576 6972 7966 7420 6568 4e20      to verify the N
    43b0:	7465 6f77 6b72 5220 6765 7369 7274 7461     etwork Registrat
    43c0:	6f69 2e6e 0a0d 0000 6f50 7473 6465 7420     ion.....Posted t
    43d0:	6568 6420 7461 2061 6f74 7320 7265 6576     he data to serve
    43e0:	2e72 2e2e 6157 7469 6e69 2067 6f66 2072     r...Waiting for 
    43f0:	6557 2062 6553 7672 7265 5220 7365 6f70     Web Server Respo
    4400:	736e 0065 6f50 6577 2072 6e4f 5720 6961     nse.Power On Wai
    4410:	2074 6954 656d 2072 7845 6970 6572 0d64     t Timer Expired.
    4420:	000a 0000 6f4d 6564 206d 6f50 6577 2072     ....Modem Power 
    4430:	6e4f 6920 696e 6974 6c61 7a69 7461 6f69     On initializatio
    4440:	206e 6f43 706d 656c 6574 0d64 000a 0000     n Completed.....
    4450:	6f4d 6564 206d 6552 6573 2074 6f43 706d     Modem Reset Comp
    4460:	656c 6574 0064 0000 6f50 6577 4f72 576e     leted...PowerOnW
    4470:	6961 5474 6d69 7265 0000 0000 6f4d 6564     aitTimer....Mode
    4480:	206d 7546 6c6c 2079 704f 7265 7461 6f69     m Fully Operatio
    4490:	616e 2e6c 0a0d 0000 6e49 4120 2054 6168     nal.....In AT ha
    44a0:	646e 656c 0d72 000a 6e49 4320 5347 204e     ndler...In CGSN 
    44b0:	6168 646e 656c 0d72 000a 0000 0a0d 6c43     handler.......Cl
    44c0:	736f 6465 6120 206e 6361 6974 6576 6320     osed an active c
    44d0:	6e6f 656e 7463 6f69 006e 0000 6854 7265     onnection...Ther
    44e0:	2065 7369 6e20 206f 6f63 6e6e 6365 6974     e is no connecti
    44f0:	6e6f 6520 7473 6261 696c 6873 6465 7720     on established w
    4500:	7469 2068 6874 7369 7320 7365 6973 6e6f     ith this session
    4510:	4920 2e44 2e2e 0000 6843 6365 696b 676e      ID.....Checking
    4520:	6620 726f 6120 206e 6361 6974 6576 6320      for an active c
    4530:	6e6f 656e 7463 6f69 206e 6977 6874 6e20     onnection with n
    4540:	7865 2074 6573 7373 6f69 206e 4449 2e2e     ext session ID..
    4550:	0a2e 0000 6e49 4b20 4150 5454 5245 204e     ....In KPATTERN 
    4560:	6168 646e 656c 0072 6e49 4b20 4e43 4358     handler.In KCNXC
    4570:	4746 6820 6e61 6c64 7265 0000 6e49 4b20     FG handler..In K
    4580:	4e43 5458 4d49 5245 6820 6e61 6c64 7265     CNXTIMER handler
    4590:	0000 0000 6e49 4b20 5448 5054 4643 2047     ....In KHTTPCFG 
    45a0:	6168 646e 656c 0072 6e49 4b20 5448 5054     handler.In KHTTP
    45b0:	4820 4145 4544 2052 6168 646e 656c 0072      HEADER handler.
    45c0:	4f43 4e4e 4345 0054 6548 6461 7265 5220     CONNECT.Header R
    45d0:	7365 6f70 736e 2065 6b4f 0000 6548 6461     esponse Ok..Head
    45e0:	7265 5220 7365 6f70 736e 2065 6f4e 2074     er Response Not 
    45f0:	6b4f 0000 6e49 4b20 5448 5054 4720 5445     Ok..In KHTTP GET
    4600:	6820 6e61 6c64 7265 0000 0000 4552 4943      handler....RECI
    4610:	5645 4445 5220 5345 4f50 534e 2045 5246     EVED RESPONSE FR
    4620:	4d4f 5720 4245 5320 5245 4556 0052 0000     OM WEB SERVER...
    4630:	6e49 5420 5245 494d 414e 4554 4820 4145     In TERMINATE HEA
    4640:	4544 2052 6168 646e 656c 0072 7854 7320     DER handler.Tx s
    4650:	7265 6169 206c 6544 7562 2067 6f44 656e     erial Debug Done
    4660:	0a0d 0000 7852 4420 6e6f 0d65 000a 0000     ....Rx Done.....
    4670:	7325 2520 0073 0000 2e2e 682f 6c61 692f     %s %s...../hal/i
    4680:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
    4690:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    46a0:	6c61 615f 5f63 7973 636e 632e 0000 0000     al_ac_sync.c....
    46b0:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    46c0:	6364 735f 6e79 2e63 0063 0000 2e2e 682f     dc_sync.c...../h
    46d0:	6c61 732f 6372 682f 6c61 645f 6361 735f     al/src/hal_dac_s
    46e0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    46f0:	6372 682f 6c61 665f 616c 6873 632e 0000     rc/hal_flash.c..
    4700:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
    4710:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
    4720:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
    4730:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    4740:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...
    4750:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    4760:	752f 6974 736c 725f 6e69 6267 6675 6566     /utils_ringbuffe
    4770:	2e72 0063 2e2e 682f 6c70 612f 2f63 7068     r.c.../hpl/ac/hp
    4780:	5f6c 6361 632e 0000                         l_ac.c..

00004788 <_adcs>:
    4788:	0000 00c0 0002 0083 1900 0000 0000 0000     ................
    4798:	0000 0000 0001 0001 0000 0000 0000 0000     ................
	...
    47b4:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    47c4:	6364 632e 0000 0000 2e2e 682f 6c70 642f     dc.c....../hpl/d
    47d4:	6361 682f 6c70 645f 6361 632e 0000 0000     ac/hpl_dac.c....

000047e4 <_cfgs>:
	...

000048e4 <user_mux_confs>:
	...

00004928 <channel_confs>:
	...

00004968 <interrupt_cfg>:
	...
    49e8:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    49f8:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    4a08:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    4a18:	0000 4300 0400 4300                         ...C...C

00004a20 <_usarts>:
    4a20:	0003 0000 0004 4020 0000 0003 0002 0070     ...... @......p.
    4a30:	f62b 0000 0000 0000 0004 0000 0184 4030     +.............0@
    4a40:	0300 0003 0002 0070 ff2e 0000 0000 0000     ......p.........
    4a50:	0005 0000 0004 4030 0000 0003 0002 0070     ......0@......p.
    4a60:	f62b 0000 0000 0000                         +.......

00004a68 <_i2cms>:
	...

00004a80 <sercomspi_regs>:
	...
    4a94:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    4aa4:	5f6c 6573 6372 6d6f 632e 0000 6000 4101     l_sercom.c...`.A
    4ab4:	8000 4101 0c00 4200 1000 4200 1000 4300     ...A...B...B...C

00004ac4 <_tccs>:
    4ac4:	0000 0000 0300 0000 0000 0000 0000 0000     ................
    4ad4:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    4ae4:	0000 0000 0001 0000 0300 0000 0000 0000     ................
    4af4:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    4b0c:	0002 0000 0300 0000 0000 0000 0000 0000     ................
    4b1c:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    4b2c:	0000 0000 0003 0000 0300 0000 0000 0000     ................
    4b3c:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    4b54:	0004 0000 0300 0000 0000 0000 0000 0000     ................
    4b64:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    4b74:	0000 0000 2e2e 682f 6c70 742f 6363 682f     ....../hpl/tcc/h
    4b84:	6c70 745f 6363 632e 0000 0000 3800 4000     pl_tcc.c.....8.@
    4b94:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    4ba4:	1800 4200 2e2e 682f 6c70 742f 2f63 7068     ...B../hpl/tc/hp
    4bb4:	5f6c 6374 632e 0000 2e2e 682f 6c70 772f     l_tc.c..../hpl/w
    4bc4:	7464 682f 6c70 775f 7464 632e 0000 0000     dt/hpl_wdt.c....
    4bd4:	7553 6363 7365 6673 6c75 796c 4320 6d6f     Successfully Com
    4be4:	6c70 7465 6465 7420 6568 6320 6e6f 656e     pleted the conne
    4bf4:	7463 6f69 206e 6e69 7469 6169 696c 617a     ction initializa
    4c04:	6974 6e6f 202e 5448 5054 4320 6e6f 656e     tion. HTTP Conne
    4c14:	7463 6f69 206e 7369 6520 7473 6261 696c     ction is establi
    4c24:	6873 6465 2e2e 0a0d 000a 0000               shed........

00004c30 <__sf_fake_stderr>:
	...

00004c50 <__sf_fake_stdin>:
	...

00004c70 <__sf_fake_stdout>:
	...
    4c90:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    4ca0:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    4cb0:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    4cc0:	6665 0000                                   ef..

00004cc4 <_init>:
    4cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc6:	bf00      	nop
    4cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cca:	bc08      	pop	{r3}
    4ccc:	469e      	mov	lr, r3
    4cce:	4770      	bx	lr

00004cd0 <__init_array_start>:
    4cd0:	00000289 	.word	0x00000289

00004cd4 <_fini>:
    4cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cd6:	bf00      	nop
    4cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cda:	bc08      	pop	{r3}
    4cdc:	469e      	mov	lr, r3
    4cde:	4770      	bx	lr

00004ce0 <__fini_array_start>:
    4ce0:	00000265 	.word	0x00000265
